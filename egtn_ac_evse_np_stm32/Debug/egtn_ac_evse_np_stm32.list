
egtn_ac_evse_np_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be68  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002608  0800bf28  0800bf28  0001bf28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e530  0800e530  000200dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800e530  0800e530  000200dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e530  0800e530  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e530  0800e530  0001e530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e534  0800e534  0001e534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  0800e538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c88  200000e0  0800e614  000200e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000d68  0800e614  00020d68  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003c073  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000780d  00000000  00000000  0005c177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001ae9d  00000000  00000000  00063984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001870  00000000  00000000  0007e828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003a30  00000000  00000000  00080098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017de0  00000000  00000000  00083ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00031b5f  00000000  00000000  0009b8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00070f2b  00000000  00000000  000cd407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013e332  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005394  00000000  00000000  0013e388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000e0 	.word	0x200000e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800bf10 	.word	0x0800bf10

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000e4 	.word	0x200000e4
 8000104:	0800bf10 	.word	0x0800bf10

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_cdrcmple>:
 8000234:	4684      	mov	ip, r0
 8000236:	1c10      	adds	r0, r2, #0
 8000238:	4662      	mov	r2, ip
 800023a:	468c      	mov	ip, r1
 800023c:	1c19      	adds	r1, r3, #0
 800023e:	4663      	mov	r3, ip
 8000240:	e000      	b.n	8000244 <__aeabi_cdcmpeq>
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_cdcmpeq>:
 8000244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000246:	f001 fd59 	bl	8001cfc <__ledf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	d401      	bmi.n	8000252 <__aeabi_cdcmpeq+0xe>
 800024e:	2100      	movs	r1, #0
 8000250:	42c8      	cmn	r0, r1
 8000252:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000254 <__aeabi_dcmpeq>:
 8000254:	b510      	push	{r4, lr}
 8000256:	f001 fca3 	bl	8001ba0 <__eqdf2>
 800025a:	4240      	negs	r0, r0
 800025c:	3001      	adds	r0, #1
 800025e:	bd10      	pop	{r4, pc}

08000260 <__aeabi_dcmplt>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 fd4b 	bl	8001cfc <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	db01      	blt.n	800026e <__aeabi_dcmplt+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmple>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 fd41 	bl	8001cfc <__ledf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dd01      	ble.n	8000282 <__aeabi_dcmple+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpgt>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 fcc5 	bl	8001c18 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	dc01      	bgt.n	8000296 <__aeabi_dcmpgt+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_dcmpge>:
 800029c:	b510      	push	{r4, lr}
 800029e:	f001 fcbb 	bl	8001c18 <__gedf2>
 80002a2:	2800      	cmp	r0, #0
 80002a4:	da01      	bge.n	80002aa <__aeabi_dcmpge+0xe>
 80002a6:	2000      	movs	r0, #0
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	2001      	movs	r0, #1
 80002ac:	bd10      	pop	{r4, pc}
 80002ae:	46c0      	nop			; (mov r8, r8)

080002b0 <__aeabi_f2uiz>:
 80002b0:	219e      	movs	r1, #158	; 0x9e
 80002b2:	b510      	push	{r4, lr}
 80002b4:	05c9      	lsls	r1, r1, #23
 80002b6:	1c04      	adds	r4, r0, #0
 80002b8:	f002 fc68 	bl	8002b8c <__aeabi_fcmpge>
 80002bc:	2800      	cmp	r0, #0
 80002be:	d103      	bne.n	80002c8 <__aeabi_f2uiz+0x18>
 80002c0:	1c20      	adds	r0, r4, #0
 80002c2:	f000 fdb5 	bl	8000e30 <__aeabi_f2iz>
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	219e      	movs	r1, #158	; 0x9e
 80002ca:	1c20      	adds	r0, r4, #0
 80002cc:	05c9      	lsls	r1, r1, #23
 80002ce:	f000 fbe7 	bl	8000aa0 <__aeabi_fsub>
 80002d2:	f000 fdad 	bl	8000e30 <__aeabi_f2iz>
 80002d6:	2380      	movs	r3, #128	; 0x80
 80002d8:	061b      	lsls	r3, r3, #24
 80002da:	469c      	mov	ip, r3
 80002dc:	4460      	add	r0, ip
 80002de:	e7f2      	b.n	80002c6 <__aeabi_f2uiz+0x16>

080002e0 <__aeabi_d2uiz>:
 80002e0:	b570      	push	{r4, r5, r6, lr}
 80002e2:	2200      	movs	r2, #0
 80002e4:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <__aeabi_d2uiz+0x38>)
 80002e6:	0004      	movs	r4, r0
 80002e8:	000d      	movs	r5, r1
 80002ea:	f7ff ffd7 	bl	800029c <__aeabi_dcmpge>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	d104      	bne.n	80002fc <__aeabi_d2uiz+0x1c>
 80002f2:	0020      	movs	r0, r4
 80002f4:	0029      	movs	r1, r5
 80002f6:	f002 fb8d 	bl	8002a14 <__aeabi_d2iz>
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <__aeabi_d2uiz+0x38>)
 80002fe:	2200      	movs	r2, #0
 8000300:	0020      	movs	r0, r4
 8000302:	0029      	movs	r1, r5
 8000304:	f001 ffd6 	bl	80022b4 <__aeabi_dsub>
 8000308:	f002 fb84 	bl	8002a14 <__aeabi_d2iz>
 800030c:	2380      	movs	r3, #128	; 0x80
 800030e:	061b      	lsls	r3, r3, #24
 8000310:	469c      	mov	ip, r3
 8000312:	4460      	add	r0, ip
 8000314:	e7f1      	b.n	80002fa <__aeabi_d2uiz+0x1a>
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	41e00000 	.word	0x41e00000

0800031c <__aeabi_fadd>:
 800031c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800031e:	4646      	mov	r6, r8
 8000320:	46d6      	mov	lr, sl
 8000322:	464f      	mov	r7, r9
 8000324:	024d      	lsls	r5, r1, #9
 8000326:	0242      	lsls	r2, r0, #9
 8000328:	b5c0      	push	{r6, r7, lr}
 800032a:	0a52      	lsrs	r2, r2, #9
 800032c:	0a6e      	lsrs	r6, r5, #9
 800032e:	0047      	lsls	r7, r0, #1
 8000330:	46b0      	mov	r8, r6
 8000332:	0e3f      	lsrs	r7, r7, #24
 8000334:	004e      	lsls	r6, r1, #1
 8000336:	0fc4      	lsrs	r4, r0, #31
 8000338:	00d0      	lsls	r0, r2, #3
 800033a:	4694      	mov	ip, r2
 800033c:	003b      	movs	r3, r7
 800033e:	4682      	mov	sl, r0
 8000340:	0e36      	lsrs	r6, r6, #24
 8000342:	0fc9      	lsrs	r1, r1, #31
 8000344:	09ad      	lsrs	r5, r5, #6
 8000346:	428c      	cmp	r4, r1
 8000348:	d06d      	beq.n	8000426 <__aeabi_fadd+0x10a>
 800034a:	1bb8      	subs	r0, r7, r6
 800034c:	4681      	mov	r9, r0
 800034e:	2800      	cmp	r0, #0
 8000350:	dd4d      	ble.n	80003ee <__aeabi_fadd+0xd2>
 8000352:	2e00      	cmp	r6, #0
 8000354:	d100      	bne.n	8000358 <__aeabi_fadd+0x3c>
 8000356:	e088      	b.n	800046a <__aeabi_fadd+0x14e>
 8000358:	2fff      	cmp	r7, #255	; 0xff
 800035a:	d05a      	beq.n	8000412 <__aeabi_fadd+0xf6>
 800035c:	2380      	movs	r3, #128	; 0x80
 800035e:	04db      	lsls	r3, r3, #19
 8000360:	431d      	orrs	r5, r3
 8000362:	464b      	mov	r3, r9
 8000364:	2201      	movs	r2, #1
 8000366:	2b1b      	cmp	r3, #27
 8000368:	dc0a      	bgt.n	8000380 <__aeabi_fadd+0x64>
 800036a:	002b      	movs	r3, r5
 800036c:	464a      	mov	r2, r9
 800036e:	4649      	mov	r1, r9
 8000370:	40d3      	lsrs	r3, r2
 8000372:	2220      	movs	r2, #32
 8000374:	1a52      	subs	r2, r2, r1
 8000376:	4095      	lsls	r5, r2
 8000378:	002a      	movs	r2, r5
 800037a:	1e55      	subs	r5, r2, #1
 800037c:	41aa      	sbcs	r2, r5
 800037e:	431a      	orrs	r2, r3
 8000380:	4653      	mov	r3, sl
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	0153      	lsls	r3, r2, #5
 8000386:	d400      	bmi.n	800038a <__aeabi_fadd+0x6e>
 8000388:	e0b9      	b.n	80004fe <__aeabi_fadd+0x1e2>
 800038a:	0192      	lsls	r2, r2, #6
 800038c:	0996      	lsrs	r6, r2, #6
 800038e:	0030      	movs	r0, r6
 8000390:	f002 fc06 	bl	8002ba0 <__clzsi2>
 8000394:	3805      	subs	r0, #5
 8000396:	4086      	lsls	r6, r0
 8000398:	4287      	cmp	r7, r0
 800039a:	dd00      	ble.n	800039e <__aeabi_fadd+0x82>
 800039c:	e0d4      	b.n	8000548 <__aeabi_fadd+0x22c>
 800039e:	0033      	movs	r3, r6
 80003a0:	1bc7      	subs	r7, r0, r7
 80003a2:	2020      	movs	r0, #32
 80003a4:	3701      	adds	r7, #1
 80003a6:	40fb      	lsrs	r3, r7
 80003a8:	1bc7      	subs	r7, r0, r7
 80003aa:	40be      	lsls	r6, r7
 80003ac:	0032      	movs	r2, r6
 80003ae:	1e56      	subs	r6, r2, #1
 80003b0:	41b2      	sbcs	r2, r6
 80003b2:	2700      	movs	r7, #0
 80003b4:	431a      	orrs	r2, r3
 80003b6:	0753      	lsls	r3, r2, #29
 80003b8:	d004      	beq.n	80003c4 <__aeabi_fadd+0xa8>
 80003ba:	230f      	movs	r3, #15
 80003bc:	4013      	ands	r3, r2
 80003be:	2b04      	cmp	r3, #4
 80003c0:	d000      	beq.n	80003c4 <__aeabi_fadd+0xa8>
 80003c2:	3204      	adds	r2, #4
 80003c4:	0153      	lsls	r3, r2, #5
 80003c6:	d400      	bmi.n	80003ca <__aeabi_fadd+0xae>
 80003c8:	e09c      	b.n	8000504 <__aeabi_fadd+0x1e8>
 80003ca:	1c7b      	adds	r3, r7, #1
 80003cc:	2ffe      	cmp	r7, #254	; 0xfe
 80003ce:	d100      	bne.n	80003d2 <__aeabi_fadd+0xb6>
 80003d0:	e09a      	b.n	8000508 <__aeabi_fadd+0x1ec>
 80003d2:	0192      	lsls	r2, r2, #6
 80003d4:	0a52      	lsrs	r2, r2, #9
 80003d6:	4694      	mov	ip, r2
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	05d8      	lsls	r0, r3, #23
 80003dc:	4663      	mov	r3, ip
 80003de:	07e4      	lsls	r4, r4, #31
 80003e0:	4318      	orrs	r0, r3
 80003e2:	4320      	orrs	r0, r4
 80003e4:	bce0      	pop	{r5, r6, r7}
 80003e6:	46ba      	mov	sl, r7
 80003e8:	46b1      	mov	r9, r6
 80003ea:	46a8      	mov	r8, r5
 80003ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003ee:	2800      	cmp	r0, #0
 80003f0:	d049      	beq.n	8000486 <__aeabi_fadd+0x16a>
 80003f2:	1bf3      	subs	r3, r6, r7
 80003f4:	2f00      	cmp	r7, #0
 80003f6:	d000      	beq.n	80003fa <__aeabi_fadd+0xde>
 80003f8:	e0b6      	b.n	8000568 <__aeabi_fadd+0x24c>
 80003fa:	4652      	mov	r2, sl
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	d060      	beq.n	80004c2 <__aeabi_fadd+0x1a6>
 8000400:	3b01      	subs	r3, #1
 8000402:	2b00      	cmp	r3, #0
 8000404:	d100      	bne.n	8000408 <__aeabi_fadd+0xec>
 8000406:	e0fc      	b.n	8000602 <__aeabi_fadd+0x2e6>
 8000408:	2eff      	cmp	r6, #255	; 0xff
 800040a:	d000      	beq.n	800040e <__aeabi_fadd+0xf2>
 800040c:	e0b4      	b.n	8000578 <__aeabi_fadd+0x25c>
 800040e:	000c      	movs	r4, r1
 8000410:	4642      	mov	r2, r8
 8000412:	2a00      	cmp	r2, #0
 8000414:	d078      	beq.n	8000508 <__aeabi_fadd+0x1ec>
 8000416:	2080      	movs	r0, #128	; 0x80
 8000418:	03c0      	lsls	r0, r0, #15
 800041a:	4310      	orrs	r0, r2
 800041c:	0242      	lsls	r2, r0, #9
 800041e:	0a53      	lsrs	r3, r2, #9
 8000420:	469c      	mov	ip, r3
 8000422:	23ff      	movs	r3, #255	; 0xff
 8000424:	e7d9      	b.n	80003da <__aeabi_fadd+0xbe>
 8000426:	1bb9      	subs	r1, r7, r6
 8000428:	2900      	cmp	r1, #0
 800042a:	dd71      	ble.n	8000510 <__aeabi_fadd+0x1f4>
 800042c:	2e00      	cmp	r6, #0
 800042e:	d03f      	beq.n	80004b0 <__aeabi_fadd+0x194>
 8000430:	2fff      	cmp	r7, #255	; 0xff
 8000432:	d0ee      	beq.n	8000412 <__aeabi_fadd+0xf6>
 8000434:	2380      	movs	r3, #128	; 0x80
 8000436:	04db      	lsls	r3, r3, #19
 8000438:	431d      	orrs	r5, r3
 800043a:	2201      	movs	r2, #1
 800043c:	291b      	cmp	r1, #27
 800043e:	dc07      	bgt.n	8000450 <__aeabi_fadd+0x134>
 8000440:	002a      	movs	r2, r5
 8000442:	2320      	movs	r3, #32
 8000444:	40ca      	lsrs	r2, r1
 8000446:	1a59      	subs	r1, r3, r1
 8000448:	408d      	lsls	r5, r1
 800044a:	1e6b      	subs	r3, r5, #1
 800044c:	419d      	sbcs	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	4452      	add	r2, sl
 8000452:	0153      	lsls	r3, r2, #5
 8000454:	d553      	bpl.n	80004fe <__aeabi_fadd+0x1e2>
 8000456:	3701      	adds	r7, #1
 8000458:	2fff      	cmp	r7, #255	; 0xff
 800045a:	d055      	beq.n	8000508 <__aeabi_fadd+0x1ec>
 800045c:	2301      	movs	r3, #1
 800045e:	497b      	ldr	r1, [pc, #492]	; (800064c <__aeabi_fadd+0x330>)
 8000460:	4013      	ands	r3, r2
 8000462:	0852      	lsrs	r2, r2, #1
 8000464:	400a      	ands	r2, r1
 8000466:	431a      	orrs	r2, r3
 8000468:	e7a5      	b.n	80003b6 <__aeabi_fadd+0x9a>
 800046a:	2d00      	cmp	r5, #0
 800046c:	d02c      	beq.n	80004c8 <__aeabi_fadd+0x1ac>
 800046e:	2301      	movs	r3, #1
 8000470:	425b      	negs	r3, r3
 8000472:	469c      	mov	ip, r3
 8000474:	44e1      	add	r9, ip
 8000476:	464b      	mov	r3, r9
 8000478:	2b00      	cmp	r3, #0
 800047a:	d100      	bne.n	800047e <__aeabi_fadd+0x162>
 800047c:	e0ad      	b.n	80005da <__aeabi_fadd+0x2be>
 800047e:	2fff      	cmp	r7, #255	; 0xff
 8000480:	d000      	beq.n	8000484 <__aeabi_fadd+0x168>
 8000482:	e76e      	b.n	8000362 <__aeabi_fadd+0x46>
 8000484:	e7c5      	b.n	8000412 <__aeabi_fadd+0xf6>
 8000486:	20fe      	movs	r0, #254	; 0xfe
 8000488:	1c7e      	adds	r6, r7, #1
 800048a:	4230      	tst	r0, r6
 800048c:	d160      	bne.n	8000550 <__aeabi_fadd+0x234>
 800048e:	2f00      	cmp	r7, #0
 8000490:	d000      	beq.n	8000494 <__aeabi_fadd+0x178>
 8000492:	e093      	b.n	80005bc <__aeabi_fadd+0x2a0>
 8000494:	4652      	mov	r2, sl
 8000496:	2a00      	cmp	r2, #0
 8000498:	d100      	bne.n	800049c <__aeabi_fadd+0x180>
 800049a:	e0b6      	b.n	800060a <__aeabi_fadd+0x2ee>
 800049c:	2d00      	cmp	r5, #0
 800049e:	d09c      	beq.n	80003da <__aeabi_fadd+0xbe>
 80004a0:	1b52      	subs	r2, r2, r5
 80004a2:	0150      	lsls	r0, r2, #5
 80004a4:	d400      	bmi.n	80004a8 <__aeabi_fadd+0x18c>
 80004a6:	e0c3      	b.n	8000630 <__aeabi_fadd+0x314>
 80004a8:	4653      	mov	r3, sl
 80004aa:	000c      	movs	r4, r1
 80004ac:	1aea      	subs	r2, r5, r3
 80004ae:	e782      	b.n	80003b6 <__aeabi_fadd+0x9a>
 80004b0:	2d00      	cmp	r5, #0
 80004b2:	d009      	beq.n	80004c8 <__aeabi_fadd+0x1ac>
 80004b4:	3901      	subs	r1, #1
 80004b6:	2900      	cmp	r1, #0
 80004b8:	d100      	bne.n	80004bc <__aeabi_fadd+0x1a0>
 80004ba:	e08b      	b.n	80005d4 <__aeabi_fadd+0x2b8>
 80004bc:	2fff      	cmp	r7, #255	; 0xff
 80004be:	d1bc      	bne.n	800043a <__aeabi_fadd+0x11e>
 80004c0:	e7a7      	b.n	8000412 <__aeabi_fadd+0xf6>
 80004c2:	000c      	movs	r4, r1
 80004c4:	4642      	mov	r2, r8
 80004c6:	0037      	movs	r7, r6
 80004c8:	2fff      	cmp	r7, #255	; 0xff
 80004ca:	d0a2      	beq.n	8000412 <__aeabi_fadd+0xf6>
 80004cc:	0252      	lsls	r2, r2, #9
 80004ce:	0a53      	lsrs	r3, r2, #9
 80004d0:	469c      	mov	ip, r3
 80004d2:	b2fb      	uxtb	r3, r7
 80004d4:	e781      	b.n	80003da <__aeabi_fadd+0xbe>
 80004d6:	21fe      	movs	r1, #254	; 0xfe
 80004d8:	3701      	adds	r7, #1
 80004da:	4239      	tst	r1, r7
 80004dc:	d165      	bne.n	80005aa <__aeabi_fadd+0x28e>
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d17e      	bne.n	80005e0 <__aeabi_fadd+0x2c4>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	d100      	bne.n	80004e8 <__aeabi_fadd+0x1cc>
 80004e6:	e0aa      	b.n	800063e <__aeabi_fadd+0x322>
 80004e8:	2d00      	cmp	r5, #0
 80004ea:	d100      	bne.n	80004ee <__aeabi_fadd+0x1d2>
 80004ec:	e775      	b.n	80003da <__aeabi_fadd+0xbe>
 80004ee:	002a      	movs	r2, r5
 80004f0:	4452      	add	r2, sl
 80004f2:	2700      	movs	r7, #0
 80004f4:	0153      	lsls	r3, r2, #5
 80004f6:	d502      	bpl.n	80004fe <__aeabi_fadd+0x1e2>
 80004f8:	4b55      	ldr	r3, [pc, #340]	; (8000650 <__aeabi_fadd+0x334>)
 80004fa:	3701      	adds	r7, #1
 80004fc:	401a      	ands	r2, r3
 80004fe:	0753      	lsls	r3, r2, #29
 8000500:	d000      	beq.n	8000504 <__aeabi_fadd+0x1e8>
 8000502:	e75a      	b.n	80003ba <__aeabi_fadd+0x9e>
 8000504:	08d2      	lsrs	r2, r2, #3
 8000506:	e7df      	b.n	80004c8 <__aeabi_fadd+0x1ac>
 8000508:	2200      	movs	r2, #0
 800050a:	23ff      	movs	r3, #255	; 0xff
 800050c:	4694      	mov	ip, r2
 800050e:	e764      	b.n	80003da <__aeabi_fadd+0xbe>
 8000510:	2900      	cmp	r1, #0
 8000512:	d0e0      	beq.n	80004d6 <__aeabi_fadd+0x1ba>
 8000514:	1bf3      	subs	r3, r6, r7
 8000516:	2f00      	cmp	r7, #0
 8000518:	d03e      	beq.n	8000598 <__aeabi_fadd+0x27c>
 800051a:	2eff      	cmp	r6, #255	; 0xff
 800051c:	d100      	bne.n	8000520 <__aeabi_fadd+0x204>
 800051e:	e777      	b.n	8000410 <__aeabi_fadd+0xf4>
 8000520:	2280      	movs	r2, #128	; 0x80
 8000522:	0001      	movs	r1, r0
 8000524:	04d2      	lsls	r2, r2, #19
 8000526:	4311      	orrs	r1, r2
 8000528:	468a      	mov	sl, r1
 800052a:	2201      	movs	r2, #1
 800052c:	2b1b      	cmp	r3, #27
 800052e:	dc08      	bgt.n	8000542 <__aeabi_fadd+0x226>
 8000530:	4652      	mov	r2, sl
 8000532:	2120      	movs	r1, #32
 8000534:	4650      	mov	r0, sl
 8000536:	40da      	lsrs	r2, r3
 8000538:	1acb      	subs	r3, r1, r3
 800053a:	4098      	lsls	r0, r3
 800053c:	1e43      	subs	r3, r0, #1
 800053e:	4198      	sbcs	r0, r3
 8000540:	4302      	orrs	r2, r0
 8000542:	0037      	movs	r7, r6
 8000544:	1952      	adds	r2, r2, r5
 8000546:	e784      	b.n	8000452 <__aeabi_fadd+0x136>
 8000548:	4a41      	ldr	r2, [pc, #260]	; (8000650 <__aeabi_fadd+0x334>)
 800054a:	1a3f      	subs	r7, r7, r0
 800054c:	4032      	ands	r2, r6
 800054e:	e732      	b.n	80003b6 <__aeabi_fadd+0x9a>
 8000550:	4653      	mov	r3, sl
 8000552:	1b5e      	subs	r6, r3, r5
 8000554:	0173      	lsls	r3, r6, #5
 8000556:	d42d      	bmi.n	80005b4 <__aeabi_fadd+0x298>
 8000558:	2e00      	cmp	r6, #0
 800055a:	d000      	beq.n	800055e <__aeabi_fadd+0x242>
 800055c:	e717      	b.n	800038e <__aeabi_fadd+0x72>
 800055e:	2200      	movs	r2, #0
 8000560:	2400      	movs	r4, #0
 8000562:	2300      	movs	r3, #0
 8000564:	4694      	mov	ip, r2
 8000566:	e738      	b.n	80003da <__aeabi_fadd+0xbe>
 8000568:	2eff      	cmp	r6, #255	; 0xff
 800056a:	d100      	bne.n	800056e <__aeabi_fadd+0x252>
 800056c:	e74f      	b.n	800040e <__aeabi_fadd+0xf2>
 800056e:	2280      	movs	r2, #128	; 0x80
 8000570:	4650      	mov	r0, sl
 8000572:	04d2      	lsls	r2, r2, #19
 8000574:	4310      	orrs	r0, r2
 8000576:	4682      	mov	sl, r0
 8000578:	2201      	movs	r2, #1
 800057a:	2b1b      	cmp	r3, #27
 800057c:	dc08      	bgt.n	8000590 <__aeabi_fadd+0x274>
 800057e:	4652      	mov	r2, sl
 8000580:	2420      	movs	r4, #32
 8000582:	4650      	mov	r0, sl
 8000584:	40da      	lsrs	r2, r3
 8000586:	1ae3      	subs	r3, r4, r3
 8000588:	4098      	lsls	r0, r3
 800058a:	1e43      	subs	r3, r0, #1
 800058c:	4198      	sbcs	r0, r3
 800058e:	4302      	orrs	r2, r0
 8000590:	000c      	movs	r4, r1
 8000592:	0037      	movs	r7, r6
 8000594:	1aaa      	subs	r2, r5, r2
 8000596:	e6f5      	b.n	8000384 <__aeabi_fadd+0x68>
 8000598:	2800      	cmp	r0, #0
 800059a:	d093      	beq.n	80004c4 <__aeabi_fadd+0x1a8>
 800059c:	3b01      	subs	r3, #1
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d04f      	beq.n	8000642 <__aeabi_fadd+0x326>
 80005a2:	2eff      	cmp	r6, #255	; 0xff
 80005a4:	d1c1      	bne.n	800052a <__aeabi_fadd+0x20e>
 80005a6:	4642      	mov	r2, r8
 80005a8:	e733      	b.n	8000412 <__aeabi_fadd+0xf6>
 80005aa:	2fff      	cmp	r7, #255	; 0xff
 80005ac:	d0ac      	beq.n	8000508 <__aeabi_fadd+0x1ec>
 80005ae:	4455      	add	r5, sl
 80005b0:	086a      	lsrs	r2, r5, #1
 80005b2:	e7a4      	b.n	80004fe <__aeabi_fadd+0x1e2>
 80005b4:	4653      	mov	r3, sl
 80005b6:	000c      	movs	r4, r1
 80005b8:	1aee      	subs	r6, r5, r3
 80005ba:	e6e8      	b.n	800038e <__aeabi_fadd+0x72>
 80005bc:	4653      	mov	r3, sl
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d128      	bne.n	8000614 <__aeabi_fadd+0x2f8>
 80005c2:	2d00      	cmp	r5, #0
 80005c4:	d000      	beq.n	80005c8 <__aeabi_fadd+0x2ac>
 80005c6:	e722      	b.n	800040e <__aeabi_fadd+0xf2>
 80005c8:	2380      	movs	r3, #128	; 0x80
 80005ca:	03db      	lsls	r3, r3, #15
 80005cc:	469c      	mov	ip, r3
 80005ce:	2400      	movs	r4, #0
 80005d0:	23ff      	movs	r3, #255	; 0xff
 80005d2:	e702      	b.n	80003da <__aeabi_fadd+0xbe>
 80005d4:	002a      	movs	r2, r5
 80005d6:	4452      	add	r2, sl
 80005d8:	e73b      	b.n	8000452 <__aeabi_fadd+0x136>
 80005da:	4653      	mov	r3, sl
 80005dc:	1b5a      	subs	r2, r3, r5
 80005de:	e6d1      	b.n	8000384 <__aeabi_fadd+0x68>
 80005e0:	2800      	cmp	r0, #0
 80005e2:	d100      	bne.n	80005e6 <__aeabi_fadd+0x2ca>
 80005e4:	e714      	b.n	8000410 <__aeabi_fadd+0xf4>
 80005e6:	2d00      	cmp	r5, #0
 80005e8:	d100      	bne.n	80005ec <__aeabi_fadd+0x2d0>
 80005ea:	e712      	b.n	8000412 <__aeabi_fadd+0xf6>
 80005ec:	2380      	movs	r3, #128	; 0x80
 80005ee:	03db      	lsls	r3, r3, #15
 80005f0:	421a      	tst	r2, r3
 80005f2:	d100      	bne.n	80005f6 <__aeabi_fadd+0x2da>
 80005f4:	e70d      	b.n	8000412 <__aeabi_fadd+0xf6>
 80005f6:	4641      	mov	r1, r8
 80005f8:	4219      	tst	r1, r3
 80005fa:	d000      	beq.n	80005fe <__aeabi_fadd+0x2e2>
 80005fc:	e709      	b.n	8000412 <__aeabi_fadd+0xf6>
 80005fe:	4642      	mov	r2, r8
 8000600:	e707      	b.n	8000412 <__aeabi_fadd+0xf6>
 8000602:	000c      	movs	r4, r1
 8000604:	0037      	movs	r7, r6
 8000606:	1aaa      	subs	r2, r5, r2
 8000608:	e6bc      	b.n	8000384 <__aeabi_fadd+0x68>
 800060a:	2d00      	cmp	r5, #0
 800060c:	d013      	beq.n	8000636 <__aeabi_fadd+0x31a>
 800060e:	000c      	movs	r4, r1
 8000610:	46c4      	mov	ip, r8
 8000612:	e6e2      	b.n	80003da <__aeabi_fadd+0xbe>
 8000614:	2d00      	cmp	r5, #0
 8000616:	d100      	bne.n	800061a <__aeabi_fadd+0x2fe>
 8000618:	e6fb      	b.n	8000412 <__aeabi_fadd+0xf6>
 800061a:	2380      	movs	r3, #128	; 0x80
 800061c:	03db      	lsls	r3, r3, #15
 800061e:	421a      	tst	r2, r3
 8000620:	d100      	bne.n	8000624 <__aeabi_fadd+0x308>
 8000622:	e6f6      	b.n	8000412 <__aeabi_fadd+0xf6>
 8000624:	4640      	mov	r0, r8
 8000626:	4218      	tst	r0, r3
 8000628:	d000      	beq.n	800062c <__aeabi_fadd+0x310>
 800062a:	e6f2      	b.n	8000412 <__aeabi_fadd+0xf6>
 800062c:	000c      	movs	r4, r1
 800062e:	e6ef      	b.n	8000410 <__aeabi_fadd+0xf4>
 8000630:	2a00      	cmp	r2, #0
 8000632:	d000      	beq.n	8000636 <__aeabi_fadd+0x31a>
 8000634:	e763      	b.n	80004fe <__aeabi_fadd+0x1e2>
 8000636:	2200      	movs	r2, #0
 8000638:	2400      	movs	r4, #0
 800063a:	4694      	mov	ip, r2
 800063c:	e6cd      	b.n	80003da <__aeabi_fadd+0xbe>
 800063e:	46c4      	mov	ip, r8
 8000640:	e6cb      	b.n	80003da <__aeabi_fadd+0xbe>
 8000642:	002a      	movs	r2, r5
 8000644:	0037      	movs	r7, r6
 8000646:	4452      	add	r2, sl
 8000648:	e703      	b.n	8000452 <__aeabi_fadd+0x136>
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	7dffffff 	.word	0x7dffffff
 8000650:	fbffffff 	.word	0xfbffffff

08000654 <__aeabi_fdiv>:
 8000654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000656:	464f      	mov	r7, r9
 8000658:	4646      	mov	r6, r8
 800065a:	46d6      	mov	lr, sl
 800065c:	0245      	lsls	r5, r0, #9
 800065e:	b5c0      	push	{r6, r7, lr}
 8000660:	0047      	lsls	r7, r0, #1
 8000662:	1c0c      	adds	r4, r1, #0
 8000664:	0a6d      	lsrs	r5, r5, #9
 8000666:	0e3f      	lsrs	r7, r7, #24
 8000668:	0fc6      	lsrs	r6, r0, #31
 800066a:	2f00      	cmp	r7, #0
 800066c:	d066      	beq.n	800073c <__aeabi_fdiv+0xe8>
 800066e:	2fff      	cmp	r7, #255	; 0xff
 8000670:	d06c      	beq.n	800074c <__aeabi_fdiv+0xf8>
 8000672:	2300      	movs	r3, #0
 8000674:	00ea      	lsls	r2, r5, #3
 8000676:	2580      	movs	r5, #128	; 0x80
 8000678:	4699      	mov	r9, r3
 800067a:	469a      	mov	sl, r3
 800067c:	04ed      	lsls	r5, r5, #19
 800067e:	4315      	orrs	r5, r2
 8000680:	3f7f      	subs	r7, #127	; 0x7f
 8000682:	0260      	lsls	r0, r4, #9
 8000684:	0061      	lsls	r1, r4, #1
 8000686:	0a43      	lsrs	r3, r0, #9
 8000688:	4698      	mov	r8, r3
 800068a:	0e09      	lsrs	r1, r1, #24
 800068c:	0fe4      	lsrs	r4, r4, #31
 800068e:	2900      	cmp	r1, #0
 8000690:	d048      	beq.n	8000724 <__aeabi_fdiv+0xd0>
 8000692:	29ff      	cmp	r1, #255	; 0xff
 8000694:	d010      	beq.n	80006b8 <__aeabi_fdiv+0x64>
 8000696:	2280      	movs	r2, #128	; 0x80
 8000698:	00d8      	lsls	r0, r3, #3
 800069a:	04d2      	lsls	r2, r2, #19
 800069c:	4302      	orrs	r2, r0
 800069e:	4690      	mov	r8, r2
 80006a0:	2000      	movs	r0, #0
 80006a2:	397f      	subs	r1, #127	; 0x7f
 80006a4:	464a      	mov	r2, r9
 80006a6:	0033      	movs	r3, r6
 80006a8:	1a7f      	subs	r7, r7, r1
 80006aa:	4302      	orrs	r2, r0
 80006ac:	496c      	ldr	r1, [pc, #432]	; (8000860 <__aeabi_fdiv+0x20c>)
 80006ae:	0092      	lsls	r2, r2, #2
 80006b0:	588a      	ldr	r2, [r1, r2]
 80006b2:	4063      	eors	r3, r4
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	4697      	mov	pc, r2
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d16d      	bne.n	8000798 <__aeabi_fdiv+0x144>
 80006bc:	2002      	movs	r0, #2
 80006be:	3fff      	subs	r7, #255	; 0xff
 80006c0:	e033      	b.n	800072a <__aeabi_fdiv+0xd6>
 80006c2:	2300      	movs	r3, #0
 80006c4:	4698      	mov	r8, r3
 80006c6:	0026      	movs	r6, r4
 80006c8:	4645      	mov	r5, r8
 80006ca:	4682      	mov	sl, r0
 80006cc:	4653      	mov	r3, sl
 80006ce:	2b02      	cmp	r3, #2
 80006d0:	d100      	bne.n	80006d4 <__aeabi_fdiv+0x80>
 80006d2:	e07f      	b.n	80007d4 <__aeabi_fdiv+0x180>
 80006d4:	2b03      	cmp	r3, #3
 80006d6:	d100      	bne.n	80006da <__aeabi_fdiv+0x86>
 80006d8:	e094      	b.n	8000804 <__aeabi_fdiv+0x1b0>
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d017      	beq.n	800070e <__aeabi_fdiv+0xba>
 80006de:	0038      	movs	r0, r7
 80006e0:	307f      	adds	r0, #127	; 0x7f
 80006e2:	2800      	cmp	r0, #0
 80006e4:	dd5f      	ble.n	80007a6 <__aeabi_fdiv+0x152>
 80006e6:	076b      	lsls	r3, r5, #29
 80006e8:	d004      	beq.n	80006f4 <__aeabi_fdiv+0xa0>
 80006ea:	230f      	movs	r3, #15
 80006ec:	402b      	ands	r3, r5
 80006ee:	2b04      	cmp	r3, #4
 80006f0:	d000      	beq.n	80006f4 <__aeabi_fdiv+0xa0>
 80006f2:	3504      	adds	r5, #4
 80006f4:	012b      	lsls	r3, r5, #4
 80006f6:	d503      	bpl.n	8000700 <__aeabi_fdiv+0xac>
 80006f8:	0038      	movs	r0, r7
 80006fa:	4b5a      	ldr	r3, [pc, #360]	; (8000864 <__aeabi_fdiv+0x210>)
 80006fc:	3080      	adds	r0, #128	; 0x80
 80006fe:	401d      	ands	r5, r3
 8000700:	28fe      	cmp	r0, #254	; 0xfe
 8000702:	dc67      	bgt.n	80007d4 <__aeabi_fdiv+0x180>
 8000704:	01ad      	lsls	r5, r5, #6
 8000706:	0a6d      	lsrs	r5, r5, #9
 8000708:	b2c0      	uxtb	r0, r0
 800070a:	e002      	b.n	8000712 <__aeabi_fdiv+0xbe>
 800070c:	001e      	movs	r6, r3
 800070e:	2000      	movs	r0, #0
 8000710:	2500      	movs	r5, #0
 8000712:	05c0      	lsls	r0, r0, #23
 8000714:	4328      	orrs	r0, r5
 8000716:	07f6      	lsls	r6, r6, #31
 8000718:	4330      	orrs	r0, r6
 800071a:	bce0      	pop	{r5, r6, r7}
 800071c:	46ba      	mov	sl, r7
 800071e:	46b1      	mov	r9, r6
 8000720:	46a8      	mov	r8, r5
 8000722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000724:	2b00      	cmp	r3, #0
 8000726:	d12b      	bne.n	8000780 <__aeabi_fdiv+0x12c>
 8000728:	2001      	movs	r0, #1
 800072a:	464a      	mov	r2, r9
 800072c:	0033      	movs	r3, r6
 800072e:	494e      	ldr	r1, [pc, #312]	; (8000868 <__aeabi_fdiv+0x214>)
 8000730:	4302      	orrs	r2, r0
 8000732:	0092      	lsls	r2, r2, #2
 8000734:	588a      	ldr	r2, [r1, r2]
 8000736:	4063      	eors	r3, r4
 8000738:	b2db      	uxtb	r3, r3
 800073a:	4697      	mov	pc, r2
 800073c:	2d00      	cmp	r5, #0
 800073e:	d113      	bne.n	8000768 <__aeabi_fdiv+0x114>
 8000740:	2304      	movs	r3, #4
 8000742:	4699      	mov	r9, r3
 8000744:	3b03      	subs	r3, #3
 8000746:	2700      	movs	r7, #0
 8000748:	469a      	mov	sl, r3
 800074a:	e79a      	b.n	8000682 <__aeabi_fdiv+0x2e>
 800074c:	2d00      	cmp	r5, #0
 800074e:	d105      	bne.n	800075c <__aeabi_fdiv+0x108>
 8000750:	2308      	movs	r3, #8
 8000752:	4699      	mov	r9, r3
 8000754:	3b06      	subs	r3, #6
 8000756:	27ff      	movs	r7, #255	; 0xff
 8000758:	469a      	mov	sl, r3
 800075a:	e792      	b.n	8000682 <__aeabi_fdiv+0x2e>
 800075c:	230c      	movs	r3, #12
 800075e:	4699      	mov	r9, r3
 8000760:	3b09      	subs	r3, #9
 8000762:	27ff      	movs	r7, #255	; 0xff
 8000764:	469a      	mov	sl, r3
 8000766:	e78c      	b.n	8000682 <__aeabi_fdiv+0x2e>
 8000768:	0028      	movs	r0, r5
 800076a:	f002 fa19 	bl	8002ba0 <__clzsi2>
 800076e:	2776      	movs	r7, #118	; 0x76
 8000770:	1f43      	subs	r3, r0, #5
 8000772:	409d      	lsls	r5, r3
 8000774:	2300      	movs	r3, #0
 8000776:	427f      	negs	r7, r7
 8000778:	4699      	mov	r9, r3
 800077a:	469a      	mov	sl, r3
 800077c:	1a3f      	subs	r7, r7, r0
 800077e:	e780      	b.n	8000682 <__aeabi_fdiv+0x2e>
 8000780:	0018      	movs	r0, r3
 8000782:	f002 fa0d 	bl	8002ba0 <__clzsi2>
 8000786:	4642      	mov	r2, r8
 8000788:	1f43      	subs	r3, r0, #5
 800078a:	2176      	movs	r1, #118	; 0x76
 800078c:	409a      	lsls	r2, r3
 800078e:	4249      	negs	r1, r1
 8000790:	1a09      	subs	r1, r1, r0
 8000792:	4690      	mov	r8, r2
 8000794:	2000      	movs	r0, #0
 8000796:	e785      	b.n	80006a4 <__aeabi_fdiv+0x50>
 8000798:	21ff      	movs	r1, #255	; 0xff
 800079a:	2003      	movs	r0, #3
 800079c:	e782      	b.n	80006a4 <__aeabi_fdiv+0x50>
 800079e:	001e      	movs	r6, r3
 80007a0:	20ff      	movs	r0, #255	; 0xff
 80007a2:	2500      	movs	r5, #0
 80007a4:	e7b5      	b.n	8000712 <__aeabi_fdiv+0xbe>
 80007a6:	2301      	movs	r3, #1
 80007a8:	1a1b      	subs	r3, r3, r0
 80007aa:	2b1b      	cmp	r3, #27
 80007ac:	dcaf      	bgt.n	800070e <__aeabi_fdiv+0xba>
 80007ae:	379e      	adds	r7, #158	; 0x9e
 80007b0:	0029      	movs	r1, r5
 80007b2:	40bd      	lsls	r5, r7
 80007b4:	40d9      	lsrs	r1, r3
 80007b6:	1e6a      	subs	r2, r5, #1
 80007b8:	4195      	sbcs	r5, r2
 80007ba:	430d      	orrs	r5, r1
 80007bc:	076b      	lsls	r3, r5, #29
 80007be:	d004      	beq.n	80007ca <__aeabi_fdiv+0x176>
 80007c0:	230f      	movs	r3, #15
 80007c2:	402b      	ands	r3, r5
 80007c4:	2b04      	cmp	r3, #4
 80007c6:	d000      	beq.n	80007ca <__aeabi_fdiv+0x176>
 80007c8:	3504      	adds	r5, #4
 80007ca:	016b      	lsls	r3, r5, #5
 80007cc:	d544      	bpl.n	8000858 <__aeabi_fdiv+0x204>
 80007ce:	2001      	movs	r0, #1
 80007d0:	2500      	movs	r5, #0
 80007d2:	e79e      	b.n	8000712 <__aeabi_fdiv+0xbe>
 80007d4:	20ff      	movs	r0, #255	; 0xff
 80007d6:	2500      	movs	r5, #0
 80007d8:	e79b      	b.n	8000712 <__aeabi_fdiv+0xbe>
 80007da:	2580      	movs	r5, #128	; 0x80
 80007dc:	2600      	movs	r6, #0
 80007de:	20ff      	movs	r0, #255	; 0xff
 80007e0:	03ed      	lsls	r5, r5, #15
 80007e2:	e796      	b.n	8000712 <__aeabi_fdiv+0xbe>
 80007e4:	2300      	movs	r3, #0
 80007e6:	4698      	mov	r8, r3
 80007e8:	2080      	movs	r0, #128	; 0x80
 80007ea:	03c0      	lsls	r0, r0, #15
 80007ec:	4205      	tst	r5, r0
 80007ee:	d009      	beq.n	8000804 <__aeabi_fdiv+0x1b0>
 80007f0:	4643      	mov	r3, r8
 80007f2:	4203      	tst	r3, r0
 80007f4:	d106      	bne.n	8000804 <__aeabi_fdiv+0x1b0>
 80007f6:	4645      	mov	r5, r8
 80007f8:	4305      	orrs	r5, r0
 80007fa:	026d      	lsls	r5, r5, #9
 80007fc:	0026      	movs	r6, r4
 80007fe:	20ff      	movs	r0, #255	; 0xff
 8000800:	0a6d      	lsrs	r5, r5, #9
 8000802:	e786      	b.n	8000712 <__aeabi_fdiv+0xbe>
 8000804:	2080      	movs	r0, #128	; 0x80
 8000806:	03c0      	lsls	r0, r0, #15
 8000808:	4305      	orrs	r5, r0
 800080a:	026d      	lsls	r5, r5, #9
 800080c:	20ff      	movs	r0, #255	; 0xff
 800080e:	0a6d      	lsrs	r5, r5, #9
 8000810:	e77f      	b.n	8000712 <__aeabi_fdiv+0xbe>
 8000812:	4641      	mov	r1, r8
 8000814:	016a      	lsls	r2, r5, #5
 8000816:	0148      	lsls	r0, r1, #5
 8000818:	4282      	cmp	r2, r0
 800081a:	d219      	bcs.n	8000850 <__aeabi_fdiv+0x1fc>
 800081c:	211b      	movs	r1, #27
 800081e:	2500      	movs	r5, #0
 8000820:	3f01      	subs	r7, #1
 8000822:	2601      	movs	r6, #1
 8000824:	0014      	movs	r4, r2
 8000826:	006d      	lsls	r5, r5, #1
 8000828:	0052      	lsls	r2, r2, #1
 800082a:	2c00      	cmp	r4, #0
 800082c:	db01      	blt.n	8000832 <__aeabi_fdiv+0x1de>
 800082e:	4290      	cmp	r0, r2
 8000830:	d801      	bhi.n	8000836 <__aeabi_fdiv+0x1e2>
 8000832:	1a12      	subs	r2, r2, r0
 8000834:	4335      	orrs	r5, r6
 8000836:	3901      	subs	r1, #1
 8000838:	2900      	cmp	r1, #0
 800083a:	d1f3      	bne.n	8000824 <__aeabi_fdiv+0x1d0>
 800083c:	1e50      	subs	r0, r2, #1
 800083e:	4182      	sbcs	r2, r0
 8000840:	0038      	movs	r0, r7
 8000842:	307f      	adds	r0, #127	; 0x7f
 8000844:	001e      	movs	r6, r3
 8000846:	4315      	orrs	r5, r2
 8000848:	2800      	cmp	r0, #0
 800084a:	dd00      	ble.n	800084e <__aeabi_fdiv+0x1fa>
 800084c:	e74b      	b.n	80006e6 <__aeabi_fdiv+0x92>
 800084e:	e7aa      	b.n	80007a6 <__aeabi_fdiv+0x152>
 8000850:	211a      	movs	r1, #26
 8000852:	2501      	movs	r5, #1
 8000854:	1a12      	subs	r2, r2, r0
 8000856:	e7e4      	b.n	8000822 <__aeabi_fdiv+0x1ce>
 8000858:	01ad      	lsls	r5, r5, #6
 800085a:	2000      	movs	r0, #0
 800085c:	0a6d      	lsrs	r5, r5, #9
 800085e:	e758      	b.n	8000712 <__aeabi_fdiv+0xbe>
 8000860:	0800bf28 	.word	0x0800bf28
 8000864:	f7ffffff 	.word	0xf7ffffff
 8000868:	0800bf68 	.word	0x0800bf68

0800086c <__aeabi_fmul>:
 800086c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800086e:	4657      	mov	r7, sl
 8000870:	464e      	mov	r6, r9
 8000872:	4645      	mov	r5, r8
 8000874:	46de      	mov	lr, fp
 8000876:	0244      	lsls	r4, r0, #9
 8000878:	b5e0      	push	{r5, r6, r7, lr}
 800087a:	0045      	lsls	r5, r0, #1
 800087c:	1c0f      	adds	r7, r1, #0
 800087e:	0a64      	lsrs	r4, r4, #9
 8000880:	0e2d      	lsrs	r5, r5, #24
 8000882:	0fc6      	lsrs	r6, r0, #31
 8000884:	2d00      	cmp	r5, #0
 8000886:	d047      	beq.n	8000918 <__aeabi_fmul+0xac>
 8000888:	2dff      	cmp	r5, #255	; 0xff
 800088a:	d04d      	beq.n	8000928 <__aeabi_fmul+0xbc>
 800088c:	2300      	movs	r3, #0
 800088e:	2080      	movs	r0, #128	; 0x80
 8000890:	469a      	mov	sl, r3
 8000892:	469b      	mov	fp, r3
 8000894:	00e4      	lsls	r4, r4, #3
 8000896:	04c0      	lsls	r0, r0, #19
 8000898:	4304      	orrs	r4, r0
 800089a:	3d7f      	subs	r5, #127	; 0x7f
 800089c:	0278      	lsls	r0, r7, #9
 800089e:	0a43      	lsrs	r3, r0, #9
 80008a0:	4699      	mov	r9, r3
 80008a2:	007a      	lsls	r2, r7, #1
 80008a4:	0ffb      	lsrs	r3, r7, #31
 80008a6:	4698      	mov	r8, r3
 80008a8:	0e12      	lsrs	r2, r2, #24
 80008aa:	464b      	mov	r3, r9
 80008ac:	d044      	beq.n	8000938 <__aeabi_fmul+0xcc>
 80008ae:	2aff      	cmp	r2, #255	; 0xff
 80008b0:	d011      	beq.n	80008d6 <__aeabi_fmul+0x6a>
 80008b2:	00d8      	lsls	r0, r3, #3
 80008b4:	2380      	movs	r3, #128	; 0x80
 80008b6:	04db      	lsls	r3, r3, #19
 80008b8:	4303      	orrs	r3, r0
 80008ba:	4699      	mov	r9, r3
 80008bc:	2000      	movs	r0, #0
 80008be:	3a7f      	subs	r2, #127	; 0x7f
 80008c0:	18ad      	adds	r5, r5, r2
 80008c2:	4647      	mov	r7, r8
 80008c4:	4653      	mov	r3, sl
 80008c6:	4077      	eors	r7, r6
 80008c8:	1c69      	adds	r1, r5, #1
 80008ca:	2b0f      	cmp	r3, #15
 80008cc:	d83f      	bhi.n	800094e <__aeabi_fmul+0xe2>
 80008ce:	4a72      	ldr	r2, [pc, #456]	; (8000a98 <__aeabi_fmul+0x22c>)
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	58d3      	ldr	r3, [r2, r3]
 80008d4:	469f      	mov	pc, r3
 80008d6:	35ff      	adds	r5, #255	; 0xff
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d000      	beq.n	80008de <__aeabi_fmul+0x72>
 80008dc:	e079      	b.n	80009d2 <__aeabi_fmul+0x166>
 80008de:	4652      	mov	r2, sl
 80008e0:	2302      	movs	r3, #2
 80008e2:	431a      	orrs	r2, r3
 80008e4:	4692      	mov	sl, r2
 80008e6:	2002      	movs	r0, #2
 80008e8:	e7eb      	b.n	80008c2 <__aeabi_fmul+0x56>
 80008ea:	4647      	mov	r7, r8
 80008ec:	464c      	mov	r4, r9
 80008ee:	4683      	mov	fp, r0
 80008f0:	465b      	mov	r3, fp
 80008f2:	2b02      	cmp	r3, #2
 80008f4:	d028      	beq.n	8000948 <__aeabi_fmul+0xdc>
 80008f6:	2b03      	cmp	r3, #3
 80008f8:	d100      	bne.n	80008fc <__aeabi_fmul+0x90>
 80008fa:	e0c6      	b.n	8000a8a <__aeabi_fmul+0x21e>
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d14f      	bne.n	80009a0 <__aeabi_fmul+0x134>
 8000900:	2000      	movs	r0, #0
 8000902:	2400      	movs	r4, #0
 8000904:	05c0      	lsls	r0, r0, #23
 8000906:	07ff      	lsls	r7, r7, #31
 8000908:	4320      	orrs	r0, r4
 800090a:	4338      	orrs	r0, r7
 800090c:	bcf0      	pop	{r4, r5, r6, r7}
 800090e:	46bb      	mov	fp, r7
 8000910:	46b2      	mov	sl, r6
 8000912:	46a9      	mov	r9, r5
 8000914:	46a0      	mov	r8, r4
 8000916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000918:	2c00      	cmp	r4, #0
 800091a:	d171      	bne.n	8000a00 <__aeabi_fmul+0x194>
 800091c:	2304      	movs	r3, #4
 800091e:	469a      	mov	sl, r3
 8000920:	3b03      	subs	r3, #3
 8000922:	2500      	movs	r5, #0
 8000924:	469b      	mov	fp, r3
 8000926:	e7b9      	b.n	800089c <__aeabi_fmul+0x30>
 8000928:	2c00      	cmp	r4, #0
 800092a:	d163      	bne.n	80009f4 <__aeabi_fmul+0x188>
 800092c:	2308      	movs	r3, #8
 800092e:	469a      	mov	sl, r3
 8000930:	3b06      	subs	r3, #6
 8000932:	25ff      	movs	r5, #255	; 0xff
 8000934:	469b      	mov	fp, r3
 8000936:	e7b1      	b.n	800089c <__aeabi_fmul+0x30>
 8000938:	2b00      	cmp	r3, #0
 800093a:	d150      	bne.n	80009de <__aeabi_fmul+0x172>
 800093c:	4652      	mov	r2, sl
 800093e:	3301      	adds	r3, #1
 8000940:	431a      	orrs	r2, r3
 8000942:	4692      	mov	sl, r2
 8000944:	2001      	movs	r0, #1
 8000946:	e7bc      	b.n	80008c2 <__aeabi_fmul+0x56>
 8000948:	20ff      	movs	r0, #255	; 0xff
 800094a:	2400      	movs	r4, #0
 800094c:	e7da      	b.n	8000904 <__aeabi_fmul+0x98>
 800094e:	4648      	mov	r0, r9
 8000950:	0c26      	lsrs	r6, r4, #16
 8000952:	0424      	lsls	r4, r4, #16
 8000954:	0c22      	lsrs	r2, r4, #16
 8000956:	0404      	lsls	r4, r0, #16
 8000958:	0c24      	lsrs	r4, r4, #16
 800095a:	464b      	mov	r3, r9
 800095c:	0020      	movs	r0, r4
 800095e:	0c1b      	lsrs	r3, r3, #16
 8000960:	4350      	muls	r0, r2
 8000962:	4374      	muls	r4, r6
 8000964:	435a      	muls	r2, r3
 8000966:	435e      	muls	r6, r3
 8000968:	1912      	adds	r2, r2, r4
 800096a:	0c03      	lsrs	r3, r0, #16
 800096c:	189b      	adds	r3, r3, r2
 800096e:	429c      	cmp	r4, r3
 8000970:	d903      	bls.n	800097a <__aeabi_fmul+0x10e>
 8000972:	2280      	movs	r2, #128	; 0x80
 8000974:	0252      	lsls	r2, r2, #9
 8000976:	4694      	mov	ip, r2
 8000978:	4466      	add	r6, ip
 800097a:	0400      	lsls	r0, r0, #16
 800097c:	041a      	lsls	r2, r3, #16
 800097e:	0c00      	lsrs	r0, r0, #16
 8000980:	1812      	adds	r2, r2, r0
 8000982:	0194      	lsls	r4, r2, #6
 8000984:	1e60      	subs	r0, r4, #1
 8000986:	4184      	sbcs	r4, r0
 8000988:	0c1b      	lsrs	r3, r3, #16
 800098a:	0e92      	lsrs	r2, r2, #26
 800098c:	199b      	adds	r3, r3, r6
 800098e:	4314      	orrs	r4, r2
 8000990:	019b      	lsls	r3, r3, #6
 8000992:	431c      	orrs	r4, r3
 8000994:	011b      	lsls	r3, r3, #4
 8000996:	d572      	bpl.n	8000a7e <__aeabi_fmul+0x212>
 8000998:	2001      	movs	r0, #1
 800099a:	0863      	lsrs	r3, r4, #1
 800099c:	4004      	ands	r4, r0
 800099e:	431c      	orrs	r4, r3
 80009a0:	0008      	movs	r0, r1
 80009a2:	307f      	adds	r0, #127	; 0x7f
 80009a4:	2800      	cmp	r0, #0
 80009a6:	dd3c      	ble.n	8000a22 <__aeabi_fmul+0x1b6>
 80009a8:	0763      	lsls	r3, r4, #29
 80009aa:	d004      	beq.n	80009b6 <__aeabi_fmul+0x14a>
 80009ac:	230f      	movs	r3, #15
 80009ae:	4023      	ands	r3, r4
 80009b0:	2b04      	cmp	r3, #4
 80009b2:	d000      	beq.n	80009b6 <__aeabi_fmul+0x14a>
 80009b4:	3404      	adds	r4, #4
 80009b6:	0123      	lsls	r3, r4, #4
 80009b8:	d503      	bpl.n	80009c2 <__aeabi_fmul+0x156>
 80009ba:	3180      	adds	r1, #128	; 0x80
 80009bc:	0008      	movs	r0, r1
 80009be:	4b37      	ldr	r3, [pc, #220]	; (8000a9c <__aeabi_fmul+0x230>)
 80009c0:	401c      	ands	r4, r3
 80009c2:	28fe      	cmp	r0, #254	; 0xfe
 80009c4:	dcc0      	bgt.n	8000948 <__aeabi_fmul+0xdc>
 80009c6:	01a4      	lsls	r4, r4, #6
 80009c8:	0a64      	lsrs	r4, r4, #9
 80009ca:	b2c0      	uxtb	r0, r0
 80009cc:	e79a      	b.n	8000904 <__aeabi_fmul+0x98>
 80009ce:	0037      	movs	r7, r6
 80009d0:	e78e      	b.n	80008f0 <__aeabi_fmul+0x84>
 80009d2:	4652      	mov	r2, sl
 80009d4:	2303      	movs	r3, #3
 80009d6:	431a      	orrs	r2, r3
 80009d8:	4692      	mov	sl, r2
 80009da:	2003      	movs	r0, #3
 80009dc:	e771      	b.n	80008c2 <__aeabi_fmul+0x56>
 80009de:	4648      	mov	r0, r9
 80009e0:	f002 f8de 	bl	8002ba0 <__clzsi2>
 80009e4:	464a      	mov	r2, r9
 80009e6:	1f43      	subs	r3, r0, #5
 80009e8:	409a      	lsls	r2, r3
 80009ea:	1a2d      	subs	r5, r5, r0
 80009ec:	4691      	mov	r9, r2
 80009ee:	2000      	movs	r0, #0
 80009f0:	3d76      	subs	r5, #118	; 0x76
 80009f2:	e766      	b.n	80008c2 <__aeabi_fmul+0x56>
 80009f4:	230c      	movs	r3, #12
 80009f6:	469a      	mov	sl, r3
 80009f8:	3b09      	subs	r3, #9
 80009fa:	25ff      	movs	r5, #255	; 0xff
 80009fc:	469b      	mov	fp, r3
 80009fe:	e74d      	b.n	800089c <__aeabi_fmul+0x30>
 8000a00:	0020      	movs	r0, r4
 8000a02:	f002 f8cd 	bl	8002ba0 <__clzsi2>
 8000a06:	2576      	movs	r5, #118	; 0x76
 8000a08:	1f43      	subs	r3, r0, #5
 8000a0a:	409c      	lsls	r4, r3
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	426d      	negs	r5, r5
 8000a10:	469a      	mov	sl, r3
 8000a12:	469b      	mov	fp, r3
 8000a14:	1a2d      	subs	r5, r5, r0
 8000a16:	e741      	b.n	800089c <__aeabi_fmul+0x30>
 8000a18:	2480      	movs	r4, #128	; 0x80
 8000a1a:	2700      	movs	r7, #0
 8000a1c:	20ff      	movs	r0, #255	; 0xff
 8000a1e:	03e4      	lsls	r4, r4, #15
 8000a20:	e770      	b.n	8000904 <__aeabi_fmul+0x98>
 8000a22:	2301      	movs	r3, #1
 8000a24:	1a1b      	subs	r3, r3, r0
 8000a26:	2b1b      	cmp	r3, #27
 8000a28:	dd00      	ble.n	8000a2c <__aeabi_fmul+0x1c0>
 8000a2a:	e769      	b.n	8000900 <__aeabi_fmul+0x94>
 8000a2c:	319e      	adds	r1, #158	; 0x9e
 8000a2e:	0020      	movs	r0, r4
 8000a30:	408c      	lsls	r4, r1
 8000a32:	40d8      	lsrs	r0, r3
 8000a34:	1e63      	subs	r3, r4, #1
 8000a36:	419c      	sbcs	r4, r3
 8000a38:	4304      	orrs	r4, r0
 8000a3a:	0763      	lsls	r3, r4, #29
 8000a3c:	d004      	beq.n	8000a48 <__aeabi_fmul+0x1dc>
 8000a3e:	230f      	movs	r3, #15
 8000a40:	4023      	ands	r3, r4
 8000a42:	2b04      	cmp	r3, #4
 8000a44:	d000      	beq.n	8000a48 <__aeabi_fmul+0x1dc>
 8000a46:	3404      	adds	r4, #4
 8000a48:	0163      	lsls	r3, r4, #5
 8000a4a:	d51a      	bpl.n	8000a82 <__aeabi_fmul+0x216>
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	2400      	movs	r4, #0
 8000a50:	e758      	b.n	8000904 <__aeabi_fmul+0x98>
 8000a52:	2080      	movs	r0, #128	; 0x80
 8000a54:	03c0      	lsls	r0, r0, #15
 8000a56:	4204      	tst	r4, r0
 8000a58:	d009      	beq.n	8000a6e <__aeabi_fmul+0x202>
 8000a5a:	464b      	mov	r3, r9
 8000a5c:	4203      	tst	r3, r0
 8000a5e:	d106      	bne.n	8000a6e <__aeabi_fmul+0x202>
 8000a60:	464c      	mov	r4, r9
 8000a62:	4304      	orrs	r4, r0
 8000a64:	0264      	lsls	r4, r4, #9
 8000a66:	4647      	mov	r7, r8
 8000a68:	20ff      	movs	r0, #255	; 0xff
 8000a6a:	0a64      	lsrs	r4, r4, #9
 8000a6c:	e74a      	b.n	8000904 <__aeabi_fmul+0x98>
 8000a6e:	2080      	movs	r0, #128	; 0x80
 8000a70:	03c0      	lsls	r0, r0, #15
 8000a72:	4304      	orrs	r4, r0
 8000a74:	0264      	lsls	r4, r4, #9
 8000a76:	0037      	movs	r7, r6
 8000a78:	20ff      	movs	r0, #255	; 0xff
 8000a7a:	0a64      	lsrs	r4, r4, #9
 8000a7c:	e742      	b.n	8000904 <__aeabi_fmul+0x98>
 8000a7e:	0029      	movs	r1, r5
 8000a80:	e78e      	b.n	80009a0 <__aeabi_fmul+0x134>
 8000a82:	01a4      	lsls	r4, r4, #6
 8000a84:	2000      	movs	r0, #0
 8000a86:	0a64      	lsrs	r4, r4, #9
 8000a88:	e73c      	b.n	8000904 <__aeabi_fmul+0x98>
 8000a8a:	2080      	movs	r0, #128	; 0x80
 8000a8c:	03c0      	lsls	r0, r0, #15
 8000a8e:	4304      	orrs	r4, r0
 8000a90:	0264      	lsls	r4, r4, #9
 8000a92:	20ff      	movs	r0, #255	; 0xff
 8000a94:	0a64      	lsrs	r4, r4, #9
 8000a96:	e735      	b.n	8000904 <__aeabi_fmul+0x98>
 8000a98:	0800bfa8 	.word	0x0800bfa8
 8000a9c:	f7ffffff 	.word	0xf7ffffff

08000aa0 <__aeabi_fsub>:
 8000aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aa2:	4646      	mov	r6, r8
 8000aa4:	46d6      	mov	lr, sl
 8000aa6:	464f      	mov	r7, r9
 8000aa8:	0243      	lsls	r3, r0, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	00da      	lsls	r2, r3, #3
 8000aae:	4694      	mov	ip, r2
 8000ab0:	024a      	lsls	r2, r1, #9
 8000ab2:	b5c0      	push	{r6, r7, lr}
 8000ab4:	0044      	lsls	r4, r0, #1
 8000ab6:	0a56      	lsrs	r6, r2, #9
 8000ab8:	1c05      	adds	r5, r0, #0
 8000aba:	46b0      	mov	r8, r6
 8000abc:	0e24      	lsrs	r4, r4, #24
 8000abe:	004e      	lsls	r6, r1, #1
 8000ac0:	0992      	lsrs	r2, r2, #6
 8000ac2:	001f      	movs	r7, r3
 8000ac4:	0020      	movs	r0, r4
 8000ac6:	4692      	mov	sl, r2
 8000ac8:	0fed      	lsrs	r5, r5, #31
 8000aca:	0e36      	lsrs	r6, r6, #24
 8000acc:	0fc9      	lsrs	r1, r1, #31
 8000ace:	2eff      	cmp	r6, #255	; 0xff
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_fsub+0x34>
 8000ad2:	e07f      	b.n	8000bd4 <__aeabi_fsub+0x134>
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	4051      	eors	r1, r2
 8000ad8:	428d      	cmp	r5, r1
 8000ada:	d051      	beq.n	8000b80 <__aeabi_fsub+0xe0>
 8000adc:	1ba2      	subs	r2, r4, r6
 8000ade:	4691      	mov	r9, r2
 8000ae0:	2a00      	cmp	r2, #0
 8000ae2:	dc00      	bgt.n	8000ae6 <__aeabi_fsub+0x46>
 8000ae4:	e07e      	b.n	8000be4 <__aeabi_fsub+0x144>
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	d100      	bne.n	8000aec <__aeabi_fsub+0x4c>
 8000aea:	e099      	b.n	8000c20 <__aeabi_fsub+0x180>
 8000aec:	2cff      	cmp	r4, #255	; 0xff
 8000aee:	d100      	bne.n	8000af2 <__aeabi_fsub+0x52>
 8000af0:	e08c      	b.n	8000c0c <__aeabi_fsub+0x16c>
 8000af2:	2380      	movs	r3, #128	; 0x80
 8000af4:	4652      	mov	r2, sl
 8000af6:	04db      	lsls	r3, r3, #19
 8000af8:	431a      	orrs	r2, r3
 8000afa:	4692      	mov	sl, r2
 8000afc:	464a      	mov	r2, r9
 8000afe:	2301      	movs	r3, #1
 8000b00:	2a1b      	cmp	r2, #27
 8000b02:	dc08      	bgt.n	8000b16 <__aeabi_fsub+0x76>
 8000b04:	4653      	mov	r3, sl
 8000b06:	2120      	movs	r1, #32
 8000b08:	40d3      	lsrs	r3, r2
 8000b0a:	1a89      	subs	r1, r1, r2
 8000b0c:	4652      	mov	r2, sl
 8000b0e:	408a      	lsls	r2, r1
 8000b10:	1e51      	subs	r1, r2, #1
 8000b12:	418a      	sbcs	r2, r1
 8000b14:	4313      	orrs	r3, r2
 8000b16:	4662      	mov	r2, ip
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	015a      	lsls	r2, r3, #5
 8000b1c:	d400      	bmi.n	8000b20 <__aeabi_fsub+0x80>
 8000b1e:	e0f3      	b.n	8000d08 <__aeabi_fsub+0x268>
 8000b20:	019b      	lsls	r3, r3, #6
 8000b22:	099e      	lsrs	r6, r3, #6
 8000b24:	0030      	movs	r0, r6
 8000b26:	f002 f83b 	bl	8002ba0 <__clzsi2>
 8000b2a:	3805      	subs	r0, #5
 8000b2c:	4086      	lsls	r6, r0
 8000b2e:	4284      	cmp	r4, r0
 8000b30:	dd00      	ble.n	8000b34 <__aeabi_fsub+0x94>
 8000b32:	e0f7      	b.n	8000d24 <__aeabi_fsub+0x284>
 8000b34:	0032      	movs	r2, r6
 8000b36:	1b04      	subs	r4, r0, r4
 8000b38:	2020      	movs	r0, #32
 8000b3a:	3401      	adds	r4, #1
 8000b3c:	40e2      	lsrs	r2, r4
 8000b3e:	1b04      	subs	r4, r0, r4
 8000b40:	40a6      	lsls	r6, r4
 8000b42:	0033      	movs	r3, r6
 8000b44:	1e5e      	subs	r6, r3, #1
 8000b46:	41b3      	sbcs	r3, r6
 8000b48:	2400      	movs	r4, #0
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	075a      	lsls	r2, r3, #29
 8000b4e:	d004      	beq.n	8000b5a <__aeabi_fsub+0xba>
 8000b50:	220f      	movs	r2, #15
 8000b52:	401a      	ands	r2, r3
 8000b54:	2a04      	cmp	r2, #4
 8000b56:	d000      	beq.n	8000b5a <__aeabi_fsub+0xba>
 8000b58:	3304      	adds	r3, #4
 8000b5a:	015a      	lsls	r2, r3, #5
 8000b5c:	d400      	bmi.n	8000b60 <__aeabi_fsub+0xc0>
 8000b5e:	e0d6      	b.n	8000d0e <__aeabi_fsub+0x26e>
 8000b60:	1c62      	adds	r2, r4, #1
 8000b62:	2cfe      	cmp	r4, #254	; 0xfe
 8000b64:	d100      	bne.n	8000b68 <__aeabi_fsub+0xc8>
 8000b66:	e0da      	b.n	8000d1e <__aeabi_fsub+0x27e>
 8000b68:	019b      	lsls	r3, r3, #6
 8000b6a:	0a5f      	lsrs	r7, r3, #9
 8000b6c:	b2d0      	uxtb	r0, r2
 8000b6e:	05c0      	lsls	r0, r0, #23
 8000b70:	4338      	orrs	r0, r7
 8000b72:	07ed      	lsls	r5, r5, #31
 8000b74:	4328      	orrs	r0, r5
 8000b76:	bce0      	pop	{r5, r6, r7}
 8000b78:	46ba      	mov	sl, r7
 8000b7a:	46b1      	mov	r9, r6
 8000b7c:	46a8      	mov	r8, r5
 8000b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b80:	1ba2      	subs	r2, r4, r6
 8000b82:	4691      	mov	r9, r2
 8000b84:	2a00      	cmp	r2, #0
 8000b86:	dd63      	ble.n	8000c50 <__aeabi_fsub+0x1b0>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fsub+0xee>
 8000b8c:	e099      	b.n	8000cc2 <__aeabi_fsub+0x222>
 8000b8e:	2cff      	cmp	r4, #255	; 0xff
 8000b90:	d03c      	beq.n	8000c0c <__aeabi_fsub+0x16c>
 8000b92:	2380      	movs	r3, #128	; 0x80
 8000b94:	4652      	mov	r2, sl
 8000b96:	04db      	lsls	r3, r3, #19
 8000b98:	431a      	orrs	r2, r3
 8000b9a:	4692      	mov	sl, r2
 8000b9c:	464a      	mov	r2, r9
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	2a1b      	cmp	r2, #27
 8000ba2:	dc08      	bgt.n	8000bb6 <__aeabi_fsub+0x116>
 8000ba4:	4653      	mov	r3, sl
 8000ba6:	2120      	movs	r1, #32
 8000ba8:	40d3      	lsrs	r3, r2
 8000baa:	1a89      	subs	r1, r1, r2
 8000bac:	4652      	mov	r2, sl
 8000bae:	408a      	lsls	r2, r1
 8000bb0:	1e51      	subs	r1, r2, #1
 8000bb2:	418a      	sbcs	r2, r1
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	4463      	add	r3, ip
 8000bb8:	015a      	lsls	r2, r3, #5
 8000bba:	d400      	bmi.n	8000bbe <__aeabi_fsub+0x11e>
 8000bbc:	e0a4      	b.n	8000d08 <__aeabi_fsub+0x268>
 8000bbe:	3401      	adds	r4, #1
 8000bc0:	2cff      	cmp	r4, #255	; 0xff
 8000bc2:	d100      	bne.n	8000bc6 <__aeabi_fsub+0x126>
 8000bc4:	e0ab      	b.n	8000d1e <__aeabi_fsub+0x27e>
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4997      	ldr	r1, [pc, #604]	; (8000e28 <__aeabi_fsub+0x388>)
 8000bca:	401a      	ands	r2, r3
 8000bcc:	085b      	lsrs	r3, r3, #1
 8000bce:	400b      	ands	r3, r1
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	e7bb      	b.n	8000b4c <__aeabi_fsub+0xac>
 8000bd4:	2a00      	cmp	r2, #0
 8000bd6:	d032      	beq.n	8000c3e <__aeabi_fsub+0x19e>
 8000bd8:	428d      	cmp	r5, r1
 8000bda:	d035      	beq.n	8000c48 <__aeabi_fsub+0x1a8>
 8000bdc:	22ff      	movs	r2, #255	; 0xff
 8000bde:	4252      	negs	r2, r2
 8000be0:	4691      	mov	r9, r2
 8000be2:	44a1      	add	r9, r4
 8000be4:	464a      	mov	r2, r9
 8000be6:	2a00      	cmp	r2, #0
 8000be8:	d051      	beq.n	8000c8e <__aeabi_fsub+0x1ee>
 8000bea:	1b30      	subs	r0, r6, r4
 8000bec:	2c00      	cmp	r4, #0
 8000bee:	d000      	beq.n	8000bf2 <__aeabi_fsub+0x152>
 8000bf0:	e09c      	b.n	8000d2c <__aeabi_fsub+0x28c>
 8000bf2:	4663      	mov	r3, ip
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d100      	bne.n	8000bfa <__aeabi_fsub+0x15a>
 8000bf8:	e0df      	b.n	8000dba <__aeabi_fsub+0x31a>
 8000bfa:	3801      	subs	r0, #1
 8000bfc:	2800      	cmp	r0, #0
 8000bfe:	d100      	bne.n	8000c02 <__aeabi_fsub+0x162>
 8000c00:	e0f7      	b.n	8000df2 <__aeabi_fsub+0x352>
 8000c02:	2eff      	cmp	r6, #255	; 0xff
 8000c04:	d000      	beq.n	8000c08 <__aeabi_fsub+0x168>
 8000c06:	e099      	b.n	8000d3c <__aeabi_fsub+0x29c>
 8000c08:	000d      	movs	r5, r1
 8000c0a:	4643      	mov	r3, r8
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d100      	bne.n	8000c12 <__aeabi_fsub+0x172>
 8000c10:	e085      	b.n	8000d1e <__aeabi_fsub+0x27e>
 8000c12:	2780      	movs	r7, #128	; 0x80
 8000c14:	03ff      	lsls	r7, r7, #15
 8000c16:	431f      	orrs	r7, r3
 8000c18:	027f      	lsls	r7, r7, #9
 8000c1a:	20ff      	movs	r0, #255	; 0xff
 8000c1c:	0a7f      	lsrs	r7, r7, #9
 8000c1e:	e7a6      	b.n	8000b6e <__aeabi_fsub+0xce>
 8000c20:	4652      	mov	r2, sl
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	d074      	beq.n	8000d10 <__aeabi_fsub+0x270>
 8000c26:	2201      	movs	r2, #1
 8000c28:	4252      	negs	r2, r2
 8000c2a:	4690      	mov	r8, r2
 8000c2c:	44c1      	add	r9, r8
 8000c2e:	464a      	mov	r2, r9
 8000c30:	2a00      	cmp	r2, #0
 8000c32:	d100      	bne.n	8000c36 <__aeabi_fsub+0x196>
 8000c34:	e0c8      	b.n	8000dc8 <__aeabi_fsub+0x328>
 8000c36:	2cff      	cmp	r4, #255	; 0xff
 8000c38:	d000      	beq.n	8000c3c <__aeabi_fsub+0x19c>
 8000c3a:	e75f      	b.n	8000afc <__aeabi_fsub+0x5c>
 8000c3c:	e7e6      	b.n	8000c0c <__aeabi_fsub+0x16c>
 8000c3e:	2201      	movs	r2, #1
 8000c40:	4051      	eors	r1, r2
 8000c42:	42a9      	cmp	r1, r5
 8000c44:	d000      	beq.n	8000c48 <__aeabi_fsub+0x1a8>
 8000c46:	e749      	b.n	8000adc <__aeabi_fsub+0x3c>
 8000c48:	22ff      	movs	r2, #255	; 0xff
 8000c4a:	4252      	negs	r2, r2
 8000c4c:	4691      	mov	r9, r2
 8000c4e:	44a1      	add	r9, r4
 8000c50:	464a      	mov	r2, r9
 8000c52:	2a00      	cmp	r2, #0
 8000c54:	d043      	beq.n	8000cde <__aeabi_fsub+0x23e>
 8000c56:	1b31      	subs	r1, r6, r4
 8000c58:	2c00      	cmp	r4, #0
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_fsub+0x1be>
 8000c5c:	e08c      	b.n	8000d78 <__aeabi_fsub+0x2d8>
 8000c5e:	2eff      	cmp	r6, #255	; 0xff
 8000c60:	d100      	bne.n	8000c64 <__aeabi_fsub+0x1c4>
 8000c62:	e092      	b.n	8000d8a <__aeabi_fsub+0x2ea>
 8000c64:	2380      	movs	r3, #128	; 0x80
 8000c66:	4662      	mov	r2, ip
 8000c68:	04db      	lsls	r3, r3, #19
 8000c6a:	431a      	orrs	r2, r3
 8000c6c:	4694      	mov	ip, r2
 8000c6e:	2301      	movs	r3, #1
 8000c70:	291b      	cmp	r1, #27
 8000c72:	dc09      	bgt.n	8000c88 <__aeabi_fsub+0x1e8>
 8000c74:	2020      	movs	r0, #32
 8000c76:	4663      	mov	r3, ip
 8000c78:	4662      	mov	r2, ip
 8000c7a:	40cb      	lsrs	r3, r1
 8000c7c:	1a41      	subs	r1, r0, r1
 8000c7e:	408a      	lsls	r2, r1
 8000c80:	0011      	movs	r1, r2
 8000c82:	1e48      	subs	r0, r1, #1
 8000c84:	4181      	sbcs	r1, r0
 8000c86:	430b      	orrs	r3, r1
 8000c88:	0034      	movs	r4, r6
 8000c8a:	4453      	add	r3, sl
 8000c8c:	e794      	b.n	8000bb8 <__aeabi_fsub+0x118>
 8000c8e:	22fe      	movs	r2, #254	; 0xfe
 8000c90:	1c66      	adds	r6, r4, #1
 8000c92:	4232      	tst	r2, r6
 8000c94:	d164      	bne.n	8000d60 <__aeabi_fsub+0x2c0>
 8000c96:	2c00      	cmp	r4, #0
 8000c98:	d000      	beq.n	8000c9c <__aeabi_fsub+0x1fc>
 8000c9a:	e082      	b.n	8000da2 <__aeabi_fsub+0x302>
 8000c9c:	4663      	mov	r3, ip
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_fsub+0x204>
 8000ca2:	e0ab      	b.n	8000dfc <__aeabi_fsub+0x35c>
 8000ca4:	4653      	mov	r3, sl
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d100      	bne.n	8000cac <__aeabi_fsub+0x20c>
 8000caa:	e760      	b.n	8000b6e <__aeabi_fsub+0xce>
 8000cac:	4663      	mov	r3, ip
 8000cae:	4652      	mov	r2, sl
 8000cb0:	1a9b      	subs	r3, r3, r2
 8000cb2:	015a      	lsls	r2, r3, #5
 8000cb4:	d400      	bmi.n	8000cb8 <__aeabi_fsub+0x218>
 8000cb6:	e0aa      	b.n	8000e0e <__aeabi_fsub+0x36e>
 8000cb8:	4663      	mov	r3, ip
 8000cba:	4652      	mov	r2, sl
 8000cbc:	000d      	movs	r5, r1
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	e744      	b.n	8000b4c <__aeabi_fsub+0xac>
 8000cc2:	4652      	mov	r2, sl
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	d023      	beq.n	8000d10 <__aeabi_fsub+0x270>
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4252      	negs	r2, r2
 8000ccc:	4690      	mov	r8, r2
 8000cce:	44c1      	add	r9, r8
 8000cd0:	464a      	mov	r2, r9
 8000cd2:	2a00      	cmp	r2, #0
 8000cd4:	d075      	beq.n	8000dc2 <__aeabi_fsub+0x322>
 8000cd6:	2cff      	cmp	r4, #255	; 0xff
 8000cd8:	d000      	beq.n	8000cdc <__aeabi_fsub+0x23c>
 8000cda:	e75f      	b.n	8000b9c <__aeabi_fsub+0xfc>
 8000cdc:	e796      	b.n	8000c0c <__aeabi_fsub+0x16c>
 8000cde:	26fe      	movs	r6, #254	; 0xfe
 8000ce0:	3401      	adds	r4, #1
 8000ce2:	4226      	tst	r6, r4
 8000ce4:	d153      	bne.n	8000d8e <__aeabi_fsub+0x2ee>
 8000ce6:	2800      	cmp	r0, #0
 8000ce8:	d172      	bne.n	8000dd0 <__aeabi_fsub+0x330>
 8000cea:	4663      	mov	r3, ip
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d100      	bne.n	8000cf2 <__aeabi_fsub+0x252>
 8000cf0:	e093      	b.n	8000e1a <__aeabi_fsub+0x37a>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d100      	bne.n	8000cfa <__aeabi_fsub+0x25a>
 8000cf8:	e739      	b.n	8000b6e <__aeabi_fsub+0xce>
 8000cfa:	4463      	add	r3, ip
 8000cfc:	2400      	movs	r4, #0
 8000cfe:	015a      	lsls	r2, r3, #5
 8000d00:	d502      	bpl.n	8000d08 <__aeabi_fsub+0x268>
 8000d02:	4a4a      	ldr	r2, [pc, #296]	; (8000e2c <__aeabi_fsub+0x38c>)
 8000d04:	3401      	adds	r4, #1
 8000d06:	4013      	ands	r3, r2
 8000d08:	075a      	lsls	r2, r3, #29
 8000d0a:	d000      	beq.n	8000d0e <__aeabi_fsub+0x26e>
 8000d0c:	e720      	b.n	8000b50 <__aeabi_fsub+0xb0>
 8000d0e:	08db      	lsrs	r3, r3, #3
 8000d10:	2cff      	cmp	r4, #255	; 0xff
 8000d12:	d100      	bne.n	8000d16 <__aeabi_fsub+0x276>
 8000d14:	e77a      	b.n	8000c0c <__aeabi_fsub+0x16c>
 8000d16:	025b      	lsls	r3, r3, #9
 8000d18:	0a5f      	lsrs	r7, r3, #9
 8000d1a:	b2e0      	uxtb	r0, r4
 8000d1c:	e727      	b.n	8000b6e <__aeabi_fsub+0xce>
 8000d1e:	20ff      	movs	r0, #255	; 0xff
 8000d20:	2700      	movs	r7, #0
 8000d22:	e724      	b.n	8000b6e <__aeabi_fsub+0xce>
 8000d24:	4b41      	ldr	r3, [pc, #260]	; (8000e2c <__aeabi_fsub+0x38c>)
 8000d26:	1a24      	subs	r4, r4, r0
 8000d28:	4033      	ands	r3, r6
 8000d2a:	e70f      	b.n	8000b4c <__aeabi_fsub+0xac>
 8000d2c:	2eff      	cmp	r6, #255	; 0xff
 8000d2e:	d100      	bne.n	8000d32 <__aeabi_fsub+0x292>
 8000d30:	e76a      	b.n	8000c08 <__aeabi_fsub+0x168>
 8000d32:	2380      	movs	r3, #128	; 0x80
 8000d34:	4662      	mov	r2, ip
 8000d36:	04db      	lsls	r3, r3, #19
 8000d38:	431a      	orrs	r2, r3
 8000d3a:	4694      	mov	ip, r2
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	281b      	cmp	r0, #27
 8000d40:	dc09      	bgt.n	8000d56 <__aeabi_fsub+0x2b6>
 8000d42:	2420      	movs	r4, #32
 8000d44:	4663      	mov	r3, ip
 8000d46:	4662      	mov	r2, ip
 8000d48:	40c3      	lsrs	r3, r0
 8000d4a:	1a20      	subs	r0, r4, r0
 8000d4c:	4082      	lsls	r2, r0
 8000d4e:	0010      	movs	r0, r2
 8000d50:	1e44      	subs	r4, r0, #1
 8000d52:	41a0      	sbcs	r0, r4
 8000d54:	4303      	orrs	r3, r0
 8000d56:	4652      	mov	r2, sl
 8000d58:	000d      	movs	r5, r1
 8000d5a:	0034      	movs	r4, r6
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	e6dc      	b.n	8000b1a <__aeabi_fsub+0x7a>
 8000d60:	4663      	mov	r3, ip
 8000d62:	4652      	mov	r2, sl
 8000d64:	1a9e      	subs	r6, r3, r2
 8000d66:	0173      	lsls	r3, r6, #5
 8000d68:	d417      	bmi.n	8000d9a <__aeabi_fsub+0x2fa>
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	d000      	beq.n	8000d70 <__aeabi_fsub+0x2d0>
 8000d6e:	e6d9      	b.n	8000b24 <__aeabi_fsub+0x84>
 8000d70:	2500      	movs	r5, #0
 8000d72:	2000      	movs	r0, #0
 8000d74:	2700      	movs	r7, #0
 8000d76:	e6fa      	b.n	8000b6e <__aeabi_fsub+0xce>
 8000d78:	4663      	mov	r3, ip
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d044      	beq.n	8000e08 <__aeabi_fsub+0x368>
 8000d7e:	3901      	subs	r1, #1
 8000d80:	2900      	cmp	r1, #0
 8000d82:	d04c      	beq.n	8000e1e <__aeabi_fsub+0x37e>
 8000d84:	2eff      	cmp	r6, #255	; 0xff
 8000d86:	d000      	beq.n	8000d8a <__aeabi_fsub+0x2ea>
 8000d88:	e771      	b.n	8000c6e <__aeabi_fsub+0x1ce>
 8000d8a:	4643      	mov	r3, r8
 8000d8c:	e73e      	b.n	8000c0c <__aeabi_fsub+0x16c>
 8000d8e:	2cff      	cmp	r4, #255	; 0xff
 8000d90:	d0c5      	beq.n	8000d1e <__aeabi_fsub+0x27e>
 8000d92:	4652      	mov	r2, sl
 8000d94:	4462      	add	r2, ip
 8000d96:	0853      	lsrs	r3, r2, #1
 8000d98:	e7b6      	b.n	8000d08 <__aeabi_fsub+0x268>
 8000d9a:	4663      	mov	r3, ip
 8000d9c:	000d      	movs	r5, r1
 8000d9e:	1ad6      	subs	r6, r2, r3
 8000da0:	e6c0      	b.n	8000b24 <__aeabi_fsub+0x84>
 8000da2:	4662      	mov	r2, ip
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	d116      	bne.n	8000dd6 <__aeabi_fsub+0x336>
 8000da8:	4653      	mov	r3, sl
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d000      	beq.n	8000db0 <__aeabi_fsub+0x310>
 8000dae:	e72b      	b.n	8000c08 <__aeabi_fsub+0x168>
 8000db0:	2780      	movs	r7, #128	; 0x80
 8000db2:	2500      	movs	r5, #0
 8000db4:	20ff      	movs	r0, #255	; 0xff
 8000db6:	03ff      	lsls	r7, r7, #15
 8000db8:	e6d9      	b.n	8000b6e <__aeabi_fsub+0xce>
 8000dba:	000d      	movs	r5, r1
 8000dbc:	4643      	mov	r3, r8
 8000dbe:	0034      	movs	r4, r6
 8000dc0:	e7a6      	b.n	8000d10 <__aeabi_fsub+0x270>
 8000dc2:	4653      	mov	r3, sl
 8000dc4:	4463      	add	r3, ip
 8000dc6:	e6f7      	b.n	8000bb8 <__aeabi_fsub+0x118>
 8000dc8:	4663      	mov	r3, ip
 8000dca:	4652      	mov	r2, sl
 8000dcc:	1a9b      	subs	r3, r3, r2
 8000dce:	e6a4      	b.n	8000b1a <__aeabi_fsub+0x7a>
 8000dd0:	4662      	mov	r2, ip
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d0d9      	beq.n	8000d8a <__aeabi_fsub+0x2ea>
 8000dd6:	4652      	mov	r2, sl
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	d100      	bne.n	8000dde <__aeabi_fsub+0x33e>
 8000ddc:	e716      	b.n	8000c0c <__aeabi_fsub+0x16c>
 8000dde:	2280      	movs	r2, #128	; 0x80
 8000de0:	03d2      	lsls	r2, r2, #15
 8000de2:	4213      	tst	r3, r2
 8000de4:	d100      	bne.n	8000de8 <__aeabi_fsub+0x348>
 8000de6:	e711      	b.n	8000c0c <__aeabi_fsub+0x16c>
 8000de8:	4640      	mov	r0, r8
 8000dea:	4210      	tst	r0, r2
 8000dec:	d000      	beq.n	8000df0 <__aeabi_fsub+0x350>
 8000dee:	e70d      	b.n	8000c0c <__aeabi_fsub+0x16c>
 8000df0:	e70a      	b.n	8000c08 <__aeabi_fsub+0x168>
 8000df2:	4652      	mov	r2, sl
 8000df4:	000d      	movs	r5, r1
 8000df6:	0034      	movs	r4, r6
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	e68e      	b.n	8000b1a <__aeabi_fsub+0x7a>
 8000dfc:	4653      	mov	r3, sl
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d008      	beq.n	8000e14 <__aeabi_fsub+0x374>
 8000e02:	000d      	movs	r5, r1
 8000e04:	4647      	mov	r7, r8
 8000e06:	e6b2      	b.n	8000b6e <__aeabi_fsub+0xce>
 8000e08:	4643      	mov	r3, r8
 8000e0a:	0034      	movs	r4, r6
 8000e0c:	e780      	b.n	8000d10 <__aeabi_fsub+0x270>
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d000      	beq.n	8000e14 <__aeabi_fsub+0x374>
 8000e12:	e779      	b.n	8000d08 <__aeabi_fsub+0x268>
 8000e14:	2500      	movs	r5, #0
 8000e16:	2700      	movs	r7, #0
 8000e18:	e6a9      	b.n	8000b6e <__aeabi_fsub+0xce>
 8000e1a:	4647      	mov	r7, r8
 8000e1c:	e6a7      	b.n	8000b6e <__aeabi_fsub+0xce>
 8000e1e:	4653      	mov	r3, sl
 8000e20:	0034      	movs	r4, r6
 8000e22:	4463      	add	r3, ip
 8000e24:	e6c8      	b.n	8000bb8 <__aeabi_fsub+0x118>
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	7dffffff 	.word	0x7dffffff
 8000e2c:	fbffffff 	.word	0xfbffffff

08000e30 <__aeabi_f2iz>:
 8000e30:	0241      	lsls	r1, r0, #9
 8000e32:	0042      	lsls	r2, r0, #1
 8000e34:	0fc3      	lsrs	r3, r0, #31
 8000e36:	0a49      	lsrs	r1, r1, #9
 8000e38:	2000      	movs	r0, #0
 8000e3a:	0e12      	lsrs	r2, r2, #24
 8000e3c:	2a7e      	cmp	r2, #126	; 0x7e
 8000e3e:	d903      	bls.n	8000e48 <__aeabi_f2iz+0x18>
 8000e40:	2a9d      	cmp	r2, #157	; 0x9d
 8000e42:	d902      	bls.n	8000e4a <__aeabi_f2iz+0x1a>
 8000e44:	4a09      	ldr	r2, [pc, #36]	; (8000e6c <__aeabi_f2iz+0x3c>)
 8000e46:	1898      	adds	r0, r3, r2
 8000e48:	4770      	bx	lr
 8000e4a:	2080      	movs	r0, #128	; 0x80
 8000e4c:	0400      	lsls	r0, r0, #16
 8000e4e:	4301      	orrs	r1, r0
 8000e50:	2a95      	cmp	r2, #149	; 0x95
 8000e52:	dc07      	bgt.n	8000e64 <__aeabi_f2iz+0x34>
 8000e54:	2096      	movs	r0, #150	; 0x96
 8000e56:	1a82      	subs	r2, r0, r2
 8000e58:	40d1      	lsrs	r1, r2
 8000e5a:	4248      	negs	r0, r1
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d1f3      	bne.n	8000e48 <__aeabi_f2iz+0x18>
 8000e60:	0008      	movs	r0, r1
 8000e62:	e7f1      	b.n	8000e48 <__aeabi_f2iz+0x18>
 8000e64:	3a96      	subs	r2, #150	; 0x96
 8000e66:	4091      	lsls	r1, r2
 8000e68:	e7f7      	b.n	8000e5a <__aeabi_f2iz+0x2a>
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	7fffffff 	.word	0x7fffffff

08000e70 <__aeabi_i2f>:
 8000e70:	b570      	push	{r4, r5, r6, lr}
 8000e72:	2800      	cmp	r0, #0
 8000e74:	d013      	beq.n	8000e9e <__aeabi_i2f+0x2e>
 8000e76:	17c3      	asrs	r3, r0, #31
 8000e78:	18c5      	adds	r5, r0, r3
 8000e7a:	405d      	eors	r5, r3
 8000e7c:	0fc4      	lsrs	r4, r0, #31
 8000e7e:	0028      	movs	r0, r5
 8000e80:	f001 fe8e 	bl	8002ba0 <__clzsi2>
 8000e84:	239e      	movs	r3, #158	; 0x9e
 8000e86:	0001      	movs	r1, r0
 8000e88:	1a1b      	subs	r3, r3, r0
 8000e8a:	2b96      	cmp	r3, #150	; 0x96
 8000e8c:	dc0f      	bgt.n	8000eae <__aeabi_i2f+0x3e>
 8000e8e:	2808      	cmp	r0, #8
 8000e90:	dd01      	ble.n	8000e96 <__aeabi_i2f+0x26>
 8000e92:	3908      	subs	r1, #8
 8000e94:	408d      	lsls	r5, r1
 8000e96:	026d      	lsls	r5, r5, #9
 8000e98:	0a6d      	lsrs	r5, r5, #9
 8000e9a:	b2d8      	uxtb	r0, r3
 8000e9c:	e002      	b.n	8000ea4 <__aeabi_i2f+0x34>
 8000e9e:	2400      	movs	r4, #0
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	2500      	movs	r5, #0
 8000ea4:	05c0      	lsls	r0, r0, #23
 8000ea6:	4328      	orrs	r0, r5
 8000ea8:	07e4      	lsls	r4, r4, #31
 8000eaa:	4320      	orrs	r0, r4
 8000eac:	bd70      	pop	{r4, r5, r6, pc}
 8000eae:	2b99      	cmp	r3, #153	; 0x99
 8000eb0:	dd0b      	ble.n	8000eca <__aeabi_i2f+0x5a>
 8000eb2:	2205      	movs	r2, #5
 8000eb4:	002e      	movs	r6, r5
 8000eb6:	1a12      	subs	r2, r2, r0
 8000eb8:	40d6      	lsrs	r6, r2
 8000eba:	0002      	movs	r2, r0
 8000ebc:	321b      	adds	r2, #27
 8000ebe:	4095      	lsls	r5, r2
 8000ec0:	0028      	movs	r0, r5
 8000ec2:	1e45      	subs	r5, r0, #1
 8000ec4:	41a8      	sbcs	r0, r5
 8000ec6:	0035      	movs	r5, r6
 8000ec8:	4305      	orrs	r5, r0
 8000eca:	2905      	cmp	r1, #5
 8000ecc:	dd01      	ble.n	8000ed2 <__aeabi_i2f+0x62>
 8000ece:	1f4a      	subs	r2, r1, #5
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	002a      	movs	r2, r5
 8000ed4:	4e08      	ldr	r6, [pc, #32]	; (8000ef8 <__aeabi_i2f+0x88>)
 8000ed6:	4032      	ands	r2, r6
 8000ed8:	0768      	lsls	r0, r5, #29
 8000eda:	d009      	beq.n	8000ef0 <__aeabi_i2f+0x80>
 8000edc:	200f      	movs	r0, #15
 8000ede:	4028      	ands	r0, r5
 8000ee0:	2804      	cmp	r0, #4
 8000ee2:	d005      	beq.n	8000ef0 <__aeabi_i2f+0x80>
 8000ee4:	3204      	adds	r2, #4
 8000ee6:	0150      	lsls	r0, r2, #5
 8000ee8:	d502      	bpl.n	8000ef0 <__aeabi_i2f+0x80>
 8000eea:	239f      	movs	r3, #159	; 0x9f
 8000eec:	4032      	ands	r2, r6
 8000eee:	1a5b      	subs	r3, r3, r1
 8000ef0:	0192      	lsls	r2, r2, #6
 8000ef2:	0a55      	lsrs	r5, r2, #9
 8000ef4:	b2d8      	uxtb	r0, r3
 8000ef6:	e7d5      	b.n	8000ea4 <__aeabi_i2f+0x34>
 8000ef8:	fbffffff 	.word	0xfbffffff

08000efc <__aeabi_dadd>:
 8000efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000efe:	464f      	mov	r7, r9
 8000f00:	46d6      	mov	lr, sl
 8000f02:	4646      	mov	r6, r8
 8000f04:	000d      	movs	r5, r1
 8000f06:	0001      	movs	r1, r0
 8000f08:	0018      	movs	r0, r3
 8000f0a:	b5c0      	push	{r6, r7, lr}
 8000f0c:	0017      	movs	r7, r2
 8000f0e:	032b      	lsls	r3, r5, #12
 8000f10:	0a5a      	lsrs	r2, r3, #9
 8000f12:	0f4b      	lsrs	r3, r1, #29
 8000f14:	4313      	orrs	r3, r2
 8000f16:	00ca      	lsls	r2, r1, #3
 8000f18:	4691      	mov	r9, r2
 8000f1a:	0302      	lsls	r2, r0, #12
 8000f1c:	006e      	lsls	r6, r5, #1
 8000f1e:	0041      	lsls	r1, r0, #1
 8000f20:	0a52      	lsrs	r2, r2, #9
 8000f22:	0fec      	lsrs	r4, r5, #31
 8000f24:	0f7d      	lsrs	r5, r7, #29
 8000f26:	4315      	orrs	r5, r2
 8000f28:	0d76      	lsrs	r6, r6, #21
 8000f2a:	0d49      	lsrs	r1, r1, #21
 8000f2c:	0fc0      	lsrs	r0, r0, #31
 8000f2e:	4682      	mov	sl, r0
 8000f30:	46ac      	mov	ip, r5
 8000f32:	00ff      	lsls	r7, r7, #3
 8000f34:	1a72      	subs	r2, r6, r1
 8000f36:	4284      	cmp	r4, r0
 8000f38:	d100      	bne.n	8000f3c <__aeabi_dadd+0x40>
 8000f3a:	e098      	b.n	800106e <__aeabi_dadd+0x172>
 8000f3c:	2a00      	cmp	r2, #0
 8000f3e:	dc00      	bgt.n	8000f42 <__aeabi_dadd+0x46>
 8000f40:	e081      	b.n	8001046 <__aeabi_dadd+0x14a>
 8000f42:	2900      	cmp	r1, #0
 8000f44:	d100      	bne.n	8000f48 <__aeabi_dadd+0x4c>
 8000f46:	e0b6      	b.n	80010b6 <__aeabi_dadd+0x1ba>
 8000f48:	49c9      	ldr	r1, [pc, #804]	; (8001270 <__aeabi_dadd+0x374>)
 8000f4a:	428e      	cmp	r6, r1
 8000f4c:	d100      	bne.n	8000f50 <__aeabi_dadd+0x54>
 8000f4e:	e172      	b.n	8001236 <__aeabi_dadd+0x33a>
 8000f50:	2180      	movs	r1, #128	; 0x80
 8000f52:	0028      	movs	r0, r5
 8000f54:	0409      	lsls	r1, r1, #16
 8000f56:	4308      	orrs	r0, r1
 8000f58:	4684      	mov	ip, r0
 8000f5a:	2a38      	cmp	r2, #56	; 0x38
 8000f5c:	dd00      	ble.n	8000f60 <__aeabi_dadd+0x64>
 8000f5e:	e15e      	b.n	800121e <__aeabi_dadd+0x322>
 8000f60:	2a1f      	cmp	r2, #31
 8000f62:	dd00      	ble.n	8000f66 <__aeabi_dadd+0x6a>
 8000f64:	e1ee      	b.n	8001344 <__aeabi_dadd+0x448>
 8000f66:	2020      	movs	r0, #32
 8000f68:	0039      	movs	r1, r7
 8000f6a:	4665      	mov	r5, ip
 8000f6c:	1a80      	subs	r0, r0, r2
 8000f6e:	4087      	lsls	r7, r0
 8000f70:	40d1      	lsrs	r1, r2
 8000f72:	4085      	lsls	r5, r0
 8000f74:	430d      	orrs	r5, r1
 8000f76:	0039      	movs	r1, r7
 8000f78:	1e4f      	subs	r7, r1, #1
 8000f7a:	41b9      	sbcs	r1, r7
 8000f7c:	4667      	mov	r7, ip
 8000f7e:	40d7      	lsrs	r7, r2
 8000f80:	4329      	orrs	r1, r5
 8000f82:	1bdb      	subs	r3, r3, r7
 8000f84:	464a      	mov	r2, r9
 8000f86:	1a55      	subs	r5, r2, r1
 8000f88:	45a9      	cmp	r9, r5
 8000f8a:	4189      	sbcs	r1, r1
 8000f8c:	4249      	negs	r1, r1
 8000f8e:	1a5b      	subs	r3, r3, r1
 8000f90:	4698      	mov	r8, r3
 8000f92:	4643      	mov	r3, r8
 8000f94:	021b      	lsls	r3, r3, #8
 8000f96:	d400      	bmi.n	8000f9a <__aeabi_dadd+0x9e>
 8000f98:	e0cc      	b.n	8001134 <__aeabi_dadd+0x238>
 8000f9a:	4643      	mov	r3, r8
 8000f9c:	025b      	lsls	r3, r3, #9
 8000f9e:	0a5b      	lsrs	r3, r3, #9
 8000fa0:	4698      	mov	r8, r3
 8000fa2:	4643      	mov	r3, r8
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d100      	bne.n	8000faa <__aeabi_dadd+0xae>
 8000fa8:	e12c      	b.n	8001204 <__aeabi_dadd+0x308>
 8000faa:	4640      	mov	r0, r8
 8000fac:	f001 fdf8 	bl	8002ba0 <__clzsi2>
 8000fb0:	0001      	movs	r1, r0
 8000fb2:	3908      	subs	r1, #8
 8000fb4:	2220      	movs	r2, #32
 8000fb6:	0028      	movs	r0, r5
 8000fb8:	4643      	mov	r3, r8
 8000fba:	1a52      	subs	r2, r2, r1
 8000fbc:	408b      	lsls	r3, r1
 8000fbe:	40d0      	lsrs	r0, r2
 8000fc0:	408d      	lsls	r5, r1
 8000fc2:	4303      	orrs	r3, r0
 8000fc4:	428e      	cmp	r6, r1
 8000fc6:	dd00      	ble.n	8000fca <__aeabi_dadd+0xce>
 8000fc8:	e117      	b.n	80011fa <__aeabi_dadd+0x2fe>
 8000fca:	1b8e      	subs	r6, r1, r6
 8000fcc:	1c72      	adds	r2, r6, #1
 8000fce:	2a1f      	cmp	r2, #31
 8000fd0:	dd00      	ble.n	8000fd4 <__aeabi_dadd+0xd8>
 8000fd2:	e1a7      	b.n	8001324 <__aeabi_dadd+0x428>
 8000fd4:	2120      	movs	r1, #32
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	002e      	movs	r6, r5
 8000fda:	1a89      	subs	r1, r1, r2
 8000fdc:	408d      	lsls	r5, r1
 8000fde:	4088      	lsls	r0, r1
 8000fe0:	40d6      	lsrs	r6, r2
 8000fe2:	40d3      	lsrs	r3, r2
 8000fe4:	1e69      	subs	r1, r5, #1
 8000fe6:	418d      	sbcs	r5, r1
 8000fe8:	4330      	orrs	r0, r6
 8000fea:	4698      	mov	r8, r3
 8000fec:	2600      	movs	r6, #0
 8000fee:	4305      	orrs	r5, r0
 8000ff0:	076b      	lsls	r3, r5, #29
 8000ff2:	d009      	beq.n	8001008 <__aeabi_dadd+0x10c>
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	402b      	ands	r3, r5
 8000ff8:	2b04      	cmp	r3, #4
 8000ffa:	d005      	beq.n	8001008 <__aeabi_dadd+0x10c>
 8000ffc:	1d2b      	adds	r3, r5, #4
 8000ffe:	42ab      	cmp	r3, r5
 8001000:	41ad      	sbcs	r5, r5
 8001002:	426d      	negs	r5, r5
 8001004:	44a8      	add	r8, r5
 8001006:	001d      	movs	r5, r3
 8001008:	4643      	mov	r3, r8
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	d400      	bmi.n	8001010 <__aeabi_dadd+0x114>
 800100e:	e094      	b.n	800113a <__aeabi_dadd+0x23e>
 8001010:	4b97      	ldr	r3, [pc, #604]	; (8001270 <__aeabi_dadd+0x374>)
 8001012:	1c72      	adds	r2, r6, #1
 8001014:	429a      	cmp	r2, r3
 8001016:	d100      	bne.n	800101a <__aeabi_dadd+0x11e>
 8001018:	e09d      	b.n	8001156 <__aeabi_dadd+0x25a>
 800101a:	4641      	mov	r1, r8
 800101c:	4b95      	ldr	r3, [pc, #596]	; (8001274 <__aeabi_dadd+0x378>)
 800101e:	08ed      	lsrs	r5, r5, #3
 8001020:	4019      	ands	r1, r3
 8001022:	000b      	movs	r3, r1
 8001024:	0552      	lsls	r2, r2, #21
 8001026:	0749      	lsls	r1, r1, #29
 8001028:	025b      	lsls	r3, r3, #9
 800102a:	4329      	orrs	r1, r5
 800102c:	0b1b      	lsrs	r3, r3, #12
 800102e:	0d52      	lsrs	r2, r2, #21
 8001030:	0512      	lsls	r2, r2, #20
 8001032:	4313      	orrs	r3, r2
 8001034:	07e4      	lsls	r4, r4, #31
 8001036:	4323      	orrs	r3, r4
 8001038:	0008      	movs	r0, r1
 800103a:	0019      	movs	r1, r3
 800103c:	bce0      	pop	{r5, r6, r7}
 800103e:	46ba      	mov	sl, r7
 8001040:	46b1      	mov	r9, r6
 8001042:	46a8      	mov	r8, r5
 8001044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001046:	2a00      	cmp	r2, #0
 8001048:	d043      	beq.n	80010d2 <__aeabi_dadd+0x1d6>
 800104a:	1b8a      	subs	r2, r1, r6
 800104c:	2e00      	cmp	r6, #0
 800104e:	d000      	beq.n	8001052 <__aeabi_dadd+0x156>
 8001050:	e12a      	b.n	80012a8 <__aeabi_dadd+0x3ac>
 8001052:	464c      	mov	r4, r9
 8001054:	431c      	orrs	r4, r3
 8001056:	d100      	bne.n	800105a <__aeabi_dadd+0x15e>
 8001058:	e1d1      	b.n	80013fe <__aeabi_dadd+0x502>
 800105a:	1e54      	subs	r4, r2, #1
 800105c:	2a01      	cmp	r2, #1
 800105e:	d100      	bne.n	8001062 <__aeabi_dadd+0x166>
 8001060:	e21f      	b.n	80014a2 <__aeabi_dadd+0x5a6>
 8001062:	4d83      	ldr	r5, [pc, #524]	; (8001270 <__aeabi_dadd+0x374>)
 8001064:	42aa      	cmp	r2, r5
 8001066:	d100      	bne.n	800106a <__aeabi_dadd+0x16e>
 8001068:	e272      	b.n	8001550 <__aeabi_dadd+0x654>
 800106a:	0022      	movs	r2, r4
 800106c:	e123      	b.n	80012b6 <__aeabi_dadd+0x3ba>
 800106e:	2a00      	cmp	r2, #0
 8001070:	dc00      	bgt.n	8001074 <__aeabi_dadd+0x178>
 8001072:	e098      	b.n	80011a6 <__aeabi_dadd+0x2aa>
 8001074:	2900      	cmp	r1, #0
 8001076:	d042      	beq.n	80010fe <__aeabi_dadd+0x202>
 8001078:	497d      	ldr	r1, [pc, #500]	; (8001270 <__aeabi_dadd+0x374>)
 800107a:	428e      	cmp	r6, r1
 800107c:	d100      	bne.n	8001080 <__aeabi_dadd+0x184>
 800107e:	e0da      	b.n	8001236 <__aeabi_dadd+0x33a>
 8001080:	2180      	movs	r1, #128	; 0x80
 8001082:	0028      	movs	r0, r5
 8001084:	0409      	lsls	r1, r1, #16
 8001086:	4308      	orrs	r0, r1
 8001088:	4684      	mov	ip, r0
 800108a:	2a38      	cmp	r2, #56	; 0x38
 800108c:	dd00      	ble.n	8001090 <__aeabi_dadd+0x194>
 800108e:	e129      	b.n	80012e4 <__aeabi_dadd+0x3e8>
 8001090:	2a1f      	cmp	r2, #31
 8001092:	dc00      	bgt.n	8001096 <__aeabi_dadd+0x19a>
 8001094:	e187      	b.n	80013a6 <__aeabi_dadd+0x4aa>
 8001096:	0011      	movs	r1, r2
 8001098:	4665      	mov	r5, ip
 800109a:	3920      	subs	r1, #32
 800109c:	40cd      	lsrs	r5, r1
 800109e:	2a20      	cmp	r2, #32
 80010a0:	d004      	beq.n	80010ac <__aeabi_dadd+0x1b0>
 80010a2:	2040      	movs	r0, #64	; 0x40
 80010a4:	4661      	mov	r1, ip
 80010a6:	1a82      	subs	r2, r0, r2
 80010a8:	4091      	lsls	r1, r2
 80010aa:	430f      	orrs	r7, r1
 80010ac:	0039      	movs	r1, r7
 80010ae:	1e4f      	subs	r7, r1, #1
 80010b0:	41b9      	sbcs	r1, r7
 80010b2:	430d      	orrs	r5, r1
 80010b4:	e11b      	b.n	80012ee <__aeabi_dadd+0x3f2>
 80010b6:	0029      	movs	r1, r5
 80010b8:	4339      	orrs	r1, r7
 80010ba:	d100      	bne.n	80010be <__aeabi_dadd+0x1c2>
 80010bc:	e0b5      	b.n	800122a <__aeabi_dadd+0x32e>
 80010be:	1e51      	subs	r1, r2, #1
 80010c0:	2a01      	cmp	r2, #1
 80010c2:	d100      	bne.n	80010c6 <__aeabi_dadd+0x1ca>
 80010c4:	e1ab      	b.n	800141e <__aeabi_dadd+0x522>
 80010c6:	486a      	ldr	r0, [pc, #424]	; (8001270 <__aeabi_dadd+0x374>)
 80010c8:	4282      	cmp	r2, r0
 80010ca:	d100      	bne.n	80010ce <__aeabi_dadd+0x1d2>
 80010cc:	e1b2      	b.n	8001434 <__aeabi_dadd+0x538>
 80010ce:	000a      	movs	r2, r1
 80010d0:	e743      	b.n	8000f5a <__aeabi_dadd+0x5e>
 80010d2:	4969      	ldr	r1, [pc, #420]	; (8001278 <__aeabi_dadd+0x37c>)
 80010d4:	1c75      	adds	r5, r6, #1
 80010d6:	420d      	tst	r5, r1
 80010d8:	d000      	beq.n	80010dc <__aeabi_dadd+0x1e0>
 80010da:	e0cf      	b.n	800127c <__aeabi_dadd+0x380>
 80010dc:	2e00      	cmp	r6, #0
 80010de:	d000      	beq.n	80010e2 <__aeabi_dadd+0x1e6>
 80010e0:	e193      	b.n	800140a <__aeabi_dadd+0x50e>
 80010e2:	4649      	mov	r1, r9
 80010e4:	4319      	orrs	r1, r3
 80010e6:	d100      	bne.n	80010ea <__aeabi_dadd+0x1ee>
 80010e8:	e1d1      	b.n	800148e <__aeabi_dadd+0x592>
 80010ea:	4661      	mov	r1, ip
 80010ec:	4339      	orrs	r1, r7
 80010ee:	d000      	beq.n	80010f2 <__aeabi_dadd+0x1f6>
 80010f0:	e1e3      	b.n	80014ba <__aeabi_dadd+0x5be>
 80010f2:	4649      	mov	r1, r9
 80010f4:	0758      	lsls	r0, r3, #29
 80010f6:	08c9      	lsrs	r1, r1, #3
 80010f8:	4301      	orrs	r1, r0
 80010fa:	08db      	lsrs	r3, r3, #3
 80010fc:	e026      	b.n	800114c <__aeabi_dadd+0x250>
 80010fe:	0029      	movs	r1, r5
 8001100:	4339      	orrs	r1, r7
 8001102:	d100      	bne.n	8001106 <__aeabi_dadd+0x20a>
 8001104:	e091      	b.n	800122a <__aeabi_dadd+0x32e>
 8001106:	1e51      	subs	r1, r2, #1
 8001108:	2a01      	cmp	r2, #1
 800110a:	d005      	beq.n	8001118 <__aeabi_dadd+0x21c>
 800110c:	4858      	ldr	r0, [pc, #352]	; (8001270 <__aeabi_dadd+0x374>)
 800110e:	4282      	cmp	r2, r0
 8001110:	d100      	bne.n	8001114 <__aeabi_dadd+0x218>
 8001112:	e18f      	b.n	8001434 <__aeabi_dadd+0x538>
 8001114:	000a      	movs	r2, r1
 8001116:	e7b8      	b.n	800108a <__aeabi_dadd+0x18e>
 8001118:	003d      	movs	r5, r7
 800111a:	444d      	add	r5, r9
 800111c:	454d      	cmp	r5, r9
 800111e:	4189      	sbcs	r1, r1
 8001120:	4463      	add	r3, ip
 8001122:	4698      	mov	r8, r3
 8001124:	4249      	negs	r1, r1
 8001126:	4488      	add	r8, r1
 8001128:	4643      	mov	r3, r8
 800112a:	2602      	movs	r6, #2
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	d500      	bpl.n	8001132 <__aeabi_dadd+0x236>
 8001130:	e0eb      	b.n	800130a <__aeabi_dadd+0x40e>
 8001132:	3e01      	subs	r6, #1
 8001134:	076b      	lsls	r3, r5, #29
 8001136:	d000      	beq.n	800113a <__aeabi_dadd+0x23e>
 8001138:	e75c      	b.n	8000ff4 <__aeabi_dadd+0xf8>
 800113a:	4643      	mov	r3, r8
 800113c:	08e9      	lsrs	r1, r5, #3
 800113e:	075a      	lsls	r2, r3, #29
 8001140:	4311      	orrs	r1, r2
 8001142:	0032      	movs	r2, r6
 8001144:	08db      	lsrs	r3, r3, #3
 8001146:	484a      	ldr	r0, [pc, #296]	; (8001270 <__aeabi_dadd+0x374>)
 8001148:	4282      	cmp	r2, r0
 800114a:	d021      	beq.n	8001190 <__aeabi_dadd+0x294>
 800114c:	031b      	lsls	r3, r3, #12
 800114e:	0552      	lsls	r2, r2, #21
 8001150:	0b1b      	lsrs	r3, r3, #12
 8001152:	0d52      	lsrs	r2, r2, #21
 8001154:	e76c      	b.n	8001030 <__aeabi_dadd+0x134>
 8001156:	2300      	movs	r3, #0
 8001158:	2100      	movs	r1, #0
 800115a:	e769      	b.n	8001030 <__aeabi_dadd+0x134>
 800115c:	002a      	movs	r2, r5
 800115e:	433a      	orrs	r2, r7
 8001160:	d069      	beq.n	8001236 <__aeabi_dadd+0x33a>
 8001162:	464a      	mov	r2, r9
 8001164:	0758      	lsls	r0, r3, #29
 8001166:	08d1      	lsrs	r1, r2, #3
 8001168:	08da      	lsrs	r2, r3, #3
 800116a:	2380      	movs	r3, #128	; 0x80
 800116c:	031b      	lsls	r3, r3, #12
 800116e:	4308      	orrs	r0, r1
 8001170:	421a      	tst	r2, r3
 8001172:	d007      	beq.n	8001184 <__aeabi_dadd+0x288>
 8001174:	0029      	movs	r1, r5
 8001176:	08ed      	lsrs	r5, r5, #3
 8001178:	421d      	tst	r5, r3
 800117a:	d103      	bne.n	8001184 <__aeabi_dadd+0x288>
 800117c:	002a      	movs	r2, r5
 800117e:	08ff      	lsrs	r7, r7, #3
 8001180:	0748      	lsls	r0, r1, #29
 8001182:	4338      	orrs	r0, r7
 8001184:	0f43      	lsrs	r3, r0, #29
 8001186:	00c1      	lsls	r1, r0, #3
 8001188:	075b      	lsls	r3, r3, #29
 800118a:	08c9      	lsrs	r1, r1, #3
 800118c:	4319      	orrs	r1, r3
 800118e:	0013      	movs	r3, r2
 8001190:	000a      	movs	r2, r1
 8001192:	431a      	orrs	r2, r3
 8001194:	d100      	bne.n	8001198 <__aeabi_dadd+0x29c>
 8001196:	e213      	b.n	80015c0 <__aeabi_dadd+0x6c4>
 8001198:	2280      	movs	r2, #128	; 0x80
 800119a:	0312      	lsls	r2, r2, #12
 800119c:	4313      	orrs	r3, r2
 800119e:	031b      	lsls	r3, r3, #12
 80011a0:	4a33      	ldr	r2, [pc, #204]	; (8001270 <__aeabi_dadd+0x374>)
 80011a2:	0b1b      	lsrs	r3, r3, #12
 80011a4:	e744      	b.n	8001030 <__aeabi_dadd+0x134>
 80011a6:	2a00      	cmp	r2, #0
 80011a8:	d04b      	beq.n	8001242 <__aeabi_dadd+0x346>
 80011aa:	1b8a      	subs	r2, r1, r6
 80011ac:	2e00      	cmp	r6, #0
 80011ae:	d100      	bne.n	80011b2 <__aeabi_dadd+0x2b6>
 80011b0:	e0e7      	b.n	8001382 <__aeabi_dadd+0x486>
 80011b2:	482f      	ldr	r0, [pc, #188]	; (8001270 <__aeabi_dadd+0x374>)
 80011b4:	4281      	cmp	r1, r0
 80011b6:	d100      	bne.n	80011ba <__aeabi_dadd+0x2be>
 80011b8:	e195      	b.n	80014e6 <__aeabi_dadd+0x5ea>
 80011ba:	2080      	movs	r0, #128	; 0x80
 80011bc:	0400      	lsls	r0, r0, #16
 80011be:	4303      	orrs	r3, r0
 80011c0:	2a38      	cmp	r2, #56	; 0x38
 80011c2:	dd00      	ble.n	80011c6 <__aeabi_dadd+0x2ca>
 80011c4:	e143      	b.n	800144e <__aeabi_dadd+0x552>
 80011c6:	2a1f      	cmp	r2, #31
 80011c8:	dd00      	ble.n	80011cc <__aeabi_dadd+0x2d0>
 80011ca:	e1db      	b.n	8001584 <__aeabi_dadd+0x688>
 80011cc:	2020      	movs	r0, #32
 80011ce:	001d      	movs	r5, r3
 80011d0:	464e      	mov	r6, r9
 80011d2:	1a80      	subs	r0, r0, r2
 80011d4:	4085      	lsls	r5, r0
 80011d6:	40d6      	lsrs	r6, r2
 80011d8:	4335      	orrs	r5, r6
 80011da:	464e      	mov	r6, r9
 80011dc:	4086      	lsls	r6, r0
 80011de:	0030      	movs	r0, r6
 80011e0:	40d3      	lsrs	r3, r2
 80011e2:	1e46      	subs	r6, r0, #1
 80011e4:	41b0      	sbcs	r0, r6
 80011e6:	449c      	add	ip, r3
 80011e8:	4305      	orrs	r5, r0
 80011ea:	19ed      	adds	r5, r5, r7
 80011ec:	42bd      	cmp	r5, r7
 80011ee:	419b      	sbcs	r3, r3
 80011f0:	425b      	negs	r3, r3
 80011f2:	4463      	add	r3, ip
 80011f4:	4698      	mov	r8, r3
 80011f6:	000e      	movs	r6, r1
 80011f8:	e07f      	b.n	80012fa <__aeabi_dadd+0x3fe>
 80011fa:	4a1e      	ldr	r2, [pc, #120]	; (8001274 <__aeabi_dadd+0x378>)
 80011fc:	1a76      	subs	r6, r6, r1
 80011fe:	4013      	ands	r3, r2
 8001200:	4698      	mov	r8, r3
 8001202:	e6f5      	b.n	8000ff0 <__aeabi_dadd+0xf4>
 8001204:	0028      	movs	r0, r5
 8001206:	f001 fccb 	bl	8002ba0 <__clzsi2>
 800120a:	0001      	movs	r1, r0
 800120c:	3118      	adds	r1, #24
 800120e:	291f      	cmp	r1, #31
 8001210:	dc00      	bgt.n	8001214 <__aeabi_dadd+0x318>
 8001212:	e6cf      	b.n	8000fb4 <__aeabi_dadd+0xb8>
 8001214:	002b      	movs	r3, r5
 8001216:	3808      	subs	r0, #8
 8001218:	4083      	lsls	r3, r0
 800121a:	2500      	movs	r5, #0
 800121c:	e6d2      	b.n	8000fc4 <__aeabi_dadd+0xc8>
 800121e:	4662      	mov	r2, ip
 8001220:	433a      	orrs	r2, r7
 8001222:	0011      	movs	r1, r2
 8001224:	1e4f      	subs	r7, r1, #1
 8001226:	41b9      	sbcs	r1, r7
 8001228:	e6ac      	b.n	8000f84 <__aeabi_dadd+0x88>
 800122a:	4649      	mov	r1, r9
 800122c:	0758      	lsls	r0, r3, #29
 800122e:	08c9      	lsrs	r1, r1, #3
 8001230:	4301      	orrs	r1, r0
 8001232:	08db      	lsrs	r3, r3, #3
 8001234:	e787      	b.n	8001146 <__aeabi_dadd+0x24a>
 8001236:	4649      	mov	r1, r9
 8001238:	075a      	lsls	r2, r3, #29
 800123a:	08c9      	lsrs	r1, r1, #3
 800123c:	4311      	orrs	r1, r2
 800123e:	08db      	lsrs	r3, r3, #3
 8001240:	e7a6      	b.n	8001190 <__aeabi_dadd+0x294>
 8001242:	490d      	ldr	r1, [pc, #52]	; (8001278 <__aeabi_dadd+0x37c>)
 8001244:	1c70      	adds	r0, r6, #1
 8001246:	4208      	tst	r0, r1
 8001248:	d000      	beq.n	800124c <__aeabi_dadd+0x350>
 800124a:	e0bb      	b.n	80013c4 <__aeabi_dadd+0x4c8>
 800124c:	2e00      	cmp	r6, #0
 800124e:	d000      	beq.n	8001252 <__aeabi_dadd+0x356>
 8001250:	e114      	b.n	800147c <__aeabi_dadd+0x580>
 8001252:	4649      	mov	r1, r9
 8001254:	4319      	orrs	r1, r3
 8001256:	d100      	bne.n	800125a <__aeabi_dadd+0x35e>
 8001258:	e175      	b.n	8001546 <__aeabi_dadd+0x64a>
 800125a:	0029      	movs	r1, r5
 800125c:	4339      	orrs	r1, r7
 800125e:	d000      	beq.n	8001262 <__aeabi_dadd+0x366>
 8001260:	e17e      	b.n	8001560 <__aeabi_dadd+0x664>
 8001262:	4649      	mov	r1, r9
 8001264:	0758      	lsls	r0, r3, #29
 8001266:	08c9      	lsrs	r1, r1, #3
 8001268:	4301      	orrs	r1, r0
 800126a:	08db      	lsrs	r3, r3, #3
 800126c:	e76e      	b.n	800114c <__aeabi_dadd+0x250>
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	000007ff 	.word	0x000007ff
 8001274:	ff7fffff 	.word	0xff7fffff
 8001278:	000007fe 	.word	0x000007fe
 800127c:	4649      	mov	r1, r9
 800127e:	1bcd      	subs	r5, r1, r7
 8001280:	4661      	mov	r1, ip
 8001282:	1a58      	subs	r0, r3, r1
 8001284:	45a9      	cmp	r9, r5
 8001286:	4189      	sbcs	r1, r1
 8001288:	4249      	negs	r1, r1
 800128a:	4688      	mov	r8, r1
 800128c:	0001      	movs	r1, r0
 800128e:	4640      	mov	r0, r8
 8001290:	1a09      	subs	r1, r1, r0
 8001292:	4688      	mov	r8, r1
 8001294:	0209      	lsls	r1, r1, #8
 8001296:	d500      	bpl.n	800129a <__aeabi_dadd+0x39e>
 8001298:	e0a6      	b.n	80013e8 <__aeabi_dadd+0x4ec>
 800129a:	4641      	mov	r1, r8
 800129c:	4329      	orrs	r1, r5
 800129e:	d000      	beq.n	80012a2 <__aeabi_dadd+0x3a6>
 80012a0:	e67f      	b.n	8000fa2 <__aeabi_dadd+0xa6>
 80012a2:	2300      	movs	r3, #0
 80012a4:	2400      	movs	r4, #0
 80012a6:	e751      	b.n	800114c <__aeabi_dadd+0x250>
 80012a8:	4cc7      	ldr	r4, [pc, #796]	; (80015c8 <__aeabi_dadd+0x6cc>)
 80012aa:	42a1      	cmp	r1, r4
 80012ac:	d100      	bne.n	80012b0 <__aeabi_dadd+0x3b4>
 80012ae:	e0c7      	b.n	8001440 <__aeabi_dadd+0x544>
 80012b0:	2480      	movs	r4, #128	; 0x80
 80012b2:	0424      	lsls	r4, r4, #16
 80012b4:	4323      	orrs	r3, r4
 80012b6:	2a38      	cmp	r2, #56	; 0x38
 80012b8:	dc54      	bgt.n	8001364 <__aeabi_dadd+0x468>
 80012ba:	2a1f      	cmp	r2, #31
 80012bc:	dd00      	ble.n	80012c0 <__aeabi_dadd+0x3c4>
 80012be:	e0cc      	b.n	800145a <__aeabi_dadd+0x55e>
 80012c0:	2420      	movs	r4, #32
 80012c2:	4648      	mov	r0, r9
 80012c4:	1aa4      	subs	r4, r4, r2
 80012c6:	001d      	movs	r5, r3
 80012c8:	464e      	mov	r6, r9
 80012ca:	40a0      	lsls	r0, r4
 80012cc:	40d6      	lsrs	r6, r2
 80012ce:	40a5      	lsls	r5, r4
 80012d0:	0004      	movs	r4, r0
 80012d2:	40d3      	lsrs	r3, r2
 80012d4:	4662      	mov	r2, ip
 80012d6:	4335      	orrs	r5, r6
 80012d8:	1e66      	subs	r6, r4, #1
 80012da:	41b4      	sbcs	r4, r6
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	469c      	mov	ip, r3
 80012e0:	4325      	orrs	r5, r4
 80012e2:	e044      	b.n	800136e <__aeabi_dadd+0x472>
 80012e4:	4662      	mov	r2, ip
 80012e6:	433a      	orrs	r2, r7
 80012e8:	0015      	movs	r5, r2
 80012ea:	1e6f      	subs	r7, r5, #1
 80012ec:	41bd      	sbcs	r5, r7
 80012ee:	444d      	add	r5, r9
 80012f0:	454d      	cmp	r5, r9
 80012f2:	4189      	sbcs	r1, r1
 80012f4:	4249      	negs	r1, r1
 80012f6:	4688      	mov	r8, r1
 80012f8:	4498      	add	r8, r3
 80012fa:	4643      	mov	r3, r8
 80012fc:	021b      	lsls	r3, r3, #8
 80012fe:	d400      	bmi.n	8001302 <__aeabi_dadd+0x406>
 8001300:	e718      	b.n	8001134 <__aeabi_dadd+0x238>
 8001302:	4bb1      	ldr	r3, [pc, #708]	; (80015c8 <__aeabi_dadd+0x6cc>)
 8001304:	3601      	adds	r6, #1
 8001306:	429e      	cmp	r6, r3
 8001308:	d049      	beq.n	800139e <__aeabi_dadd+0x4a2>
 800130a:	4642      	mov	r2, r8
 800130c:	4baf      	ldr	r3, [pc, #700]	; (80015cc <__aeabi_dadd+0x6d0>)
 800130e:	2101      	movs	r1, #1
 8001310:	401a      	ands	r2, r3
 8001312:	0013      	movs	r3, r2
 8001314:	086a      	lsrs	r2, r5, #1
 8001316:	400d      	ands	r5, r1
 8001318:	4315      	orrs	r5, r2
 800131a:	07d9      	lsls	r1, r3, #31
 800131c:	085b      	lsrs	r3, r3, #1
 800131e:	4698      	mov	r8, r3
 8001320:	430d      	orrs	r5, r1
 8001322:	e665      	b.n	8000ff0 <__aeabi_dadd+0xf4>
 8001324:	0018      	movs	r0, r3
 8001326:	3e1f      	subs	r6, #31
 8001328:	40f0      	lsrs	r0, r6
 800132a:	2a20      	cmp	r2, #32
 800132c:	d003      	beq.n	8001336 <__aeabi_dadd+0x43a>
 800132e:	2140      	movs	r1, #64	; 0x40
 8001330:	1a8a      	subs	r2, r1, r2
 8001332:	4093      	lsls	r3, r2
 8001334:	431d      	orrs	r5, r3
 8001336:	1e69      	subs	r1, r5, #1
 8001338:	418d      	sbcs	r5, r1
 800133a:	2300      	movs	r3, #0
 800133c:	2600      	movs	r6, #0
 800133e:	4698      	mov	r8, r3
 8001340:	4305      	orrs	r5, r0
 8001342:	e6f7      	b.n	8001134 <__aeabi_dadd+0x238>
 8001344:	0011      	movs	r1, r2
 8001346:	4665      	mov	r5, ip
 8001348:	3920      	subs	r1, #32
 800134a:	40cd      	lsrs	r5, r1
 800134c:	2a20      	cmp	r2, #32
 800134e:	d004      	beq.n	800135a <__aeabi_dadd+0x45e>
 8001350:	2040      	movs	r0, #64	; 0x40
 8001352:	4661      	mov	r1, ip
 8001354:	1a82      	subs	r2, r0, r2
 8001356:	4091      	lsls	r1, r2
 8001358:	430f      	orrs	r7, r1
 800135a:	0039      	movs	r1, r7
 800135c:	1e4f      	subs	r7, r1, #1
 800135e:	41b9      	sbcs	r1, r7
 8001360:	4329      	orrs	r1, r5
 8001362:	e60f      	b.n	8000f84 <__aeabi_dadd+0x88>
 8001364:	464a      	mov	r2, r9
 8001366:	4313      	orrs	r3, r2
 8001368:	001d      	movs	r5, r3
 800136a:	1e6b      	subs	r3, r5, #1
 800136c:	419d      	sbcs	r5, r3
 800136e:	1b7d      	subs	r5, r7, r5
 8001370:	42af      	cmp	r7, r5
 8001372:	419b      	sbcs	r3, r3
 8001374:	4662      	mov	r2, ip
 8001376:	425b      	negs	r3, r3
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	4698      	mov	r8, r3
 800137c:	4654      	mov	r4, sl
 800137e:	000e      	movs	r6, r1
 8001380:	e607      	b.n	8000f92 <__aeabi_dadd+0x96>
 8001382:	4648      	mov	r0, r9
 8001384:	4318      	orrs	r0, r3
 8001386:	d100      	bne.n	800138a <__aeabi_dadd+0x48e>
 8001388:	e0b3      	b.n	80014f2 <__aeabi_dadd+0x5f6>
 800138a:	1e50      	subs	r0, r2, #1
 800138c:	2a01      	cmp	r2, #1
 800138e:	d100      	bne.n	8001392 <__aeabi_dadd+0x496>
 8001390:	e10d      	b.n	80015ae <__aeabi_dadd+0x6b2>
 8001392:	4d8d      	ldr	r5, [pc, #564]	; (80015c8 <__aeabi_dadd+0x6cc>)
 8001394:	42aa      	cmp	r2, r5
 8001396:	d100      	bne.n	800139a <__aeabi_dadd+0x49e>
 8001398:	e0a5      	b.n	80014e6 <__aeabi_dadd+0x5ea>
 800139a:	0002      	movs	r2, r0
 800139c:	e710      	b.n	80011c0 <__aeabi_dadd+0x2c4>
 800139e:	0032      	movs	r2, r6
 80013a0:	2300      	movs	r3, #0
 80013a2:	2100      	movs	r1, #0
 80013a4:	e644      	b.n	8001030 <__aeabi_dadd+0x134>
 80013a6:	2120      	movs	r1, #32
 80013a8:	0038      	movs	r0, r7
 80013aa:	1a89      	subs	r1, r1, r2
 80013ac:	4665      	mov	r5, ip
 80013ae:	408f      	lsls	r7, r1
 80013b0:	408d      	lsls	r5, r1
 80013b2:	40d0      	lsrs	r0, r2
 80013b4:	1e79      	subs	r1, r7, #1
 80013b6:	418f      	sbcs	r7, r1
 80013b8:	4305      	orrs	r5, r0
 80013ba:	433d      	orrs	r5, r7
 80013bc:	4667      	mov	r7, ip
 80013be:	40d7      	lsrs	r7, r2
 80013c0:	19db      	adds	r3, r3, r7
 80013c2:	e794      	b.n	80012ee <__aeabi_dadd+0x3f2>
 80013c4:	4a80      	ldr	r2, [pc, #512]	; (80015c8 <__aeabi_dadd+0x6cc>)
 80013c6:	4290      	cmp	r0, r2
 80013c8:	d100      	bne.n	80013cc <__aeabi_dadd+0x4d0>
 80013ca:	e0ec      	b.n	80015a6 <__aeabi_dadd+0x6aa>
 80013cc:	0039      	movs	r1, r7
 80013ce:	4449      	add	r1, r9
 80013d0:	4549      	cmp	r1, r9
 80013d2:	4192      	sbcs	r2, r2
 80013d4:	4463      	add	r3, ip
 80013d6:	4252      	negs	r2, r2
 80013d8:	189b      	adds	r3, r3, r2
 80013da:	07dd      	lsls	r5, r3, #31
 80013dc:	0849      	lsrs	r1, r1, #1
 80013de:	085b      	lsrs	r3, r3, #1
 80013e0:	4698      	mov	r8, r3
 80013e2:	0006      	movs	r6, r0
 80013e4:	430d      	orrs	r5, r1
 80013e6:	e6a5      	b.n	8001134 <__aeabi_dadd+0x238>
 80013e8:	464a      	mov	r2, r9
 80013ea:	1abd      	subs	r5, r7, r2
 80013ec:	42af      	cmp	r7, r5
 80013ee:	4189      	sbcs	r1, r1
 80013f0:	4662      	mov	r2, ip
 80013f2:	4249      	negs	r1, r1
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	1a5b      	subs	r3, r3, r1
 80013f8:	4698      	mov	r8, r3
 80013fa:	4654      	mov	r4, sl
 80013fc:	e5d1      	b.n	8000fa2 <__aeabi_dadd+0xa6>
 80013fe:	076c      	lsls	r4, r5, #29
 8001400:	08f9      	lsrs	r1, r7, #3
 8001402:	4321      	orrs	r1, r4
 8001404:	08eb      	lsrs	r3, r5, #3
 8001406:	0004      	movs	r4, r0
 8001408:	e69d      	b.n	8001146 <__aeabi_dadd+0x24a>
 800140a:	464a      	mov	r2, r9
 800140c:	431a      	orrs	r2, r3
 800140e:	d175      	bne.n	80014fc <__aeabi_dadd+0x600>
 8001410:	4661      	mov	r1, ip
 8001412:	4339      	orrs	r1, r7
 8001414:	d114      	bne.n	8001440 <__aeabi_dadd+0x544>
 8001416:	2380      	movs	r3, #128	; 0x80
 8001418:	2400      	movs	r4, #0
 800141a:	031b      	lsls	r3, r3, #12
 800141c:	e6bc      	b.n	8001198 <__aeabi_dadd+0x29c>
 800141e:	464a      	mov	r2, r9
 8001420:	1bd5      	subs	r5, r2, r7
 8001422:	45a9      	cmp	r9, r5
 8001424:	4189      	sbcs	r1, r1
 8001426:	4662      	mov	r2, ip
 8001428:	4249      	negs	r1, r1
 800142a:	1a9b      	subs	r3, r3, r2
 800142c:	1a5b      	subs	r3, r3, r1
 800142e:	4698      	mov	r8, r3
 8001430:	2601      	movs	r6, #1
 8001432:	e5ae      	b.n	8000f92 <__aeabi_dadd+0x96>
 8001434:	464a      	mov	r2, r9
 8001436:	08d1      	lsrs	r1, r2, #3
 8001438:	075a      	lsls	r2, r3, #29
 800143a:	4311      	orrs	r1, r2
 800143c:	08db      	lsrs	r3, r3, #3
 800143e:	e6a7      	b.n	8001190 <__aeabi_dadd+0x294>
 8001440:	4663      	mov	r3, ip
 8001442:	08f9      	lsrs	r1, r7, #3
 8001444:	075a      	lsls	r2, r3, #29
 8001446:	4654      	mov	r4, sl
 8001448:	4311      	orrs	r1, r2
 800144a:	08db      	lsrs	r3, r3, #3
 800144c:	e6a0      	b.n	8001190 <__aeabi_dadd+0x294>
 800144e:	464a      	mov	r2, r9
 8001450:	4313      	orrs	r3, r2
 8001452:	001d      	movs	r5, r3
 8001454:	1e6b      	subs	r3, r5, #1
 8001456:	419d      	sbcs	r5, r3
 8001458:	e6c7      	b.n	80011ea <__aeabi_dadd+0x2ee>
 800145a:	0014      	movs	r4, r2
 800145c:	001e      	movs	r6, r3
 800145e:	3c20      	subs	r4, #32
 8001460:	40e6      	lsrs	r6, r4
 8001462:	2a20      	cmp	r2, #32
 8001464:	d005      	beq.n	8001472 <__aeabi_dadd+0x576>
 8001466:	2440      	movs	r4, #64	; 0x40
 8001468:	1aa2      	subs	r2, r4, r2
 800146a:	4093      	lsls	r3, r2
 800146c:	464a      	mov	r2, r9
 800146e:	431a      	orrs	r2, r3
 8001470:	4691      	mov	r9, r2
 8001472:	464d      	mov	r5, r9
 8001474:	1e6b      	subs	r3, r5, #1
 8001476:	419d      	sbcs	r5, r3
 8001478:	4335      	orrs	r5, r6
 800147a:	e778      	b.n	800136e <__aeabi_dadd+0x472>
 800147c:	464a      	mov	r2, r9
 800147e:	431a      	orrs	r2, r3
 8001480:	d000      	beq.n	8001484 <__aeabi_dadd+0x588>
 8001482:	e66b      	b.n	800115c <__aeabi_dadd+0x260>
 8001484:	076b      	lsls	r3, r5, #29
 8001486:	08f9      	lsrs	r1, r7, #3
 8001488:	4319      	orrs	r1, r3
 800148a:	08eb      	lsrs	r3, r5, #3
 800148c:	e680      	b.n	8001190 <__aeabi_dadd+0x294>
 800148e:	4661      	mov	r1, ip
 8001490:	4339      	orrs	r1, r7
 8001492:	d054      	beq.n	800153e <__aeabi_dadd+0x642>
 8001494:	4663      	mov	r3, ip
 8001496:	08f9      	lsrs	r1, r7, #3
 8001498:	075c      	lsls	r4, r3, #29
 800149a:	4321      	orrs	r1, r4
 800149c:	08db      	lsrs	r3, r3, #3
 800149e:	0004      	movs	r4, r0
 80014a0:	e654      	b.n	800114c <__aeabi_dadd+0x250>
 80014a2:	464a      	mov	r2, r9
 80014a4:	1abd      	subs	r5, r7, r2
 80014a6:	42af      	cmp	r7, r5
 80014a8:	4189      	sbcs	r1, r1
 80014aa:	4662      	mov	r2, ip
 80014ac:	4249      	negs	r1, r1
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	1a5b      	subs	r3, r3, r1
 80014b2:	4698      	mov	r8, r3
 80014b4:	0004      	movs	r4, r0
 80014b6:	2601      	movs	r6, #1
 80014b8:	e56b      	b.n	8000f92 <__aeabi_dadd+0x96>
 80014ba:	464a      	mov	r2, r9
 80014bc:	1bd5      	subs	r5, r2, r7
 80014be:	45a9      	cmp	r9, r5
 80014c0:	4189      	sbcs	r1, r1
 80014c2:	4662      	mov	r2, ip
 80014c4:	4249      	negs	r1, r1
 80014c6:	1a9a      	subs	r2, r3, r2
 80014c8:	1a52      	subs	r2, r2, r1
 80014ca:	4690      	mov	r8, r2
 80014cc:	0212      	lsls	r2, r2, #8
 80014ce:	d532      	bpl.n	8001536 <__aeabi_dadd+0x63a>
 80014d0:	464a      	mov	r2, r9
 80014d2:	1abd      	subs	r5, r7, r2
 80014d4:	42af      	cmp	r7, r5
 80014d6:	4189      	sbcs	r1, r1
 80014d8:	4662      	mov	r2, ip
 80014da:	4249      	negs	r1, r1
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	1a5b      	subs	r3, r3, r1
 80014e0:	4698      	mov	r8, r3
 80014e2:	0004      	movs	r4, r0
 80014e4:	e584      	b.n	8000ff0 <__aeabi_dadd+0xf4>
 80014e6:	4663      	mov	r3, ip
 80014e8:	08f9      	lsrs	r1, r7, #3
 80014ea:	075a      	lsls	r2, r3, #29
 80014ec:	4311      	orrs	r1, r2
 80014ee:	08db      	lsrs	r3, r3, #3
 80014f0:	e64e      	b.n	8001190 <__aeabi_dadd+0x294>
 80014f2:	08f9      	lsrs	r1, r7, #3
 80014f4:	0768      	lsls	r0, r5, #29
 80014f6:	4301      	orrs	r1, r0
 80014f8:	08eb      	lsrs	r3, r5, #3
 80014fa:	e624      	b.n	8001146 <__aeabi_dadd+0x24a>
 80014fc:	4662      	mov	r2, ip
 80014fe:	433a      	orrs	r2, r7
 8001500:	d100      	bne.n	8001504 <__aeabi_dadd+0x608>
 8001502:	e698      	b.n	8001236 <__aeabi_dadd+0x33a>
 8001504:	464a      	mov	r2, r9
 8001506:	08d1      	lsrs	r1, r2, #3
 8001508:	075a      	lsls	r2, r3, #29
 800150a:	4311      	orrs	r1, r2
 800150c:	08da      	lsrs	r2, r3, #3
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	031b      	lsls	r3, r3, #12
 8001512:	421a      	tst	r2, r3
 8001514:	d008      	beq.n	8001528 <__aeabi_dadd+0x62c>
 8001516:	4660      	mov	r0, ip
 8001518:	08c5      	lsrs	r5, r0, #3
 800151a:	421d      	tst	r5, r3
 800151c:	d104      	bne.n	8001528 <__aeabi_dadd+0x62c>
 800151e:	4654      	mov	r4, sl
 8001520:	002a      	movs	r2, r5
 8001522:	08f9      	lsrs	r1, r7, #3
 8001524:	0743      	lsls	r3, r0, #29
 8001526:	4319      	orrs	r1, r3
 8001528:	0f4b      	lsrs	r3, r1, #29
 800152a:	00c9      	lsls	r1, r1, #3
 800152c:	075b      	lsls	r3, r3, #29
 800152e:	08c9      	lsrs	r1, r1, #3
 8001530:	4319      	orrs	r1, r3
 8001532:	0013      	movs	r3, r2
 8001534:	e62c      	b.n	8001190 <__aeabi_dadd+0x294>
 8001536:	4641      	mov	r1, r8
 8001538:	4329      	orrs	r1, r5
 800153a:	d000      	beq.n	800153e <__aeabi_dadd+0x642>
 800153c:	e5fa      	b.n	8001134 <__aeabi_dadd+0x238>
 800153e:	2300      	movs	r3, #0
 8001540:	000a      	movs	r2, r1
 8001542:	2400      	movs	r4, #0
 8001544:	e602      	b.n	800114c <__aeabi_dadd+0x250>
 8001546:	076b      	lsls	r3, r5, #29
 8001548:	08f9      	lsrs	r1, r7, #3
 800154a:	4319      	orrs	r1, r3
 800154c:	08eb      	lsrs	r3, r5, #3
 800154e:	e5fd      	b.n	800114c <__aeabi_dadd+0x250>
 8001550:	4663      	mov	r3, ip
 8001552:	08f9      	lsrs	r1, r7, #3
 8001554:	075b      	lsls	r3, r3, #29
 8001556:	4319      	orrs	r1, r3
 8001558:	4663      	mov	r3, ip
 800155a:	0004      	movs	r4, r0
 800155c:	08db      	lsrs	r3, r3, #3
 800155e:	e617      	b.n	8001190 <__aeabi_dadd+0x294>
 8001560:	003d      	movs	r5, r7
 8001562:	444d      	add	r5, r9
 8001564:	4463      	add	r3, ip
 8001566:	454d      	cmp	r5, r9
 8001568:	4189      	sbcs	r1, r1
 800156a:	4698      	mov	r8, r3
 800156c:	4249      	negs	r1, r1
 800156e:	4488      	add	r8, r1
 8001570:	4643      	mov	r3, r8
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	d400      	bmi.n	8001578 <__aeabi_dadd+0x67c>
 8001576:	e5dd      	b.n	8001134 <__aeabi_dadd+0x238>
 8001578:	4642      	mov	r2, r8
 800157a:	4b14      	ldr	r3, [pc, #80]	; (80015cc <__aeabi_dadd+0x6d0>)
 800157c:	2601      	movs	r6, #1
 800157e:	401a      	ands	r2, r3
 8001580:	4690      	mov	r8, r2
 8001582:	e5d7      	b.n	8001134 <__aeabi_dadd+0x238>
 8001584:	0010      	movs	r0, r2
 8001586:	001e      	movs	r6, r3
 8001588:	3820      	subs	r0, #32
 800158a:	40c6      	lsrs	r6, r0
 800158c:	2a20      	cmp	r2, #32
 800158e:	d005      	beq.n	800159c <__aeabi_dadd+0x6a0>
 8001590:	2040      	movs	r0, #64	; 0x40
 8001592:	1a82      	subs	r2, r0, r2
 8001594:	4093      	lsls	r3, r2
 8001596:	464a      	mov	r2, r9
 8001598:	431a      	orrs	r2, r3
 800159a:	4691      	mov	r9, r2
 800159c:	464d      	mov	r5, r9
 800159e:	1e6b      	subs	r3, r5, #1
 80015a0:	419d      	sbcs	r5, r3
 80015a2:	4335      	orrs	r5, r6
 80015a4:	e621      	b.n	80011ea <__aeabi_dadd+0x2ee>
 80015a6:	0002      	movs	r2, r0
 80015a8:	2300      	movs	r3, #0
 80015aa:	2100      	movs	r1, #0
 80015ac:	e540      	b.n	8001030 <__aeabi_dadd+0x134>
 80015ae:	464a      	mov	r2, r9
 80015b0:	19d5      	adds	r5, r2, r7
 80015b2:	42bd      	cmp	r5, r7
 80015b4:	4189      	sbcs	r1, r1
 80015b6:	4463      	add	r3, ip
 80015b8:	4698      	mov	r8, r3
 80015ba:	4249      	negs	r1, r1
 80015bc:	4488      	add	r8, r1
 80015be:	e5b3      	b.n	8001128 <__aeabi_dadd+0x22c>
 80015c0:	2100      	movs	r1, #0
 80015c2:	4a01      	ldr	r2, [pc, #4]	; (80015c8 <__aeabi_dadd+0x6cc>)
 80015c4:	000b      	movs	r3, r1
 80015c6:	e533      	b.n	8001030 <__aeabi_dadd+0x134>
 80015c8:	000007ff 	.word	0x000007ff
 80015cc:	ff7fffff 	.word	0xff7fffff

080015d0 <__aeabi_ddiv>:
 80015d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015d2:	4657      	mov	r7, sl
 80015d4:	464e      	mov	r6, r9
 80015d6:	4645      	mov	r5, r8
 80015d8:	46de      	mov	lr, fp
 80015da:	b5e0      	push	{r5, r6, r7, lr}
 80015dc:	4681      	mov	r9, r0
 80015de:	0005      	movs	r5, r0
 80015e0:	030c      	lsls	r4, r1, #12
 80015e2:	0048      	lsls	r0, r1, #1
 80015e4:	4692      	mov	sl, r2
 80015e6:	001f      	movs	r7, r3
 80015e8:	b085      	sub	sp, #20
 80015ea:	0b24      	lsrs	r4, r4, #12
 80015ec:	0d40      	lsrs	r0, r0, #21
 80015ee:	0fce      	lsrs	r6, r1, #31
 80015f0:	2800      	cmp	r0, #0
 80015f2:	d059      	beq.n	80016a8 <__aeabi_ddiv+0xd8>
 80015f4:	4b87      	ldr	r3, [pc, #540]	; (8001814 <__aeabi_ddiv+0x244>)
 80015f6:	4298      	cmp	r0, r3
 80015f8:	d100      	bne.n	80015fc <__aeabi_ddiv+0x2c>
 80015fa:	e098      	b.n	800172e <__aeabi_ddiv+0x15e>
 80015fc:	0f6b      	lsrs	r3, r5, #29
 80015fe:	00e4      	lsls	r4, r4, #3
 8001600:	431c      	orrs	r4, r3
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	041b      	lsls	r3, r3, #16
 8001606:	4323      	orrs	r3, r4
 8001608:	4698      	mov	r8, r3
 800160a:	4b83      	ldr	r3, [pc, #524]	; (8001818 <__aeabi_ddiv+0x248>)
 800160c:	00ed      	lsls	r5, r5, #3
 800160e:	469b      	mov	fp, r3
 8001610:	2300      	movs	r3, #0
 8001612:	4699      	mov	r9, r3
 8001614:	4483      	add	fp, r0
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	033c      	lsls	r4, r7, #12
 800161a:	007b      	lsls	r3, r7, #1
 800161c:	4650      	mov	r0, sl
 800161e:	0b24      	lsrs	r4, r4, #12
 8001620:	0d5b      	lsrs	r3, r3, #21
 8001622:	0fff      	lsrs	r7, r7, #31
 8001624:	2b00      	cmp	r3, #0
 8001626:	d067      	beq.n	80016f8 <__aeabi_ddiv+0x128>
 8001628:	4a7a      	ldr	r2, [pc, #488]	; (8001814 <__aeabi_ddiv+0x244>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d018      	beq.n	8001660 <__aeabi_ddiv+0x90>
 800162e:	497a      	ldr	r1, [pc, #488]	; (8001818 <__aeabi_ddiv+0x248>)
 8001630:	0f42      	lsrs	r2, r0, #29
 8001632:	468c      	mov	ip, r1
 8001634:	00e4      	lsls	r4, r4, #3
 8001636:	4659      	mov	r1, fp
 8001638:	4314      	orrs	r4, r2
 800163a:	2280      	movs	r2, #128	; 0x80
 800163c:	4463      	add	r3, ip
 800163e:	0412      	lsls	r2, r2, #16
 8001640:	1acb      	subs	r3, r1, r3
 8001642:	4314      	orrs	r4, r2
 8001644:	469b      	mov	fp, r3
 8001646:	00c2      	lsls	r2, r0, #3
 8001648:	2000      	movs	r0, #0
 800164a:	0033      	movs	r3, r6
 800164c:	407b      	eors	r3, r7
 800164e:	469a      	mov	sl, r3
 8001650:	464b      	mov	r3, r9
 8001652:	2b0f      	cmp	r3, #15
 8001654:	d900      	bls.n	8001658 <__aeabi_ddiv+0x88>
 8001656:	e0ef      	b.n	8001838 <__aeabi_ddiv+0x268>
 8001658:	4970      	ldr	r1, [pc, #448]	; (800181c <__aeabi_ddiv+0x24c>)
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	58cb      	ldr	r3, [r1, r3]
 800165e:	469f      	mov	pc, r3
 8001660:	4b6f      	ldr	r3, [pc, #444]	; (8001820 <__aeabi_ddiv+0x250>)
 8001662:	4652      	mov	r2, sl
 8001664:	469c      	mov	ip, r3
 8001666:	4322      	orrs	r2, r4
 8001668:	44e3      	add	fp, ip
 800166a:	2a00      	cmp	r2, #0
 800166c:	d000      	beq.n	8001670 <__aeabi_ddiv+0xa0>
 800166e:	e095      	b.n	800179c <__aeabi_ddiv+0x1cc>
 8001670:	4649      	mov	r1, r9
 8001672:	2302      	movs	r3, #2
 8001674:	4319      	orrs	r1, r3
 8001676:	4689      	mov	r9, r1
 8001678:	2400      	movs	r4, #0
 800167a:	2002      	movs	r0, #2
 800167c:	e7e5      	b.n	800164a <__aeabi_ddiv+0x7a>
 800167e:	2300      	movs	r3, #0
 8001680:	2400      	movs	r4, #0
 8001682:	2500      	movs	r5, #0
 8001684:	4652      	mov	r2, sl
 8001686:	051b      	lsls	r3, r3, #20
 8001688:	4323      	orrs	r3, r4
 800168a:	07d2      	lsls	r2, r2, #31
 800168c:	4313      	orrs	r3, r2
 800168e:	0028      	movs	r0, r5
 8001690:	0019      	movs	r1, r3
 8001692:	b005      	add	sp, #20
 8001694:	bcf0      	pop	{r4, r5, r6, r7}
 8001696:	46bb      	mov	fp, r7
 8001698:	46b2      	mov	sl, r6
 800169a:	46a9      	mov	r9, r5
 800169c:	46a0      	mov	r8, r4
 800169e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016a0:	2400      	movs	r4, #0
 80016a2:	2500      	movs	r5, #0
 80016a4:	4b5b      	ldr	r3, [pc, #364]	; (8001814 <__aeabi_ddiv+0x244>)
 80016a6:	e7ed      	b.n	8001684 <__aeabi_ddiv+0xb4>
 80016a8:	464b      	mov	r3, r9
 80016aa:	4323      	orrs	r3, r4
 80016ac:	4698      	mov	r8, r3
 80016ae:	d100      	bne.n	80016b2 <__aeabi_ddiv+0xe2>
 80016b0:	e089      	b.n	80017c6 <__aeabi_ddiv+0x1f6>
 80016b2:	2c00      	cmp	r4, #0
 80016b4:	d100      	bne.n	80016b8 <__aeabi_ddiv+0xe8>
 80016b6:	e1e0      	b.n	8001a7a <__aeabi_ddiv+0x4aa>
 80016b8:	0020      	movs	r0, r4
 80016ba:	f001 fa71 	bl	8002ba0 <__clzsi2>
 80016be:	0001      	movs	r1, r0
 80016c0:	0002      	movs	r2, r0
 80016c2:	390b      	subs	r1, #11
 80016c4:	231d      	movs	r3, #29
 80016c6:	1a5b      	subs	r3, r3, r1
 80016c8:	4649      	mov	r1, r9
 80016ca:	0010      	movs	r0, r2
 80016cc:	40d9      	lsrs	r1, r3
 80016ce:	3808      	subs	r0, #8
 80016d0:	4084      	lsls	r4, r0
 80016d2:	000b      	movs	r3, r1
 80016d4:	464d      	mov	r5, r9
 80016d6:	4323      	orrs	r3, r4
 80016d8:	4698      	mov	r8, r3
 80016da:	4085      	lsls	r5, r0
 80016dc:	4851      	ldr	r0, [pc, #324]	; (8001824 <__aeabi_ddiv+0x254>)
 80016de:	033c      	lsls	r4, r7, #12
 80016e0:	1a83      	subs	r3, r0, r2
 80016e2:	469b      	mov	fp, r3
 80016e4:	2300      	movs	r3, #0
 80016e6:	4699      	mov	r9, r3
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	007b      	lsls	r3, r7, #1
 80016ec:	4650      	mov	r0, sl
 80016ee:	0b24      	lsrs	r4, r4, #12
 80016f0:	0d5b      	lsrs	r3, r3, #21
 80016f2:	0fff      	lsrs	r7, r7, #31
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d197      	bne.n	8001628 <__aeabi_ddiv+0x58>
 80016f8:	4652      	mov	r2, sl
 80016fa:	4322      	orrs	r2, r4
 80016fc:	d055      	beq.n	80017aa <__aeabi_ddiv+0x1da>
 80016fe:	2c00      	cmp	r4, #0
 8001700:	d100      	bne.n	8001704 <__aeabi_ddiv+0x134>
 8001702:	e1ca      	b.n	8001a9a <__aeabi_ddiv+0x4ca>
 8001704:	0020      	movs	r0, r4
 8001706:	f001 fa4b 	bl	8002ba0 <__clzsi2>
 800170a:	0002      	movs	r2, r0
 800170c:	3a0b      	subs	r2, #11
 800170e:	231d      	movs	r3, #29
 8001710:	0001      	movs	r1, r0
 8001712:	1a9b      	subs	r3, r3, r2
 8001714:	4652      	mov	r2, sl
 8001716:	3908      	subs	r1, #8
 8001718:	40da      	lsrs	r2, r3
 800171a:	408c      	lsls	r4, r1
 800171c:	4314      	orrs	r4, r2
 800171e:	4652      	mov	r2, sl
 8001720:	408a      	lsls	r2, r1
 8001722:	4b41      	ldr	r3, [pc, #260]	; (8001828 <__aeabi_ddiv+0x258>)
 8001724:	4458      	add	r0, fp
 8001726:	469b      	mov	fp, r3
 8001728:	4483      	add	fp, r0
 800172a:	2000      	movs	r0, #0
 800172c:	e78d      	b.n	800164a <__aeabi_ddiv+0x7a>
 800172e:	464b      	mov	r3, r9
 8001730:	4323      	orrs	r3, r4
 8001732:	4698      	mov	r8, r3
 8001734:	d140      	bne.n	80017b8 <__aeabi_ddiv+0x1e8>
 8001736:	2308      	movs	r3, #8
 8001738:	4699      	mov	r9, r3
 800173a:	3b06      	subs	r3, #6
 800173c:	2500      	movs	r5, #0
 800173e:	4683      	mov	fp, r0
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	e769      	b.n	8001618 <__aeabi_ddiv+0x48>
 8001744:	46b2      	mov	sl, r6
 8001746:	9b00      	ldr	r3, [sp, #0]
 8001748:	2b02      	cmp	r3, #2
 800174a:	d0a9      	beq.n	80016a0 <__aeabi_ddiv+0xd0>
 800174c:	2b03      	cmp	r3, #3
 800174e:	d100      	bne.n	8001752 <__aeabi_ddiv+0x182>
 8001750:	e211      	b.n	8001b76 <__aeabi_ddiv+0x5a6>
 8001752:	2b01      	cmp	r3, #1
 8001754:	d093      	beq.n	800167e <__aeabi_ddiv+0xae>
 8001756:	4a35      	ldr	r2, [pc, #212]	; (800182c <__aeabi_ddiv+0x25c>)
 8001758:	445a      	add	r2, fp
 800175a:	2a00      	cmp	r2, #0
 800175c:	dc00      	bgt.n	8001760 <__aeabi_ddiv+0x190>
 800175e:	e13c      	b.n	80019da <__aeabi_ddiv+0x40a>
 8001760:	076b      	lsls	r3, r5, #29
 8001762:	d000      	beq.n	8001766 <__aeabi_ddiv+0x196>
 8001764:	e1a7      	b.n	8001ab6 <__aeabi_ddiv+0x4e6>
 8001766:	08ed      	lsrs	r5, r5, #3
 8001768:	4643      	mov	r3, r8
 800176a:	01db      	lsls	r3, r3, #7
 800176c:	d506      	bpl.n	800177c <__aeabi_ddiv+0x1ac>
 800176e:	4642      	mov	r2, r8
 8001770:	4b2f      	ldr	r3, [pc, #188]	; (8001830 <__aeabi_ddiv+0x260>)
 8001772:	401a      	ands	r2, r3
 8001774:	4690      	mov	r8, r2
 8001776:	2280      	movs	r2, #128	; 0x80
 8001778:	00d2      	lsls	r2, r2, #3
 800177a:	445a      	add	r2, fp
 800177c:	4b2d      	ldr	r3, [pc, #180]	; (8001834 <__aeabi_ddiv+0x264>)
 800177e:	429a      	cmp	r2, r3
 8001780:	dc8e      	bgt.n	80016a0 <__aeabi_ddiv+0xd0>
 8001782:	4643      	mov	r3, r8
 8001784:	0552      	lsls	r2, r2, #21
 8001786:	0758      	lsls	r0, r3, #29
 8001788:	025c      	lsls	r4, r3, #9
 800178a:	4305      	orrs	r5, r0
 800178c:	0b24      	lsrs	r4, r4, #12
 800178e:	0d53      	lsrs	r3, r2, #21
 8001790:	e778      	b.n	8001684 <__aeabi_ddiv+0xb4>
 8001792:	46ba      	mov	sl, r7
 8001794:	46a0      	mov	r8, r4
 8001796:	0015      	movs	r5, r2
 8001798:	9000      	str	r0, [sp, #0]
 800179a:	e7d4      	b.n	8001746 <__aeabi_ddiv+0x176>
 800179c:	464a      	mov	r2, r9
 800179e:	2303      	movs	r3, #3
 80017a0:	431a      	orrs	r2, r3
 80017a2:	4691      	mov	r9, r2
 80017a4:	2003      	movs	r0, #3
 80017a6:	4652      	mov	r2, sl
 80017a8:	e74f      	b.n	800164a <__aeabi_ddiv+0x7a>
 80017aa:	4649      	mov	r1, r9
 80017ac:	2301      	movs	r3, #1
 80017ae:	4319      	orrs	r1, r3
 80017b0:	4689      	mov	r9, r1
 80017b2:	2400      	movs	r4, #0
 80017b4:	2001      	movs	r0, #1
 80017b6:	e748      	b.n	800164a <__aeabi_ddiv+0x7a>
 80017b8:	230c      	movs	r3, #12
 80017ba:	4699      	mov	r9, r3
 80017bc:	3b09      	subs	r3, #9
 80017be:	46a0      	mov	r8, r4
 80017c0:	4683      	mov	fp, r0
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	e728      	b.n	8001618 <__aeabi_ddiv+0x48>
 80017c6:	2304      	movs	r3, #4
 80017c8:	4699      	mov	r9, r3
 80017ca:	2300      	movs	r3, #0
 80017cc:	469b      	mov	fp, r3
 80017ce:	3301      	adds	r3, #1
 80017d0:	2500      	movs	r5, #0
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	e720      	b.n	8001618 <__aeabi_ddiv+0x48>
 80017d6:	2300      	movs	r3, #0
 80017d8:	2480      	movs	r4, #128	; 0x80
 80017da:	469a      	mov	sl, r3
 80017dc:	2500      	movs	r5, #0
 80017de:	4b0d      	ldr	r3, [pc, #52]	; (8001814 <__aeabi_ddiv+0x244>)
 80017e0:	0324      	lsls	r4, r4, #12
 80017e2:	e74f      	b.n	8001684 <__aeabi_ddiv+0xb4>
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	4641      	mov	r1, r8
 80017e8:	031b      	lsls	r3, r3, #12
 80017ea:	4219      	tst	r1, r3
 80017ec:	d008      	beq.n	8001800 <__aeabi_ddiv+0x230>
 80017ee:	421c      	tst	r4, r3
 80017f0:	d106      	bne.n	8001800 <__aeabi_ddiv+0x230>
 80017f2:	431c      	orrs	r4, r3
 80017f4:	0324      	lsls	r4, r4, #12
 80017f6:	46ba      	mov	sl, r7
 80017f8:	0015      	movs	r5, r2
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <__aeabi_ddiv+0x244>)
 80017fc:	0b24      	lsrs	r4, r4, #12
 80017fe:	e741      	b.n	8001684 <__aeabi_ddiv+0xb4>
 8001800:	2480      	movs	r4, #128	; 0x80
 8001802:	4643      	mov	r3, r8
 8001804:	0324      	lsls	r4, r4, #12
 8001806:	431c      	orrs	r4, r3
 8001808:	0324      	lsls	r4, r4, #12
 800180a:	46b2      	mov	sl, r6
 800180c:	4b01      	ldr	r3, [pc, #4]	; (8001814 <__aeabi_ddiv+0x244>)
 800180e:	0b24      	lsrs	r4, r4, #12
 8001810:	e738      	b.n	8001684 <__aeabi_ddiv+0xb4>
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	000007ff 	.word	0x000007ff
 8001818:	fffffc01 	.word	0xfffffc01
 800181c:	0800bfe8 	.word	0x0800bfe8
 8001820:	fffff801 	.word	0xfffff801
 8001824:	fffffc0d 	.word	0xfffffc0d
 8001828:	000003f3 	.word	0x000003f3
 800182c:	000003ff 	.word	0x000003ff
 8001830:	feffffff 	.word	0xfeffffff
 8001834:	000007fe 	.word	0x000007fe
 8001838:	4544      	cmp	r4, r8
 800183a:	d200      	bcs.n	800183e <__aeabi_ddiv+0x26e>
 800183c:	e116      	b.n	8001a6c <__aeabi_ddiv+0x49c>
 800183e:	d100      	bne.n	8001842 <__aeabi_ddiv+0x272>
 8001840:	e111      	b.n	8001a66 <__aeabi_ddiv+0x496>
 8001842:	2301      	movs	r3, #1
 8001844:	425b      	negs	r3, r3
 8001846:	469c      	mov	ip, r3
 8001848:	002e      	movs	r6, r5
 800184a:	4640      	mov	r0, r8
 800184c:	2500      	movs	r5, #0
 800184e:	44e3      	add	fp, ip
 8001850:	0223      	lsls	r3, r4, #8
 8001852:	0e14      	lsrs	r4, r2, #24
 8001854:	431c      	orrs	r4, r3
 8001856:	0c1b      	lsrs	r3, r3, #16
 8001858:	4699      	mov	r9, r3
 800185a:	0423      	lsls	r3, r4, #16
 800185c:	0c1f      	lsrs	r7, r3, #16
 800185e:	0212      	lsls	r2, r2, #8
 8001860:	4649      	mov	r1, r9
 8001862:	9200      	str	r2, [sp, #0]
 8001864:	9701      	str	r7, [sp, #4]
 8001866:	f7fe fcdf 	bl	8000228 <__aeabi_uidivmod>
 800186a:	0002      	movs	r2, r0
 800186c:	437a      	muls	r2, r7
 800186e:	040b      	lsls	r3, r1, #16
 8001870:	0c31      	lsrs	r1, r6, #16
 8001872:	4680      	mov	r8, r0
 8001874:	4319      	orrs	r1, r3
 8001876:	428a      	cmp	r2, r1
 8001878:	d90b      	bls.n	8001892 <__aeabi_ddiv+0x2c2>
 800187a:	2301      	movs	r3, #1
 800187c:	425b      	negs	r3, r3
 800187e:	469c      	mov	ip, r3
 8001880:	1909      	adds	r1, r1, r4
 8001882:	44e0      	add	r8, ip
 8001884:	428c      	cmp	r4, r1
 8001886:	d804      	bhi.n	8001892 <__aeabi_ddiv+0x2c2>
 8001888:	428a      	cmp	r2, r1
 800188a:	d902      	bls.n	8001892 <__aeabi_ddiv+0x2c2>
 800188c:	1e83      	subs	r3, r0, #2
 800188e:	4698      	mov	r8, r3
 8001890:	1909      	adds	r1, r1, r4
 8001892:	1a88      	subs	r0, r1, r2
 8001894:	4649      	mov	r1, r9
 8001896:	f7fe fcc7 	bl	8000228 <__aeabi_uidivmod>
 800189a:	0409      	lsls	r1, r1, #16
 800189c:	468c      	mov	ip, r1
 800189e:	0431      	lsls	r1, r6, #16
 80018a0:	4666      	mov	r6, ip
 80018a2:	9a01      	ldr	r2, [sp, #4]
 80018a4:	0c09      	lsrs	r1, r1, #16
 80018a6:	4342      	muls	r2, r0
 80018a8:	0003      	movs	r3, r0
 80018aa:	4331      	orrs	r1, r6
 80018ac:	428a      	cmp	r2, r1
 80018ae:	d904      	bls.n	80018ba <__aeabi_ddiv+0x2ea>
 80018b0:	1909      	adds	r1, r1, r4
 80018b2:	3b01      	subs	r3, #1
 80018b4:	428c      	cmp	r4, r1
 80018b6:	d800      	bhi.n	80018ba <__aeabi_ddiv+0x2ea>
 80018b8:	e111      	b.n	8001ade <__aeabi_ddiv+0x50e>
 80018ba:	1a89      	subs	r1, r1, r2
 80018bc:	4642      	mov	r2, r8
 80018be:	9e00      	ldr	r6, [sp, #0]
 80018c0:	0412      	lsls	r2, r2, #16
 80018c2:	431a      	orrs	r2, r3
 80018c4:	0c33      	lsrs	r3, r6, #16
 80018c6:	001f      	movs	r7, r3
 80018c8:	0c10      	lsrs	r0, r2, #16
 80018ca:	4690      	mov	r8, r2
 80018cc:	9302      	str	r3, [sp, #8]
 80018ce:	0413      	lsls	r3, r2, #16
 80018d0:	0432      	lsls	r2, r6, #16
 80018d2:	0c16      	lsrs	r6, r2, #16
 80018d4:	0032      	movs	r2, r6
 80018d6:	0c1b      	lsrs	r3, r3, #16
 80018d8:	435a      	muls	r2, r3
 80018da:	9603      	str	r6, [sp, #12]
 80018dc:	437b      	muls	r3, r7
 80018de:	4346      	muls	r6, r0
 80018e0:	4378      	muls	r0, r7
 80018e2:	0c17      	lsrs	r7, r2, #16
 80018e4:	46bc      	mov	ip, r7
 80018e6:	199b      	adds	r3, r3, r6
 80018e8:	4463      	add	r3, ip
 80018ea:	429e      	cmp	r6, r3
 80018ec:	d903      	bls.n	80018f6 <__aeabi_ddiv+0x326>
 80018ee:	2680      	movs	r6, #128	; 0x80
 80018f0:	0276      	lsls	r6, r6, #9
 80018f2:	46b4      	mov	ip, r6
 80018f4:	4460      	add	r0, ip
 80018f6:	0c1e      	lsrs	r6, r3, #16
 80018f8:	1830      	adds	r0, r6, r0
 80018fa:	0416      	lsls	r6, r2, #16
 80018fc:	041b      	lsls	r3, r3, #16
 80018fe:	0c36      	lsrs	r6, r6, #16
 8001900:	199e      	adds	r6, r3, r6
 8001902:	4281      	cmp	r1, r0
 8001904:	d200      	bcs.n	8001908 <__aeabi_ddiv+0x338>
 8001906:	e09c      	b.n	8001a42 <__aeabi_ddiv+0x472>
 8001908:	d100      	bne.n	800190c <__aeabi_ddiv+0x33c>
 800190a:	e097      	b.n	8001a3c <__aeabi_ddiv+0x46c>
 800190c:	1bae      	subs	r6, r5, r6
 800190e:	1a09      	subs	r1, r1, r0
 8001910:	42b5      	cmp	r5, r6
 8001912:	4180      	sbcs	r0, r0
 8001914:	4240      	negs	r0, r0
 8001916:	1a08      	subs	r0, r1, r0
 8001918:	4284      	cmp	r4, r0
 800191a:	d100      	bne.n	800191e <__aeabi_ddiv+0x34e>
 800191c:	e111      	b.n	8001b42 <__aeabi_ddiv+0x572>
 800191e:	4649      	mov	r1, r9
 8001920:	f7fe fc82 	bl	8000228 <__aeabi_uidivmod>
 8001924:	9a01      	ldr	r2, [sp, #4]
 8001926:	040b      	lsls	r3, r1, #16
 8001928:	4342      	muls	r2, r0
 800192a:	0c31      	lsrs	r1, r6, #16
 800192c:	0005      	movs	r5, r0
 800192e:	4319      	orrs	r1, r3
 8001930:	428a      	cmp	r2, r1
 8001932:	d907      	bls.n	8001944 <__aeabi_ddiv+0x374>
 8001934:	1909      	adds	r1, r1, r4
 8001936:	3d01      	subs	r5, #1
 8001938:	428c      	cmp	r4, r1
 800193a:	d803      	bhi.n	8001944 <__aeabi_ddiv+0x374>
 800193c:	428a      	cmp	r2, r1
 800193e:	d901      	bls.n	8001944 <__aeabi_ddiv+0x374>
 8001940:	1e85      	subs	r5, r0, #2
 8001942:	1909      	adds	r1, r1, r4
 8001944:	1a88      	subs	r0, r1, r2
 8001946:	4649      	mov	r1, r9
 8001948:	f7fe fc6e 	bl	8000228 <__aeabi_uidivmod>
 800194c:	0409      	lsls	r1, r1, #16
 800194e:	468c      	mov	ip, r1
 8001950:	0431      	lsls	r1, r6, #16
 8001952:	4666      	mov	r6, ip
 8001954:	9a01      	ldr	r2, [sp, #4]
 8001956:	0c09      	lsrs	r1, r1, #16
 8001958:	4342      	muls	r2, r0
 800195a:	0003      	movs	r3, r0
 800195c:	4331      	orrs	r1, r6
 800195e:	428a      	cmp	r2, r1
 8001960:	d907      	bls.n	8001972 <__aeabi_ddiv+0x3a2>
 8001962:	1909      	adds	r1, r1, r4
 8001964:	3b01      	subs	r3, #1
 8001966:	428c      	cmp	r4, r1
 8001968:	d803      	bhi.n	8001972 <__aeabi_ddiv+0x3a2>
 800196a:	428a      	cmp	r2, r1
 800196c:	d901      	bls.n	8001972 <__aeabi_ddiv+0x3a2>
 800196e:	1e83      	subs	r3, r0, #2
 8001970:	1909      	adds	r1, r1, r4
 8001972:	9e03      	ldr	r6, [sp, #12]
 8001974:	1a89      	subs	r1, r1, r2
 8001976:	0032      	movs	r2, r6
 8001978:	042d      	lsls	r5, r5, #16
 800197a:	431d      	orrs	r5, r3
 800197c:	9f02      	ldr	r7, [sp, #8]
 800197e:	042b      	lsls	r3, r5, #16
 8001980:	0c1b      	lsrs	r3, r3, #16
 8001982:	435a      	muls	r2, r3
 8001984:	437b      	muls	r3, r7
 8001986:	469c      	mov	ip, r3
 8001988:	0c28      	lsrs	r0, r5, #16
 800198a:	4346      	muls	r6, r0
 800198c:	0c13      	lsrs	r3, r2, #16
 800198e:	44b4      	add	ip, r6
 8001990:	4463      	add	r3, ip
 8001992:	4378      	muls	r0, r7
 8001994:	429e      	cmp	r6, r3
 8001996:	d903      	bls.n	80019a0 <__aeabi_ddiv+0x3d0>
 8001998:	2680      	movs	r6, #128	; 0x80
 800199a:	0276      	lsls	r6, r6, #9
 800199c:	46b4      	mov	ip, r6
 800199e:	4460      	add	r0, ip
 80019a0:	0c1e      	lsrs	r6, r3, #16
 80019a2:	0412      	lsls	r2, r2, #16
 80019a4:	041b      	lsls	r3, r3, #16
 80019a6:	0c12      	lsrs	r2, r2, #16
 80019a8:	1830      	adds	r0, r6, r0
 80019aa:	189b      	adds	r3, r3, r2
 80019ac:	4281      	cmp	r1, r0
 80019ae:	d306      	bcc.n	80019be <__aeabi_ddiv+0x3ee>
 80019b0:	d002      	beq.n	80019b8 <__aeabi_ddiv+0x3e8>
 80019b2:	2301      	movs	r3, #1
 80019b4:	431d      	orrs	r5, r3
 80019b6:	e6ce      	b.n	8001756 <__aeabi_ddiv+0x186>
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d100      	bne.n	80019be <__aeabi_ddiv+0x3ee>
 80019bc:	e6cb      	b.n	8001756 <__aeabi_ddiv+0x186>
 80019be:	1861      	adds	r1, r4, r1
 80019c0:	1e6e      	subs	r6, r5, #1
 80019c2:	42a1      	cmp	r1, r4
 80019c4:	d200      	bcs.n	80019c8 <__aeabi_ddiv+0x3f8>
 80019c6:	e0a4      	b.n	8001b12 <__aeabi_ddiv+0x542>
 80019c8:	4281      	cmp	r1, r0
 80019ca:	d200      	bcs.n	80019ce <__aeabi_ddiv+0x3fe>
 80019cc:	e0c9      	b.n	8001b62 <__aeabi_ddiv+0x592>
 80019ce:	d100      	bne.n	80019d2 <__aeabi_ddiv+0x402>
 80019d0:	e0d9      	b.n	8001b86 <__aeabi_ddiv+0x5b6>
 80019d2:	0035      	movs	r5, r6
 80019d4:	e7ed      	b.n	80019b2 <__aeabi_ddiv+0x3e2>
 80019d6:	2501      	movs	r5, #1
 80019d8:	426d      	negs	r5, r5
 80019da:	2101      	movs	r1, #1
 80019dc:	1a89      	subs	r1, r1, r2
 80019de:	2938      	cmp	r1, #56	; 0x38
 80019e0:	dd00      	ble.n	80019e4 <__aeabi_ddiv+0x414>
 80019e2:	e64c      	b.n	800167e <__aeabi_ddiv+0xae>
 80019e4:	291f      	cmp	r1, #31
 80019e6:	dc00      	bgt.n	80019ea <__aeabi_ddiv+0x41a>
 80019e8:	e07f      	b.n	8001aea <__aeabi_ddiv+0x51a>
 80019ea:	231f      	movs	r3, #31
 80019ec:	425b      	negs	r3, r3
 80019ee:	1a9a      	subs	r2, r3, r2
 80019f0:	4643      	mov	r3, r8
 80019f2:	40d3      	lsrs	r3, r2
 80019f4:	2920      	cmp	r1, #32
 80019f6:	d004      	beq.n	8001a02 <__aeabi_ddiv+0x432>
 80019f8:	4644      	mov	r4, r8
 80019fa:	4a65      	ldr	r2, [pc, #404]	; (8001b90 <__aeabi_ddiv+0x5c0>)
 80019fc:	445a      	add	r2, fp
 80019fe:	4094      	lsls	r4, r2
 8001a00:	4325      	orrs	r5, r4
 8001a02:	1e6a      	subs	r2, r5, #1
 8001a04:	4195      	sbcs	r5, r2
 8001a06:	2207      	movs	r2, #7
 8001a08:	432b      	orrs	r3, r5
 8001a0a:	0015      	movs	r5, r2
 8001a0c:	2400      	movs	r4, #0
 8001a0e:	401d      	ands	r5, r3
 8001a10:	421a      	tst	r2, r3
 8001a12:	d100      	bne.n	8001a16 <__aeabi_ddiv+0x446>
 8001a14:	e0a1      	b.n	8001b5a <__aeabi_ddiv+0x58a>
 8001a16:	220f      	movs	r2, #15
 8001a18:	2400      	movs	r4, #0
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	2a04      	cmp	r2, #4
 8001a1e:	d100      	bne.n	8001a22 <__aeabi_ddiv+0x452>
 8001a20:	e098      	b.n	8001b54 <__aeabi_ddiv+0x584>
 8001a22:	1d1a      	adds	r2, r3, #4
 8001a24:	429a      	cmp	r2, r3
 8001a26:	419b      	sbcs	r3, r3
 8001a28:	425b      	negs	r3, r3
 8001a2a:	18e4      	adds	r4, r4, r3
 8001a2c:	0013      	movs	r3, r2
 8001a2e:	0222      	lsls	r2, r4, #8
 8001a30:	d400      	bmi.n	8001a34 <__aeabi_ddiv+0x464>
 8001a32:	e08f      	b.n	8001b54 <__aeabi_ddiv+0x584>
 8001a34:	2301      	movs	r3, #1
 8001a36:	2400      	movs	r4, #0
 8001a38:	2500      	movs	r5, #0
 8001a3a:	e623      	b.n	8001684 <__aeabi_ddiv+0xb4>
 8001a3c:	42b5      	cmp	r5, r6
 8001a3e:	d300      	bcc.n	8001a42 <__aeabi_ddiv+0x472>
 8001a40:	e764      	b.n	800190c <__aeabi_ddiv+0x33c>
 8001a42:	4643      	mov	r3, r8
 8001a44:	1e5a      	subs	r2, r3, #1
 8001a46:	9b00      	ldr	r3, [sp, #0]
 8001a48:	469c      	mov	ip, r3
 8001a4a:	4465      	add	r5, ip
 8001a4c:	001f      	movs	r7, r3
 8001a4e:	429d      	cmp	r5, r3
 8001a50:	419b      	sbcs	r3, r3
 8001a52:	425b      	negs	r3, r3
 8001a54:	191b      	adds	r3, r3, r4
 8001a56:	18c9      	adds	r1, r1, r3
 8001a58:	428c      	cmp	r4, r1
 8001a5a:	d23a      	bcs.n	8001ad2 <__aeabi_ddiv+0x502>
 8001a5c:	4288      	cmp	r0, r1
 8001a5e:	d863      	bhi.n	8001b28 <__aeabi_ddiv+0x558>
 8001a60:	d060      	beq.n	8001b24 <__aeabi_ddiv+0x554>
 8001a62:	4690      	mov	r8, r2
 8001a64:	e752      	b.n	800190c <__aeabi_ddiv+0x33c>
 8001a66:	42aa      	cmp	r2, r5
 8001a68:	d900      	bls.n	8001a6c <__aeabi_ddiv+0x49c>
 8001a6a:	e6ea      	b.n	8001842 <__aeabi_ddiv+0x272>
 8001a6c:	4643      	mov	r3, r8
 8001a6e:	07de      	lsls	r6, r3, #31
 8001a70:	0858      	lsrs	r0, r3, #1
 8001a72:	086b      	lsrs	r3, r5, #1
 8001a74:	431e      	orrs	r6, r3
 8001a76:	07ed      	lsls	r5, r5, #31
 8001a78:	e6ea      	b.n	8001850 <__aeabi_ddiv+0x280>
 8001a7a:	4648      	mov	r0, r9
 8001a7c:	f001 f890 	bl	8002ba0 <__clzsi2>
 8001a80:	0001      	movs	r1, r0
 8001a82:	0002      	movs	r2, r0
 8001a84:	3115      	adds	r1, #21
 8001a86:	3220      	adds	r2, #32
 8001a88:	291c      	cmp	r1, #28
 8001a8a:	dc00      	bgt.n	8001a8e <__aeabi_ddiv+0x4be>
 8001a8c:	e61a      	b.n	80016c4 <__aeabi_ddiv+0xf4>
 8001a8e:	464b      	mov	r3, r9
 8001a90:	3808      	subs	r0, #8
 8001a92:	4083      	lsls	r3, r0
 8001a94:	2500      	movs	r5, #0
 8001a96:	4698      	mov	r8, r3
 8001a98:	e620      	b.n	80016dc <__aeabi_ddiv+0x10c>
 8001a9a:	f001 f881 	bl	8002ba0 <__clzsi2>
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	001a      	movs	r2, r3
 8001aa2:	3215      	adds	r2, #21
 8001aa4:	3020      	adds	r0, #32
 8001aa6:	2a1c      	cmp	r2, #28
 8001aa8:	dc00      	bgt.n	8001aac <__aeabi_ddiv+0x4dc>
 8001aaa:	e630      	b.n	800170e <__aeabi_ddiv+0x13e>
 8001aac:	4654      	mov	r4, sl
 8001aae:	3b08      	subs	r3, #8
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	409c      	lsls	r4, r3
 8001ab4:	e635      	b.n	8001722 <__aeabi_ddiv+0x152>
 8001ab6:	230f      	movs	r3, #15
 8001ab8:	402b      	ands	r3, r5
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	d100      	bne.n	8001ac0 <__aeabi_ddiv+0x4f0>
 8001abe:	e652      	b.n	8001766 <__aeabi_ddiv+0x196>
 8001ac0:	2305      	movs	r3, #5
 8001ac2:	425b      	negs	r3, r3
 8001ac4:	42ab      	cmp	r3, r5
 8001ac6:	419b      	sbcs	r3, r3
 8001ac8:	3504      	adds	r5, #4
 8001aca:	425b      	negs	r3, r3
 8001acc:	08ed      	lsrs	r5, r5, #3
 8001ace:	4498      	add	r8, r3
 8001ad0:	e64a      	b.n	8001768 <__aeabi_ddiv+0x198>
 8001ad2:	428c      	cmp	r4, r1
 8001ad4:	d1c5      	bne.n	8001a62 <__aeabi_ddiv+0x492>
 8001ad6:	42af      	cmp	r7, r5
 8001ad8:	d9c0      	bls.n	8001a5c <__aeabi_ddiv+0x48c>
 8001ada:	4690      	mov	r8, r2
 8001adc:	e716      	b.n	800190c <__aeabi_ddiv+0x33c>
 8001ade:	428a      	cmp	r2, r1
 8001ae0:	d800      	bhi.n	8001ae4 <__aeabi_ddiv+0x514>
 8001ae2:	e6ea      	b.n	80018ba <__aeabi_ddiv+0x2ea>
 8001ae4:	1e83      	subs	r3, r0, #2
 8001ae6:	1909      	adds	r1, r1, r4
 8001ae8:	e6e7      	b.n	80018ba <__aeabi_ddiv+0x2ea>
 8001aea:	4a2a      	ldr	r2, [pc, #168]	; (8001b94 <__aeabi_ddiv+0x5c4>)
 8001aec:	0028      	movs	r0, r5
 8001aee:	445a      	add	r2, fp
 8001af0:	4643      	mov	r3, r8
 8001af2:	4095      	lsls	r5, r2
 8001af4:	4093      	lsls	r3, r2
 8001af6:	40c8      	lsrs	r0, r1
 8001af8:	1e6a      	subs	r2, r5, #1
 8001afa:	4195      	sbcs	r5, r2
 8001afc:	4644      	mov	r4, r8
 8001afe:	4303      	orrs	r3, r0
 8001b00:	432b      	orrs	r3, r5
 8001b02:	40cc      	lsrs	r4, r1
 8001b04:	075a      	lsls	r2, r3, #29
 8001b06:	d092      	beq.n	8001a2e <__aeabi_ddiv+0x45e>
 8001b08:	220f      	movs	r2, #15
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	2a04      	cmp	r2, #4
 8001b0e:	d188      	bne.n	8001a22 <__aeabi_ddiv+0x452>
 8001b10:	e78d      	b.n	8001a2e <__aeabi_ddiv+0x45e>
 8001b12:	0035      	movs	r5, r6
 8001b14:	4281      	cmp	r1, r0
 8001b16:	d000      	beq.n	8001b1a <__aeabi_ddiv+0x54a>
 8001b18:	e74b      	b.n	80019b2 <__aeabi_ddiv+0x3e2>
 8001b1a:	9a00      	ldr	r2, [sp, #0]
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d000      	beq.n	8001b22 <__aeabi_ddiv+0x552>
 8001b20:	e747      	b.n	80019b2 <__aeabi_ddiv+0x3e2>
 8001b22:	e618      	b.n	8001756 <__aeabi_ddiv+0x186>
 8001b24:	42ae      	cmp	r6, r5
 8001b26:	d99c      	bls.n	8001a62 <__aeabi_ddiv+0x492>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	425b      	negs	r3, r3
 8001b2c:	469c      	mov	ip, r3
 8001b2e:	9b00      	ldr	r3, [sp, #0]
 8001b30:	44e0      	add	r8, ip
 8001b32:	469c      	mov	ip, r3
 8001b34:	4465      	add	r5, ip
 8001b36:	429d      	cmp	r5, r3
 8001b38:	419b      	sbcs	r3, r3
 8001b3a:	425b      	negs	r3, r3
 8001b3c:	191b      	adds	r3, r3, r4
 8001b3e:	18c9      	adds	r1, r1, r3
 8001b40:	e6e4      	b.n	800190c <__aeabi_ddiv+0x33c>
 8001b42:	4a15      	ldr	r2, [pc, #84]	; (8001b98 <__aeabi_ddiv+0x5c8>)
 8001b44:	445a      	add	r2, fp
 8001b46:	2a00      	cmp	r2, #0
 8001b48:	dc00      	bgt.n	8001b4c <__aeabi_ddiv+0x57c>
 8001b4a:	e744      	b.n	80019d6 <__aeabi_ddiv+0x406>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	2500      	movs	r5, #0
 8001b50:	4498      	add	r8, r3
 8001b52:	e609      	b.n	8001768 <__aeabi_ddiv+0x198>
 8001b54:	0765      	lsls	r5, r4, #29
 8001b56:	0264      	lsls	r4, r4, #9
 8001b58:	0b24      	lsrs	r4, r4, #12
 8001b5a:	08db      	lsrs	r3, r3, #3
 8001b5c:	431d      	orrs	r5, r3
 8001b5e:	2300      	movs	r3, #0
 8001b60:	e590      	b.n	8001684 <__aeabi_ddiv+0xb4>
 8001b62:	9e00      	ldr	r6, [sp, #0]
 8001b64:	3d02      	subs	r5, #2
 8001b66:	0072      	lsls	r2, r6, #1
 8001b68:	42b2      	cmp	r2, r6
 8001b6a:	41bf      	sbcs	r7, r7
 8001b6c:	427f      	negs	r7, r7
 8001b6e:	193c      	adds	r4, r7, r4
 8001b70:	1909      	adds	r1, r1, r4
 8001b72:	9200      	str	r2, [sp, #0]
 8001b74:	e7ce      	b.n	8001b14 <__aeabi_ddiv+0x544>
 8001b76:	2480      	movs	r4, #128	; 0x80
 8001b78:	4643      	mov	r3, r8
 8001b7a:	0324      	lsls	r4, r4, #12
 8001b7c:	431c      	orrs	r4, r3
 8001b7e:	0324      	lsls	r4, r4, #12
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <__aeabi_ddiv+0x5cc>)
 8001b82:	0b24      	lsrs	r4, r4, #12
 8001b84:	e57e      	b.n	8001684 <__aeabi_ddiv+0xb4>
 8001b86:	9a00      	ldr	r2, [sp, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d3ea      	bcc.n	8001b62 <__aeabi_ddiv+0x592>
 8001b8c:	0035      	movs	r5, r6
 8001b8e:	e7c4      	b.n	8001b1a <__aeabi_ddiv+0x54a>
 8001b90:	0000043e 	.word	0x0000043e
 8001b94:	0000041e 	.word	0x0000041e
 8001b98:	000003ff 	.word	0x000003ff
 8001b9c:	000007ff 	.word	0x000007ff

08001ba0 <__eqdf2>:
 8001ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ba2:	464f      	mov	r7, r9
 8001ba4:	4646      	mov	r6, r8
 8001ba6:	46d6      	mov	lr, sl
 8001ba8:	4694      	mov	ip, r2
 8001baa:	4691      	mov	r9, r2
 8001bac:	031a      	lsls	r2, r3, #12
 8001bae:	0b12      	lsrs	r2, r2, #12
 8001bb0:	4d18      	ldr	r5, [pc, #96]	; (8001c14 <__eqdf2+0x74>)
 8001bb2:	b5c0      	push	{r6, r7, lr}
 8001bb4:	004c      	lsls	r4, r1, #1
 8001bb6:	030f      	lsls	r7, r1, #12
 8001bb8:	4692      	mov	sl, r2
 8001bba:	005a      	lsls	r2, r3, #1
 8001bbc:	0006      	movs	r6, r0
 8001bbe:	4680      	mov	r8, r0
 8001bc0:	0b3f      	lsrs	r7, r7, #12
 8001bc2:	2001      	movs	r0, #1
 8001bc4:	0d64      	lsrs	r4, r4, #21
 8001bc6:	0fc9      	lsrs	r1, r1, #31
 8001bc8:	0d52      	lsrs	r2, r2, #21
 8001bca:	0fdb      	lsrs	r3, r3, #31
 8001bcc:	42ac      	cmp	r4, r5
 8001bce:	d00a      	beq.n	8001be6 <__eqdf2+0x46>
 8001bd0:	42aa      	cmp	r2, r5
 8001bd2:	d003      	beq.n	8001bdc <__eqdf2+0x3c>
 8001bd4:	4294      	cmp	r4, r2
 8001bd6:	d101      	bne.n	8001bdc <__eqdf2+0x3c>
 8001bd8:	4557      	cmp	r7, sl
 8001bda:	d00d      	beq.n	8001bf8 <__eqdf2+0x58>
 8001bdc:	bce0      	pop	{r5, r6, r7}
 8001bde:	46ba      	mov	sl, r7
 8001be0:	46b1      	mov	r9, r6
 8001be2:	46a8      	mov	r8, r5
 8001be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001be6:	003d      	movs	r5, r7
 8001be8:	4335      	orrs	r5, r6
 8001bea:	d1f7      	bne.n	8001bdc <__eqdf2+0x3c>
 8001bec:	42a2      	cmp	r2, r4
 8001bee:	d1f5      	bne.n	8001bdc <__eqdf2+0x3c>
 8001bf0:	4652      	mov	r2, sl
 8001bf2:	4665      	mov	r5, ip
 8001bf4:	432a      	orrs	r2, r5
 8001bf6:	d1f1      	bne.n	8001bdc <__eqdf2+0x3c>
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	45c8      	cmp	r8, r9
 8001bfc:	d1ee      	bne.n	8001bdc <__eqdf2+0x3c>
 8001bfe:	4299      	cmp	r1, r3
 8001c00:	d006      	beq.n	8001c10 <__eqdf2+0x70>
 8001c02:	2c00      	cmp	r4, #0
 8001c04:	d1ea      	bne.n	8001bdc <__eqdf2+0x3c>
 8001c06:	433e      	orrs	r6, r7
 8001c08:	0030      	movs	r0, r6
 8001c0a:	1e46      	subs	r6, r0, #1
 8001c0c:	41b0      	sbcs	r0, r6
 8001c0e:	e7e5      	b.n	8001bdc <__eqdf2+0x3c>
 8001c10:	2000      	movs	r0, #0
 8001c12:	e7e3      	b.n	8001bdc <__eqdf2+0x3c>
 8001c14:	000007ff 	.word	0x000007ff

08001c18 <__gedf2>:
 8001c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c1a:	464e      	mov	r6, r9
 8001c1c:	4645      	mov	r5, r8
 8001c1e:	4657      	mov	r7, sl
 8001c20:	46de      	mov	lr, fp
 8001c22:	0004      	movs	r4, r0
 8001c24:	0018      	movs	r0, r3
 8001c26:	b5e0      	push	{r5, r6, r7, lr}
 8001c28:	0016      	movs	r6, r2
 8001c2a:	031b      	lsls	r3, r3, #12
 8001c2c:	0b1b      	lsrs	r3, r3, #12
 8001c2e:	4d32      	ldr	r5, [pc, #200]	; (8001cf8 <__gedf2+0xe0>)
 8001c30:	030f      	lsls	r7, r1, #12
 8001c32:	004a      	lsls	r2, r1, #1
 8001c34:	4699      	mov	r9, r3
 8001c36:	0043      	lsls	r3, r0, #1
 8001c38:	46a4      	mov	ip, r4
 8001c3a:	46b0      	mov	r8, r6
 8001c3c:	0b3f      	lsrs	r7, r7, #12
 8001c3e:	0d52      	lsrs	r2, r2, #21
 8001c40:	0fc9      	lsrs	r1, r1, #31
 8001c42:	0d5b      	lsrs	r3, r3, #21
 8001c44:	0fc0      	lsrs	r0, r0, #31
 8001c46:	42aa      	cmp	r2, r5
 8001c48:	d029      	beq.n	8001c9e <__gedf2+0x86>
 8001c4a:	42ab      	cmp	r3, r5
 8001c4c:	d018      	beq.n	8001c80 <__gedf2+0x68>
 8001c4e:	2a00      	cmp	r2, #0
 8001c50:	d12a      	bne.n	8001ca8 <__gedf2+0x90>
 8001c52:	433c      	orrs	r4, r7
 8001c54:	46a3      	mov	fp, r4
 8001c56:	4265      	negs	r5, r4
 8001c58:	4165      	adcs	r5, r4
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d102      	bne.n	8001c64 <__gedf2+0x4c>
 8001c5e:	464c      	mov	r4, r9
 8001c60:	4326      	orrs	r6, r4
 8001c62:	d027      	beq.n	8001cb4 <__gedf2+0x9c>
 8001c64:	2d00      	cmp	r5, #0
 8001c66:	d115      	bne.n	8001c94 <__gedf2+0x7c>
 8001c68:	4281      	cmp	r1, r0
 8001c6a:	d028      	beq.n	8001cbe <__gedf2+0xa6>
 8001c6c:	2002      	movs	r0, #2
 8001c6e:	3901      	subs	r1, #1
 8001c70:	4008      	ands	r0, r1
 8001c72:	3801      	subs	r0, #1
 8001c74:	bcf0      	pop	{r4, r5, r6, r7}
 8001c76:	46bb      	mov	fp, r7
 8001c78:	46b2      	mov	sl, r6
 8001c7a:	46a9      	mov	r9, r5
 8001c7c:	46a0      	mov	r8, r4
 8001c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c80:	464d      	mov	r5, r9
 8001c82:	432e      	orrs	r6, r5
 8001c84:	d12f      	bne.n	8001ce6 <__gedf2+0xce>
 8001c86:	2a00      	cmp	r2, #0
 8001c88:	d1ee      	bne.n	8001c68 <__gedf2+0x50>
 8001c8a:	433c      	orrs	r4, r7
 8001c8c:	4265      	negs	r5, r4
 8001c8e:	4165      	adcs	r5, r4
 8001c90:	2d00      	cmp	r5, #0
 8001c92:	d0e9      	beq.n	8001c68 <__gedf2+0x50>
 8001c94:	2800      	cmp	r0, #0
 8001c96:	d1ed      	bne.n	8001c74 <__gedf2+0x5c>
 8001c98:	2001      	movs	r0, #1
 8001c9a:	4240      	negs	r0, r0
 8001c9c:	e7ea      	b.n	8001c74 <__gedf2+0x5c>
 8001c9e:	003d      	movs	r5, r7
 8001ca0:	4325      	orrs	r5, r4
 8001ca2:	d120      	bne.n	8001ce6 <__gedf2+0xce>
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d0eb      	beq.n	8001c80 <__gedf2+0x68>
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1dd      	bne.n	8001c68 <__gedf2+0x50>
 8001cac:	464c      	mov	r4, r9
 8001cae:	4326      	orrs	r6, r4
 8001cb0:	d1da      	bne.n	8001c68 <__gedf2+0x50>
 8001cb2:	e7db      	b.n	8001c6c <__gedf2+0x54>
 8001cb4:	465b      	mov	r3, fp
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0db      	beq.n	8001c74 <__gedf2+0x5c>
 8001cbc:	e7d6      	b.n	8001c6c <__gedf2+0x54>
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	dc0a      	bgt.n	8001cd8 <__gedf2+0xc0>
 8001cc2:	dbe7      	blt.n	8001c94 <__gedf2+0x7c>
 8001cc4:	454f      	cmp	r7, r9
 8001cc6:	d8d1      	bhi.n	8001c6c <__gedf2+0x54>
 8001cc8:	d010      	beq.n	8001cec <__gedf2+0xd4>
 8001cca:	2000      	movs	r0, #0
 8001ccc:	454f      	cmp	r7, r9
 8001cce:	d2d1      	bcs.n	8001c74 <__gedf2+0x5c>
 8001cd0:	2900      	cmp	r1, #0
 8001cd2:	d0e1      	beq.n	8001c98 <__gedf2+0x80>
 8001cd4:	0008      	movs	r0, r1
 8001cd6:	e7cd      	b.n	8001c74 <__gedf2+0x5c>
 8001cd8:	4243      	negs	r3, r0
 8001cda:	4158      	adcs	r0, r3
 8001cdc:	2302      	movs	r3, #2
 8001cde:	4240      	negs	r0, r0
 8001ce0:	4018      	ands	r0, r3
 8001ce2:	3801      	subs	r0, #1
 8001ce4:	e7c6      	b.n	8001c74 <__gedf2+0x5c>
 8001ce6:	2002      	movs	r0, #2
 8001ce8:	4240      	negs	r0, r0
 8001cea:	e7c3      	b.n	8001c74 <__gedf2+0x5c>
 8001cec:	45c4      	cmp	ip, r8
 8001cee:	d8bd      	bhi.n	8001c6c <__gedf2+0x54>
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	45c4      	cmp	ip, r8
 8001cf4:	d2be      	bcs.n	8001c74 <__gedf2+0x5c>
 8001cf6:	e7eb      	b.n	8001cd0 <__gedf2+0xb8>
 8001cf8:	000007ff 	.word	0x000007ff

08001cfc <__ledf2>:
 8001cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cfe:	464e      	mov	r6, r9
 8001d00:	4645      	mov	r5, r8
 8001d02:	4657      	mov	r7, sl
 8001d04:	46de      	mov	lr, fp
 8001d06:	0004      	movs	r4, r0
 8001d08:	0018      	movs	r0, r3
 8001d0a:	b5e0      	push	{r5, r6, r7, lr}
 8001d0c:	0016      	movs	r6, r2
 8001d0e:	031b      	lsls	r3, r3, #12
 8001d10:	0b1b      	lsrs	r3, r3, #12
 8001d12:	4d31      	ldr	r5, [pc, #196]	; (8001dd8 <__ledf2+0xdc>)
 8001d14:	030f      	lsls	r7, r1, #12
 8001d16:	004a      	lsls	r2, r1, #1
 8001d18:	4699      	mov	r9, r3
 8001d1a:	0043      	lsls	r3, r0, #1
 8001d1c:	46a4      	mov	ip, r4
 8001d1e:	46b0      	mov	r8, r6
 8001d20:	0b3f      	lsrs	r7, r7, #12
 8001d22:	0d52      	lsrs	r2, r2, #21
 8001d24:	0fc9      	lsrs	r1, r1, #31
 8001d26:	0d5b      	lsrs	r3, r3, #21
 8001d28:	0fc0      	lsrs	r0, r0, #31
 8001d2a:	42aa      	cmp	r2, r5
 8001d2c:	d011      	beq.n	8001d52 <__ledf2+0x56>
 8001d2e:	42ab      	cmp	r3, r5
 8001d30:	d014      	beq.n	8001d5c <__ledf2+0x60>
 8001d32:	2a00      	cmp	r2, #0
 8001d34:	d12f      	bne.n	8001d96 <__ledf2+0x9a>
 8001d36:	433c      	orrs	r4, r7
 8001d38:	46a3      	mov	fp, r4
 8001d3a:	4265      	negs	r5, r4
 8001d3c:	4165      	adcs	r5, r4
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d114      	bne.n	8001d6c <__ledf2+0x70>
 8001d42:	464c      	mov	r4, r9
 8001d44:	4326      	orrs	r6, r4
 8001d46:	d111      	bne.n	8001d6c <__ledf2+0x70>
 8001d48:	465b      	mov	r3, fp
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d017      	beq.n	8001d80 <__ledf2+0x84>
 8001d50:	e010      	b.n	8001d74 <__ledf2+0x78>
 8001d52:	003d      	movs	r5, r7
 8001d54:	4325      	orrs	r5, r4
 8001d56:	d112      	bne.n	8001d7e <__ledf2+0x82>
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d11c      	bne.n	8001d96 <__ledf2+0x9a>
 8001d5c:	464d      	mov	r5, r9
 8001d5e:	432e      	orrs	r6, r5
 8001d60:	d10d      	bne.n	8001d7e <__ledf2+0x82>
 8001d62:	2a00      	cmp	r2, #0
 8001d64:	d104      	bne.n	8001d70 <__ledf2+0x74>
 8001d66:	433c      	orrs	r4, r7
 8001d68:	4265      	negs	r5, r4
 8001d6a:	4165      	adcs	r5, r4
 8001d6c:	2d00      	cmp	r5, #0
 8001d6e:	d10d      	bne.n	8001d8c <__ledf2+0x90>
 8001d70:	4281      	cmp	r1, r0
 8001d72:	d016      	beq.n	8001da2 <__ledf2+0xa6>
 8001d74:	2002      	movs	r0, #2
 8001d76:	3901      	subs	r1, #1
 8001d78:	4008      	ands	r0, r1
 8001d7a:	3801      	subs	r0, #1
 8001d7c:	e000      	b.n	8001d80 <__ledf2+0x84>
 8001d7e:	2002      	movs	r0, #2
 8001d80:	bcf0      	pop	{r4, r5, r6, r7}
 8001d82:	46bb      	mov	fp, r7
 8001d84:	46b2      	mov	sl, r6
 8001d86:	46a9      	mov	r9, r5
 8001d88:	46a0      	mov	r8, r4
 8001d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d8c:	2800      	cmp	r0, #0
 8001d8e:	d1f7      	bne.n	8001d80 <__ledf2+0x84>
 8001d90:	2001      	movs	r0, #1
 8001d92:	4240      	negs	r0, r0
 8001d94:	e7f4      	b.n	8001d80 <__ledf2+0x84>
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1ea      	bne.n	8001d70 <__ledf2+0x74>
 8001d9a:	464c      	mov	r4, r9
 8001d9c:	4326      	orrs	r6, r4
 8001d9e:	d1e7      	bne.n	8001d70 <__ledf2+0x74>
 8001da0:	e7e8      	b.n	8001d74 <__ledf2+0x78>
 8001da2:	429a      	cmp	r2, r3
 8001da4:	dd06      	ble.n	8001db4 <__ledf2+0xb8>
 8001da6:	4243      	negs	r3, r0
 8001da8:	4158      	adcs	r0, r3
 8001daa:	2302      	movs	r3, #2
 8001dac:	4240      	negs	r0, r0
 8001dae:	4018      	ands	r0, r3
 8001db0:	3801      	subs	r0, #1
 8001db2:	e7e5      	b.n	8001d80 <__ledf2+0x84>
 8001db4:	429a      	cmp	r2, r3
 8001db6:	dbe9      	blt.n	8001d8c <__ledf2+0x90>
 8001db8:	454f      	cmp	r7, r9
 8001dba:	d8db      	bhi.n	8001d74 <__ledf2+0x78>
 8001dbc:	d006      	beq.n	8001dcc <__ledf2+0xd0>
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	454f      	cmp	r7, r9
 8001dc2:	d2dd      	bcs.n	8001d80 <__ledf2+0x84>
 8001dc4:	2900      	cmp	r1, #0
 8001dc6:	d0e3      	beq.n	8001d90 <__ledf2+0x94>
 8001dc8:	0008      	movs	r0, r1
 8001dca:	e7d9      	b.n	8001d80 <__ledf2+0x84>
 8001dcc:	45c4      	cmp	ip, r8
 8001dce:	d8d1      	bhi.n	8001d74 <__ledf2+0x78>
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	45c4      	cmp	ip, r8
 8001dd4:	d2d4      	bcs.n	8001d80 <__ledf2+0x84>
 8001dd6:	e7f5      	b.n	8001dc4 <__ledf2+0xc8>
 8001dd8:	000007ff 	.word	0x000007ff

08001ddc <__aeabi_dmul>:
 8001ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dde:	4657      	mov	r7, sl
 8001de0:	464e      	mov	r6, r9
 8001de2:	4645      	mov	r5, r8
 8001de4:	46de      	mov	lr, fp
 8001de6:	b5e0      	push	{r5, r6, r7, lr}
 8001de8:	4698      	mov	r8, r3
 8001dea:	030c      	lsls	r4, r1, #12
 8001dec:	004b      	lsls	r3, r1, #1
 8001dee:	0006      	movs	r6, r0
 8001df0:	4692      	mov	sl, r2
 8001df2:	b087      	sub	sp, #28
 8001df4:	0b24      	lsrs	r4, r4, #12
 8001df6:	0d5b      	lsrs	r3, r3, #21
 8001df8:	0fcf      	lsrs	r7, r1, #31
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d06c      	beq.n	8001ed8 <__aeabi_dmul+0xfc>
 8001dfe:	4add      	ldr	r2, [pc, #884]	; (8002174 <__aeabi_dmul+0x398>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d100      	bne.n	8001e06 <__aeabi_dmul+0x2a>
 8001e04:	e086      	b.n	8001f14 <__aeabi_dmul+0x138>
 8001e06:	0f42      	lsrs	r2, r0, #29
 8001e08:	00e4      	lsls	r4, r4, #3
 8001e0a:	4314      	orrs	r4, r2
 8001e0c:	2280      	movs	r2, #128	; 0x80
 8001e0e:	0412      	lsls	r2, r2, #16
 8001e10:	4314      	orrs	r4, r2
 8001e12:	4ad9      	ldr	r2, [pc, #868]	; (8002178 <__aeabi_dmul+0x39c>)
 8001e14:	00c5      	lsls	r5, r0, #3
 8001e16:	4694      	mov	ip, r2
 8001e18:	4463      	add	r3, ip
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	4699      	mov	r9, r3
 8001e20:	469b      	mov	fp, r3
 8001e22:	4643      	mov	r3, r8
 8001e24:	4642      	mov	r2, r8
 8001e26:	031e      	lsls	r6, r3, #12
 8001e28:	0fd2      	lsrs	r2, r2, #31
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4650      	mov	r0, sl
 8001e2e:	4690      	mov	r8, r2
 8001e30:	0b36      	lsrs	r6, r6, #12
 8001e32:	0d5b      	lsrs	r3, r3, #21
 8001e34:	d100      	bne.n	8001e38 <__aeabi_dmul+0x5c>
 8001e36:	e078      	b.n	8001f2a <__aeabi_dmul+0x14e>
 8001e38:	4ace      	ldr	r2, [pc, #824]	; (8002174 <__aeabi_dmul+0x398>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d01d      	beq.n	8001e7a <__aeabi_dmul+0x9e>
 8001e3e:	49ce      	ldr	r1, [pc, #824]	; (8002178 <__aeabi_dmul+0x39c>)
 8001e40:	0f42      	lsrs	r2, r0, #29
 8001e42:	468c      	mov	ip, r1
 8001e44:	9900      	ldr	r1, [sp, #0]
 8001e46:	4463      	add	r3, ip
 8001e48:	00f6      	lsls	r6, r6, #3
 8001e4a:	468c      	mov	ip, r1
 8001e4c:	4316      	orrs	r6, r2
 8001e4e:	2280      	movs	r2, #128	; 0x80
 8001e50:	449c      	add	ip, r3
 8001e52:	0412      	lsls	r2, r2, #16
 8001e54:	4663      	mov	r3, ip
 8001e56:	4316      	orrs	r6, r2
 8001e58:	00c2      	lsls	r2, r0, #3
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	9900      	ldr	r1, [sp, #0]
 8001e60:	4643      	mov	r3, r8
 8001e62:	3101      	adds	r1, #1
 8001e64:	468c      	mov	ip, r1
 8001e66:	4649      	mov	r1, r9
 8001e68:	407b      	eors	r3, r7
 8001e6a:	9301      	str	r3, [sp, #4]
 8001e6c:	290f      	cmp	r1, #15
 8001e6e:	d900      	bls.n	8001e72 <__aeabi_dmul+0x96>
 8001e70:	e07e      	b.n	8001f70 <__aeabi_dmul+0x194>
 8001e72:	4bc2      	ldr	r3, [pc, #776]	; (800217c <__aeabi_dmul+0x3a0>)
 8001e74:	0089      	lsls	r1, r1, #2
 8001e76:	5859      	ldr	r1, [r3, r1]
 8001e78:	468f      	mov	pc, r1
 8001e7a:	4652      	mov	r2, sl
 8001e7c:	9b00      	ldr	r3, [sp, #0]
 8001e7e:	4332      	orrs	r2, r6
 8001e80:	d000      	beq.n	8001e84 <__aeabi_dmul+0xa8>
 8001e82:	e156      	b.n	8002132 <__aeabi_dmul+0x356>
 8001e84:	49bb      	ldr	r1, [pc, #748]	; (8002174 <__aeabi_dmul+0x398>)
 8001e86:	2600      	movs	r6, #0
 8001e88:	468c      	mov	ip, r1
 8001e8a:	4463      	add	r3, ip
 8001e8c:	4649      	mov	r1, r9
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	2302      	movs	r3, #2
 8001e92:	4319      	orrs	r1, r3
 8001e94:	4689      	mov	r9, r1
 8001e96:	2002      	movs	r0, #2
 8001e98:	e7e1      	b.n	8001e5e <__aeabi_dmul+0x82>
 8001e9a:	4643      	mov	r3, r8
 8001e9c:	9301      	str	r3, [sp, #4]
 8001e9e:	0034      	movs	r4, r6
 8001ea0:	0015      	movs	r5, r2
 8001ea2:	4683      	mov	fp, r0
 8001ea4:	465b      	mov	r3, fp
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d05e      	beq.n	8001f68 <__aeabi_dmul+0x18c>
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	d100      	bne.n	8001eb0 <__aeabi_dmul+0xd4>
 8001eae:	e1f3      	b.n	8002298 <__aeabi_dmul+0x4bc>
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d000      	beq.n	8001eb6 <__aeabi_dmul+0xda>
 8001eb4:	e118      	b.n	80020e8 <__aeabi_dmul+0x30c>
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2400      	movs	r4, #0
 8001eba:	2500      	movs	r5, #0
 8001ebc:	9b01      	ldr	r3, [sp, #4]
 8001ebe:	0512      	lsls	r2, r2, #20
 8001ec0:	4322      	orrs	r2, r4
 8001ec2:	07db      	lsls	r3, r3, #31
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	0028      	movs	r0, r5
 8001ec8:	0011      	movs	r1, r2
 8001eca:	b007      	add	sp, #28
 8001ecc:	bcf0      	pop	{r4, r5, r6, r7}
 8001ece:	46bb      	mov	fp, r7
 8001ed0:	46b2      	mov	sl, r6
 8001ed2:	46a9      	mov	r9, r5
 8001ed4:	46a0      	mov	r8, r4
 8001ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed8:	0025      	movs	r5, r4
 8001eda:	4305      	orrs	r5, r0
 8001edc:	d100      	bne.n	8001ee0 <__aeabi_dmul+0x104>
 8001ede:	e141      	b.n	8002164 <__aeabi_dmul+0x388>
 8001ee0:	2c00      	cmp	r4, #0
 8001ee2:	d100      	bne.n	8001ee6 <__aeabi_dmul+0x10a>
 8001ee4:	e1ad      	b.n	8002242 <__aeabi_dmul+0x466>
 8001ee6:	0020      	movs	r0, r4
 8001ee8:	f000 fe5a 	bl	8002ba0 <__clzsi2>
 8001eec:	0001      	movs	r1, r0
 8001eee:	0002      	movs	r2, r0
 8001ef0:	390b      	subs	r1, #11
 8001ef2:	231d      	movs	r3, #29
 8001ef4:	0010      	movs	r0, r2
 8001ef6:	1a5b      	subs	r3, r3, r1
 8001ef8:	0031      	movs	r1, r6
 8001efa:	0035      	movs	r5, r6
 8001efc:	3808      	subs	r0, #8
 8001efe:	4084      	lsls	r4, r0
 8001f00:	40d9      	lsrs	r1, r3
 8001f02:	4085      	lsls	r5, r0
 8001f04:	430c      	orrs	r4, r1
 8001f06:	489e      	ldr	r0, [pc, #632]	; (8002180 <__aeabi_dmul+0x3a4>)
 8001f08:	1a83      	subs	r3, r0, r2
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	4699      	mov	r9, r3
 8001f10:	469b      	mov	fp, r3
 8001f12:	e786      	b.n	8001e22 <__aeabi_dmul+0x46>
 8001f14:	0005      	movs	r5, r0
 8001f16:	4325      	orrs	r5, r4
 8001f18:	d000      	beq.n	8001f1c <__aeabi_dmul+0x140>
 8001f1a:	e11c      	b.n	8002156 <__aeabi_dmul+0x37a>
 8001f1c:	2208      	movs	r2, #8
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	2302      	movs	r3, #2
 8001f22:	2400      	movs	r4, #0
 8001f24:	4691      	mov	r9, r2
 8001f26:	469b      	mov	fp, r3
 8001f28:	e77b      	b.n	8001e22 <__aeabi_dmul+0x46>
 8001f2a:	4652      	mov	r2, sl
 8001f2c:	4332      	orrs	r2, r6
 8001f2e:	d100      	bne.n	8001f32 <__aeabi_dmul+0x156>
 8001f30:	e10a      	b.n	8002148 <__aeabi_dmul+0x36c>
 8001f32:	2e00      	cmp	r6, #0
 8001f34:	d100      	bne.n	8001f38 <__aeabi_dmul+0x15c>
 8001f36:	e176      	b.n	8002226 <__aeabi_dmul+0x44a>
 8001f38:	0030      	movs	r0, r6
 8001f3a:	f000 fe31 	bl	8002ba0 <__clzsi2>
 8001f3e:	0002      	movs	r2, r0
 8001f40:	3a0b      	subs	r2, #11
 8001f42:	231d      	movs	r3, #29
 8001f44:	0001      	movs	r1, r0
 8001f46:	1a9b      	subs	r3, r3, r2
 8001f48:	4652      	mov	r2, sl
 8001f4a:	3908      	subs	r1, #8
 8001f4c:	40da      	lsrs	r2, r3
 8001f4e:	408e      	lsls	r6, r1
 8001f50:	4316      	orrs	r6, r2
 8001f52:	4652      	mov	r2, sl
 8001f54:	408a      	lsls	r2, r1
 8001f56:	9b00      	ldr	r3, [sp, #0]
 8001f58:	4989      	ldr	r1, [pc, #548]	; (8002180 <__aeabi_dmul+0x3a4>)
 8001f5a:	1a18      	subs	r0, r3, r0
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	468c      	mov	ip, r1
 8001f60:	4463      	add	r3, ip
 8001f62:	2000      	movs	r0, #0
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	e77a      	b.n	8001e5e <__aeabi_dmul+0x82>
 8001f68:	2400      	movs	r4, #0
 8001f6a:	2500      	movs	r5, #0
 8001f6c:	4a81      	ldr	r2, [pc, #516]	; (8002174 <__aeabi_dmul+0x398>)
 8001f6e:	e7a5      	b.n	8001ebc <__aeabi_dmul+0xe0>
 8001f70:	0c2f      	lsrs	r7, r5, #16
 8001f72:	042d      	lsls	r5, r5, #16
 8001f74:	0c2d      	lsrs	r5, r5, #16
 8001f76:	002b      	movs	r3, r5
 8001f78:	0c11      	lsrs	r1, r2, #16
 8001f7a:	0412      	lsls	r2, r2, #16
 8001f7c:	0c12      	lsrs	r2, r2, #16
 8001f7e:	4353      	muls	r3, r2
 8001f80:	4698      	mov	r8, r3
 8001f82:	0013      	movs	r3, r2
 8001f84:	0028      	movs	r0, r5
 8001f86:	437b      	muls	r3, r7
 8001f88:	4699      	mov	r9, r3
 8001f8a:	4348      	muls	r0, r1
 8001f8c:	4448      	add	r0, r9
 8001f8e:	4683      	mov	fp, r0
 8001f90:	4640      	mov	r0, r8
 8001f92:	000b      	movs	r3, r1
 8001f94:	0c00      	lsrs	r0, r0, #16
 8001f96:	4682      	mov	sl, r0
 8001f98:	4658      	mov	r0, fp
 8001f9a:	437b      	muls	r3, r7
 8001f9c:	4450      	add	r0, sl
 8001f9e:	9302      	str	r3, [sp, #8]
 8001fa0:	4581      	cmp	r9, r0
 8001fa2:	d906      	bls.n	8001fb2 <__aeabi_dmul+0x1d6>
 8001fa4:	469a      	mov	sl, r3
 8001fa6:	2380      	movs	r3, #128	; 0x80
 8001fa8:	025b      	lsls	r3, r3, #9
 8001faa:	4699      	mov	r9, r3
 8001fac:	44ca      	add	sl, r9
 8001fae:	4653      	mov	r3, sl
 8001fb0:	9302      	str	r3, [sp, #8]
 8001fb2:	0c03      	lsrs	r3, r0, #16
 8001fb4:	469b      	mov	fp, r3
 8001fb6:	4643      	mov	r3, r8
 8001fb8:	041b      	lsls	r3, r3, #16
 8001fba:	0400      	lsls	r0, r0, #16
 8001fbc:	0c1b      	lsrs	r3, r3, #16
 8001fbe:	4698      	mov	r8, r3
 8001fc0:	0003      	movs	r3, r0
 8001fc2:	4443      	add	r3, r8
 8001fc4:	9304      	str	r3, [sp, #16]
 8001fc6:	0c33      	lsrs	r3, r6, #16
 8001fc8:	4699      	mov	r9, r3
 8001fca:	002b      	movs	r3, r5
 8001fcc:	0436      	lsls	r6, r6, #16
 8001fce:	0c36      	lsrs	r6, r6, #16
 8001fd0:	4373      	muls	r3, r6
 8001fd2:	4698      	mov	r8, r3
 8001fd4:	0033      	movs	r3, r6
 8001fd6:	437b      	muls	r3, r7
 8001fd8:	469a      	mov	sl, r3
 8001fda:	464b      	mov	r3, r9
 8001fdc:	435d      	muls	r5, r3
 8001fde:	435f      	muls	r7, r3
 8001fe0:	4643      	mov	r3, r8
 8001fe2:	4455      	add	r5, sl
 8001fe4:	0c18      	lsrs	r0, r3, #16
 8001fe6:	1940      	adds	r0, r0, r5
 8001fe8:	4582      	cmp	sl, r0
 8001fea:	d903      	bls.n	8001ff4 <__aeabi_dmul+0x218>
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	025b      	lsls	r3, r3, #9
 8001ff0:	469a      	mov	sl, r3
 8001ff2:	4457      	add	r7, sl
 8001ff4:	0c05      	lsrs	r5, r0, #16
 8001ff6:	19eb      	adds	r3, r5, r7
 8001ff8:	9305      	str	r3, [sp, #20]
 8001ffa:	4643      	mov	r3, r8
 8001ffc:	041d      	lsls	r5, r3, #16
 8001ffe:	0c2d      	lsrs	r5, r5, #16
 8002000:	0400      	lsls	r0, r0, #16
 8002002:	1940      	adds	r0, r0, r5
 8002004:	0c25      	lsrs	r5, r4, #16
 8002006:	0424      	lsls	r4, r4, #16
 8002008:	0c24      	lsrs	r4, r4, #16
 800200a:	0027      	movs	r7, r4
 800200c:	4357      	muls	r7, r2
 800200e:	436a      	muls	r2, r5
 8002010:	4690      	mov	r8, r2
 8002012:	002a      	movs	r2, r5
 8002014:	0c3b      	lsrs	r3, r7, #16
 8002016:	469a      	mov	sl, r3
 8002018:	434a      	muls	r2, r1
 800201a:	4361      	muls	r1, r4
 800201c:	4441      	add	r1, r8
 800201e:	4451      	add	r1, sl
 8002020:	4483      	add	fp, r0
 8002022:	4588      	cmp	r8, r1
 8002024:	d903      	bls.n	800202e <__aeabi_dmul+0x252>
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	025b      	lsls	r3, r3, #9
 800202a:	4698      	mov	r8, r3
 800202c:	4442      	add	r2, r8
 800202e:	043f      	lsls	r7, r7, #16
 8002030:	0c0b      	lsrs	r3, r1, #16
 8002032:	0c3f      	lsrs	r7, r7, #16
 8002034:	0409      	lsls	r1, r1, #16
 8002036:	19c9      	adds	r1, r1, r7
 8002038:	0027      	movs	r7, r4
 800203a:	4698      	mov	r8, r3
 800203c:	464b      	mov	r3, r9
 800203e:	4377      	muls	r7, r6
 8002040:	435c      	muls	r4, r3
 8002042:	436e      	muls	r6, r5
 8002044:	435d      	muls	r5, r3
 8002046:	0c3b      	lsrs	r3, r7, #16
 8002048:	4699      	mov	r9, r3
 800204a:	19a4      	adds	r4, r4, r6
 800204c:	444c      	add	r4, r9
 800204e:	4442      	add	r2, r8
 8002050:	9503      	str	r5, [sp, #12]
 8002052:	42a6      	cmp	r6, r4
 8002054:	d904      	bls.n	8002060 <__aeabi_dmul+0x284>
 8002056:	2380      	movs	r3, #128	; 0x80
 8002058:	025b      	lsls	r3, r3, #9
 800205a:	4698      	mov	r8, r3
 800205c:	4445      	add	r5, r8
 800205e:	9503      	str	r5, [sp, #12]
 8002060:	9b02      	ldr	r3, [sp, #8]
 8002062:	043f      	lsls	r7, r7, #16
 8002064:	445b      	add	r3, fp
 8002066:	001e      	movs	r6, r3
 8002068:	4283      	cmp	r3, r0
 800206a:	4180      	sbcs	r0, r0
 800206c:	0423      	lsls	r3, r4, #16
 800206e:	4698      	mov	r8, r3
 8002070:	9b05      	ldr	r3, [sp, #20]
 8002072:	0c3f      	lsrs	r7, r7, #16
 8002074:	4447      	add	r7, r8
 8002076:	4698      	mov	r8, r3
 8002078:	1876      	adds	r6, r6, r1
 800207a:	428e      	cmp	r6, r1
 800207c:	4189      	sbcs	r1, r1
 800207e:	4447      	add	r7, r8
 8002080:	4240      	negs	r0, r0
 8002082:	183d      	adds	r5, r7, r0
 8002084:	46a8      	mov	r8, r5
 8002086:	4693      	mov	fp, r2
 8002088:	4249      	negs	r1, r1
 800208a:	468a      	mov	sl, r1
 800208c:	44c3      	add	fp, r8
 800208e:	429f      	cmp	r7, r3
 8002090:	41bf      	sbcs	r7, r7
 8002092:	4580      	cmp	r8, r0
 8002094:	4180      	sbcs	r0, r0
 8002096:	9b03      	ldr	r3, [sp, #12]
 8002098:	44da      	add	sl, fp
 800209a:	4698      	mov	r8, r3
 800209c:	4653      	mov	r3, sl
 800209e:	4240      	negs	r0, r0
 80020a0:	427f      	negs	r7, r7
 80020a2:	4307      	orrs	r7, r0
 80020a4:	0c24      	lsrs	r4, r4, #16
 80020a6:	4593      	cmp	fp, r2
 80020a8:	4192      	sbcs	r2, r2
 80020aa:	458a      	cmp	sl, r1
 80020ac:	4189      	sbcs	r1, r1
 80020ae:	193f      	adds	r7, r7, r4
 80020b0:	0ddc      	lsrs	r4, r3, #23
 80020b2:	9b04      	ldr	r3, [sp, #16]
 80020b4:	0275      	lsls	r5, r6, #9
 80020b6:	431d      	orrs	r5, r3
 80020b8:	1e68      	subs	r0, r5, #1
 80020ba:	4185      	sbcs	r5, r0
 80020bc:	4653      	mov	r3, sl
 80020be:	4252      	negs	r2, r2
 80020c0:	4249      	negs	r1, r1
 80020c2:	430a      	orrs	r2, r1
 80020c4:	18bf      	adds	r7, r7, r2
 80020c6:	4447      	add	r7, r8
 80020c8:	0df6      	lsrs	r6, r6, #23
 80020ca:	027f      	lsls	r7, r7, #9
 80020cc:	4335      	orrs	r5, r6
 80020ce:	025a      	lsls	r2, r3, #9
 80020d0:	433c      	orrs	r4, r7
 80020d2:	4315      	orrs	r5, r2
 80020d4:	01fb      	lsls	r3, r7, #7
 80020d6:	d400      	bmi.n	80020da <__aeabi_dmul+0x2fe>
 80020d8:	e0c1      	b.n	800225e <__aeabi_dmul+0x482>
 80020da:	2101      	movs	r1, #1
 80020dc:	086a      	lsrs	r2, r5, #1
 80020de:	400d      	ands	r5, r1
 80020e0:	4315      	orrs	r5, r2
 80020e2:	07e2      	lsls	r2, r4, #31
 80020e4:	4315      	orrs	r5, r2
 80020e6:	0864      	lsrs	r4, r4, #1
 80020e8:	4926      	ldr	r1, [pc, #152]	; (8002184 <__aeabi_dmul+0x3a8>)
 80020ea:	4461      	add	r1, ip
 80020ec:	2900      	cmp	r1, #0
 80020ee:	dd56      	ble.n	800219e <__aeabi_dmul+0x3c2>
 80020f0:	076b      	lsls	r3, r5, #29
 80020f2:	d009      	beq.n	8002108 <__aeabi_dmul+0x32c>
 80020f4:	220f      	movs	r2, #15
 80020f6:	402a      	ands	r2, r5
 80020f8:	2a04      	cmp	r2, #4
 80020fa:	d005      	beq.n	8002108 <__aeabi_dmul+0x32c>
 80020fc:	1d2a      	adds	r2, r5, #4
 80020fe:	42aa      	cmp	r2, r5
 8002100:	41ad      	sbcs	r5, r5
 8002102:	426d      	negs	r5, r5
 8002104:	1964      	adds	r4, r4, r5
 8002106:	0015      	movs	r5, r2
 8002108:	01e3      	lsls	r3, r4, #7
 800210a:	d504      	bpl.n	8002116 <__aeabi_dmul+0x33a>
 800210c:	2180      	movs	r1, #128	; 0x80
 800210e:	4a1e      	ldr	r2, [pc, #120]	; (8002188 <__aeabi_dmul+0x3ac>)
 8002110:	00c9      	lsls	r1, r1, #3
 8002112:	4014      	ands	r4, r2
 8002114:	4461      	add	r1, ip
 8002116:	4a1d      	ldr	r2, [pc, #116]	; (800218c <__aeabi_dmul+0x3b0>)
 8002118:	4291      	cmp	r1, r2
 800211a:	dd00      	ble.n	800211e <__aeabi_dmul+0x342>
 800211c:	e724      	b.n	8001f68 <__aeabi_dmul+0x18c>
 800211e:	0762      	lsls	r2, r4, #29
 8002120:	08ed      	lsrs	r5, r5, #3
 8002122:	0264      	lsls	r4, r4, #9
 8002124:	0549      	lsls	r1, r1, #21
 8002126:	4315      	orrs	r5, r2
 8002128:	0b24      	lsrs	r4, r4, #12
 800212a:	0d4a      	lsrs	r2, r1, #21
 800212c:	e6c6      	b.n	8001ebc <__aeabi_dmul+0xe0>
 800212e:	9701      	str	r7, [sp, #4]
 8002130:	e6b8      	b.n	8001ea4 <__aeabi_dmul+0xc8>
 8002132:	4a10      	ldr	r2, [pc, #64]	; (8002174 <__aeabi_dmul+0x398>)
 8002134:	2003      	movs	r0, #3
 8002136:	4694      	mov	ip, r2
 8002138:	4463      	add	r3, ip
 800213a:	464a      	mov	r2, r9
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	2303      	movs	r3, #3
 8002140:	431a      	orrs	r2, r3
 8002142:	4691      	mov	r9, r2
 8002144:	4652      	mov	r2, sl
 8002146:	e68a      	b.n	8001e5e <__aeabi_dmul+0x82>
 8002148:	4649      	mov	r1, r9
 800214a:	2301      	movs	r3, #1
 800214c:	4319      	orrs	r1, r3
 800214e:	4689      	mov	r9, r1
 8002150:	2600      	movs	r6, #0
 8002152:	2001      	movs	r0, #1
 8002154:	e683      	b.n	8001e5e <__aeabi_dmul+0x82>
 8002156:	220c      	movs	r2, #12
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	2303      	movs	r3, #3
 800215c:	0005      	movs	r5, r0
 800215e:	4691      	mov	r9, r2
 8002160:	469b      	mov	fp, r3
 8002162:	e65e      	b.n	8001e22 <__aeabi_dmul+0x46>
 8002164:	2304      	movs	r3, #4
 8002166:	4699      	mov	r9, r3
 8002168:	2300      	movs	r3, #0
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	3301      	adds	r3, #1
 800216e:	2400      	movs	r4, #0
 8002170:	469b      	mov	fp, r3
 8002172:	e656      	b.n	8001e22 <__aeabi_dmul+0x46>
 8002174:	000007ff 	.word	0x000007ff
 8002178:	fffffc01 	.word	0xfffffc01
 800217c:	0800c028 	.word	0x0800c028
 8002180:	fffffc0d 	.word	0xfffffc0d
 8002184:	000003ff 	.word	0x000003ff
 8002188:	feffffff 	.word	0xfeffffff
 800218c:	000007fe 	.word	0x000007fe
 8002190:	2300      	movs	r3, #0
 8002192:	2480      	movs	r4, #128	; 0x80
 8002194:	2500      	movs	r5, #0
 8002196:	4a44      	ldr	r2, [pc, #272]	; (80022a8 <__aeabi_dmul+0x4cc>)
 8002198:	9301      	str	r3, [sp, #4]
 800219a:	0324      	lsls	r4, r4, #12
 800219c:	e68e      	b.n	8001ebc <__aeabi_dmul+0xe0>
 800219e:	2001      	movs	r0, #1
 80021a0:	1a40      	subs	r0, r0, r1
 80021a2:	2838      	cmp	r0, #56	; 0x38
 80021a4:	dd00      	ble.n	80021a8 <__aeabi_dmul+0x3cc>
 80021a6:	e686      	b.n	8001eb6 <__aeabi_dmul+0xda>
 80021a8:	281f      	cmp	r0, #31
 80021aa:	dd5b      	ble.n	8002264 <__aeabi_dmul+0x488>
 80021ac:	221f      	movs	r2, #31
 80021ae:	0023      	movs	r3, r4
 80021b0:	4252      	negs	r2, r2
 80021b2:	1a51      	subs	r1, r2, r1
 80021b4:	40cb      	lsrs	r3, r1
 80021b6:	0019      	movs	r1, r3
 80021b8:	2820      	cmp	r0, #32
 80021ba:	d003      	beq.n	80021c4 <__aeabi_dmul+0x3e8>
 80021bc:	4a3b      	ldr	r2, [pc, #236]	; (80022ac <__aeabi_dmul+0x4d0>)
 80021be:	4462      	add	r2, ip
 80021c0:	4094      	lsls	r4, r2
 80021c2:	4325      	orrs	r5, r4
 80021c4:	1e6a      	subs	r2, r5, #1
 80021c6:	4195      	sbcs	r5, r2
 80021c8:	002a      	movs	r2, r5
 80021ca:	430a      	orrs	r2, r1
 80021cc:	2107      	movs	r1, #7
 80021ce:	000d      	movs	r5, r1
 80021d0:	2400      	movs	r4, #0
 80021d2:	4015      	ands	r5, r2
 80021d4:	4211      	tst	r1, r2
 80021d6:	d05b      	beq.n	8002290 <__aeabi_dmul+0x4b4>
 80021d8:	210f      	movs	r1, #15
 80021da:	2400      	movs	r4, #0
 80021dc:	4011      	ands	r1, r2
 80021de:	2904      	cmp	r1, #4
 80021e0:	d053      	beq.n	800228a <__aeabi_dmul+0x4ae>
 80021e2:	1d11      	adds	r1, r2, #4
 80021e4:	4291      	cmp	r1, r2
 80021e6:	4192      	sbcs	r2, r2
 80021e8:	4252      	negs	r2, r2
 80021ea:	18a4      	adds	r4, r4, r2
 80021ec:	000a      	movs	r2, r1
 80021ee:	0223      	lsls	r3, r4, #8
 80021f0:	d54b      	bpl.n	800228a <__aeabi_dmul+0x4ae>
 80021f2:	2201      	movs	r2, #1
 80021f4:	2400      	movs	r4, #0
 80021f6:	2500      	movs	r5, #0
 80021f8:	e660      	b.n	8001ebc <__aeabi_dmul+0xe0>
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	031b      	lsls	r3, r3, #12
 80021fe:	421c      	tst	r4, r3
 8002200:	d009      	beq.n	8002216 <__aeabi_dmul+0x43a>
 8002202:	421e      	tst	r6, r3
 8002204:	d107      	bne.n	8002216 <__aeabi_dmul+0x43a>
 8002206:	4333      	orrs	r3, r6
 8002208:	031c      	lsls	r4, r3, #12
 800220a:	4643      	mov	r3, r8
 800220c:	0015      	movs	r5, r2
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	4a25      	ldr	r2, [pc, #148]	; (80022a8 <__aeabi_dmul+0x4cc>)
 8002212:	9301      	str	r3, [sp, #4]
 8002214:	e652      	b.n	8001ebc <__aeabi_dmul+0xe0>
 8002216:	2280      	movs	r2, #128	; 0x80
 8002218:	0312      	lsls	r2, r2, #12
 800221a:	4314      	orrs	r4, r2
 800221c:	0324      	lsls	r4, r4, #12
 800221e:	4a22      	ldr	r2, [pc, #136]	; (80022a8 <__aeabi_dmul+0x4cc>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	9701      	str	r7, [sp, #4]
 8002224:	e64a      	b.n	8001ebc <__aeabi_dmul+0xe0>
 8002226:	f000 fcbb 	bl	8002ba0 <__clzsi2>
 800222a:	0003      	movs	r3, r0
 800222c:	001a      	movs	r2, r3
 800222e:	3215      	adds	r2, #21
 8002230:	3020      	adds	r0, #32
 8002232:	2a1c      	cmp	r2, #28
 8002234:	dc00      	bgt.n	8002238 <__aeabi_dmul+0x45c>
 8002236:	e684      	b.n	8001f42 <__aeabi_dmul+0x166>
 8002238:	4656      	mov	r6, sl
 800223a:	3b08      	subs	r3, #8
 800223c:	2200      	movs	r2, #0
 800223e:	409e      	lsls	r6, r3
 8002240:	e689      	b.n	8001f56 <__aeabi_dmul+0x17a>
 8002242:	f000 fcad 	bl	8002ba0 <__clzsi2>
 8002246:	0001      	movs	r1, r0
 8002248:	0002      	movs	r2, r0
 800224a:	3115      	adds	r1, #21
 800224c:	3220      	adds	r2, #32
 800224e:	291c      	cmp	r1, #28
 8002250:	dc00      	bgt.n	8002254 <__aeabi_dmul+0x478>
 8002252:	e64e      	b.n	8001ef2 <__aeabi_dmul+0x116>
 8002254:	0034      	movs	r4, r6
 8002256:	3808      	subs	r0, #8
 8002258:	2500      	movs	r5, #0
 800225a:	4084      	lsls	r4, r0
 800225c:	e653      	b.n	8001f06 <__aeabi_dmul+0x12a>
 800225e:	9b00      	ldr	r3, [sp, #0]
 8002260:	469c      	mov	ip, r3
 8002262:	e741      	b.n	80020e8 <__aeabi_dmul+0x30c>
 8002264:	4912      	ldr	r1, [pc, #72]	; (80022b0 <__aeabi_dmul+0x4d4>)
 8002266:	0022      	movs	r2, r4
 8002268:	4461      	add	r1, ip
 800226a:	002e      	movs	r6, r5
 800226c:	408d      	lsls	r5, r1
 800226e:	408a      	lsls	r2, r1
 8002270:	40c6      	lsrs	r6, r0
 8002272:	1e69      	subs	r1, r5, #1
 8002274:	418d      	sbcs	r5, r1
 8002276:	4332      	orrs	r2, r6
 8002278:	432a      	orrs	r2, r5
 800227a:	40c4      	lsrs	r4, r0
 800227c:	0753      	lsls	r3, r2, #29
 800227e:	d0b6      	beq.n	80021ee <__aeabi_dmul+0x412>
 8002280:	210f      	movs	r1, #15
 8002282:	4011      	ands	r1, r2
 8002284:	2904      	cmp	r1, #4
 8002286:	d1ac      	bne.n	80021e2 <__aeabi_dmul+0x406>
 8002288:	e7b1      	b.n	80021ee <__aeabi_dmul+0x412>
 800228a:	0765      	lsls	r5, r4, #29
 800228c:	0264      	lsls	r4, r4, #9
 800228e:	0b24      	lsrs	r4, r4, #12
 8002290:	08d2      	lsrs	r2, r2, #3
 8002292:	4315      	orrs	r5, r2
 8002294:	2200      	movs	r2, #0
 8002296:	e611      	b.n	8001ebc <__aeabi_dmul+0xe0>
 8002298:	2280      	movs	r2, #128	; 0x80
 800229a:	0312      	lsls	r2, r2, #12
 800229c:	4314      	orrs	r4, r2
 800229e:	0324      	lsls	r4, r4, #12
 80022a0:	4a01      	ldr	r2, [pc, #4]	; (80022a8 <__aeabi_dmul+0x4cc>)
 80022a2:	0b24      	lsrs	r4, r4, #12
 80022a4:	e60a      	b.n	8001ebc <__aeabi_dmul+0xe0>
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	000007ff 	.word	0x000007ff
 80022ac:	0000043e 	.word	0x0000043e
 80022b0:	0000041e 	.word	0x0000041e

080022b4 <__aeabi_dsub>:
 80022b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b6:	4657      	mov	r7, sl
 80022b8:	464e      	mov	r6, r9
 80022ba:	4645      	mov	r5, r8
 80022bc:	46de      	mov	lr, fp
 80022be:	0004      	movs	r4, r0
 80022c0:	b5e0      	push	{r5, r6, r7, lr}
 80022c2:	001f      	movs	r7, r3
 80022c4:	0010      	movs	r0, r2
 80022c6:	030b      	lsls	r3, r1, #12
 80022c8:	0f62      	lsrs	r2, r4, #29
 80022ca:	004e      	lsls	r6, r1, #1
 80022cc:	0fcd      	lsrs	r5, r1, #31
 80022ce:	0a5b      	lsrs	r3, r3, #9
 80022d0:	0339      	lsls	r1, r7, #12
 80022d2:	4313      	orrs	r3, r2
 80022d4:	0a49      	lsrs	r1, r1, #9
 80022d6:	00e2      	lsls	r2, r4, #3
 80022d8:	0f44      	lsrs	r4, r0, #29
 80022da:	4321      	orrs	r1, r4
 80022dc:	4cc2      	ldr	r4, [pc, #776]	; (80025e8 <__aeabi_dsub+0x334>)
 80022de:	4691      	mov	r9, r2
 80022e0:	4692      	mov	sl, r2
 80022e2:	00c0      	lsls	r0, r0, #3
 80022e4:	007a      	lsls	r2, r7, #1
 80022e6:	4680      	mov	r8, r0
 80022e8:	0d76      	lsrs	r6, r6, #21
 80022ea:	0d52      	lsrs	r2, r2, #21
 80022ec:	0fff      	lsrs	r7, r7, #31
 80022ee:	42a2      	cmp	r2, r4
 80022f0:	d100      	bne.n	80022f4 <__aeabi_dsub+0x40>
 80022f2:	e0b4      	b.n	800245e <__aeabi_dsub+0x1aa>
 80022f4:	2401      	movs	r4, #1
 80022f6:	4067      	eors	r7, r4
 80022f8:	46bb      	mov	fp, r7
 80022fa:	42bd      	cmp	r5, r7
 80022fc:	d100      	bne.n	8002300 <__aeabi_dsub+0x4c>
 80022fe:	e088      	b.n	8002412 <__aeabi_dsub+0x15e>
 8002300:	1ab4      	subs	r4, r6, r2
 8002302:	46a4      	mov	ip, r4
 8002304:	2c00      	cmp	r4, #0
 8002306:	dc00      	bgt.n	800230a <__aeabi_dsub+0x56>
 8002308:	e0b2      	b.n	8002470 <__aeabi_dsub+0x1bc>
 800230a:	2a00      	cmp	r2, #0
 800230c:	d100      	bne.n	8002310 <__aeabi_dsub+0x5c>
 800230e:	e0c5      	b.n	800249c <__aeabi_dsub+0x1e8>
 8002310:	4ab5      	ldr	r2, [pc, #724]	; (80025e8 <__aeabi_dsub+0x334>)
 8002312:	4296      	cmp	r6, r2
 8002314:	d100      	bne.n	8002318 <__aeabi_dsub+0x64>
 8002316:	e28b      	b.n	8002830 <__aeabi_dsub+0x57c>
 8002318:	2280      	movs	r2, #128	; 0x80
 800231a:	0412      	lsls	r2, r2, #16
 800231c:	4311      	orrs	r1, r2
 800231e:	4662      	mov	r2, ip
 8002320:	2a38      	cmp	r2, #56	; 0x38
 8002322:	dd00      	ble.n	8002326 <__aeabi_dsub+0x72>
 8002324:	e1a1      	b.n	800266a <__aeabi_dsub+0x3b6>
 8002326:	2a1f      	cmp	r2, #31
 8002328:	dd00      	ble.n	800232c <__aeabi_dsub+0x78>
 800232a:	e216      	b.n	800275a <__aeabi_dsub+0x4a6>
 800232c:	2720      	movs	r7, #32
 800232e:	000c      	movs	r4, r1
 8002330:	1abf      	subs	r7, r7, r2
 8002332:	40bc      	lsls	r4, r7
 8002334:	0002      	movs	r2, r0
 8002336:	46a0      	mov	r8, r4
 8002338:	4664      	mov	r4, ip
 800233a:	40b8      	lsls	r0, r7
 800233c:	40e2      	lsrs	r2, r4
 800233e:	4644      	mov	r4, r8
 8002340:	4314      	orrs	r4, r2
 8002342:	0002      	movs	r2, r0
 8002344:	1e50      	subs	r0, r2, #1
 8002346:	4182      	sbcs	r2, r0
 8002348:	4660      	mov	r0, ip
 800234a:	40c1      	lsrs	r1, r0
 800234c:	4322      	orrs	r2, r4
 800234e:	1a5b      	subs	r3, r3, r1
 8002350:	4649      	mov	r1, r9
 8002352:	1a8c      	subs	r4, r1, r2
 8002354:	45a1      	cmp	r9, r4
 8002356:	4192      	sbcs	r2, r2
 8002358:	4252      	negs	r2, r2
 800235a:	1a9b      	subs	r3, r3, r2
 800235c:	4698      	mov	r8, r3
 800235e:	4643      	mov	r3, r8
 8002360:	021b      	lsls	r3, r3, #8
 8002362:	d400      	bmi.n	8002366 <__aeabi_dsub+0xb2>
 8002364:	e117      	b.n	8002596 <__aeabi_dsub+0x2e2>
 8002366:	4643      	mov	r3, r8
 8002368:	025b      	lsls	r3, r3, #9
 800236a:	0a5b      	lsrs	r3, r3, #9
 800236c:	4698      	mov	r8, r3
 800236e:	4643      	mov	r3, r8
 8002370:	2b00      	cmp	r3, #0
 8002372:	d100      	bne.n	8002376 <__aeabi_dsub+0xc2>
 8002374:	e16c      	b.n	8002650 <__aeabi_dsub+0x39c>
 8002376:	4640      	mov	r0, r8
 8002378:	f000 fc12 	bl	8002ba0 <__clzsi2>
 800237c:	0002      	movs	r2, r0
 800237e:	3a08      	subs	r2, #8
 8002380:	2120      	movs	r1, #32
 8002382:	0020      	movs	r0, r4
 8002384:	4643      	mov	r3, r8
 8002386:	1a89      	subs	r1, r1, r2
 8002388:	4093      	lsls	r3, r2
 800238a:	40c8      	lsrs	r0, r1
 800238c:	4094      	lsls	r4, r2
 800238e:	4303      	orrs	r3, r0
 8002390:	4296      	cmp	r6, r2
 8002392:	dd00      	ble.n	8002396 <__aeabi_dsub+0xe2>
 8002394:	e157      	b.n	8002646 <__aeabi_dsub+0x392>
 8002396:	1b96      	subs	r6, r2, r6
 8002398:	1c71      	adds	r1, r6, #1
 800239a:	291f      	cmp	r1, #31
 800239c:	dd00      	ble.n	80023a0 <__aeabi_dsub+0xec>
 800239e:	e1cb      	b.n	8002738 <__aeabi_dsub+0x484>
 80023a0:	2220      	movs	r2, #32
 80023a2:	0018      	movs	r0, r3
 80023a4:	0026      	movs	r6, r4
 80023a6:	1a52      	subs	r2, r2, r1
 80023a8:	4094      	lsls	r4, r2
 80023aa:	4090      	lsls	r0, r2
 80023ac:	40ce      	lsrs	r6, r1
 80023ae:	40cb      	lsrs	r3, r1
 80023b0:	1e62      	subs	r2, r4, #1
 80023b2:	4194      	sbcs	r4, r2
 80023b4:	4330      	orrs	r0, r6
 80023b6:	4698      	mov	r8, r3
 80023b8:	2600      	movs	r6, #0
 80023ba:	4304      	orrs	r4, r0
 80023bc:	0763      	lsls	r3, r4, #29
 80023be:	d009      	beq.n	80023d4 <__aeabi_dsub+0x120>
 80023c0:	230f      	movs	r3, #15
 80023c2:	4023      	ands	r3, r4
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d005      	beq.n	80023d4 <__aeabi_dsub+0x120>
 80023c8:	1d23      	adds	r3, r4, #4
 80023ca:	42a3      	cmp	r3, r4
 80023cc:	41a4      	sbcs	r4, r4
 80023ce:	4264      	negs	r4, r4
 80023d0:	44a0      	add	r8, r4
 80023d2:	001c      	movs	r4, r3
 80023d4:	4643      	mov	r3, r8
 80023d6:	021b      	lsls	r3, r3, #8
 80023d8:	d400      	bmi.n	80023dc <__aeabi_dsub+0x128>
 80023da:	e0df      	b.n	800259c <__aeabi_dsub+0x2e8>
 80023dc:	4b82      	ldr	r3, [pc, #520]	; (80025e8 <__aeabi_dsub+0x334>)
 80023de:	3601      	adds	r6, #1
 80023e0:	429e      	cmp	r6, r3
 80023e2:	d100      	bne.n	80023e6 <__aeabi_dsub+0x132>
 80023e4:	e0fb      	b.n	80025de <__aeabi_dsub+0x32a>
 80023e6:	4642      	mov	r2, r8
 80023e8:	4b80      	ldr	r3, [pc, #512]	; (80025ec <__aeabi_dsub+0x338>)
 80023ea:	08e4      	lsrs	r4, r4, #3
 80023ec:	401a      	ands	r2, r3
 80023ee:	0013      	movs	r3, r2
 80023f0:	0571      	lsls	r1, r6, #21
 80023f2:	0752      	lsls	r2, r2, #29
 80023f4:	025b      	lsls	r3, r3, #9
 80023f6:	4322      	orrs	r2, r4
 80023f8:	0b1b      	lsrs	r3, r3, #12
 80023fa:	0d49      	lsrs	r1, r1, #21
 80023fc:	0509      	lsls	r1, r1, #20
 80023fe:	07ed      	lsls	r5, r5, #31
 8002400:	4319      	orrs	r1, r3
 8002402:	4329      	orrs	r1, r5
 8002404:	0010      	movs	r0, r2
 8002406:	bcf0      	pop	{r4, r5, r6, r7}
 8002408:	46bb      	mov	fp, r7
 800240a:	46b2      	mov	sl, r6
 800240c:	46a9      	mov	r9, r5
 800240e:	46a0      	mov	r8, r4
 8002410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002412:	1ab4      	subs	r4, r6, r2
 8002414:	46a4      	mov	ip, r4
 8002416:	2c00      	cmp	r4, #0
 8002418:	dd58      	ble.n	80024cc <__aeabi_dsub+0x218>
 800241a:	2a00      	cmp	r2, #0
 800241c:	d100      	bne.n	8002420 <__aeabi_dsub+0x16c>
 800241e:	e09e      	b.n	800255e <__aeabi_dsub+0x2aa>
 8002420:	4a71      	ldr	r2, [pc, #452]	; (80025e8 <__aeabi_dsub+0x334>)
 8002422:	4296      	cmp	r6, r2
 8002424:	d100      	bne.n	8002428 <__aeabi_dsub+0x174>
 8002426:	e13b      	b.n	80026a0 <__aeabi_dsub+0x3ec>
 8002428:	2280      	movs	r2, #128	; 0x80
 800242a:	0412      	lsls	r2, r2, #16
 800242c:	4311      	orrs	r1, r2
 800242e:	4662      	mov	r2, ip
 8002430:	2a38      	cmp	r2, #56	; 0x38
 8002432:	dd00      	ble.n	8002436 <__aeabi_dsub+0x182>
 8002434:	e0c1      	b.n	80025ba <__aeabi_dsub+0x306>
 8002436:	2a1f      	cmp	r2, #31
 8002438:	dc00      	bgt.n	800243c <__aeabi_dsub+0x188>
 800243a:	e1bb      	b.n	80027b4 <__aeabi_dsub+0x500>
 800243c:	000c      	movs	r4, r1
 800243e:	3a20      	subs	r2, #32
 8002440:	40d4      	lsrs	r4, r2
 8002442:	0022      	movs	r2, r4
 8002444:	4664      	mov	r4, ip
 8002446:	2c20      	cmp	r4, #32
 8002448:	d004      	beq.n	8002454 <__aeabi_dsub+0x1a0>
 800244a:	2740      	movs	r7, #64	; 0x40
 800244c:	1b3f      	subs	r7, r7, r4
 800244e:	40b9      	lsls	r1, r7
 8002450:	4308      	orrs	r0, r1
 8002452:	4680      	mov	r8, r0
 8002454:	4644      	mov	r4, r8
 8002456:	1e61      	subs	r1, r4, #1
 8002458:	418c      	sbcs	r4, r1
 800245a:	4314      	orrs	r4, r2
 800245c:	e0b1      	b.n	80025c2 <__aeabi_dsub+0x30e>
 800245e:	000c      	movs	r4, r1
 8002460:	4304      	orrs	r4, r0
 8002462:	d02a      	beq.n	80024ba <__aeabi_dsub+0x206>
 8002464:	46bb      	mov	fp, r7
 8002466:	42bd      	cmp	r5, r7
 8002468:	d02d      	beq.n	80024c6 <__aeabi_dsub+0x212>
 800246a:	4c61      	ldr	r4, [pc, #388]	; (80025f0 <__aeabi_dsub+0x33c>)
 800246c:	46a4      	mov	ip, r4
 800246e:	44b4      	add	ip, r6
 8002470:	4664      	mov	r4, ip
 8002472:	2c00      	cmp	r4, #0
 8002474:	d05c      	beq.n	8002530 <__aeabi_dsub+0x27c>
 8002476:	1b94      	subs	r4, r2, r6
 8002478:	46a4      	mov	ip, r4
 800247a:	2e00      	cmp	r6, #0
 800247c:	d000      	beq.n	8002480 <__aeabi_dsub+0x1cc>
 800247e:	e115      	b.n	80026ac <__aeabi_dsub+0x3f8>
 8002480:	464d      	mov	r5, r9
 8002482:	431d      	orrs	r5, r3
 8002484:	d100      	bne.n	8002488 <__aeabi_dsub+0x1d4>
 8002486:	e1c3      	b.n	8002810 <__aeabi_dsub+0x55c>
 8002488:	1e65      	subs	r5, r4, #1
 800248a:	2c01      	cmp	r4, #1
 800248c:	d100      	bne.n	8002490 <__aeabi_dsub+0x1dc>
 800248e:	e20c      	b.n	80028aa <__aeabi_dsub+0x5f6>
 8002490:	4e55      	ldr	r6, [pc, #340]	; (80025e8 <__aeabi_dsub+0x334>)
 8002492:	42b4      	cmp	r4, r6
 8002494:	d100      	bne.n	8002498 <__aeabi_dsub+0x1e4>
 8002496:	e1f8      	b.n	800288a <__aeabi_dsub+0x5d6>
 8002498:	46ac      	mov	ip, r5
 800249a:	e10e      	b.n	80026ba <__aeabi_dsub+0x406>
 800249c:	000a      	movs	r2, r1
 800249e:	4302      	orrs	r2, r0
 80024a0:	d100      	bne.n	80024a4 <__aeabi_dsub+0x1f0>
 80024a2:	e136      	b.n	8002712 <__aeabi_dsub+0x45e>
 80024a4:	0022      	movs	r2, r4
 80024a6:	3a01      	subs	r2, #1
 80024a8:	2c01      	cmp	r4, #1
 80024aa:	d100      	bne.n	80024ae <__aeabi_dsub+0x1fa>
 80024ac:	e1c6      	b.n	800283c <__aeabi_dsub+0x588>
 80024ae:	4c4e      	ldr	r4, [pc, #312]	; (80025e8 <__aeabi_dsub+0x334>)
 80024b0:	45a4      	cmp	ip, r4
 80024b2:	d100      	bne.n	80024b6 <__aeabi_dsub+0x202>
 80024b4:	e0f4      	b.n	80026a0 <__aeabi_dsub+0x3ec>
 80024b6:	4694      	mov	ip, r2
 80024b8:	e731      	b.n	800231e <__aeabi_dsub+0x6a>
 80024ba:	2401      	movs	r4, #1
 80024bc:	4067      	eors	r7, r4
 80024be:	46bb      	mov	fp, r7
 80024c0:	42bd      	cmp	r5, r7
 80024c2:	d000      	beq.n	80024c6 <__aeabi_dsub+0x212>
 80024c4:	e71c      	b.n	8002300 <__aeabi_dsub+0x4c>
 80024c6:	4c4a      	ldr	r4, [pc, #296]	; (80025f0 <__aeabi_dsub+0x33c>)
 80024c8:	46a4      	mov	ip, r4
 80024ca:	44b4      	add	ip, r6
 80024cc:	4664      	mov	r4, ip
 80024ce:	2c00      	cmp	r4, #0
 80024d0:	d100      	bne.n	80024d4 <__aeabi_dsub+0x220>
 80024d2:	e0cf      	b.n	8002674 <__aeabi_dsub+0x3c0>
 80024d4:	1b94      	subs	r4, r2, r6
 80024d6:	46a4      	mov	ip, r4
 80024d8:	2e00      	cmp	r6, #0
 80024da:	d100      	bne.n	80024de <__aeabi_dsub+0x22a>
 80024dc:	e15c      	b.n	8002798 <__aeabi_dsub+0x4e4>
 80024de:	4e42      	ldr	r6, [pc, #264]	; (80025e8 <__aeabi_dsub+0x334>)
 80024e0:	42b2      	cmp	r2, r6
 80024e2:	d100      	bne.n	80024e6 <__aeabi_dsub+0x232>
 80024e4:	e1ec      	b.n	80028c0 <__aeabi_dsub+0x60c>
 80024e6:	2680      	movs	r6, #128	; 0x80
 80024e8:	0436      	lsls	r6, r6, #16
 80024ea:	4333      	orrs	r3, r6
 80024ec:	4664      	mov	r4, ip
 80024ee:	2c38      	cmp	r4, #56	; 0x38
 80024f0:	dd00      	ble.n	80024f4 <__aeabi_dsub+0x240>
 80024f2:	e1b3      	b.n	800285c <__aeabi_dsub+0x5a8>
 80024f4:	2c1f      	cmp	r4, #31
 80024f6:	dd00      	ble.n	80024fa <__aeabi_dsub+0x246>
 80024f8:	e238      	b.n	800296c <__aeabi_dsub+0x6b8>
 80024fa:	2620      	movs	r6, #32
 80024fc:	1b36      	subs	r6, r6, r4
 80024fe:	001c      	movs	r4, r3
 8002500:	40b4      	lsls	r4, r6
 8002502:	464f      	mov	r7, r9
 8002504:	46a0      	mov	r8, r4
 8002506:	4664      	mov	r4, ip
 8002508:	40e7      	lsrs	r7, r4
 800250a:	4644      	mov	r4, r8
 800250c:	433c      	orrs	r4, r7
 800250e:	464f      	mov	r7, r9
 8002510:	40b7      	lsls	r7, r6
 8002512:	003e      	movs	r6, r7
 8002514:	1e77      	subs	r7, r6, #1
 8002516:	41be      	sbcs	r6, r7
 8002518:	4334      	orrs	r4, r6
 800251a:	4666      	mov	r6, ip
 800251c:	40f3      	lsrs	r3, r6
 800251e:	18c9      	adds	r1, r1, r3
 8002520:	1824      	adds	r4, r4, r0
 8002522:	4284      	cmp	r4, r0
 8002524:	419b      	sbcs	r3, r3
 8002526:	425b      	negs	r3, r3
 8002528:	4698      	mov	r8, r3
 800252a:	0016      	movs	r6, r2
 800252c:	4488      	add	r8, r1
 800252e:	e04e      	b.n	80025ce <__aeabi_dsub+0x31a>
 8002530:	4a30      	ldr	r2, [pc, #192]	; (80025f4 <__aeabi_dsub+0x340>)
 8002532:	1c74      	adds	r4, r6, #1
 8002534:	4214      	tst	r4, r2
 8002536:	d000      	beq.n	800253a <__aeabi_dsub+0x286>
 8002538:	e0d6      	b.n	80026e8 <__aeabi_dsub+0x434>
 800253a:	464a      	mov	r2, r9
 800253c:	431a      	orrs	r2, r3
 800253e:	2e00      	cmp	r6, #0
 8002540:	d000      	beq.n	8002544 <__aeabi_dsub+0x290>
 8002542:	e15b      	b.n	80027fc <__aeabi_dsub+0x548>
 8002544:	2a00      	cmp	r2, #0
 8002546:	d100      	bne.n	800254a <__aeabi_dsub+0x296>
 8002548:	e1a5      	b.n	8002896 <__aeabi_dsub+0x5e2>
 800254a:	000a      	movs	r2, r1
 800254c:	4302      	orrs	r2, r0
 800254e:	d000      	beq.n	8002552 <__aeabi_dsub+0x29e>
 8002550:	e1bb      	b.n	80028ca <__aeabi_dsub+0x616>
 8002552:	464a      	mov	r2, r9
 8002554:	0759      	lsls	r1, r3, #29
 8002556:	08d2      	lsrs	r2, r2, #3
 8002558:	430a      	orrs	r2, r1
 800255a:	08db      	lsrs	r3, r3, #3
 800255c:	e027      	b.n	80025ae <__aeabi_dsub+0x2fa>
 800255e:	000a      	movs	r2, r1
 8002560:	4302      	orrs	r2, r0
 8002562:	d100      	bne.n	8002566 <__aeabi_dsub+0x2b2>
 8002564:	e174      	b.n	8002850 <__aeabi_dsub+0x59c>
 8002566:	0022      	movs	r2, r4
 8002568:	3a01      	subs	r2, #1
 800256a:	2c01      	cmp	r4, #1
 800256c:	d005      	beq.n	800257a <__aeabi_dsub+0x2c6>
 800256e:	4c1e      	ldr	r4, [pc, #120]	; (80025e8 <__aeabi_dsub+0x334>)
 8002570:	45a4      	cmp	ip, r4
 8002572:	d100      	bne.n	8002576 <__aeabi_dsub+0x2c2>
 8002574:	e094      	b.n	80026a0 <__aeabi_dsub+0x3ec>
 8002576:	4694      	mov	ip, r2
 8002578:	e759      	b.n	800242e <__aeabi_dsub+0x17a>
 800257a:	4448      	add	r0, r9
 800257c:	4548      	cmp	r0, r9
 800257e:	4192      	sbcs	r2, r2
 8002580:	185b      	adds	r3, r3, r1
 8002582:	4698      	mov	r8, r3
 8002584:	0004      	movs	r4, r0
 8002586:	4252      	negs	r2, r2
 8002588:	4490      	add	r8, r2
 800258a:	4643      	mov	r3, r8
 800258c:	2602      	movs	r6, #2
 800258e:	021b      	lsls	r3, r3, #8
 8002590:	d500      	bpl.n	8002594 <__aeabi_dsub+0x2e0>
 8002592:	e0c4      	b.n	800271e <__aeabi_dsub+0x46a>
 8002594:	3e01      	subs	r6, #1
 8002596:	0763      	lsls	r3, r4, #29
 8002598:	d000      	beq.n	800259c <__aeabi_dsub+0x2e8>
 800259a:	e711      	b.n	80023c0 <__aeabi_dsub+0x10c>
 800259c:	4643      	mov	r3, r8
 800259e:	46b4      	mov	ip, r6
 80025a0:	0759      	lsls	r1, r3, #29
 80025a2:	08e2      	lsrs	r2, r4, #3
 80025a4:	430a      	orrs	r2, r1
 80025a6:	08db      	lsrs	r3, r3, #3
 80025a8:	490f      	ldr	r1, [pc, #60]	; (80025e8 <__aeabi_dsub+0x334>)
 80025aa:	458c      	cmp	ip, r1
 80025ac:	d040      	beq.n	8002630 <__aeabi_dsub+0x37c>
 80025ae:	4661      	mov	r1, ip
 80025b0:	031b      	lsls	r3, r3, #12
 80025b2:	0549      	lsls	r1, r1, #21
 80025b4:	0b1b      	lsrs	r3, r3, #12
 80025b6:	0d49      	lsrs	r1, r1, #21
 80025b8:	e720      	b.n	80023fc <__aeabi_dsub+0x148>
 80025ba:	4301      	orrs	r1, r0
 80025bc:	000c      	movs	r4, r1
 80025be:	1e61      	subs	r1, r4, #1
 80025c0:	418c      	sbcs	r4, r1
 80025c2:	444c      	add	r4, r9
 80025c4:	454c      	cmp	r4, r9
 80025c6:	4192      	sbcs	r2, r2
 80025c8:	4252      	negs	r2, r2
 80025ca:	4690      	mov	r8, r2
 80025cc:	4498      	add	r8, r3
 80025ce:	4643      	mov	r3, r8
 80025d0:	021b      	lsls	r3, r3, #8
 80025d2:	d5e0      	bpl.n	8002596 <__aeabi_dsub+0x2e2>
 80025d4:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <__aeabi_dsub+0x334>)
 80025d6:	3601      	adds	r6, #1
 80025d8:	429e      	cmp	r6, r3
 80025da:	d000      	beq.n	80025de <__aeabi_dsub+0x32a>
 80025dc:	e09f      	b.n	800271e <__aeabi_dsub+0x46a>
 80025de:	0031      	movs	r1, r6
 80025e0:	2300      	movs	r3, #0
 80025e2:	2200      	movs	r2, #0
 80025e4:	e70a      	b.n	80023fc <__aeabi_dsub+0x148>
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	000007ff 	.word	0x000007ff
 80025ec:	ff7fffff 	.word	0xff7fffff
 80025f0:	fffff801 	.word	0xfffff801
 80025f4:	000007fe 	.word	0x000007fe
 80025f8:	2a00      	cmp	r2, #0
 80025fa:	d100      	bne.n	80025fe <__aeabi_dsub+0x34a>
 80025fc:	e160      	b.n	80028c0 <__aeabi_dsub+0x60c>
 80025fe:	000a      	movs	r2, r1
 8002600:	4302      	orrs	r2, r0
 8002602:	d04d      	beq.n	80026a0 <__aeabi_dsub+0x3ec>
 8002604:	464a      	mov	r2, r9
 8002606:	075c      	lsls	r4, r3, #29
 8002608:	08d2      	lsrs	r2, r2, #3
 800260a:	4322      	orrs	r2, r4
 800260c:	2480      	movs	r4, #128	; 0x80
 800260e:	08db      	lsrs	r3, r3, #3
 8002610:	0324      	lsls	r4, r4, #12
 8002612:	4223      	tst	r3, r4
 8002614:	d007      	beq.n	8002626 <__aeabi_dsub+0x372>
 8002616:	08ce      	lsrs	r6, r1, #3
 8002618:	4226      	tst	r6, r4
 800261a:	d104      	bne.n	8002626 <__aeabi_dsub+0x372>
 800261c:	465d      	mov	r5, fp
 800261e:	0033      	movs	r3, r6
 8002620:	08c2      	lsrs	r2, r0, #3
 8002622:	0749      	lsls	r1, r1, #29
 8002624:	430a      	orrs	r2, r1
 8002626:	0f51      	lsrs	r1, r2, #29
 8002628:	00d2      	lsls	r2, r2, #3
 800262a:	08d2      	lsrs	r2, r2, #3
 800262c:	0749      	lsls	r1, r1, #29
 800262e:	430a      	orrs	r2, r1
 8002630:	0011      	movs	r1, r2
 8002632:	4319      	orrs	r1, r3
 8002634:	d100      	bne.n	8002638 <__aeabi_dsub+0x384>
 8002636:	e1c8      	b.n	80029ca <__aeabi_dsub+0x716>
 8002638:	2180      	movs	r1, #128	; 0x80
 800263a:	0309      	lsls	r1, r1, #12
 800263c:	430b      	orrs	r3, r1
 800263e:	031b      	lsls	r3, r3, #12
 8002640:	49d5      	ldr	r1, [pc, #852]	; (8002998 <__aeabi_dsub+0x6e4>)
 8002642:	0b1b      	lsrs	r3, r3, #12
 8002644:	e6da      	b.n	80023fc <__aeabi_dsub+0x148>
 8002646:	49d5      	ldr	r1, [pc, #852]	; (800299c <__aeabi_dsub+0x6e8>)
 8002648:	1ab6      	subs	r6, r6, r2
 800264a:	400b      	ands	r3, r1
 800264c:	4698      	mov	r8, r3
 800264e:	e6b5      	b.n	80023bc <__aeabi_dsub+0x108>
 8002650:	0020      	movs	r0, r4
 8002652:	f000 faa5 	bl	8002ba0 <__clzsi2>
 8002656:	0002      	movs	r2, r0
 8002658:	3218      	adds	r2, #24
 800265a:	2a1f      	cmp	r2, #31
 800265c:	dc00      	bgt.n	8002660 <__aeabi_dsub+0x3ac>
 800265e:	e68f      	b.n	8002380 <__aeabi_dsub+0xcc>
 8002660:	0023      	movs	r3, r4
 8002662:	3808      	subs	r0, #8
 8002664:	4083      	lsls	r3, r0
 8002666:	2400      	movs	r4, #0
 8002668:	e692      	b.n	8002390 <__aeabi_dsub+0xdc>
 800266a:	4308      	orrs	r0, r1
 800266c:	0002      	movs	r2, r0
 800266e:	1e50      	subs	r0, r2, #1
 8002670:	4182      	sbcs	r2, r0
 8002672:	e66d      	b.n	8002350 <__aeabi_dsub+0x9c>
 8002674:	4cca      	ldr	r4, [pc, #808]	; (80029a0 <__aeabi_dsub+0x6ec>)
 8002676:	1c72      	adds	r2, r6, #1
 8002678:	4222      	tst	r2, r4
 800267a:	d000      	beq.n	800267e <__aeabi_dsub+0x3ca>
 800267c:	e0ad      	b.n	80027da <__aeabi_dsub+0x526>
 800267e:	464a      	mov	r2, r9
 8002680:	431a      	orrs	r2, r3
 8002682:	2e00      	cmp	r6, #0
 8002684:	d1b8      	bne.n	80025f8 <__aeabi_dsub+0x344>
 8002686:	2a00      	cmp	r2, #0
 8002688:	d100      	bne.n	800268c <__aeabi_dsub+0x3d8>
 800268a:	e158      	b.n	800293e <__aeabi_dsub+0x68a>
 800268c:	000a      	movs	r2, r1
 800268e:	4302      	orrs	r2, r0
 8002690:	d000      	beq.n	8002694 <__aeabi_dsub+0x3e0>
 8002692:	e159      	b.n	8002948 <__aeabi_dsub+0x694>
 8002694:	464a      	mov	r2, r9
 8002696:	0759      	lsls	r1, r3, #29
 8002698:	08d2      	lsrs	r2, r2, #3
 800269a:	430a      	orrs	r2, r1
 800269c:	08db      	lsrs	r3, r3, #3
 800269e:	e786      	b.n	80025ae <__aeabi_dsub+0x2fa>
 80026a0:	464a      	mov	r2, r9
 80026a2:	0759      	lsls	r1, r3, #29
 80026a4:	08d2      	lsrs	r2, r2, #3
 80026a6:	430a      	orrs	r2, r1
 80026a8:	08db      	lsrs	r3, r3, #3
 80026aa:	e7c1      	b.n	8002630 <__aeabi_dsub+0x37c>
 80026ac:	4dba      	ldr	r5, [pc, #744]	; (8002998 <__aeabi_dsub+0x6e4>)
 80026ae:	42aa      	cmp	r2, r5
 80026b0:	d100      	bne.n	80026b4 <__aeabi_dsub+0x400>
 80026b2:	e11e      	b.n	80028f2 <__aeabi_dsub+0x63e>
 80026b4:	2580      	movs	r5, #128	; 0x80
 80026b6:	042d      	lsls	r5, r5, #16
 80026b8:	432b      	orrs	r3, r5
 80026ba:	4664      	mov	r4, ip
 80026bc:	2c38      	cmp	r4, #56	; 0x38
 80026be:	dc5d      	bgt.n	800277c <__aeabi_dsub+0x4c8>
 80026c0:	2c1f      	cmp	r4, #31
 80026c2:	dd00      	ble.n	80026c6 <__aeabi_dsub+0x412>
 80026c4:	e0d0      	b.n	8002868 <__aeabi_dsub+0x5b4>
 80026c6:	2520      	movs	r5, #32
 80026c8:	4667      	mov	r7, ip
 80026ca:	1b2d      	subs	r5, r5, r4
 80026cc:	464e      	mov	r6, r9
 80026ce:	001c      	movs	r4, r3
 80026d0:	40fe      	lsrs	r6, r7
 80026d2:	40ac      	lsls	r4, r5
 80026d4:	4334      	orrs	r4, r6
 80026d6:	464e      	mov	r6, r9
 80026d8:	40ae      	lsls	r6, r5
 80026da:	0035      	movs	r5, r6
 80026dc:	40fb      	lsrs	r3, r7
 80026de:	1e6e      	subs	r6, r5, #1
 80026e0:	41b5      	sbcs	r5, r6
 80026e2:	1ac9      	subs	r1, r1, r3
 80026e4:	432c      	orrs	r4, r5
 80026e6:	e04e      	b.n	8002786 <__aeabi_dsub+0x4d2>
 80026e8:	464a      	mov	r2, r9
 80026ea:	1a14      	subs	r4, r2, r0
 80026ec:	45a1      	cmp	r9, r4
 80026ee:	4192      	sbcs	r2, r2
 80026f0:	4252      	negs	r2, r2
 80026f2:	4690      	mov	r8, r2
 80026f4:	1a5f      	subs	r7, r3, r1
 80026f6:	003a      	movs	r2, r7
 80026f8:	4647      	mov	r7, r8
 80026fa:	1bd2      	subs	r2, r2, r7
 80026fc:	4690      	mov	r8, r2
 80026fe:	0212      	lsls	r2, r2, #8
 8002700:	d500      	bpl.n	8002704 <__aeabi_dsub+0x450>
 8002702:	e08b      	b.n	800281c <__aeabi_dsub+0x568>
 8002704:	4642      	mov	r2, r8
 8002706:	4322      	orrs	r2, r4
 8002708:	d000      	beq.n	800270c <__aeabi_dsub+0x458>
 800270a:	e630      	b.n	800236e <__aeabi_dsub+0xba>
 800270c:	2300      	movs	r3, #0
 800270e:	2500      	movs	r5, #0
 8002710:	e74d      	b.n	80025ae <__aeabi_dsub+0x2fa>
 8002712:	464a      	mov	r2, r9
 8002714:	0759      	lsls	r1, r3, #29
 8002716:	08d2      	lsrs	r2, r2, #3
 8002718:	430a      	orrs	r2, r1
 800271a:	08db      	lsrs	r3, r3, #3
 800271c:	e744      	b.n	80025a8 <__aeabi_dsub+0x2f4>
 800271e:	4642      	mov	r2, r8
 8002720:	4b9e      	ldr	r3, [pc, #632]	; (800299c <__aeabi_dsub+0x6e8>)
 8002722:	0861      	lsrs	r1, r4, #1
 8002724:	401a      	ands	r2, r3
 8002726:	0013      	movs	r3, r2
 8002728:	2201      	movs	r2, #1
 800272a:	4014      	ands	r4, r2
 800272c:	430c      	orrs	r4, r1
 800272e:	07da      	lsls	r2, r3, #31
 8002730:	085b      	lsrs	r3, r3, #1
 8002732:	4698      	mov	r8, r3
 8002734:	4314      	orrs	r4, r2
 8002736:	e641      	b.n	80023bc <__aeabi_dsub+0x108>
 8002738:	001a      	movs	r2, r3
 800273a:	3e1f      	subs	r6, #31
 800273c:	40f2      	lsrs	r2, r6
 800273e:	0016      	movs	r6, r2
 8002740:	2920      	cmp	r1, #32
 8002742:	d003      	beq.n	800274c <__aeabi_dsub+0x498>
 8002744:	2240      	movs	r2, #64	; 0x40
 8002746:	1a51      	subs	r1, r2, r1
 8002748:	408b      	lsls	r3, r1
 800274a:	431c      	orrs	r4, r3
 800274c:	1e62      	subs	r2, r4, #1
 800274e:	4194      	sbcs	r4, r2
 8002750:	2300      	movs	r3, #0
 8002752:	4334      	orrs	r4, r6
 8002754:	4698      	mov	r8, r3
 8002756:	2600      	movs	r6, #0
 8002758:	e71d      	b.n	8002596 <__aeabi_dsub+0x2e2>
 800275a:	000c      	movs	r4, r1
 800275c:	3a20      	subs	r2, #32
 800275e:	40d4      	lsrs	r4, r2
 8002760:	0022      	movs	r2, r4
 8002762:	4664      	mov	r4, ip
 8002764:	2c20      	cmp	r4, #32
 8002766:	d004      	beq.n	8002772 <__aeabi_dsub+0x4be>
 8002768:	2740      	movs	r7, #64	; 0x40
 800276a:	1b3f      	subs	r7, r7, r4
 800276c:	40b9      	lsls	r1, r7
 800276e:	4308      	orrs	r0, r1
 8002770:	4680      	mov	r8, r0
 8002772:	4644      	mov	r4, r8
 8002774:	1e61      	subs	r1, r4, #1
 8002776:	418c      	sbcs	r4, r1
 8002778:	4322      	orrs	r2, r4
 800277a:	e5e9      	b.n	8002350 <__aeabi_dsub+0x9c>
 800277c:	464c      	mov	r4, r9
 800277e:	4323      	orrs	r3, r4
 8002780:	001c      	movs	r4, r3
 8002782:	1e63      	subs	r3, r4, #1
 8002784:	419c      	sbcs	r4, r3
 8002786:	1b04      	subs	r4, r0, r4
 8002788:	42a0      	cmp	r0, r4
 800278a:	419b      	sbcs	r3, r3
 800278c:	425b      	negs	r3, r3
 800278e:	1acb      	subs	r3, r1, r3
 8002790:	4698      	mov	r8, r3
 8002792:	465d      	mov	r5, fp
 8002794:	0016      	movs	r6, r2
 8002796:	e5e2      	b.n	800235e <__aeabi_dsub+0xaa>
 8002798:	464e      	mov	r6, r9
 800279a:	431e      	orrs	r6, r3
 800279c:	d100      	bne.n	80027a0 <__aeabi_dsub+0x4ec>
 800279e:	e0ae      	b.n	80028fe <__aeabi_dsub+0x64a>
 80027a0:	1e66      	subs	r6, r4, #1
 80027a2:	2c01      	cmp	r4, #1
 80027a4:	d100      	bne.n	80027a8 <__aeabi_dsub+0x4f4>
 80027a6:	e0fd      	b.n	80029a4 <__aeabi_dsub+0x6f0>
 80027a8:	4f7b      	ldr	r7, [pc, #492]	; (8002998 <__aeabi_dsub+0x6e4>)
 80027aa:	42bc      	cmp	r4, r7
 80027ac:	d100      	bne.n	80027b0 <__aeabi_dsub+0x4fc>
 80027ae:	e107      	b.n	80029c0 <__aeabi_dsub+0x70c>
 80027b0:	46b4      	mov	ip, r6
 80027b2:	e69b      	b.n	80024ec <__aeabi_dsub+0x238>
 80027b4:	4664      	mov	r4, ip
 80027b6:	2220      	movs	r2, #32
 80027b8:	1b12      	subs	r2, r2, r4
 80027ba:	000c      	movs	r4, r1
 80027bc:	4094      	lsls	r4, r2
 80027be:	0007      	movs	r7, r0
 80027c0:	4090      	lsls	r0, r2
 80027c2:	46a0      	mov	r8, r4
 80027c4:	4664      	mov	r4, ip
 80027c6:	1e42      	subs	r2, r0, #1
 80027c8:	4190      	sbcs	r0, r2
 80027ca:	4662      	mov	r2, ip
 80027cc:	40e7      	lsrs	r7, r4
 80027ce:	4644      	mov	r4, r8
 80027d0:	40d1      	lsrs	r1, r2
 80027d2:	433c      	orrs	r4, r7
 80027d4:	4304      	orrs	r4, r0
 80027d6:	185b      	adds	r3, r3, r1
 80027d8:	e6f3      	b.n	80025c2 <__aeabi_dsub+0x30e>
 80027da:	4c6f      	ldr	r4, [pc, #444]	; (8002998 <__aeabi_dsub+0x6e4>)
 80027dc:	42a2      	cmp	r2, r4
 80027de:	d100      	bne.n	80027e2 <__aeabi_dsub+0x52e>
 80027e0:	e0d5      	b.n	800298e <__aeabi_dsub+0x6da>
 80027e2:	4448      	add	r0, r9
 80027e4:	185b      	adds	r3, r3, r1
 80027e6:	4548      	cmp	r0, r9
 80027e8:	4189      	sbcs	r1, r1
 80027ea:	4249      	negs	r1, r1
 80027ec:	185b      	adds	r3, r3, r1
 80027ee:	07dc      	lsls	r4, r3, #31
 80027f0:	0840      	lsrs	r0, r0, #1
 80027f2:	085b      	lsrs	r3, r3, #1
 80027f4:	4698      	mov	r8, r3
 80027f6:	0016      	movs	r6, r2
 80027f8:	4304      	orrs	r4, r0
 80027fa:	e6cc      	b.n	8002596 <__aeabi_dsub+0x2e2>
 80027fc:	2a00      	cmp	r2, #0
 80027fe:	d000      	beq.n	8002802 <__aeabi_dsub+0x54e>
 8002800:	e082      	b.n	8002908 <__aeabi_dsub+0x654>
 8002802:	000a      	movs	r2, r1
 8002804:	4302      	orrs	r2, r0
 8002806:	d140      	bne.n	800288a <__aeabi_dsub+0x5d6>
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	2500      	movs	r5, #0
 800280c:	031b      	lsls	r3, r3, #12
 800280e:	e713      	b.n	8002638 <__aeabi_dsub+0x384>
 8002810:	074b      	lsls	r3, r1, #29
 8002812:	08c2      	lsrs	r2, r0, #3
 8002814:	431a      	orrs	r2, r3
 8002816:	465d      	mov	r5, fp
 8002818:	08cb      	lsrs	r3, r1, #3
 800281a:	e6c5      	b.n	80025a8 <__aeabi_dsub+0x2f4>
 800281c:	464a      	mov	r2, r9
 800281e:	1a84      	subs	r4, r0, r2
 8002820:	42a0      	cmp	r0, r4
 8002822:	4192      	sbcs	r2, r2
 8002824:	1acb      	subs	r3, r1, r3
 8002826:	4252      	negs	r2, r2
 8002828:	1a9b      	subs	r3, r3, r2
 800282a:	4698      	mov	r8, r3
 800282c:	465d      	mov	r5, fp
 800282e:	e59e      	b.n	800236e <__aeabi_dsub+0xba>
 8002830:	464a      	mov	r2, r9
 8002832:	0759      	lsls	r1, r3, #29
 8002834:	08d2      	lsrs	r2, r2, #3
 8002836:	430a      	orrs	r2, r1
 8002838:	08db      	lsrs	r3, r3, #3
 800283a:	e6f9      	b.n	8002630 <__aeabi_dsub+0x37c>
 800283c:	464a      	mov	r2, r9
 800283e:	1a14      	subs	r4, r2, r0
 8002840:	45a1      	cmp	r9, r4
 8002842:	4192      	sbcs	r2, r2
 8002844:	1a5b      	subs	r3, r3, r1
 8002846:	4252      	negs	r2, r2
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	4698      	mov	r8, r3
 800284c:	2601      	movs	r6, #1
 800284e:	e586      	b.n	800235e <__aeabi_dsub+0xaa>
 8002850:	464a      	mov	r2, r9
 8002852:	0759      	lsls	r1, r3, #29
 8002854:	08d2      	lsrs	r2, r2, #3
 8002856:	430a      	orrs	r2, r1
 8002858:	08db      	lsrs	r3, r3, #3
 800285a:	e6a5      	b.n	80025a8 <__aeabi_dsub+0x2f4>
 800285c:	464c      	mov	r4, r9
 800285e:	4323      	orrs	r3, r4
 8002860:	001c      	movs	r4, r3
 8002862:	1e63      	subs	r3, r4, #1
 8002864:	419c      	sbcs	r4, r3
 8002866:	e65b      	b.n	8002520 <__aeabi_dsub+0x26c>
 8002868:	4665      	mov	r5, ip
 800286a:	001e      	movs	r6, r3
 800286c:	3d20      	subs	r5, #32
 800286e:	40ee      	lsrs	r6, r5
 8002870:	2c20      	cmp	r4, #32
 8002872:	d005      	beq.n	8002880 <__aeabi_dsub+0x5cc>
 8002874:	2540      	movs	r5, #64	; 0x40
 8002876:	1b2d      	subs	r5, r5, r4
 8002878:	40ab      	lsls	r3, r5
 800287a:	464c      	mov	r4, r9
 800287c:	431c      	orrs	r4, r3
 800287e:	46a2      	mov	sl, r4
 8002880:	4654      	mov	r4, sl
 8002882:	1e63      	subs	r3, r4, #1
 8002884:	419c      	sbcs	r4, r3
 8002886:	4334      	orrs	r4, r6
 8002888:	e77d      	b.n	8002786 <__aeabi_dsub+0x4d2>
 800288a:	074b      	lsls	r3, r1, #29
 800288c:	08c2      	lsrs	r2, r0, #3
 800288e:	431a      	orrs	r2, r3
 8002890:	465d      	mov	r5, fp
 8002892:	08cb      	lsrs	r3, r1, #3
 8002894:	e6cc      	b.n	8002630 <__aeabi_dsub+0x37c>
 8002896:	000a      	movs	r2, r1
 8002898:	4302      	orrs	r2, r0
 800289a:	d100      	bne.n	800289e <__aeabi_dsub+0x5ea>
 800289c:	e736      	b.n	800270c <__aeabi_dsub+0x458>
 800289e:	074b      	lsls	r3, r1, #29
 80028a0:	08c2      	lsrs	r2, r0, #3
 80028a2:	431a      	orrs	r2, r3
 80028a4:	465d      	mov	r5, fp
 80028a6:	08cb      	lsrs	r3, r1, #3
 80028a8:	e681      	b.n	80025ae <__aeabi_dsub+0x2fa>
 80028aa:	464a      	mov	r2, r9
 80028ac:	1a84      	subs	r4, r0, r2
 80028ae:	42a0      	cmp	r0, r4
 80028b0:	4192      	sbcs	r2, r2
 80028b2:	1acb      	subs	r3, r1, r3
 80028b4:	4252      	negs	r2, r2
 80028b6:	1a9b      	subs	r3, r3, r2
 80028b8:	4698      	mov	r8, r3
 80028ba:	465d      	mov	r5, fp
 80028bc:	2601      	movs	r6, #1
 80028be:	e54e      	b.n	800235e <__aeabi_dsub+0xaa>
 80028c0:	074b      	lsls	r3, r1, #29
 80028c2:	08c2      	lsrs	r2, r0, #3
 80028c4:	431a      	orrs	r2, r3
 80028c6:	08cb      	lsrs	r3, r1, #3
 80028c8:	e6b2      	b.n	8002630 <__aeabi_dsub+0x37c>
 80028ca:	464a      	mov	r2, r9
 80028cc:	1a14      	subs	r4, r2, r0
 80028ce:	45a1      	cmp	r9, r4
 80028d0:	4192      	sbcs	r2, r2
 80028d2:	1a5f      	subs	r7, r3, r1
 80028d4:	4252      	negs	r2, r2
 80028d6:	1aba      	subs	r2, r7, r2
 80028d8:	4690      	mov	r8, r2
 80028da:	0212      	lsls	r2, r2, #8
 80028dc:	d56b      	bpl.n	80029b6 <__aeabi_dsub+0x702>
 80028de:	464a      	mov	r2, r9
 80028e0:	1a84      	subs	r4, r0, r2
 80028e2:	42a0      	cmp	r0, r4
 80028e4:	4192      	sbcs	r2, r2
 80028e6:	1acb      	subs	r3, r1, r3
 80028e8:	4252      	negs	r2, r2
 80028ea:	1a9b      	subs	r3, r3, r2
 80028ec:	4698      	mov	r8, r3
 80028ee:	465d      	mov	r5, fp
 80028f0:	e564      	b.n	80023bc <__aeabi_dsub+0x108>
 80028f2:	074b      	lsls	r3, r1, #29
 80028f4:	08c2      	lsrs	r2, r0, #3
 80028f6:	431a      	orrs	r2, r3
 80028f8:	465d      	mov	r5, fp
 80028fa:	08cb      	lsrs	r3, r1, #3
 80028fc:	e698      	b.n	8002630 <__aeabi_dsub+0x37c>
 80028fe:	074b      	lsls	r3, r1, #29
 8002900:	08c2      	lsrs	r2, r0, #3
 8002902:	431a      	orrs	r2, r3
 8002904:	08cb      	lsrs	r3, r1, #3
 8002906:	e64f      	b.n	80025a8 <__aeabi_dsub+0x2f4>
 8002908:	000a      	movs	r2, r1
 800290a:	4302      	orrs	r2, r0
 800290c:	d090      	beq.n	8002830 <__aeabi_dsub+0x57c>
 800290e:	464a      	mov	r2, r9
 8002910:	075c      	lsls	r4, r3, #29
 8002912:	08d2      	lsrs	r2, r2, #3
 8002914:	4314      	orrs	r4, r2
 8002916:	2280      	movs	r2, #128	; 0x80
 8002918:	08db      	lsrs	r3, r3, #3
 800291a:	0312      	lsls	r2, r2, #12
 800291c:	4213      	tst	r3, r2
 800291e:	d008      	beq.n	8002932 <__aeabi_dsub+0x67e>
 8002920:	08ce      	lsrs	r6, r1, #3
 8002922:	4216      	tst	r6, r2
 8002924:	d105      	bne.n	8002932 <__aeabi_dsub+0x67e>
 8002926:	08c0      	lsrs	r0, r0, #3
 8002928:	0749      	lsls	r1, r1, #29
 800292a:	4308      	orrs	r0, r1
 800292c:	0004      	movs	r4, r0
 800292e:	465d      	mov	r5, fp
 8002930:	0033      	movs	r3, r6
 8002932:	0f61      	lsrs	r1, r4, #29
 8002934:	00e2      	lsls	r2, r4, #3
 8002936:	0749      	lsls	r1, r1, #29
 8002938:	08d2      	lsrs	r2, r2, #3
 800293a:	430a      	orrs	r2, r1
 800293c:	e678      	b.n	8002630 <__aeabi_dsub+0x37c>
 800293e:	074b      	lsls	r3, r1, #29
 8002940:	08c2      	lsrs	r2, r0, #3
 8002942:	431a      	orrs	r2, r3
 8002944:	08cb      	lsrs	r3, r1, #3
 8002946:	e632      	b.n	80025ae <__aeabi_dsub+0x2fa>
 8002948:	4448      	add	r0, r9
 800294a:	185b      	adds	r3, r3, r1
 800294c:	4548      	cmp	r0, r9
 800294e:	4192      	sbcs	r2, r2
 8002950:	4698      	mov	r8, r3
 8002952:	4252      	negs	r2, r2
 8002954:	4490      	add	r8, r2
 8002956:	4643      	mov	r3, r8
 8002958:	0004      	movs	r4, r0
 800295a:	021b      	lsls	r3, r3, #8
 800295c:	d400      	bmi.n	8002960 <__aeabi_dsub+0x6ac>
 800295e:	e61a      	b.n	8002596 <__aeabi_dsub+0x2e2>
 8002960:	4642      	mov	r2, r8
 8002962:	4b0e      	ldr	r3, [pc, #56]	; (800299c <__aeabi_dsub+0x6e8>)
 8002964:	2601      	movs	r6, #1
 8002966:	401a      	ands	r2, r3
 8002968:	4690      	mov	r8, r2
 800296a:	e614      	b.n	8002596 <__aeabi_dsub+0x2e2>
 800296c:	4666      	mov	r6, ip
 800296e:	001f      	movs	r7, r3
 8002970:	3e20      	subs	r6, #32
 8002972:	40f7      	lsrs	r7, r6
 8002974:	2c20      	cmp	r4, #32
 8002976:	d005      	beq.n	8002984 <__aeabi_dsub+0x6d0>
 8002978:	2640      	movs	r6, #64	; 0x40
 800297a:	1b36      	subs	r6, r6, r4
 800297c:	40b3      	lsls	r3, r6
 800297e:	464c      	mov	r4, r9
 8002980:	431c      	orrs	r4, r3
 8002982:	46a2      	mov	sl, r4
 8002984:	4654      	mov	r4, sl
 8002986:	1e63      	subs	r3, r4, #1
 8002988:	419c      	sbcs	r4, r3
 800298a:	433c      	orrs	r4, r7
 800298c:	e5c8      	b.n	8002520 <__aeabi_dsub+0x26c>
 800298e:	0011      	movs	r1, r2
 8002990:	2300      	movs	r3, #0
 8002992:	2200      	movs	r2, #0
 8002994:	e532      	b.n	80023fc <__aeabi_dsub+0x148>
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	000007ff 	.word	0x000007ff
 800299c:	ff7fffff 	.word	0xff7fffff
 80029a0:	000007fe 	.word	0x000007fe
 80029a4:	464a      	mov	r2, r9
 80029a6:	1814      	adds	r4, r2, r0
 80029a8:	4284      	cmp	r4, r0
 80029aa:	4192      	sbcs	r2, r2
 80029ac:	185b      	adds	r3, r3, r1
 80029ae:	4698      	mov	r8, r3
 80029b0:	4252      	negs	r2, r2
 80029b2:	4490      	add	r8, r2
 80029b4:	e5e9      	b.n	800258a <__aeabi_dsub+0x2d6>
 80029b6:	4642      	mov	r2, r8
 80029b8:	4322      	orrs	r2, r4
 80029ba:	d100      	bne.n	80029be <__aeabi_dsub+0x70a>
 80029bc:	e6a6      	b.n	800270c <__aeabi_dsub+0x458>
 80029be:	e5ea      	b.n	8002596 <__aeabi_dsub+0x2e2>
 80029c0:	074b      	lsls	r3, r1, #29
 80029c2:	08c2      	lsrs	r2, r0, #3
 80029c4:	431a      	orrs	r2, r3
 80029c6:	08cb      	lsrs	r3, r1, #3
 80029c8:	e632      	b.n	8002630 <__aeabi_dsub+0x37c>
 80029ca:	2200      	movs	r2, #0
 80029cc:	4901      	ldr	r1, [pc, #4]	; (80029d4 <__aeabi_dsub+0x720>)
 80029ce:	0013      	movs	r3, r2
 80029d0:	e514      	b.n	80023fc <__aeabi_dsub+0x148>
 80029d2:	46c0      	nop			; (mov r8, r8)
 80029d4:	000007ff 	.word	0x000007ff

080029d8 <__aeabi_dcmpun>:
 80029d8:	b570      	push	{r4, r5, r6, lr}
 80029da:	0005      	movs	r5, r0
 80029dc:	480c      	ldr	r0, [pc, #48]	; (8002a10 <__aeabi_dcmpun+0x38>)
 80029de:	030c      	lsls	r4, r1, #12
 80029e0:	0016      	movs	r6, r2
 80029e2:	0049      	lsls	r1, r1, #1
 80029e4:	031a      	lsls	r2, r3, #12
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	0b24      	lsrs	r4, r4, #12
 80029ea:	0d49      	lsrs	r1, r1, #21
 80029ec:	0b12      	lsrs	r2, r2, #12
 80029ee:	0d5b      	lsrs	r3, r3, #21
 80029f0:	4281      	cmp	r1, r0
 80029f2:	d008      	beq.n	8002a06 <__aeabi_dcmpun+0x2e>
 80029f4:	4906      	ldr	r1, [pc, #24]	; (8002a10 <__aeabi_dcmpun+0x38>)
 80029f6:	2000      	movs	r0, #0
 80029f8:	428b      	cmp	r3, r1
 80029fa:	d103      	bne.n	8002a04 <__aeabi_dcmpun+0x2c>
 80029fc:	4332      	orrs	r2, r6
 80029fe:	0010      	movs	r0, r2
 8002a00:	1e42      	subs	r2, r0, #1
 8002a02:	4190      	sbcs	r0, r2
 8002a04:	bd70      	pop	{r4, r5, r6, pc}
 8002a06:	2001      	movs	r0, #1
 8002a08:	432c      	orrs	r4, r5
 8002a0a:	d1fb      	bne.n	8002a04 <__aeabi_dcmpun+0x2c>
 8002a0c:	e7f2      	b.n	80029f4 <__aeabi_dcmpun+0x1c>
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	000007ff 	.word	0x000007ff

08002a14 <__aeabi_d2iz>:
 8002a14:	000a      	movs	r2, r1
 8002a16:	b530      	push	{r4, r5, lr}
 8002a18:	4c13      	ldr	r4, [pc, #76]	; (8002a68 <__aeabi_d2iz+0x54>)
 8002a1a:	0053      	lsls	r3, r2, #1
 8002a1c:	0309      	lsls	r1, r1, #12
 8002a1e:	0005      	movs	r5, r0
 8002a20:	0b09      	lsrs	r1, r1, #12
 8002a22:	2000      	movs	r0, #0
 8002a24:	0d5b      	lsrs	r3, r3, #21
 8002a26:	0fd2      	lsrs	r2, r2, #31
 8002a28:	42a3      	cmp	r3, r4
 8002a2a:	dd04      	ble.n	8002a36 <__aeabi_d2iz+0x22>
 8002a2c:	480f      	ldr	r0, [pc, #60]	; (8002a6c <__aeabi_d2iz+0x58>)
 8002a2e:	4283      	cmp	r3, r0
 8002a30:	dd02      	ble.n	8002a38 <__aeabi_d2iz+0x24>
 8002a32:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <__aeabi_d2iz+0x5c>)
 8002a34:	18d0      	adds	r0, r2, r3
 8002a36:	bd30      	pop	{r4, r5, pc}
 8002a38:	2080      	movs	r0, #128	; 0x80
 8002a3a:	0340      	lsls	r0, r0, #13
 8002a3c:	4301      	orrs	r1, r0
 8002a3e:	480d      	ldr	r0, [pc, #52]	; (8002a74 <__aeabi_d2iz+0x60>)
 8002a40:	1ac0      	subs	r0, r0, r3
 8002a42:	281f      	cmp	r0, #31
 8002a44:	dd08      	ble.n	8002a58 <__aeabi_d2iz+0x44>
 8002a46:	480c      	ldr	r0, [pc, #48]	; (8002a78 <__aeabi_d2iz+0x64>)
 8002a48:	1ac3      	subs	r3, r0, r3
 8002a4a:	40d9      	lsrs	r1, r3
 8002a4c:	000b      	movs	r3, r1
 8002a4e:	4258      	negs	r0, r3
 8002a50:	2a00      	cmp	r2, #0
 8002a52:	d1f0      	bne.n	8002a36 <__aeabi_d2iz+0x22>
 8002a54:	0018      	movs	r0, r3
 8002a56:	e7ee      	b.n	8002a36 <__aeabi_d2iz+0x22>
 8002a58:	4c08      	ldr	r4, [pc, #32]	; (8002a7c <__aeabi_d2iz+0x68>)
 8002a5a:	40c5      	lsrs	r5, r0
 8002a5c:	46a4      	mov	ip, r4
 8002a5e:	4463      	add	r3, ip
 8002a60:	4099      	lsls	r1, r3
 8002a62:	000b      	movs	r3, r1
 8002a64:	432b      	orrs	r3, r5
 8002a66:	e7f2      	b.n	8002a4e <__aeabi_d2iz+0x3a>
 8002a68:	000003fe 	.word	0x000003fe
 8002a6c:	0000041d 	.word	0x0000041d
 8002a70:	7fffffff 	.word	0x7fffffff
 8002a74:	00000433 	.word	0x00000433
 8002a78:	00000413 	.word	0x00000413
 8002a7c:	fffffbed 	.word	0xfffffbed

08002a80 <__aeabi_i2d>:
 8002a80:	b570      	push	{r4, r5, r6, lr}
 8002a82:	2800      	cmp	r0, #0
 8002a84:	d016      	beq.n	8002ab4 <__aeabi_i2d+0x34>
 8002a86:	17c3      	asrs	r3, r0, #31
 8002a88:	18c5      	adds	r5, r0, r3
 8002a8a:	405d      	eors	r5, r3
 8002a8c:	0fc4      	lsrs	r4, r0, #31
 8002a8e:	0028      	movs	r0, r5
 8002a90:	f000 f886 	bl	8002ba0 <__clzsi2>
 8002a94:	4a11      	ldr	r2, [pc, #68]	; (8002adc <__aeabi_i2d+0x5c>)
 8002a96:	1a12      	subs	r2, r2, r0
 8002a98:	280a      	cmp	r0, #10
 8002a9a:	dc16      	bgt.n	8002aca <__aeabi_i2d+0x4a>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	002e      	movs	r6, r5
 8002aa0:	3315      	adds	r3, #21
 8002aa2:	409e      	lsls	r6, r3
 8002aa4:	230b      	movs	r3, #11
 8002aa6:	1a18      	subs	r0, r3, r0
 8002aa8:	40c5      	lsrs	r5, r0
 8002aaa:	0553      	lsls	r3, r2, #21
 8002aac:	032d      	lsls	r5, r5, #12
 8002aae:	0b2d      	lsrs	r5, r5, #12
 8002ab0:	0d5b      	lsrs	r3, r3, #21
 8002ab2:	e003      	b.n	8002abc <__aeabi_i2d+0x3c>
 8002ab4:	2400      	movs	r4, #0
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	2500      	movs	r5, #0
 8002aba:	2600      	movs	r6, #0
 8002abc:	051b      	lsls	r3, r3, #20
 8002abe:	432b      	orrs	r3, r5
 8002ac0:	07e4      	lsls	r4, r4, #31
 8002ac2:	4323      	orrs	r3, r4
 8002ac4:	0030      	movs	r0, r6
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	bd70      	pop	{r4, r5, r6, pc}
 8002aca:	380b      	subs	r0, #11
 8002acc:	4085      	lsls	r5, r0
 8002ace:	0553      	lsls	r3, r2, #21
 8002ad0:	032d      	lsls	r5, r5, #12
 8002ad2:	2600      	movs	r6, #0
 8002ad4:	0b2d      	lsrs	r5, r5, #12
 8002ad6:	0d5b      	lsrs	r3, r3, #21
 8002ad8:	e7f0      	b.n	8002abc <__aeabi_i2d+0x3c>
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	0000041e 	.word	0x0000041e

08002ae0 <__aeabi_ui2d>:
 8002ae0:	b510      	push	{r4, lr}
 8002ae2:	1e04      	subs	r4, r0, #0
 8002ae4:	d010      	beq.n	8002b08 <__aeabi_ui2d+0x28>
 8002ae6:	f000 f85b 	bl	8002ba0 <__clzsi2>
 8002aea:	4b0f      	ldr	r3, [pc, #60]	; (8002b28 <__aeabi_ui2d+0x48>)
 8002aec:	1a1b      	subs	r3, r3, r0
 8002aee:	280a      	cmp	r0, #10
 8002af0:	dc11      	bgt.n	8002b16 <__aeabi_ui2d+0x36>
 8002af2:	220b      	movs	r2, #11
 8002af4:	0021      	movs	r1, r4
 8002af6:	1a12      	subs	r2, r2, r0
 8002af8:	40d1      	lsrs	r1, r2
 8002afa:	3015      	adds	r0, #21
 8002afc:	030a      	lsls	r2, r1, #12
 8002afe:	055b      	lsls	r3, r3, #21
 8002b00:	4084      	lsls	r4, r0
 8002b02:	0b12      	lsrs	r2, r2, #12
 8002b04:	0d5b      	lsrs	r3, r3, #21
 8002b06:	e001      	b.n	8002b0c <__aeabi_ui2d+0x2c>
 8002b08:	2300      	movs	r3, #0
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	051b      	lsls	r3, r3, #20
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	0020      	movs	r0, r4
 8002b12:	0019      	movs	r1, r3
 8002b14:	bd10      	pop	{r4, pc}
 8002b16:	0022      	movs	r2, r4
 8002b18:	380b      	subs	r0, #11
 8002b1a:	4082      	lsls	r2, r0
 8002b1c:	055b      	lsls	r3, r3, #21
 8002b1e:	0312      	lsls	r2, r2, #12
 8002b20:	2400      	movs	r4, #0
 8002b22:	0b12      	lsrs	r2, r2, #12
 8002b24:	0d5b      	lsrs	r3, r3, #21
 8002b26:	e7f1      	b.n	8002b0c <__aeabi_ui2d+0x2c>
 8002b28:	0000041e 	.word	0x0000041e

08002b2c <__aeabi_cfrcmple>:
 8002b2c:	4684      	mov	ip, r0
 8002b2e:	1c08      	adds	r0, r1, #0
 8002b30:	4661      	mov	r1, ip
 8002b32:	e7ff      	b.n	8002b34 <__aeabi_cfcmpeq>

08002b34 <__aeabi_cfcmpeq>:
 8002b34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002b36:	f000 f8c5 	bl	8002cc4 <__lesf2>
 8002b3a:	2800      	cmp	r0, #0
 8002b3c:	d401      	bmi.n	8002b42 <__aeabi_cfcmpeq+0xe>
 8002b3e:	2100      	movs	r1, #0
 8002b40:	42c8      	cmn	r0, r1
 8002b42:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002b44 <__aeabi_fcmpeq>:
 8002b44:	b510      	push	{r4, lr}
 8002b46:	f000 f849 	bl	8002bdc <__eqsf2>
 8002b4a:	4240      	negs	r0, r0
 8002b4c:	3001      	adds	r0, #1
 8002b4e:	bd10      	pop	{r4, pc}

08002b50 <__aeabi_fcmplt>:
 8002b50:	b510      	push	{r4, lr}
 8002b52:	f000 f8b7 	bl	8002cc4 <__lesf2>
 8002b56:	2800      	cmp	r0, #0
 8002b58:	db01      	blt.n	8002b5e <__aeabi_fcmplt+0xe>
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	bd10      	pop	{r4, pc}
 8002b5e:	2001      	movs	r0, #1
 8002b60:	bd10      	pop	{r4, pc}
 8002b62:	46c0      	nop			; (mov r8, r8)

08002b64 <__aeabi_fcmple>:
 8002b64:	b510      	push	{r4, lr}
 8002b66:	f000 f8ad 	bl	8002cc4 <__lesf2>
 8002b6a:	2800      	cmp	r0, #0
 8002b6c:	dd01      	ble.n	8002b72 <__aeabi_fcmple+0xe>
 8002b6e:	2000      	movs	r0, #0
 8002b70:	bd10      	pop	{r4, pc}
 8002b72:	2001      	movs	r0, #1
 8002b74:	bd10      	pop	{r4, pc}
 8002b76:	46c0      	nop			; (mov r8, r8)

08002b78 <__aeabi_fcmpgt>:
 8002b78:	b510      	push	{r4, lr}
 8002b7a:	f000 f857 	bl	8002c2c <__gesf2>
 8002b7e:	2800      	cmp	r0, #0
 8002b80:	dc01      	bgt.n	8002b86 <__aeabi_fcmpgt+0xe>
 8002b82:	2000      	movs	r0, #0
 8002b84:	bd10      	pop	{r4, pc}
 8002b86:	2001      	movs	r0, #1
 8002b88:	bd10      	pop	{r4, pc}
 8002b8a:	46c0      	nop			; (mov r8, r8)

08002b8c <__aeabi_fcmpge>:
 8002b8c:	b510      	push	{r4, lr}
 8002b8e:	f000 f84d 	bl	8002c2c <__gesf2>
 8002b92:	2800      	cmp	r0, #0
 8002b94:	da01      	bge.n	8002b9a <__aeabi_fcmpge+0xe>
 8002b96:	2000      	movs	r0, #0
 8002b98:	bd10      	pop	{r4, pc}
 8002b9a:	2001      	movs	r0, #1
 8002b9c:	bd10      	pop	{r4, pc}
 8002b9e:	46c0      	nop			; (mov r8, r8)

08002ba0 <__clzsi2>:
 8002ba0:	211c      	movs	r1, #28
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	041b      	lsls	r3, r3, #16
 8002ba6:	4298      	cmp	r0, r3
 8002ba8:	d301      	bcc.n	8002bae <__clzsi2+0xe>
 8002baa:	0c00      	lsrs	r0, r0, #16
 8002bac:	3910      	subs	r1, #16
 8002bae:	0a1b      	lsrs	r3, r3, #8
 8002bb0:	4298      	cmp	r0, r3
 8002bb2:	d301      	bcc.n	8002bb8 <__clzsi2+0x18>
 8002bb4:	0a00      	lsrs	r0, r0, #8
 8002bb6:	3908      	subs	r1, #8
 8002bb8:	091b      	lsrs	r3, r3, #4
 8002bba:	4298      	cmp	r0, r3
 8002bbc:	d301      	bcc.n	8002bc2 <__clzsi2+0x22>
 8002bbe:	0900      	lsrs	r0, r0, #4
 8002bc0:	3904      	subs	r1, #4
 8002bc2:	a202      	add	r2, pc, #8	; (adr r2, 8002bcc <__clzsi2+0x2c>)
 8002bc4:	5c10      	ldrb	r0, [r2, r0]
 8002bc6:	1840      	adds	r0, r0, r1
 8002bc8:	4770      	bx	lr
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	02020304 	.word	0x02020304
 8002bd0:	01010101 	.word	0x01010101
	...

08002bdc <__eqsf2>:
 8002bdc:	b570      	push	{r4, r5, r6, lr}
 8002bde:	0042      	lsls	r2, r0, #1
 8002be0:	024e      	lsls	r6, r1, #9
 8002be2:	004c      	lsls	r4, r1, #1
 8002be4:	0245      	lsls	r5, r0, #9
 8002be6:	0a6d      	lsrs	r5, r5, #9
 8002be8:	0e12      	lsrs	r2, r2, #24
 8002bea:	0fc3      	lsrs	r3, r0, #31
 8002bec:	0a76      	lsrs	r6, r6, #9
 8002bee:	0e24      	lsrs	r4, r4, #24
 8002bf0:	0fc9      	lsrs	r1, r1, #31
 8002bf2:	2aff      	cmp	r2, #255	; 0xff
 8002bf4:	d00f      	beq.n	8002c16 <__eqsf2+0x3a>
 8002bf6:	2cff      	cmp	r4, #255	; 0xff
 8002bf8:	d011      	beq.n	8002c1e <__eqsf2+0x42>
 8002bfa:	2001      	movs	r0, #1
 8002bfc:	42a2      	cmp	r2, r4
 8002bfe:	d000      	beq.n	8002c02 <__eqsf2+0x26>
 8002c00:	bd70      	pop	{r4, r5, r6, pc}
 8002c02:	42b5      	cmp	r5, r6
 8002c04:	d1fc      	bne.n	8002c00 <__eqsf2+0x24>
 8002c06:	428b      	cmp	r3, r1
 8002c08:	d00d      	beq.n	8002c26 <__eqsf2+0x4a>
 8002c0a:	2a00      	cmp	r2, #0
 8002c0c:	d1f8      	bne.n	8002c00 <__eqsf2+0x24>
 8002c0e:	0028      	movs	r0, r5
 8002c10:	1e45      	subs	r5, r0, #1
 8002c12:	41a8      	sbcs	r0, r5
 8002c14:	e7f4      	b.n	8002c00 <__eqsf2+0x24>
 8002c16:	2001      	movs	r0, #1
 8002c18:	2d00      	cmp	r5, #0
 8002c1a:	d1f1      	bne.n	8002c00 <__eqsf2+0x24>
 8002c1c:	e7eb      	b.n	8002bf6 <__eqsf2+0x1a>
 8002c1e:	2001      	movs	r0, #1
 8002c20:	2e00      	cmp	r6, #0
 8002c22:	d1ed      	bne.n	8002c00 <__eqsf2+0x24>
 8002c24:	e7e9      	b.n	8002bfa <__eqsf2+0x1e>
 8002c26:	2000      	movs	r0, #0
 8002c28:	e7ea      	b.n	8002c00 <__eqsf2+0x24>
 8002c2a:	46c0      	nop			; (mov r8, r8)

08002c2c <__gesf2>:
 8002c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c2e:	0042      	lsls	r2, r0, #1
 8002c30:	0246      	lsls	r6, r0, #9
 8002c32:	024d      	lsls	r5, r1, #9
 8002c34:	004c      	lsls	r4, r1, #1
 8002c36:	0fc3      	lsrs	r3, r0, #31
 8002c38:	0a76      	lsrs	r6, r6, #9
 8002c3a:	0e12      	lsrs	r2, r2, #24
 8002c3c:	0a6d      	lsrs	r5, r5, #9
 8002c3e:	0e24      	lsrs	r4, r4, #24
 8002c40:	0fc8      	lsrs	r0, r1, #31
 8002c42:	2aff      	cmp	r2, #255	; 0xff
 8002c44:	d01f      	beq.n	8002c86 <__gesf2+0x5a>
 8002c46:	2cff      	cmp	r4, #255	; 0xff
 8002c48:	d010      	beq.n	8002c6c <__gesf2+0x40>
 8002c4a:	2a00      	cmp	r2, #0
 8002c4c:	d11f      	bne.n	8002c8e <__gesf2+0x62>
 8002c4e:	4271      	negs	r1, r6
 8002c50:	4171      	adcs	r1, r6
 8002c52:	2c00      	cmp	r4, #0
 8002c54:	d101      	bne.n	8002c5a <__gesf2+0x2e>
 8002c56:	2d00      	cmp	r5, #0
 8002c58:	d01e      	beq.n	8002c98 <__gesf2+0x6c>
 8002c5a:	2900      	cmp	r1, #0
 8002c5c:	d10e      	bne.n	8002c7c <__gesf2+0x50>
 8002c5e:	4283      	cmp	r3, r0
 8002c60:	d01e      	beq.n	8002ca0 <__gesf2+0x74>
 8002c62:	2102      	movs	r1, #2
 8002c64:	1e58      	subs	r0, r3, #1
 8002c66:	4008      	ands	r0, r1
 8002c68:	3801      	subs	r0, #1
 8002c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c6c:	2d00      	cmp	r5, #0
 8002c6e:	d126      	bne.n	8002cbe <__gesf2+0x92>
 8002c70:	2a00      	cmp	r2, #0
 8002c72:	d1f4      	bne.n	8002c5e <__gesf2+0x32>
 8002c74:	4271      	negs	r1, r6
 8002c76:	4171      	adcs	r1, r6
 8002c78:	2900      	cmp	r1, #0
 8002c7a:	d0f0      	beq.n	8002c5e <__gesf2+0x32>
 8002c7c:	2800      	cmp	r0, #0
 8002c7e:	d1f4      	bne.n	8002c6a <__gesf2+0x3e>
 8002c80:	2001      	movs	r0, #1
 8002c82:	4240      	negs	r0, r0
 8002c84:	e7f1      	b.n	8002c6a <__gesf2+0x3e>
 8002c86:	2e00      	cmp	r6, #0
 8002c88:	d119      	bne.n	8002cbe <__gesf2+0x92>
 8002c8a:	2cff      	cmp	r4, #255	; 0xff
 8002c8c:	d0ee      	beq.n	8002c6c <__gesf2+0x40>
 8002c8e:	2c00      	cmp	r4, #0
 8002c90:	d1e5      	bne.n	8002c5e <__gesf2+0x32>
 8002c92:	2d00      	cmp	r5, #0
 8002c94:	d1e3      	bne.n	8002c5e <__gesf2+0x32>
 8002c96:	e7e4      	b.n	8002c62 <__gesf2+0x36>
 8002c98:	2000      	movs	r0, #0
 8002c9a:	2e00      	cmp	r6, #0
 8002c9c:	d0e5      	beq.n	8002c6a <__gesf2+0x3e>
 8002c9e:	e7e0      	b.n	8002c62 <__gesf2+0x36>
 8002ca0:	42a2      	cmp	r2, r4
 8002ca2:	dc05      	bgt.n	8002cb0 <__gesf2+0x84>
 8002ca4:	dbea      	blt.n	8002c7c <__gesf2+0x50>
 8002ca6:	42ae      	cmp	r6, r5
 8002ca8:	d802      	bhi.n	8002cb0 <__gesf2+0x84>
 8002caa:	d3e7      	bcc.n	8002c7c <__gesf2+0x50>
 8002cac:	2000      	movs	r0, #0
 8002cae:	e7dc      	b.n	8002c6a <__gesf2+0x3e>
 8002cb0:	4241      	negs	r1, r0
 8002cb2:	4141      	adcs	r1, r0
 8002cb4:	4248      	negs	r0, r1
 8002cb6:	2102      	movs	r1, #2
 8002cb8:	4008      	ands	r0, r1
 8002cba:	3801      	subs	r0, #1
 8002cbc:	e7d5      	b.n	8002c6a <__gesf2+0x3e>
 8002cbe:	2002      	movs	r0, #2
 8002cc0:	4240      	negs	r0, r0
 8002cc2:	e7d2      	b.n	8002c6a <__gesf2+0x3e>

08002cc4 <__lesf2>:
 8002cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cc6:	0042      	lsls	r2, r0, #1
 8002cc8:	0246      	lsls	r6, r0, #9
 8002cca:	024d      	lsls	r5, r1, #9
 8002ccc:	004c      	lsls	r4, r1, #1
 8002cce:	0fc3      	lsrs	r3, r0, #31
 8002cd0:	0a76      	lsrs	r6, r6, #9
 8002cd2:	0e12      	lsrs	r2, r2, #24
 8002cd4:	0a6d      	lsrs	r5, r5, #9
 8002cd6:	0e24      	lsrs	r4, r4, #24
 8002cd8:	0fc8      	lsrs	r0, r1, #31
 8002cda:	2aff      	cmp	r2, #255	; 0xff
 8002cdc:	d00d      	beq.n	8002cfa <__lesf2+0x36>
 8002cde:	2cff      	cmp	r4, #255	; 0xff
 8002ce0:	d00f      	beq.n	8002d02 <__lesf2+0x3e>
 8002ce2:	2a00      	cmp	r2, #0
 8002ce4:	d123      	bne.n	8002d2e <__lesf2+0x6a>
 8002ce6:	4271      	negs	r1, r6
 8002ce8:	4171      	adcs	r1, r6
 8002cea:	2c00      	cmp	r4, #0
 8002cec:	d10f      	bne.n	8002d0e <__lesf2+0x4a>
 8002cee:	2d00      	cmp	r5, #0
 8002cf0:	d10d      	bne.n	8002d0e <__lesf2+0x4a>
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	2e00      	cmp	r6, #0
 8002cf6:	d014      	beq.n	8002d22 <__lesf2+0x5e>
 8002cf8:	e00d      	b.n	8002d16 <__lesf2+0x52>
 8002cfa:	2e00      	cmp	r6, #0
 8002cfc:	d110      	bne.n	8002d20 <__lesf2+0x5c>
 8002cfe:	2cff      	cmp	r4, #255	; 0xff
 8002d00:	d115      	bne.n	8002d2e <__lesf2+0x6a>
 8002d02:	2d00      	cmp	r5, #0
 8002d04:	d10c      	bne.n	8002d20 <__lesf2+0x5c>
 8002d06:	2a00      	cmp	r2, #0
 8002d08:	d103      	bne.n	8002d12 <__lesf2+0x4e>
 8002d0a:	4271      	negs	r1, r6
 8002d0c:	4171      	adcs	r1, r6
 8002d0e:	2900      	cmp	r1, #0
 8002d10:	d108      	bne.n	8002d24 <__lesf2+0x60>
 8002d12:	4283      	cmp	r3, r0
 8002d14:	d010      	beq.n	8002d38 <__lesf2+0x74>
 8002d16:	2102      	movs	r1, #2
 8002d18:	1e58      	subs	r0, r3, #1
 8002d1a:	4008      	ands	r0, r1
 8002d1c:	3801      	subs	r0, #1
 8002d1e:	e000      	b.n	8002d22 <__lesf2+0x5e>
 8002d20:	2002      	movs	r0, #2
 8002d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d24:	2800      	cmp	r0, #0
 8002d26:	d1fc      	bne.n	8002d22 <__lesf2+0x5e>
 8002d28:	2001      	movs	r0, #1
 8002d2a:	4240      	negs	r0, r0
 8002d2c:	e7f9      	b.n	8002d22 <__lesf2+0x5e>
 8002d2e:	2c00      	cmp	r4, #0
 8002d30:	d1ef      	bne.n	8002d12 <__lesf2+0x4e>
 8002d32:	2d00      	cmp	r5, #0
 8002d34:	d1ed      	bne.n	8002d12 <__lesf2+0x4e>
 8002d36:	e7ee      	b.n	8002d16 <__lesf2+0x52>
 8002d38:	42a2      	cmp	r2, r4
 8002d3a:	dc05      	bgt.n	8002d48 <__lesf2+0x84>
 8002d3c:	dbf2      	blt.n	8002d24 <__lesf2+0x60>
 8002d3e:	42ae      	cmp	r6, r5
 8002d40:	d802      	bhi.n	8002d48 <__lesf2+0x84>
 8002d42:	d3ef      	bcc.n	8002d24 <__lesf2+0x60>
 8002d44:	2000      	movs	r0, #0
 8002d46:	e7ec      	b.n	8002d22 <__lesf2+0x5e>
 8002d48:	4241      	negs	r1, r0
 8002d4a:	4141      	adcs	r1, r0
 8002d4c:	4248      	negs	r0, r1
 8002d4e:	2102      	movs	r1, #2
 8002d50:	4008      	ands	r0, r1
 8002d52:	3801      	subs	r0, #1
 8002d54:	e7e5      	b.n	8002d22 <__lesf2+0x5e>
 8002d56:	46c0      	nop			; (mov r8, r8)

08002d58 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002d58:	b510      	push	{r4, lr}
 8002d5a:	b084      	sub	sp, #16

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002d5c:	220c      	movs	r2, #12
 8002d5e:	2100      	movs	r1, #0
 8002d60:	a801      	add	r0, sp, #4
 8002d62:	f007 ffd0 	bl	800ad06 <memset>
  hadc.Instance = ADC1;
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d66:	2104      	movs	r1, #4
  hadc.Instance = ADC1;
 8002d68:	4c2d      	ldr	r4, [pc, #180]	; (8002e20 <MX_ADC_Init+0xc8>)
 8002d6a:	4b2e      	ldr	r3, [pc, #184]	; (8002e24 <MX_ADC_Init+0xcc>)
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d6c:	6161      	str	r1, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002d6e:	2180      	movs	r1, #128	; 0x80
  hadc.Instance = ADC1;
 8002d70:	6023      	str	r3, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002d72:	2380      	movs	r3, #128	; 0x80
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002d74:	0249      	lsls	r1, r1, #9
 8002d76:	61a1      	str	r1, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  hadc.Init.ContinuousConvMode = ENABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d78:	21c2      	movs	r1, #194	; 0xc2
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002d7a:	061b      	lsls	r3, r3, #24
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002d7c:	2201      	movs	r2, #1
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002d7e:	6063      	str	r3, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002d80:	2300      	movs	r3, #0
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d82:	31ff      	adds	r1, #255	; 0xff
 8002d84:	61e1      	str	r1, [r4, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.DMAContinuousRequests = ENABLE;
 8002d86:	399e      	subs	r1, #158	; 0x9e
 8002d88:	39ff      	subs	r1, #255	; 0xff
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002d8a:	0020      	movs	r0, r4
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002d8c:	60a3      	str	r3, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d8e:	60e3      	str	r3, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002d90:	6122      	str	r2, [r4, #16]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d92:	6223      	str	r3, [r4, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8002d94:	5462      	strb	r2, [r4, r1]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002d96:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002d98:	f005 fa20 	bl	80081dc <HAL_ADC_Init>
 8002d9c:	2800      	cmp	r0, #0
 8002d9e:	d12d      	bne.n	8002dfc <MX_ADC_Init+0xa4>
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002da0:	2280      	movs	r2, #128	; 0x80
  sConfig.Channel = ADC_CHANNEL_3;
 8002da2:	2303      	movs	r3, #3
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002da4:	0152      	lsls	r2, r2, #5
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002da6:	0020      	movs	r0, r4
 8002da8:	a901      	add	r1, sp, #4
  sConfig.Channel = ADC_CHANNEL_3;
 8002daa:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002dac:	9202      	str	r2, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8002dae:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002db0:	f005 fb5c 	bl	800846c <HAL_ADC_ConfigChannel>
 8002db4:	2800      	cmp	r0, #0
 8002db6:	d130      	bne.n	8002e1a <MX_ADC_Init+0xc2>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002db8:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002dba:	0020      	movs	r0, r4
 8002dbc:	a901      	add	r1, sp, #4
  sConfig.Channel = ADC_CHANNEL_4;
 8002dbe:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002dc0:	f005 fb54 	bl	800846c <HAL_ADC_ConfigChannel>
 8002dc4:	2800      	cmp	r0, #0
 8002dc6:	d125      	bne.n	8002e14 <MX_ADC_Init+0xbc>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002dc8:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002dca:	0020      	movs	r0, r4
 8002dcc:	a901      	add	r1, sp, #4
  sConfig.Channel = ADC_CHANNEL_5;
 8002dce:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002dd0:	f005 fb4c 	bl	800846c <HAL_ADC_ConfigChannel>
 8002dd4:	2800      	cmp	r0, #0
 8002dd6:	d11a      	bne.n	8002e0e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002dd8:	2308      	movs	r3, #8
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002dda:	0020      	movs	r0, r4
 8002ddc:	a901      	add	r1, sp, #4
  sConfig.Channel = ADC_CHANNEL_8;
 8002dde:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002de0:	f005 fb44 	bl	800846c <HAL_ADC_ConfigChannel>
 8002de4:	2800      	cmp	r0, #0
 8002de6:	d10f      	bne.n	8002e08 <MX_ADC_Init+0xb0>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002de8:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002dea:	0020      	movs	r0, r4
 8002dec:	a901      	add	r1, sp, #4
  sConfig.Channel = ADC_CHANNEL_9;
 8002dee:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002df0:	f005 fb3c 	bl	800846c <HAL_ADC_ConfigChannel>
 8002df4:	2800      	cmp	r0, #0
 8002df6:	d104      	bne.n	8002e02 <MX_ADC_Init+0xaa>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002df8:	b004      	add	sp, #16
 8002dfa:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002dfc:	f000 f9dc 	bl	80031b8 <Error_Handler>
 8002e00:	e7ce      	b.n	8002da0 <MX_ADC_Init+0x48>
    Error_Handler();
 8002e02:	f000 f9d9 	bl	80031b8 <Error_Handler>
}
 8002e06:	e7f7      	b.n	8002df8 <MX_ADC_Init+0xa0>
    Error_Handler();
 8002e08:	f000 f9d6 	bl	80031b8 <Error_Handler>
 8002e0c:	e7ec      	b.n	8002de8 <MX_ADC_Init+0x90>
    Error_Handler();
 8002e0e:	f000 f9d3 	bl	80031b8 <Error_Handler>
 8002e12:	e7e1      	b.n	8002dd8 <MX_ADC_Init+0x80>
    Error_Handler();
 8002e14:	f000 f9d0 	bl	80031b8 <Error_Handler>
 8002e18:	e7d6      	b.n	8002dc8 <MX_ADC_Init+0x70>
    Error_Handler();
 8002e1a:	f000 f9cd 	bl	80031b8 <Error_Handler>
 8002e1e:	e7cb      	b.n	8002db8 <MX_ADC_Init+0x60>
 8002e20:	20000b30 	.word	0x20000b30
 8002e24:	40012400 	.word	0x40012400

08002e28 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002e28:	b570      	push	{r4, r5, r6, lr}
 8002e2a:	0004      	movs	r4, r0
 8002e2c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e2e:	2214      	movs	r2, #20
 8002e30:	2100      	movs	r1, #0
 8002e32:	a803      	add	r0, sp, #12
 8002e34:	f007 ff67 	bl	800ad06 <memset>
  if(adcHandle->Instance==ADC1)
 8002e38:	4b26      	ldr	r3, [pc, #152]	; (8002ed4 <HAL_ADC_MspInit+0xac>)
 8002e3a:	6822      	ldr	r2, [r4, #0]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d001      	beq.n	8002e44 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002e40:	b008      	add	sp, #32
 8002e42:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e44:	2080      	movs	r0, #128	; 0x80
 8002e46:	4b24      	ldr	r3, [pc, #144]	; (8002ed8 <HAL_ADC_MspInit+0xb0>)
 8002e48:	0080      	lsls	r0, r0, #2
 8002e4a:	6999      	ldr	r1, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4c:	2600      	movs	r6, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e4e:	4301      	orrs	r1, r0
 8002e50:	6199      	str	r1, [r3, #24]
 8002e52:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e54:	2503      	movs	r5, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e56:	4002      	ands	r2, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e58:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e5a:	9200      	str	r2, [sp, #0]
 8002e5c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5e:	6959      	ldr	r1, [r3, #20]
 8002e60:	0280      	lsls	r0, r0, #10
 8002e62:	4301      	orrs	r1, r0
 8002e64:	6159      	str	r1, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e66:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e68:	695a      	ldr	r2, [r3, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e6a:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6c:	4002      	ands	r2, r0
 8002e6e:	9201      	str	r2, [sp, #4]
 8002e70:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e72:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e74:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e76:	430a      	orrs	r2, r1
 8002e78:	615a      	str	r2, [r3, #20]
 8002e7a:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e7c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e7e:	400b      	ands	r3, r1
 8002e80:	9302      	str	r3, [sp, #8]
 8002e82:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002e84:	2338      	movs	r3, #56	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e86:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002e88:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e8a:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8c:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e8e:	f005 fd25 	bl	80088dc <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e92:	4812      	ldr	r0, [pc, #72]	; (8002edc <HAL_ADC_MspInit+0xb4>)
 8002e94:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e96:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e98:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9a:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e9c:	f005 fd1e 	bl	80088dc <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 8002ea0:	4d0f      	ldr	r5, [pc, #60]	; (8002ee0 <HAL_ADC_MspInit+0xb8>)
 8002ea2:	4b10      	ldr	r3, [pc, #64]	; (8002ee4 <HAL_ADC_MspInit+0xbc>)
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002ea4:	0028      	movs	r0, r5
    hdma_adc.Instance = DMA1_Channel1;
 8002ea6:	602b      	str	r3, [r5, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002ea8:	2380      	movs	r3, #128	; 0x80
 8002eaa:	60eb      	str	r3, [r5, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002eac:	3380      	adds	r3, #128	; 0x80
 8002eae:	612b      	str	r3, [r5, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002eb0:	2380      	movs	r3, #128	; 0x80
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	616b      	str	r3, [r5, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002eb6:	2320      	movs	r3, #32
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002eb8:	606e      	str	r6, [r5, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eba:	60ae      	str	r6, [r5, #8]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002ebc:	61ab      	str	r3, [r5, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002ebe:	61ee      	str	r6, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002ec0:	f005 fc06 	bl	80086d0 <HAL_DMA_Init>
 8002ec4:	2800      	cmp	r0, #0
 8002ec6:	d102      	bne.n	8002ece <HAL_ADC_MspInit+0xa6>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8002ec8:	6325      	str	r5, [r4, #48]	; 0x30
 8002eca:	626c      	str	r4, [r5, #36]	; 0x24
}
 8002ecc:	e7b8      	b.n	8002e40 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8002ece:	f000 f973 	bl	80031b8 <Error_Handler>
 8002ed2:	e7f9      	b.n	8002ec8 <HAL_ADC_MspInit+0xa0>
 8002ed4:	40012400 	.word	0x40012400
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	48000400 	.word	0x48000400
 8002ee0:	20000aec 	.word	0x20000aec
 8002ee4:	40020008 	.word	0x40020008

08002ee8 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ee8:	2301      	movs	r3, #1
 8002eea:	4a0a      	ldr	r2, [pc, #40]	; (8002f14 <MX_DMA_Init+0x2c>)
{
 8002eec:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002eee:	6951      	ldr	r1, [r2, #20]
{
 8002ef0:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ef2:	4319      	orrs	r1, r3
 8002ef4:	6151      	str	r1, [r2, #20]
 8002ef6:	6952      	ldr	r2, [r2, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002ef8:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002efa:	4013      	ands	r3, r2
 8002efc:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002efe:	2200      	movs	r2, #0
 8002f00:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f02:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002f04:	f005 fb8c 	bl	8008620 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002f08:	2009      	movs	r0, #9
 8002f0a:	f005 fbbb 	bl	8008684 <HAL_NVIC_EnableIRQ>

}
 8002f0e:	b003      	add	sp, #12
 8002f10:	bd00      	pop	{pc}
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	40021000 	.word	0x40021000

08002f18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f1a:	46c6      	mov	lr, r8
 8002f1c:	b500      	push	{lr}
 8002f1e:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f20:	2214      	movs	r2, #20
 8002f22:	2100      	movs	r1, #0
 8002f24:	a805      	add	r0, sp, #20
 8002f26:	f007 feee 	bl	800ad06 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f2a:	2080      	movs	r0, #128	; 0x80
 8002f2c:	4b37      	ldr	r3, [pc, #220]	; (800300c <MX_GPIO_Init+0xf4>)
 8002f2e:	0300      	lsls	r0, r0, #12
 8002f30:	6959      	ldr	r1, [r3, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, O_BLED_Pin|O_GLED_Pin|O_RLED_Pin|MC2_MCU_Pin
 8002f32:	2590      	movs	r5, #144	; 0x90
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f34:	4301      	orrs	r1, r0
 8002f36:	6159      	str	r1, [r3, #20]
 8002f38:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, O_BLED_Pin|O_GLED_Pin|O_RLED_Pin|MC2_MCU_Pin
 8002f3a:	4f35      	ldr	r7, [pc, #212]	; (8003010 <MX_GPIO_Init+0xf8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f3c:	4002      	ands	r2, r0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f3e:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f40:	9201      	str	r2, [sp, #4]
 8002f42:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f44:	6959      	ldr	r1, [r3, #20]
 8002f46:	03c0      	lsls	r0, r0, #15
 8002f48:	4301      	orrs	r1, r0
 8002f4a:	6159      	str	r1, [r3, #20]
 8002f4c:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, O_BLED_Pin|O_GLED_Pin|O_RLED_Pin|MC2_MCU_Pin
 8002f4e:	05ed      	lsls	r5, r5, #23
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f50:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f52:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f54:	9202      	str	r2, [sp, #8]
 8002f56:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f58:	6959      	ldr	r1, [r3, #20]
 8002f5a:	0280      	lsls	r0, r0, #10
 8002f5c:	4301      	orrs	r1, r0
 8002f5e:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f60:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f62:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f64:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f66:	4002      	ands	r2, r0
 8002f68:	9203      	str	r2, [sp, #12]
 8002f6a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f6c:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, O_BLED_Pin|O_GLED_Pin|O_RLED_Pin|MC2_MCU_Pin
 8002f6e:	0028      	movs	r0, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f70:	430a      	orrs	r2, r1
 8002f72:	615a      	str	r2, [r3, #20]
 8002f74:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, O_BLED_Pin|O_GLED_Pin|O_RLED_Pin|MC2_MCU_Pin
 8002f76:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f78:	400b      	ands	r3, r1
 8002f7a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, O_BLED_Pin|O_GLED_Pin|O_RLED_Pin|MC2_MCU_Pin
 8002f7c:	0039      	movs	r1, r7
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f7e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, O_BLED_Pin|O_GLED_Pin|O_RLED_Pin|MC2_MCU_Pin
 8002f80:	f005 fda6 	bl	8008ad0 <HAL_GPIO_WritePin>
                          |MC1_MCU_Pin|STE_LED2_Pin|STE_LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CP_RY_MCU_Pin|EEPROM_nWP_Pin, GPIO_PIN_RESET);
 8002f84:	2382      	movs	r3, #130	; 0x82
 8002f86:	4e23      	ldr	r6, [pc, #140]	; (8003014 <MX_GPIO_Init+0xfc>)
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	0019      	movs	r1, r3
 8002f8e:	0030      	movs	r0, r6
 8002f90:	4698      	mov	r8, r3
 8002f92:	f005 fd9d 	bl	8008ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I_WD1_Pin;
 8002f96:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f98:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = I_WD1_Pin;
 8002f9a:	01db      	lsls	r3, r3, #7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(I_WD1_GPIO_Port, &GPIO_InitStruct);
 8002f9c:	a905      	add	r1, sp, #20
 8002f9e:	481e      	ldr	r0, [pc, #120]	; (8003018 <MX_GPIO_Init+0x100>)
  GPIO_InitStruct.Pin = I_WD1_Pin;
 8002fa0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fa2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(I_WD1_GPIO_Port, &GPIO_InitStruct);
 8002fa6:	f005 fc99 	bl	80088dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = O_BLED_Pin|O_GLED_Pin|O_RLED_Pin|MC2_MCU_Pin
 8002faa:	9705      	str	r7, [sp, #20]
                          |MC1_MCU_Pin|STE_LED2_Pin|STE_LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fac:	2701      	movs	r7, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fae:	0028      	movs	r0, r5
 8002fb0:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fb2:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb8:	f005 fc90 	bl	80088dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CP_RY_MCU_Pin|EEPROM_nWP_Pin;
 8002fbc:	4643      	mov	r3, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fbe:	0030      	movs	r0, r6
 8002fc0:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = CP_RY_MCU_Pin|EEPROM_nWP_Pin;
 8002fc2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fc4:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fca:	f005 fc87 	bl	80088dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DIPSW4_Pin|DIPSW3_Pin|DIPSW2_Pin|DIPSW1_Pin;
 8002fce:	23f0      	movs	r3, #240	; 0xf0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd0:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = DIPSW4_Pin|DIPSW3_Pin|DIPSW2_Pin|DIPSW1_Pin;
 8002fd2:	021b      	lsls	r3, r3, #8
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = DIPSW4_Pin|DIPSW3_Pin|DIPSW2_Pin|DIPSW1_Pin;
 8002fd6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fd8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fda:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fdc:	f005 fc7e 	bl	80088dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I_TEST_Pin;
 8002fe0:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(I_TEST_GPIO_Port, &GPIO_InitStruct);
 8002fe2:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = I_TEST_Pin;
 8002fe4:	019b      	lsls	r3, r3, #6
  HAL_GPIO_Init(I_TEST_GPIO_Port, &GPIO_InitStruct);
 8002fe6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = I_TEST_Pin;
 8002fe8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fea:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fec:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(I_TEST_GPIO_Port, &GPIO_InitStruct);
 8002fee:	f005 fc75 	bl	80088dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I_EMG_Pin;
 8002ff2:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(I_EMG_GPIO_Port, &GPIO_InitStruct);
 8002ff4:	4809      	ldr	r0, [pc, #36]	; (800301c <MX_GPIO_Init+0x104>)
 8002ff6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = I_EMG_Pin;
 8002ff8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ffa:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffc:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(I_EMG_GPIO_Port, &GPIO_InitStruct);
 8002ffe:	f005 fc6d 	bl	80088dc <HAL_GPIO_Init>

}
 8003002:	b00a      	add	sp, #40	; 0x28
 8003004:	bc80      	pop	{r7}
 8003006:	46b8      	mov	r8, r7
 8003008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	40021000 	.word	0x40021000
 8003010:	000018c7 	.word	0x000018c7
 8003014:	48000400 	.word	0x48000400
 8003018:	48000800 	.word	0x48000800
 800301c:	48001400 	.word	0x48001400

08003020 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003020:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003022:	4b19      	ldr	r3, [pc, #100]	; (8003088 <MX_I2C1_Init+0x68>)
 8003024:	4c19      	ldr	r4, [pc, #100]	; (800308c <MX_I2C1_Init+0x6c>)
  hi2c1.Init.Timing = 0x2000090E;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003026:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 8003028:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800302a:	4b19      	ldr	r3, [pc, #100]	; (8003090 <MX_I2C1_Init+0x70>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800302c:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x2000090E;
 800302e:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003030:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003032:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.OwnAddress1 = 0;
 8003034:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003036:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003038:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800303a:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800303c:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800303e:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003040:	f005 fe98 	bl	8008d74 <HAL_I2C_Init>
 8003044:	2800      	cmp	r0, #0
 8003046:	d10c      	bne.n	8003062 <MX_I2C1_Init+0x42>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003048:	2100      	movs	r1, #0
 800304a:	0020      	movs	r0, r4
 800304c:	f006 f8b0 	bl	80091b0 <HAL_I2CEx_ConfigAnalogFilter>
 8003050:	2800      	cmp	r0, #0
 8003052:	d10e      	bne.n	8003072 <MX_I2C1_Init+0x52>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003054:	2100      	movs	r1, #0
 8003056:	0020      	movs	r0, r4
 8003058:	f006 f8d2 	bl	8009200 <HAL_I2CEx_ConfigDigitalFilter>
 800305c:	2800      	cmp	r0, #0
 800305e:	d110      	bne.n	8003082 <MX_I2C1_Init+0x62>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003060:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003062:	f000 f8a9 	bl	80031b8 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003066:	2100      	movs	r1, #0
 8003068:	0020      	movs	r0, r4
 800306a:	f006 f8a1 	bl	80091b0 <HAL_I2CEx_ConfigAnalogFilter>
 800306e:	2800      	cmp	r0, #0
 8003070:	d0f0      	beq.n	8003054 <MX_I2C1_Init+0x34>
    Error_Handler();
 8003072:	f000 f8a1 	bl	80031b8 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003076:	2100      	movs	r1, #0
 8003078:	0020      	movs	r0, r4
 800307a:	f006 f8c1 	bl	8009200 <HAL_I2CEx_ConfigDigitalFilter>
 800307e:	2800      	cmp	r0, #0
 8003080:	d0ee      	beq.n	8003060 <MX_I2C1_Init+0x40>
    Error_Handler();
 8003082:	f000 f899 	bl	80031b8 <Error_Handler>
}
 8003086:	e7eb      	b.n	8003060 <MX_I2C1_Init+0x40>
 8003088:	40005400 	.word	0x40005400
 800308c:	20000b70 	.word	0x20000b70
 8003090:	2000090e 	.word	0x2000090e

08003094 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003094:	b510      	push	{r4, lr}
 8003096:	0004      	movs	r4, r0
 8003098:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800309a:	2214      	movs	r2, #20
 800309c:	2100      	movs	r1, #0
 800309e:	a803      	add	r0, sp, #12
 80030a0:	f007 fe31 	bl	800ad06 <memset>
  if(i2cHandle->Instance==I2C1)
 80030a4:	4b13      	ldr	r3, [pc, #76]	; (80030f4 <HAL_I2C_MspInit+0x60>)
 80030a6:	6822      	ldr	r2, [r4, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d001      	beq.n	80030b0 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80030ac:	b008      	add	sp, #32
 80030ae:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b0:	2180      	movs	r1, #128	; 0x80
 80030b2:	4c11      	ldr	r4, [pc, #68]	; (80030f8 <HAL_I2C_MspInit+0x64>)
 80030b4:	02c9      	lsls	r1, r1, #11
 80030b6:	6962      	ldr	r2, [r4, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b8:	4810      	ldr	r0, [pc, #64]	; (80030fc <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ba:	430a      	orrs	r2, r1
 80030bc:	6162      	str	r2, [r4, #20]
 80030be:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030c0:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030c2:	400b      	ands	r3, r1
 80030c4:	9301      	str	r3, [sp, #4]
 80030c6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030c8:	23c0      	movs	r3, #192	; 0xc0
 80030ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030cc:	3bae      	subs	r3, #174	; 0xae
 80030ce:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030d2:	3b11      	subs	r3, #17
 80030d4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030d6:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80030d8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030da:	f005 fbff 	bl	80088dc <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80030de:	2180      	movs	r1, #128	; 0x80
 80030e0:	69e2      	ldr	r2, [r4, #28]
 80030e2:	0389      	lsls	r1, r1, #14
 80030e4:	430a      	orrs	r2, r1
 80030e6:	61e2      	str	r2, [r4, #28]
 80030e8:	69e3      	ldr	r3, [r4, #28]
 80030ea:	400b      	ands	r3, r1
 80030ec:	9302      	str	r3, [sp, #8]
 80030ee:	9b02      	ldr	r3, [sp, #8]
}
 80030f0:	e7dc      	b.n	80030ac <HAL_I2C_MspInit+0x18>
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	40005400 	.word	0x40005400
 80030f8:	40021000 	.word	0x40021000
 80030fc:	48000400 	.word	0x48000400

08003100 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003100:	b510      	push	{r4, lr}
 8003102:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003104:	2218      	movs	r2, #24
 8003106:	2100      	movs	r1, #0
 8003108:	a80a      	add	r0, sp, #40	; 0x28
 800310a:	f007 fdfc 	bl	800ad06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800310e:	2210      	movs	r2, #16
 8003110:	2100      	movs	r1, #0
 8003112:	4668      	mov	r0, sp
 8003114:	f007 fdf7 	bl	800ad06 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003118:	2210      	movs	r2, #16
 800311a:	2100      	movs	r1, #0
 800311c:	a804      	add	r0, sp, #16
 800311e:	f007 fdf2 	bl	800ad06 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003122:	2303      	movs	r3, #3
 8003124:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003126:	3b02      	subs	r3, #2
 8003128:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800312a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800312c:	330f      	adds	r3, #15
 800312e:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003130:	2380      	movs	r3, #128	; 0x80
 8003132:	025b      	lsls	r3, r3, #9
 8003134:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003136:	2380      	movs	r3, #128	; 0x80
 8003138:	035b      	lsls	r3, r3, #13
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800313a:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800313c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800313e:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003140:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003142:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003144:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003146:	f006 f881 	bl	800924c <HAL_RCC_OscConfig>
 800314a:	2800      	cmp	r0, #0
 800314c:	d001      	beq.n	8003152 <SystemClock_Config+0x52>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800314e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003150:	e7fe      	b.n	8003150 <SystemClock_Config+0x50>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003152:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003154:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003156:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003158:	2101      	movs	r1, #1
 800315a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800315c:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800315e:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003160:	f006 fb06 	bl	8009770 <HAL_RCC_ClockConfig>
 8003164:	2800      	cmp	r0, #0
 8003166:	d001      	beq.n	800316c <SystemClock_Config+0x6c>
 8003168:	b672      	cpsid	i
  while (1)
 800316a:	e7fe      	b.n	800316a <SystemClock_Config+0x6a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800316c:	2321      	movs	r3, #33	; 0x21
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800316e:	9006      	str	r0, [sp, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003170:	9007      	str	r0, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003172:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8003174:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003176:	f006 fb97 	bl	80098a8 <HAL_RCCEx_PeriphCLKConfig>
 800317a:	2800      	cmp	r0, #0
 800317c:	d001      	beq.n	8003182 <SystemClock_Config+0x82>
 800317e:	b672      	cpsid	i
  while (1)
 8003180:	e7fe      	b.n	8003180 <SystemClock_Config+0x80>
}
 8003182:	b014      	add	sp, #80	; 0x50
 8003184:	bd10      	pop	{r4, pc}
 8003186:	46c0      	nop			; (mov r8, r8)

08003188 <main>:
{
 8003188:	b510      	push	{r4, lr}
  HAL_Init();
 800318a:	f004 ff99 	bl	80080c0 <HAL_Init>
  SystemClock_Config();
 800318e:	f7ff ffb7 	bl	8003100 <SystemClock_Config>
  MX_GPIO_Init();
 8003192:	f7ff fec1 	bl	8002f18 <MX_GPIO_Init>
  MX_DMA_Init();
 8003196:	f7ff fea7 	bl	8002ee8 <MX_DMA_Init>
  MX_ADC_Init();
 800319a:	f7ff fddd 	bl	8002d58 <MX_ADC_Init>
  MX_I2C1_Init();
 800319e:	f7ff ff3f 	bl	8003020 <MX_I2C1_Init>
  MX_TIM1_Init();
 80031a2:	f000 f94f 	bl	8003444 <MX_TIM1_Init>
  MX_TIM3_Init();
 80031a6:	f000 f899 	bl	80032dc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80031aa:	f000 f9e5 	bl	8003578 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80031ae:	f000 fa01 	bl	80035b4 <MX_USART2_UART_Init>
	  acevsesystem();
 80031b2:	f002 ffcb 	bl	800614c <acevsesystem>
  while (1)
 80031b6:	e7fc      	b.n	80031b2 <main+0x2a>

080031b8 <Error_Handler>:
 80031b8:	b672      	cpsid	i
  while (1)
 80031ba:	e7fe      	b.n	80031ba <Error_Handler+0x2>

080031bc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031bc:	2201      	movs	r2, #1
 80031be:	4b0a      	ldr	r3, [pc, #40]	; (80031e8 <HAL_MspInit+0x2c>)
{
 80031c0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031c2:	6999      	ldr	r1, [r3, #24]
 80031c4:	4311      	orrs	r1, r2
 80031c6:	6199      	str	r1, [r3, #24]
 80031c8:	6999      	ldr	r1, [r3, #24]
 80031ca:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 80031cc:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ce:	9200      	str	r2, [sp, #0]
 80031d0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031d2:	69da      	ldr	r2, [r3, #28]
 80031d4:	0549      	lsls	r1, r1, #21
 80031d6:	430a      	orrs	r2, r1
 80031d8:	61da      	str	r2, [r3, #28]
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	400b      	ands	r3, r1
 80031de:	9301      	str	r3, [sp, #4]
 80031e0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031e2:	b002      	add	sp, #8
 80031e4:	4770      	bx	lr
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	40021000 	.word	0x40021000

080031ec <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031ec:	e7fe      	b.n	80031ec <NMI_Handler>
 80031ee:	46c0      	nop			; (mov r8, r8)

080031f0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031f0:	e7fe      	b.n	80031f0 <HardFault_Handler>
 80031f2:	46c0      	nop			; (mov r8, r8)

080031f4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80031f4:	4770      	bx	lr
 80031f6:	46c0      	nop			; (mov r8, r8)

080031f8 <PendSV_Handler>:
 80031f8:	4770      	bx	lr
 80031fa:	46c0      	nop			; (mov r8, r8)

080031fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031fc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031fe:	f004 ff6f 	bl	80080e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003202:	bd10      	pop	{r4, pc}

08003204 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003204:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003206:	4802      	ldr	r0, [pc, #8]	; (8003210 <DMA1_Channel1_IRQHandler+0xc>)
 8003208:	f005 fb1a 	bl	8008840 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800320c:	bd10      	pop	{r4, pc}
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	20000aec 	.word	0x20000aec

08003214 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8003214:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003216:	4802      	ldr	r0, [pc, #8]	; (8003220 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 8003218:	f006 fdb2 	bl	8009d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800321c:	bd10      	pop	{r4, pc}
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	20000c04 	.word	0x20000c04

08003224 <TIM1_CC_IRQHandler>:
 8003224:	b510      	push	{r4, lr}
 8003226:	f7ff fff5 	bl	8003214 <TIM1_BRK_UP_TRG_COM_IRQHandler>
 800322a:	bd10      	pop	{r4, pc}

0800322c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800322c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800322e:	4802      	ldr	r0, [pc, #8]	; (8003238 <TIM3_IRQHandler+0xc>)
 8003230:	f006 fda6 	bl	8009d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003234:	bd10      	pop	{r4, pc}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	20000bbc 	.word	0x20000bbc

0800323c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800323c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800323e:	4802      	ldr	r0, [pc, #8]	; (8003248 <USART1_IRQHandler+0xc>)
 8003240:	f007 f862 	bl	800a308 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003244:	bd10      	pop	{r4, pc}
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	20000c4c 	.word	0x20000c4c

0800324c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800324c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800324e:	4802      	ldr	r0, [pc, #8]	; (8003258 <USART2_IRQHandler+0xc>)
 8003250:	f007 f85a 	bl	800a308 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003254:	bd10      	pop	{r4, pc}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	20000cd0 	.word	0x20000cd0

0800325c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800325c:	b570      	push	{r4, r5, r6, lr}
 800325e:	1e16      	subs	r6, r2, #0
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003260:	dd07      	ble.n	8003272 <_read+0x16>
 8003262:	000c      	movs	r4, r1
 8003264:	188d      	adds	r5, r1, r2
	{
		*ptr++ = __io_getchar();
 8003266:	e000      	b.n	800326a <_read+0xe>
 8003268:	bf00      	nop
 800326a:	7020      	strb	r0, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800326c:	3401      	adds	r4, #1
 800326e:	42ac      	cmp	r4, r5
 8003270:	d1f9      	bne.n	8003266 <_read+0xa>
	}

return len;
}
 8003272:	0030      	movs	r0, r6
 8003274:	bd70      	pop	{r4, r5, r6, pc}
 8003276:	46c0      	nop			; (mov r8, r8)

08003278 <_close>:
	return len;
}

int _close(int file)
{
	return -1;
 8003278:	2001      	movs	r0, #1
}
 800327a:	4240      	negs	r0, r0
 800327c:	4770      	bx	lr
 800327e:	46c0      	nop			; (mov r8, r8)

08003280 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003280:	2380      	movs	r3, #128	; 0x80
 8003282:	019b      	lsls	r3, r3, #6
	return 0;
}
 8003284:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8003286:	604b      	str	r3, [r1, #4]
}
 8003288:	4770      	bx	lr
 800328a:	46c0      	nop			; (mov r8, r8)

0800328c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800328c:	2001      	movs	r0, #1
 800328e:	4770      	bx	lr

08003290 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003290:	2000      	movs	r0, #0
 8003292:	4770      	bx	lr

08003294 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003294:	490c      	ldr	r1, [pc, #48]	; (80032c8 <_sbrk+0x34>)
 8003296:	4a0d      	ldr	r2, [pc, #52]	; (80032cc <_sbrk+0x38>)
{
 8003298:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800329a:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800329c:	490c      	ldr	r1, [pc, #48]	; (80032d0 <_sbrk+0x3c>)
{
 800329e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80032a0:	6808      	ldr	r0, [r1, #0]
 80032a2:	2800      	cmp	r0, #0
 80032a4:	d004      	beq.n	80032b0 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032a6:	18c3      	adds	r3, r0, r3
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d806      	bhi.n	80032ba <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80032ac:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 80032ae:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80032b0:	4808      	ldr	r0, [pc, #32]	; (80032d4 <_sbrk+0x40>)
  if (__sbrk_heap_end + incr > max_heap)
 80032b2:	18c3      	adds	r3, r0, r3
    __sbrk_heap_end = &_end;
 80032b4:	6008      	str	r0, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d9f8      	bls.n	80032ac <_sbrk+0x18>
    errno = ENOMEM;
 80032ba:	f007 fcf1 	bl	800aca0 <__errno>
 80032be:	230c      	movs	r3, #12
 80032c0:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80032c2:	2001      	movs	r0, #1
 80032c4:	4240      	negs	r0, r0
 80032c6:	e7f2      	b.n	80032ae <_sbrk+0x1a>
 80032c8:	00000400 	.word	0x00000400
 80032cc:	20002000 	.word	0x20002000
 80032d0:	200000fc 	.word	0x200000fc
 80032d4:	20000d68 	.word	0x20000d68

080032d8 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80032d8:	4770      	bx	lr
 80032da:	46c0      	nop			; (mov r8, r8)

080032dc <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80032dc:	b510      	push	{r4, lr}
 80032de:	b08a      	sub	sp, #40	; 0x28

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032e0:	2208      	movs	r2, #8
 80032e2:	2100      	movs	r1, #0
 80032e4:	a801      	add	r0, sp, #4
 80032e6:	f007 fd0e 	bl	800ad06 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032ea:	221c      	movs	r2, #28
 80032ec:	2100      	movs	r1, #0
 80032ee:	a803      	add	r0, sp, #12
 80032f0:	f007 fd09 	bl	800ad06 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80032f4:	4c17      	ldr	r4, [pc, #92]	; (8003354 <MX_TIM3_Init+0x78>)
 80032f6:	4b18      	ldr	r3, [pc, #96]	; (8003358 <MX_TIM3_Init+0x7c>)
  htim3.Init.Prescaler = 1;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 2399;
 80032f8:	4a18      	ldr	r2, [pc, #96]	; (800335c <MX_TIM3_Init+0x80>)
  htim3.Instance = TIM3;
 80032fa:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 1;
 80032fc:	2301      	movs	r3, #1
 80032fe:	6063      	str	r3, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003300:	2300      	movs	r3, #0
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8003302:	0020      	movs	r0, r4
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003304:	60a3      	str	r3, [r4, #8]
  htim3.Init.Period = 2399;
 8003306:	60e2      	str	r2, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003308:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800330a:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800330c:	f006 fe2e 	bl	8009f6c <HAL_TIM_OC_Init>
 8003310:	2800      	cmp	r0, #0
 8003312:	d116      	bne.n	8003342 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003314:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003316:	0020      	movs	r0, r4
 8003318:	a901      	add	r1, sp, #4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800331a:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800331c:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800331e:	f006 ff51 	bl	800a1c4 <HAL_TIMEx_MasterConfigSynchronization>
 8003322:	2800      	cmp	r0, #0
 8003324:	d113      	bne.n	800334e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003326:	2300      	movs	r3, #0
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003328:	2200      	movs	r2, #0
 800332a:	0020      	movs	r0, r4
 800332c:	a903      	add	r1, sp, #12
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800332e:	9303      	str	r3, [sp, #12]
  sConfigOC.Pulse = 0;
 8003330:	9304      	str	r3, [sp, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003332:	9305      	str	r3, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003334:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003336:	f006 feb1 	bl	800a09c <HAL_TIM_OC_ConfigChannel>
 800333a:	2800      	cmp	r0, #0
 800333c:	d104      	bne.n	8003348 <MX_TIM3_Init+0x6c>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800333e:	b00a      	add	sp, #40	; 0x28
 8003340:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003342:	f7ff ff39 	bl	80031b8 <Error_Handler>
 8003346:	e7e5      	b.n	8003314 <MX_TIM3_Init+0x38>
    Error_Handler();
 8003348:	f7ff ff36 	bl	80031b8 <Error_Handler>
}
 800334c:	e7f7      	b.n	800333e <MX_TIM3_Init+0x62>
    Error_Handler();
 800334e:	f7ff ff33 	bl	80031b8 <Error_Handler>
 8003352:	e7e8      	b.n	8003326 <MX_TIM3_Init+0x4a>
 8003354:	20000bbc 	.word	0x20000bbc
 8003358:	40000400 	.word	0x40000400
 800335c:	0000095f 	.word	0x0000095f

08003360 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003360:	b500      	push	{lr}

  if(tim_pwmHandle->Instance==TIM1)
 8003362:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <HAL_TIM_PWM_MspInit+0x48>)
 8003364:	6802      	ldr	r2, [r0, #0]
{
 8003366:	b083      	sub	sp, #12
  if(tim_pwmHandle->Instance==TIM1)
 8003368:	429a      	cmp	r2, r3
 800336a:	d001      	beq.n	8003370 <HAL_TIM_PWM_MspInit+0x10>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800336c:	b003      	add	sp, #12
 800336e:	bd00      	pop	{pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003370:	2080      	movs	r0, #128	; 0x80
 8003372:	4a0e      	ldr	r2, [pc, #56]	; (80033ac <HAL_TIM_PWM_MspInit+0x4c>)
 8003374:	0100      	lsls	r0, r0, #4
 8003376:	6991      	ldr	r1, [r2, #24]
 8003378:	4301      	orrs	r1, r0
 800337a:	6191      	str	r1, [r2, #24]
 800337c:	6993      	ldr	r3, [r2, #24]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800337e:	2100      	movs	r1, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003380:	4003      	ands	r3, r0
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8003382:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003384:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8003386:	200d      	movs	r0, #13
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003388:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800338a:	f005 f949 	bl	8008620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800338e:	200d      	movs	r0, #13
 8003390:	f005 f978 	bl	8008684 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003394:	2200      	movs	r2, #0
 8003396:	2100      	movs	r1, #0
 8003398:	200e      	movs	r0, #14
 800339a:	f005 f941 	bl	8008620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800339e:	200e      	movs	r0, #14
 80033a0:	f005 f970 	bl	8008684 <HAL_NVIC_EnableIRQ>
}
 80033a4:	e7e2      	b.n	800336c <HAL_TIM_PWM_MspInit+0xc>
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	40012c00 	.word	0x40012c00
 80033ac:	40021000 	.word	0x40021000

080033b0 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 80033b0:	b500      	push	{lr}

  if(tim_ocHandle->Instance==TIM3)
 80033b2:	4b0c      	ldr	r3, [pc, #48]	; (80033e4 <HAL_TIM_OC_MspInit+0x34>)
 80033b4:	6802      	ldr	r2, [r0, #0]
{
 80033b6:	b083      	sub	sp, #12
  if(tim_ocHandle->Instance==TIM3)
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d001      	beq.n	80033c0 <HAL_TIM_OC_MspInit+0x10>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80033bc:	b003      	add	sp, #12
 80033be:	bd00      	pop	{pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033c0:	2302      	movs	r3, #2
 80033c2:	4a09      	ldr	r2, [pc, #36]	; (80033e8 <HAL_TIM_OC_MspInit+0x38>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80033c4:	2010      	movs	r0, #16
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033c6:	69d1      	ldr	r1, [r2, #28]
 80033c8:	4319      	orrs	r1, r3
 80033ca:	61d1      	str	r1, [r2, #28]
 80033cc:	69d2      	ldr	r2, [r2, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80033ce:	2100      	movs	r1, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033d0:	4013      	ands	r3, r2
 80033d2:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80033d4:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033d6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80033d8:	f005 f922 	bl	8008620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80033dc:	2010      	movs	r0, #16
 80033de:	f005 f951 	bl	8008684 <HAL_NVIC_EnableIRQ>
}
 80033e2:	e7eb      	b.n	80033bc <HAL_TIM_OC_MspInit+0xc>
 80033e4:	40000400 	.word	0x40000400
 80033e8:	40021000 	.word	0x40021000

080033ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80033ec:	b510      	push	{r4, lr}
 80033ee:	0004      	movs	r4, r0
 80033f0:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f2:	2214      	movs	r2, #20
 80033f4:	2100      	movs	r1, #0
 80033f6:	a801      	add	r0, sp, #4
 80033f8:	f007 fc85 	bl	800ad06 <memset>
  if(timHandle->Instance==TIM1)
 80033fc:	4b0f      	ldr	r3, [pc, #60]	; (800343c <HAL_TIM_MspPostInit+0x50>)
 80033fe:	6822      	ldr	r2, [r4, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d001      	beq.n	8003408 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003404:	b006      	add	sp, #24
 8003406:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003408:	2080      	movs	r0, #128	; 0x80
 800340a:	4a0d      	ldr	r2, [pc, #52]	; (8003440 <HAL_TIM_MspPostInit+0x54>)
 800340c:	0280      	lsls	r0, r0, #10
 800340e:	6951      	ldr	r1, [r2, #20]
 8003410:	4301      	orrs	r1, r0
 8003412:	6151      	str	r1, [r2, #20]
 8003414:	6953      	ldr	r3, [r2, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003416:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003418:	4003      	ands	r3, r0
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800341e:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003420:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003426:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003428:	3bfe      	subs	r3, #254	; 0xfe
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800342a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342e:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003430:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003432:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003434:	f005 fa52 	bl	80088dc <HAL_GPIO_Init>
}
 8003438:	e7e4      	b.n	8003404 <HAL_TIM_MspPostInit+0x18>
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	40012c00 	.word	0x40012c00
 8003440:	40021000 	.word	0x40021000

08003444 <MX_TIM1_Init>:
{
 8003444:	b510      	push	{r4, lr}
 8003446:	b092      	sub	sp, #72	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003448:	2208      	movs	r2, #8
 800344a:	2100      	movs	r1, #0
 800344c:	a801      	add	r0, sp, #4
 800344e:	f007 fc5a 	bl	800ad06 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003452:	221c      	movs	r2, #28
 8003454:	2100      	movs	r1, #0
 8003456:	a803      	add	r0, sp, #12
 8003458:	f007 fc55 	bl	800ad06 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800345c:	2220      	movs	r2, #32
 800345e:	2100      	movs	r1, #0
 8003460:	a80a      	add	r0, sp, #40	; 0x28
 8003462:	f007 fc50 	bl	800ad06 <memset>
  htim1.Instance = TIM1;
 8003466:	4c3f      	ldr	r4, [pc, #252]	; (8003564 <MX_TIM1_Init+0x120>)
 8003468:	4b3f      	ldr	r3, [pc, #252]	; (8003568 <MX_TIM1_Init+0x124>)
  htim1.Init.Period = 23999;
 800346a:	4a40      	ldr	r2, [pc, #256]	; (800356c <MX_TIM1_Init+0x128>)
  htim1.Instance = TIM1;
 800346c:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 1;
 800346e:	2301      	movs	r3, #1
 8003470:	6063      	str	r3, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003472:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003474:	0020      	movs	r0, r4
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003476:	60a3      	str	r3, [r4, #8]
  htim1.Init.Period = 23999;
 8003478:	60e2      	str	r2, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800347a:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 800347c:	6163      	str	r3, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800347e:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003480:	f006 fda0 	bl	8009fc4 <HAL_TIM_PWM_Init>
 8003484:	2800      	cmp	r0, #0
 8003486:	d150      	bne.n	800352a <MX_TIM1_Init+0xe6>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8003488:	0020      	movs	r0, r4
 800348a:	f006 fd6f 	bl	8009f6c <HAL_TIM_OC_Init>
 800348e:	2800      	cmp	r0, #0
 8003490:	d152      	bne.n	8003538 <MX_TIM1_Init+0xf4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003492:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003494:	0020      	movs	r0, r4
 8003496:	a901      	add	r1, sp, #4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003498:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800349a:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800349c:	f006 fe92 	bl	800a1c4 <HAL_TIMEx_MasterConfigSynchronization>
 80034a0:	2800      	cmp	r0, #0
 80034a2:	d15b      	bne.n	800355c <MX_TIM1_Init+0x118>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034a4:	2360      	movs	r3, #96	; 0x60
 80034a6:	9303      	str	r3, [sp, #12]
  sConfigOC.Pulse = 0;
 80034a8:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034aa:	2200      	movs	r2, #0
 80034ac:	0020      	movs	r0, r4
 80034ae:	a903      	add	r1, sp, #12
  sConfigOC.Pulse = 0;
 80034b0:	9304      	str	r3, [sp, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034b2:	9305      	str	r3, [sp, #20]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80034b4:	9306      	str	r3, [sp, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034b6:	9307      	str	r3, [sp, #28]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80034b8:	9308      	str	r3, [sp, #32]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80034ba:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034bc:	f006 fe1a 	bl	800a0f4 <HAL_TIM_PWM_ConfigChannel>
 80034c0:	2800      	cmp	r0, #0
 80034c2:	d148      	bne.n	8003556 <MX_TIM1_Init+0x112>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80034c4:	2300      	movs	r3, #0
 80034c6:	9303      	str	r3, [sp, #12]
  sConfigOC.Pulse = 1200;
 80034c8:	2396      	movs	r3, #150	; 0x96
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80034ca:	2204      	movs	r2, #4
  sConfigOC.Pulse = 1200;
 80034cc:	00db      	lsls	r3, r3, #3
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80034ce:	0020      	movs	r0, r4
 80034d0:	a903      	add	r1, sp, #12
  sConfigOC.Pulse = 1200;
 80034d2:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80034d4:	f006 fde2 	bl	800a09c <HAL_TIM_OC_ConfigChannel>
 80034d8:	2800      	cmp	r0, #0
 80034da:	d139      	bne.n	8003550 <MX_TIM1_Init+0x10c>
  sConfigOC.Pulse = 22800;
 80034dc:	4b24      	ldr	r3, [pc, #144]	; (8003570 <MX_TIM1_Init+0x12c>)
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80034de:	2208      	movs	r2, #8
 80034e0:	0020      	movs	r0, r4
 80034e2:	a903      	add	r1, sp, #12
  sConfigOC.Pulse = 22800;
 80034e4:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80034e6:	f006 fdd9 	bl	800a09c <HAL_TIM_OC_ConfigChannel>
 80034ea:	2800      	cmp	r0, #0
 80034ec:	d12d      	bne.n	800354a <MX_TIM1_Init+0x106>
  sConfigOC.Pulse = 12000;
 80034ee:	4b21      	ldr	r3, [pc, #132]	; (8003574 <MX_TIM1_Init+0x130>)
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80034f0:	220c      	movs	r2, #12
 80034f2:	0020      	movs	r0, r4
 80034f4:	a903      	add	r1, sp, #12
  sConfigOC.Pulse = 12000;
 80034f6:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80034f8:	f006 fdd0 	bl	800a09c <HAL_TIM_OC_ConfigChannel>
 80034fc:	2800      	cmp	r0, #0
 80034fe:	d121      	bne.n	8003544 <MX_TIM1_Init+0x100>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003500:	2280      	movs	r2, #128	; 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003502:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003504:	0192      	lsls	r2, r2, #6
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003506:	0020      	movs	r0, r4
 8003508:	a90a      	add	r1, sp, #40	; 0x28
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800350a:	930a      	str	r3, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800350c:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800350e:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.DeadTime = 0;
 8003510:	930d      	str	r3, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003512:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003514:	920f      	str	r2, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003516:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003518:	f006 fe82 	bl	800a220 <HAL_TIMEx_ConfigBreakDeadTime>
 800351c:	2800      	cmp	r0, #0
 800351e:	d10e      	bne.n	800353e <MX_TIM1_Init+0xfa>
  HAL_TIM_MspPostInit(&htim1);
 8003520:	0020      	movs	r0, r4
 8003522:	f7ff ff63 	bl	80033ec <HAL_TIM_MspPostInit>
}
 8003526:	b012      	add	sp, #72	; 0x48
 8003528:	bd10      	pop	{r4, pc}
    Error_Handler();
 800352a:	f7ff fe45 	bl	80031b8 <Error_Handler>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800352e:	0020      	movs	r0, r4
 8003530:	f006 fd1c 	bl	8009f6c <HAL_TIM_OC_Init>
 8003534:	2800      	cmp	r0, #0
 8003536:	d0ac      	beq.n	8003492 <MX_TIM1_Init+0x4e>
    Error_Handler();
 8003538:	f7ff fe3e 	bl	80031b8 <Error_Handler>
 800353c:	e7a9      	b.n	8003492 <MX_TIM1_Init+0x4e>
    Error_Handler();
 800353e:	f7ff fe3b 	bl	80031b8 <Error_Handler>
 8003542:	e7ed      	b.n	8003520 <MX_TIM1_Init+0xdc>
    Error_Handler();
 8003544:	f7ff fe38 	bl	80031b8 <Error_Handler>
 8003548:	e7da      	b.n	8003500 <MX_TIM1_Init+0xbc>
    Error_Handler();
 800354a:	f7ff fe35 	bl	80031b8 <Error_Handler>
 800354e:	e7ce      	b.n	80034ee <MX_TIM1_Init+0xaa>
    Error_Handler();
 8003550:	f7ff fe32 	bl	80031b8 <Error_Handler>
 8003554:	e7c2      	b.n	80034dc <MX_TIM1_Init+0x98>
    Error_Handler();
 8003556:	f7ff fe2f 	bl	80031b8 <Error_Handler>
 800355a:	e7b3      	b.n	80034c4 <MX_TIM1_Init+0x80>
    Error_Handler();
 800355c:	f7ff fe2c 	bl	80031b8 <Error_Handler>
 8003560:	e7a0      	b.n	80034a4 <MX_TIM1_Init+0x60>
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	20000c04 	.word	0x20000c04
 8003568:	40012c00 	.word	0x40012c00
 800356c:	00005dbf 	.word	0x00005dbf
 8003570:	00005910 	.word	0x00005910
 8003574:	00002ee0 	.word	0x00002ee0

08003578 <MX_USART1_UART_Init>:
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003578:	480c      	ldr	r0, [pc, #48]	; (80035ac <MX_USART1_UART_Init+0x34>)
 800357a:	4b0d      	ldr	r3, [pc, #52]	; (80035b0 <MX_USART1_UART_Init+0x38>)
{
 800357c:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800357e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8003580:	23e1      	movs	r3, #225	; 0xe1
 8003582:	025b      	lsls	r3, r3, #9
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003584:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8003586:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003588:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 800358a:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800358c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800358e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003590:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003592:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003594:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003596:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003598:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800359a:	f007 fac3 	bl	800ab24 <HAL_UART_Init>
 800359e:	2800      	cmp	r0, #0
 80035a0:	d100      	bne.n	80035a4 <MX_USART1_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80035a2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80035a4:	f7ff fe08 	bl	80031b8 <Error_Handler>
}
 80035a8:	e7fb      	b.n	80035a2 <MX_USART1_UART_Init+0x2a>
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	20000c4c 	.word	0x20000c4c
 80035b0:	40013800 	.word	0x40013800

080035b4 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80035b4:	480c      	ldr	r0, [pc, #48]	; (80035e8 <MX_USART2_UART_Init+0x34>)
 80035b6:	4b0d      	ldr	r3, [pc, #52]	; (80035ec <MX_USART2_UART_Init+0x38>)
{
 80035b8:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 80035ba:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80035bc:	23e1      	movs	r3, #225	; 0xe1
 80035be:	025b      	lsls	r3, r3, #9
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80035c0:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 80035c2:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80035c4:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 80035c6:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80035c8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80035ca:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80035cc:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035ce:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80035d0:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035d2:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035d4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80035d6:	f007 faa5 	bl	800ab24 <HAL_UART_Init>
 80035da:	2800      	cmp	r0, #0
 80035dc:	d100      	bne.n	80035e0 <MX_USART2_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80035de:	bd10      	pop	{r4, pc}
    Error_Handler();
 80035e0:	f7ff fdea 	bl	80031b8 <Error_Handler>
}
 80035e4:	e7fb      	b.n	80035de <MX_USART2_UART_Init+0x2a>
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	20000cd0 	.word	0x20000cd0
 80035ec:	40004400 	.word	0x40004400

080035f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80035f0:	b510      	push	{r4, lr}
 80035f2:	0004      	movs	r4, r0
 80035f4:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f6:	2214      	movs	r2, #20
 80035f8:	2100      	movs	r1, #0
 80035fa:	a805      	add	r0, sp, #20
 80035fc:	f007 fb83 	bl	800ad06 <memset>
  if(uartHandle->Instance==USART1)
 8003600:	6823      	ldr	r3, [r4, #0]
 8003602:	4a2f      	ldr	r2, [pc, #188]	; (80036c0 <HAL_UART_MspInit+0xd0>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d004      	beq.n	8003612 <HAL_UART_MspInit+0x22>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8003608:	4a2e      	ldr	r2, [pc, #184]	; (80036c4 <HAL_UART_MspInit+0xd4>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d02d      	beq.n	800366a <HAL_UART_MspInit+0x7a>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800360e:	b00a      	add	sp, #40	; 0x28
 8003610:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8003612:	2080      	movs	r0, #128	; 0x80
 8003614:	4b2c      	ldr	r3, [pc, #176]	; (80036c8 <HAL_UART_MspInit+0xd8>)
 8003616:	01c0      	lsls	r0, r0, #7
 8003618:	6999      	ldr	r1, [r3, #24]
 800361a:	4301      	orrs	r1, r0
 800361c:	6199      	str	r1, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800361e:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8003620:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003622:	0289      	lsls	r1, r1, #10
    __HAL_RCC_USART1_CLK_ENABLE();
 8003624:	4002      	ands	r2, r0
 8003626:	9201      	str	r2, [sp, #4]
 8003628:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800362a:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800362c:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800362e:	430a      	orrs	r2, r1
 8003630:	615a      	str	r2, [r3, #20]
 8003632:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003634:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003636:	400b      	ands	r3, r1
 8003638:	9302      	str	r3, [sp, #8]
 800363a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800363c:	23c0      	movs	r3, #192	; 0xc0
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003642:	2302      	movs	r3, #2
 8003644:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003646:	2300      	movs	r3, #0
 8003648:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800364a:	3303      	adds	r3, #3
 800364c:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800364e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003650:	3b02      	subs	r3, #2
 8003652:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003654:	f005 f942 	bl	80088dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003658:	2200      	movs	r2, #0
 800365a:	2100      	movs	r1, #0
 800365c:	201b      	movs	r0, #27
 800365e:	f004 ffdf 	bl	8008620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003662:	201b      	movs	r0, #27
 8003664:	f005 f80e 	bl	8008684 <HAL_NVIC_EnableIRQ>
 8003668:	e7d1      	b.n	800360e <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800366a:	2280      	movs	r2, #128	; 0x80
 800366c:	4b16      	ldr	r3, [pc, #88]	; (80036c8 <HAL_UART_MspInit+0xd8>)
 800366e:	0292      	lsls	r2, r2, #10
 8003670:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003672:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 8003674:	4311      	orrs	r1, r2
 8003676:	61d9      	str	r1, [r3, #28]
 8003678:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800367a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 800367c:	4011      	ands	r1, r2
 800367e:	9103      	str	r1, [sp, #12]
 8003680:	9903      	ldr	r1, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003682:	6959      	ldr	r1, [r3, #20]
 8003684:	4311      	orrs	r1, r2
 8003686:	6159      	str	r1, [r3, #20]
 8003688:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800368a:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800368c:	401a      	ands	r2, r3
 800368e:	9204      	str	r2, [sp, #16]
 8003690:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003692:	23c0      	movs	r3, #192	; 0xc0
 8003694:	021b      	lsls	r3, r3, #8
 8003696:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003698:	2302      	movs	r3, #2
 800369a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369c:	2300      	movs	r3, #0
 800369e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036a0:	3303      	adds	r3, #3
 80036a2:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80036a4:	3b02      	subs	r3, #2
 80036a6:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036a8:	f005 f918 	bl	80088dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80036ac:	2200      	movs	r2, #0
 80036ae:	2100      	movs	r1, #0
 80036b0:	201c      	movs	r0, #28
 80036b2:	f004 ffb5 	bl	8008620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036b6:	201c      	movs	r0, #28
 80036b8:	f004 ffe4 	bl	8008684 <HAL_NVIC_EnableIRQ>
}
 80036bc:	e7a7      	b.n	800360e <HAL_UART_MspInit+0x1e>
 80036be:	46c0      	nop			; (mov r8, r8)
 80036c0:	40013800 	.word	0x40013800
 80036c4:	40004400 	.word	0x40004400
 80036c8:	40021000 	.word	0x40021000

080036cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80036cc:	480d      	ldr	r0, [pc, #52]	; (8003704 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80036ce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80036d0:	f7ff fe02 	bl	80032d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036d4:	480c      	ldr	r0, [pc, #48]	; (8003708 <LoopForever+0x6>)
  ldr r1, =_edata
 80036d6:	490d      	ldr	r1, [pc, #52]	; (800370c <LoopForever+0xa>)
  ldr r2, =_sidata
 80036d8:	4a0d      	ldr	r2, [pc, #52]	; (8003710 <LoopForever+0xe>)
  movs r3, #0
 80036da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036dc:	e002      	b.n	80036e4 <LoopCopyDataInit>

080036de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036e2:	3304      	adds	r3, #4

080036e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036e8:	d3f9      	bcc.n	80036de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036ea:	4a0a      	ldr	r2, [pc, #40]	; (8003714 <LoopForever+0x12>)
  ldr r4, =_ebss
 80036ec:	4c0a      	ldr	r4, [pc, #40]	; (8003718 <LoopForever+0x16>)
  movs r3, #0
 80036ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036f0:	e001      	b.n	80036f6 <LoopFillZerobss>

080036f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036f4:	3204      	adds	r2, #4

080036f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036f8:	d3fb      	bcc.n	80036f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80036fa:	f007 fad7 	bl	800acac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80036fe:	f7ff fd43 	bl	8003188 <main>

08003702 <LoopForever>:

LoopForever:
    b LoopForever
 8003702:	e7fe      	b.n	8003702 <LoopForever>
  ldr   r0, =_estack
 8003704:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800370c:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8003710:	0800e538 	.word	0x0800e538
  ldr r2, =_sbss
 8003714:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8003718:	20000d68 	.word	0x20000d68

0800371c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800371c:	e7fe      	b.n	800371c <ADC1_IRQHandler>
	...

08003720 <charger_reset_reg_all_bit>:
static uint8_t charger_duty_ondelay_flag = 0;
static uint8_t charger_duty_ondelay_complete = 0;

uint8_t charger_reset_reg_all_bit(eCharger_State cstate)
{
	switch(cstate)
 8003720:	280a      	cmp	r0, #10
 8003722:	d84c      	bhi.n	80037be <charger_reset_reg_all_bit+0x9e>
 8003724:	4a27      	ldr	r2, [pc, #156]	; (80037c4 <charger_reset_reg_all_bit+0xa4>)
 8003726:	0083      	lsls	r3, r0, #2
 8003728:	58d3      	ldr	r3, [r2, r3]
 800372a:	469f      	mov	pc, r3
		case Fault :
			Charger.reg.fault_reset = 0;
			Charger.reg.fault_set = 0;
		break;
		case Powercut :
			Charger.reg.powercut_proceeding = 0;
 800372c:	2118      	movs	r1, #24
		default :
			return _FALSE;
		break;
	}

	return _TRUE;
 800372e:	2001      	movs	r0, #1
			Charger.reg.powercut_proceeding = 0;
 8003730:	4a25      	ldr	r2, [pc, #148]	; (80037c8 <charger_reset_reg_all_bit+0xa8>)
 8003732:	79d3      	ldrb	r3, [r2, #7]
 8003734:	438b      	bics	r3, r1
 8003736:	71d3      	strb	r3, [r2, #7]
}
 8003738:	4770      	bx	lr
			Charger.reg.init_proceeding = 0;
 800373a:	2106      	movs	r1, #6
 800373c:	4a22      	ldr	r2, [pc, #136]	; (80037c8 <charger_reset_reg_all_bit+0xa8>)
 800373e:	78d3      	ldrb	r3, [r2, #3]
 8003740:	438b      	bics	r3, r1
 8003742:	70d3      	strb	r3, [r2, #3]
		break;
 8003744:	e7f8      	b.n	8003738 <charger_reset_reg_all_bit+0x18>
			Charger.reg.ready_standby = 0;
 8003746:	2138      	movs	r1, #56	; 0x38
 8003748:	4b1f      	ldr	r3, [pc, #124]	; (80037c8 <charger_reset_reg_all_bit+0xa8>)
	return _TRUE;
 800374a:	2001      	movs	r0, #1
			Charger.reg.ready_standby = 0;
 800374c:	78da      	ldrb	r2, [r3, #3]
 800374e:	438a      	bics	r2, r1
 8003750:	70da      	strb	r2, [r3, #3]
			Charger.reg.ready_automodeflag = 0;
 8003752:	791a      	ldrb	r2, [r3, #4]
 8003754:	3937      	subs	r1, #55	; 0x37
 8003756:	438a      	bics	r2, r1
 8003758:	711a      	strb	r2, [r3, #4]
		break;
 800375a:	e7ed      	b.n	8003738 <charger_reset_reg_all_bit+0x18>
			Charger.reg.autoready_standby = 0;
 800375c:	210e      	movs	r1, #14
 800375e:	4a1a      	ldr	r2, [pc, #104]	; (80037c8 <charger_reset_reg_all_bit+0xa8>)
	return _TRUE;
 8003760:	2001      	movs	r0, #1
			Charger.reg.autoready_standby = 0;
 8003762:	7913      	ldrb	r3, [r2, #4]
 8003764:	438b      	bics	r3, r1
 8003766:	7113      	strb	r3, [r2, #4]
		break;
 8003768:	e7e6      	b.n	8003738 <charger_reset_reg_all_bit+0x18>
			Charger.reg.usercheck_tagok = 0;
 800376a:	4a17      	ldr	r2, [pc, #92]	; (80037c8 <charger_reset_reg_all_bit+0xa8>)
 800376c:	4917      	ldr	r1, [pc, #92]	; (80037cc <charger_reset_reg_all_bit+0xac>)
 800376e:	8893      	ldrh	r3, [r2, #4]
	return _TRUE;
 8003770:	2001      	movs	r0, #1
			Charger.reg.usercheck_tagok = 0;
 8003772:	400b      	ands	r3, r1
 8003774:	8093      	strh	r3, [r2, #4]
		break;
 8003776:	e7df      	b.n	8003738 <charger_reset_reg_all_bit+0x18>
			Charger.reg.connect_wait = 0;
 8003778:	210e      	movs	r1, #14
 800377a:	4a13      	ldr	r2, [pc, #76]	; (80037c8 <charger_reset_reg_all_bit+0xa8>)
	return _TRUE;
 800377c:	2001      	movs	r0, #1
			Charger.reg.connect_wait = 0;
 800377e:	7953      	ldrb	r3, [r2, #5]
 8003780:	438b      	bics	r3, r1
 8003782:	7153      	strb	r3, [r2, #5]
		break;
 8003784:	e7d8      	b.n	8003738 <charger_reset_reg_all_bit+0x18>
			Charger.reg.charging_proceeding = 0;
 8003786:	236f      	movs	r3, #111	; 0x6f
 8003788:	4a0f      	ldr	r2, [pc, #60]	; (80037c8 <charger_reset_reg_all_bit+0xa8>)
	return _TRUE;
 800378a:	2001      	movs	r0, #1
			Charger.reg.charging_proceeding = 0;
 800378c:	7951      	ldrb	r1, [r2, #5]
 800378e:	400b      	ands	r3, r1
 8003790:	7153      	strb	r3, [r2, #5]
		break;
 8003792:	e7d1      	b.n	8003738 <charger_reset_reg_all_bit+0x18>
			Charger.reg.finish_proceeding = 0;
 8003794:	2170      	movs	r1, #112	; 0x70
 8003796:	4a0c      	ldr	r2, [pc, #48]	; (80037c8 <charger_reset_reg_all_bit+0xa8>)
	return _TRUE;
 8003798:	2001      	movs	r0, #1
			Charger.reg.finish_proceeding = 0;
 800379a:	7993      	ldrb	r3, [r2, #6]
 800379c:	438b      	bics	r3, r1
 800379e:	7193      	strb	r3, [r2, #6]
		break;
 80037a0:	e7ca      	b.n	8003738 <charger_reset_reg_all_bit+0x18>
			Charger.reg.ota_proceeding = 0;
 80037a2:	2106      	movs	r1, #6
 80037a4:	4a08      	ldr	r2, [pc, #32]	; (80037c8 <charger_reset_reg_all_bit+0xa8>)
	return _TRUE;
 80037a6:	2001      	movs	r0, #1
			Charger.reg.ota_proceeding = 0;
 80037a8:	79d3      	ldrb	r3, [r2, #7]
 80037aa:	438b      	bics	r3, r1
 80037ac:	71d3      	strb	r3, [r2, #7]
		break;
 80037ae:	e7c3      	b.n	8003738 <charger_reset_reg_all_bit+0x18>
			Charger.reg.fault_set = 0;
 80037b0:	4a05      	ldr	r2, [pc, #20]	; (80037c8 <charger_reset_reg_all_bit+0xa8>)
 80037b2:	4907      	ldr	r1, [pc, #28]	; (80037d0 <charger_reset_reg_all_bit+0xb0>)
 80037b4:	88d3      	ldrh	r3, [r2, #6]
	return _TRUE;
 80037b6:	2001      	movs	r0, #1
			Charger.reg.fault_set = 0;
 80037b8:	400b      	ands	r3, r1
 80037ba:	80d3      	strh	r3, [r2, #6]
		break;
 80037bc:	e7bc      	b.n	8003738 <charger_reset_reg_all_bit+0x18>
	return _TRUE;
 80037be:	2000      	movs	r0, #0
 80037c0:	e7ba      	b.n	8003738 <charger_reset_reg_all_bit+0x18>
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	0800c080 	.word	0x0800c080
 80037c8:	20000100 	.word	0x20000100
 80037cc:	fffffe6f 	.word	0xfffffe6f
 80037d0:	fffffe7f 	.word	0xfffffe7f

080037d4 <charger_wake_up_seq_start.part.0>:
uint8_t charger_wake_up_seq_start(uint8_t mode)
{
	if((charger_get_wake_up_seq_flag() == 1) && (charger_get_wake_up_seq_step() == NON))
	{
		//multi_ch_model[slave_id].wake_up_seq_step = START_TIMEOUT;
		Charger.wake_up_seq_step = START_TIMEOUT;
 80037d4:	2367      	movs	r3, #103	; 0x67
 80037d6:	2101      	movs	r1, #1
 80037d8:	4a19      	ldr	r2, [pc, #100]	; (8003840 <charger_wake_up_seq_start.part.0+0x6c>)
uint8_t charger_wake_up_seq_start(uint8_t mode)
 80037da:	b510      	push	{r4, lr}
		Charger.wake_up_seq_step = START_TIMEOUT;
 80037dc:	54d1      	strb	r1, [r2, r3]

		if(0 == mode)
 80037de:	2800      	cmp	r0, #0
 80037e0:	d00e      	beq.n	8003800 <charger_wake_up_seq_start.part.0+0x2c>
		{
			_LIB_LOGGING_printf("wuseq start : 30\r\n");
			_LIB_USERDELAY_set(&gDelay_wusqtimeout, CHARGSERV_WUSQ_NORMAL_TIMEOUT);
		}
		else if(1 == mode)
 80037e2:	2801      	cmp	r0, #1
 80037e4:	d024      	beq.n	8003830 <charger_wake_up_seq_start.part.0+0x5c>
		{
			_LIB_LOGGING_printf("wuseq start : 120\r\n");
			_LIB_USERDELAY_set(&gDelay_wusqtimeout, CHARGSERV_WUSQ_CAHRGING_TIMEOUT);
		}
		else if(2 == mode)
 80037e6:	2802      	cmp	r0, #2
 80037e8:	d01a      	beq.n	8003820 <charger_wake_up_seq_start.part.0+0x4c>
		{
			_LIB_LOGGING_printf("wuseq start : 600\r\n");
			_LIB_USERDELAY_set(&gDelay_wusqtimeout, CHARGSERV_WUSQ_CAHRGING3_TIMEOUT);
		}
		else if(3 == mode)
 80037ea:	2863      	cmp	r0, #99	; 0x63
 80037ec:	d110      	bne.n	8003810 <charger_wake_up_seq_start.part.0+0x3c>
			_LIB_LOGGING_printf("wuseq start : 1800\r\n");
			_LIB_USERDELAY_set(&gDelay_wusqtimeout, CHARGSERV_WUSQ_CAHRGING4_TIMEOUT);
		}
		else if(99 == mode)
		{
			_LIB_LOGGING_printf("wuseq start : 5\r\n");
 80037ee:	4815      	ldr	r0, [pc, #84]	; (8003844 <charger_wake_up_seq_start.part.0+0x70>)
 80037f0:	f007 fb1e 	bl	800ae30 <puts>
			_LIB_USERDELAY_set(&gDelay_wusqtimeout, CHARGSERV_WUSQ_LEAKAGE_TIMEOUT);
 80037f4:	4914      	ldr	r1, [pc, #80]	; (8003848 <charger_wake_up_seq_start.part.0+0x74>)
 80037f6:	4815      	ldr	r0, [pc, #84]	; (800384c <charger_wake_up_seq_start.part.0+0x78>)
 80037f8:	f003 fc12 	bl	8007020 <_LIB_USERDELAY_set>

		return _TRUE;
	}

	return _FALSE;
}
 80037fc:	2001      	movs	r0, #1
 80037fe:	bd10      	pop	{r4, pc}
			_LIB_LOGGING_printf("wuseq start : 30\r\n");
 8003800:	4813      	ldr	r0, [pc, #76]	; (8003850 <charger_wake_up_seq_start.part.0+0x7c>)
 8003802:	f007 fb15 	bl	800ae30 <puts>
			_LIB_USERDELAY_set(&gDelay_wusqtimeout, CHARGSERV_WUSQ_NORMAL_TIMEOUT);
 8003806:	4913      	ldr	r1, [pc, #76]	; (8003854 <charger_wake_up_seq_start.part.0+0x80>)
 8003808:	4810      	ldr	r0, [pc, #64]	; (800384c <charger_wake_up_seq_start.part.0+0x78>)
 800380a:	f003 fc09 	bl	8007020 <_LIB_USERDELAY_set>
 800380e:	e7f5      	b.n	80037fc <charger_wake_up_seq_start.part.0+0x28>
			_LIB_LOGGING_printf("wuseq start : 1800\r\n");
 8003810:	4811      	ldr	r0, [pc, #68]	; (8003858 <charger_wake_up_seq_start.part.0+0x84>)
 8003812:	f007 fb0d 	bl	800ae30 <puts>
			_LIB_USERDELAY_set(&gDelay_wusqtimeout, CHARGSERV_WUSQ_CAHRGING4_TIMEOUT);
 8003816:	4911      	ldr	r1, [pc, #68]	; (800385c <charger_wake_up_seq_start.part.0+0x88>)
 8003818:	480c      	ldr	r0, [pc, #48]	; (800384c <charger_wake_up_seq_start.part.0+0x78>)
 800381a:	f003 fc01 	bl	8007020 <_LIB_USERDELAY_set>
 800381e:	e7ed      	b.n	80037fc <charger_wake_up_seq_start.part.0+0x28>
			_LIB_LOGGING_printf("wuseq start : 600\r\n");
 8003820:	480f      	ldr	r0, [pc, #60]	; (8003860 <charger_wake_up_seq_start.part.0+0x8c>)
 8003822:	f007 fb05 	bl	800ae30 <puts>
			_LIB_USERDELAY_set(&gDelay_wusqtimeout, CHARGSERV_WUSQ_CAHRGING3_TIMEOUT);
 8003826:	490f      	ldr	r1, [pc, #60]	; (8003864 <charger_wake_up_seq_start.part.0+0x90>)
 8003828:	4808      	ldr	r0, [pc, #32]	; (800384c <charger_wake_up_seq_start.part.0+0x78>)
 800382a:	f003 fbf9 	bl	8007020 <_LIB_USERDELAY_set>
 800382e:	e7e5      	b.n	80037fc <charger_wake_up_seq_start.part.0+0x28>
			_LIB_LOGGING_printf("wuseq start : 120\r\n");
 8003830:	480d      	ldr	r0, [pc, #52]	; (8003868 <charger_wake_up_seq_start.part.0+0x94>)
 8003832:	f007 fafd 	bl	800ae30 <puts>
			_LIB_USERDELAY_set(&gDelay_wusqtimeout, CHARGSERV_WUSQ_CAHRGING_TIMEOUT);
 8003836:	490d      	ldr	r1, [pc, #52]	; (800386c <charger_wake_up_seq_start.part.0+0x98>)
 8003838:	4804      	ldr	r0, [pc, #16]	; (800384c <charger_wake_up_seq_start.part.0+0x78>)
 800383a:	f003 fbf1 	bl	8007020 <_LIB_USERDELAY_set>
 800383e:	e7dd      	b.n	80037fc <charger_wake_up_seq_start.part.0+0x28>
 8003840:	20000100 	.word	0x20000100
 8003844:	0800c0fc 	.word	0x0800c0fc
 8003848:	00001388 	.word	0x00001388
 800384c:	20000210 	.word	0x20000210
 8003850:	0800c0ac 	.word	0x0800c0ac
 8003854:	00007530 	.word	0x00007530
 8003858:	0800c0e8 	.word	0x0800c0e8
 800385c:	001b7740 	.word	0x001b7740
 8003860:	0800c0d4 	.word	0x0800c0d4
 8003864:	000927c0 	.word	0x000927c0
 8003868:	0800c0c0 	.word	0x0800c0c0
 800386c:	0001d4c0 	.word	0x0001d4c0

08003870 <charger_wake_up_seq_forced_stop.part.0>:
		return _FALSE;
	}
}
#endif

void charger_wake_up_seq_forced_stop()
 8003870:	b510      	push	{r4, lr}
	{
		//charger_wake_up_seq_stoptimer(T3wusqtimeoutHandle);
		//charger_wake_up_seq_stoptimer(T4wusqcpoffHandle);
		//charger_wake_up_seq_stoptimer(T5wusqpwmoffHandle);

		_LIB_USERDELAY_stop(&gDelay_wusqtimeout);
 8003872:	4809      	ldr	r0, [pc, #36]	; (8003898 <charger_wake_up_seq_forced_stop.part.0+0x28>)
 8003874:	f003 fbee 	bl	8007054 <_LIB_USERDELAY_stop>
		_LIB_USERDELAY_stop(&gDelay_wusqcpoff);
 8003878:	4808      	ldr	r0, [pc, #32]	; (800389c <charger_wake_up_seq_forced_stop.part.0+0x2c>)
 800387a:	f003 fbeb 	bl	8007054 <_LIB_USERDELAY_stop>
		_LIB_USERDELAY_stop(&gDelay_wusqpwmoff);
 800387e:	4808      	ldr	r0, [pc, #32]	; (80038a0 <charger_wake_up_seq_forced_stop.part.0+0x30>)
 8003880:	f003 fbe8 	bl	8007054 <_LIB_USERDELAY_stop>
	Charger.wake_up_seq_flag = 0;
 8003884:	2200      	movs	r2, #0
 8003886:	2165      	movs	r1, #101	; 0x65
 8003888:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <charger_wake_up_seq_forced_stop.part.0+0x34>)
	_LIB_LOGGING_printf("wuseq disable\r\n");
 800388a:	4807      	ldr	r0, [pc, #28]	; (80038a8 <charger_wake_up_seq_forced_stop.part.0+0x38>)
	Charger.wake_up_seq_flag = 0;
 800388c:	545a      	strb	r2, [r3, r1]
	Charger.wake_up_seq_step = NON;
 800388e:	3102      	adds	r1, #2
 8003890:	545a      	strb	r2, [r3, r1]
	_LIB_LOGGING_printf("wuseq disable\r\n");
 8003892:	f007 facd 	bl	800ae30 <puts>

		charger_wake_up_seq_disable();
	}
}
 8003896:	bd10      	pop	{r4, pc}
 8003898:	20000210 	.word	0x20000210
 800389c:	200001f8 	.word	0x200001f8
 80038a0:	20000204 	.word	0x20000204
 80038a4:	20000100 	.word	0x20000100
 80038a8:	0800c110 	.word	0x0800c110

080038ac <charger_wake_up_seq_control.part.0>:
	return Charger.wake_up_seq_step;
 80038ac:	2367      	movs	r3, #103	; 0x67

	_MW_CP_mc_relay_clear();

}

void charger_wake_up_seq_control()
 80038ae:	b570      	push	{r4, r5, r6, lr}
	return Charger.wake_up_seq_step;
 80038b0:	4c34      	ldr	r4, [pc, #208]	; (8003984 <charger_wake_up_seq_control.part.0+0xd8>)
 80038b2:	5ce3      	ldrb	r3, [r4, r3]
	if(charger_get_wake_up_seq_flag() == 0)
	{
		return;
	}

	switch(charger_get_wake_up_seq_step())
 80038b4:	2b03      	cmp	r3, #3
 80038b6:	d041      	beq.n	800393c <charger_wake_up_seq_control.part.0+0x90>
 80038b8:	d81a      	bhi.n	80038f0 <charger_wake_up_seq_control.part.0+0x44>
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d027      	beq.n	800390e <charger_wake_up_seq_control.part.0+0x62>
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d124      	bne.n	800390c <charger_wake_up_seq_control.part.0+0x60>
			if(_TRUE == charger_wake_up_seq_starttimer(T4wusqcpoffHandle,3000))
			{
				_LIB_LOGGING_printf("wuseq cp off\r\n");
			}
#endif
			if(_TRUE == _LIB_USERDELAY_start(&gDelay_wusqcpoff, DELAY_RENEW_OFF))
 80038c2:	4d31      	ldr	r5, [pc, #196]	; (8003988 <charger_wake_up_seq_control.part.0+0xdc>)
 80038c4:	2100      	movs	r1, #0
 80038c6:	0028      	movs	r0, r5
 80038c8:	f003 fbb4 	bl	8007034 <_LIB_USERDELAY_start>
 80038cc:	2801      	cmp	r0, #1
 80038ce:	d04c      	beq.n	800396a <charger_wake_up_seq_control.part.0+0xbe>
			{
				_LIB_LOGGING_printf("wuseq cp off\r\n");
			}
			if(_TRUE == _LIB_USERDELAY_isfired(&gDelay_wusqcpoff))
 80038d0:	0028      	movs	r0, r5
 80038d2:	f003 fbc3 	bl	800705c <_LIB_USERDELAY_isfired>
 80038d6:	2801      	cmp	r0, #1
 80038d8:	d118      	bne.n	800390c <charger_wake_up_seq_control.part.0+0x60>
			{
				_LIB_USERDELAY_stop(&gDelay_wusqcpoff);
 80038da:	0028      	movs	r0, r5
 80038dc:	f003 fbba 	bl	8007054 <_LIB_USERDELAY_stop>
	if(Charger.wake_up_seq_flag == 1)
 80038e0:	2365      	movs	r3, #101	; 0x65
 80038e2:	5ce3      	ldrb	r3, [r4, r3]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d111      	bne.n	800390c <charger_wake_up_seq_control.part.0+0x60>
		Charger.wake_up_seq_step = value;
 80038e8:	2203      	movs	r2, #3
 80038ea:	3366      	adds	r3, #102	; 0x66
 80038ec:	54e2      	strb	r2, [r4, r3]
		return _TRUE;
 80038ee:	e00d      	b.n	800390c <charger_wake_up_seq_control.part.0+0x60>
	switch(charger_get_wake_up_seq_step())
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	d10b      	bne.n	800390c <charger_wake_up_seq_control.part.0+0x60>
			{
				StopDelay(&gDelay_wake_up_seq_finish_ok[i]);

				_CTRL_wake_up_seq_disable(i);
			}*/
			_LIB_LOGGING_printf("wuseq finish\r\n");
 80038f4:	4825      	ldr	r0, [pc, #148]	; (800398c <charger_wake_up_seq_control.part.0+0xe0>)
 80038f6:	f007 fa9b 	bl	800ae30 <puts>
	Charger.wake_up_seq_flag = 0;
 80038fa:	2365      	movs	r3, #101	; 0x65
 80038fc:	2200      	movs	r2, #0
 80038fe:	54e2      	strb	r2, [r4, r3]
			Charger.wake_up_seq_finish_flag = 1;
 8003900:	3301      	adds	r3, #1
 8003902:	3201      	adds	r2, #1
	_LIB_LOGGING_printf("wuseq disable\r\n");
 8003904:	4822      	ldr	r0, [pc, #136]	; (8003990 <charger_wake_up_seq_control.part.0+0xe4>)
			Charger.wake_up_seq_finish_flag = 1;
 8003906:	52e2      	strh	r2, [r4, r3]
	_LIB_LOGGING_printf("wuseq disable\r\n");
 8003908:	f007 fa92 	bl	800ae30 <puts>

		default :

		break;
	}
}
 800390c:	bd70      	pop	{r4, r5, r6, pc}
			if(_TRUE == _LIB_USERDELAY_start(&gDelay_wusqtimeout, DELAY_RENEW_OFF))
 800390e:	4d21      	ldr	r5, [pc, #132]	; (8003994 <charger_wake_up_seq_control.part.0+0xe8>)
 8003910:	2100      	movs	r1, #0
 8003912:	0028      	movs	r0, r5
 8003914:	f003 fb8e 	bl	8007034 <_LIB_USERDELAY_start>
 8003918:	2801      	cmp	r0, #1
 800391a:	d02a      	beq.n	8003972 <charger_wake_up_seq_control.part.0+0xc6>
			if(_TRUE == _LIB_USERDELAY_isfired(&gDelay_wusqtimeout))
 800391c:	0028      	movs	r0, r5
 800391e:	f003 fb9d 	bl	800705c <_LIB_USERDELAY_isfired>
 8003922:	2801      	cmp	r0, #1
 8003924:	d1f2      	bne.n	800390c <charger_wake_up_seq_control.part.0+0x60>
				_LIB_USERDELAY_stop(&gDelay_wusqtimeout);
 8003926:	0028      	movs	r0, r5
 8003928:	f003 fb94 	bl	8007054 <_LIB_USERDELAY_stop>
	if(Charger.wake_up_seq_flag == 1)
 800392c:	2365      	movs	r3, #101	; 0x65
 800392e:	5ce3      	ldrb	r3, [r4, r3]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d1eb      	bne.n	800390c <charger_wake_up_seq_control.part.0+0x60>
		Charger.wake_up_seq_step = value;
 8003934:	2202      	movs	r2, #2
 8003936:	3366      	adds	r3, #102	; 0x66
 8003938:	54e2      	strb	r2, [r4, r3]
		return _TRUE;
 800393a:	e7e7      	b.n	800390c <charger_wake_up_seq_control.part.0+0x60>
			if(_TRUE == _LIB_USERDELAY_start(&gDelay_wusqpwmoff, DELAY_RENEW_OFF))
 800393c:	4d16      	ldr	r5, [pc, #88]	; (8003998 <charger_wake_up_seq_control.part.0+0xec>)
 800393e:	2100      	movs	r1, #0
 8003940:	0028      	movs	r0, r5
 8003942:	f003 fb77 	bl	8007034 <_LIB_USERDELAY_start>
 8003946:	2801      	cmp	r0, #1
 8003948:	d017      	beq.n	800397a <charger_wake_up_seq_control.part.0+0xce>
			if(_TRUE == _LIB_USERDELAY_isfired(&gDelay_wusqpwmoff))
 800394a:	0028      	movs	r0, r5
 800394c:	f003 fb86 	bl	800705c <_LIB_USERDELAY_isfired>
 8003950:	2801      	cmp	r0, #1
 8003952:	d1db      	bne.n	800390c <charger_wake_up_seq_control.part.0+0x60>
				_LIB_USERDELAY_stop(&gDelay_wusqpwmoff);
 8003954:	0028      	movs	r0, r5
 8003956:	f003 fb7d 	bl	8007054 <_LIB_USERDELAY_stop>
	if(Charger.wake_up_seq_flag == 1)
 800395a:	2365      	movs	r3, #101	; 0x65
 800395c:	5ce3      	ldrb	r3, [r4, r3]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d1d4      	bne.n	800390c <charger_wake_up_seq_control.part.0+0x60>
		Charger.wake_up_seq_step = value;
 8003962:	2204      	movs	r2, #4
 8003964:	3366      	adds	r3, #102	; 0x66
 8003966:	54e2      	strb	r2, [r4, r3]
		return _TRUE;
 8003968:	e7d0      	b.n	800390c <charger_wake_up_seq_control.part.0+0x60>
				_LIB_LOGGING_printf("wuseq cp off\r\n");
 800396a:	480c      	ldr	r0, [pc, #48]	; (800399c <charger_wake_up_seq_control.part.0+0xf0>)
 800396c:	f007 fa60 	bl	800ae30 <puts>
 8003970:	e7ae      	b.n	80038d0 <charger_wake_up_seq_control.part.0+0x24>
				_LIB_LOGGING_printf("wuseq timeout\r\n");
 8003972:	480b      	ldr	r0, [pc, #44]	; (80039a0 <charger_wake_up_seq_control.part.0+0xf4>)
 8003974:	f007 fa5c 	bl	800ae30 <puts>
 8003978:	e7d0      	b.n	800391c <charger_wake_up_seq_control.part.0+0x70>
				_LIB_LOGGING_printf("wuseq pwm off\r\n");
 800397a:	480a      	ldr	r0, [pc, #40]	; (80039a4 <charger_wake_up_seq_control.part.0+0xf8>)
 800397c:	f007 fa58 	bl	800ae30 <puts>
 8003980:	e7e3      	b.n	800394a <charger_wake_up_seq_control.part.0+0x9e>
 8003982:	46c0      	nop			; (mov r8, r8)
 8003984:	20000100 	.word	0x20000100
 8003988:	200001f8 	.word	0x200001f8
 800398c:	0800c150 	.word	0x0800c150
 8003990:	0800c110 	.word	0x0800c110
 8003994:	20000210 	.word	0x20000210
 8003998:	20000204 	.word	0x20000204
 800399c:	0800c130 	.word	0x0800c130
 80039a0:	0800c120 	.word	0x0800c120
 80039a4:	0800c140 	.word	0x0800c140

080039a8 <_APP_CHARGSERV_device_stop.part.0>:

/*
 * ------------------------------chargserv fault---------------------------------
 */

void _APP_CHARGSERV_device_stop(uint8_t mode)
 80039a8:	b510      	push	{r4, lr}
{
	if(mode == 1)
	{
		_MW_CP_mc_relay_off_fast();
 80039aa:	f003 fc8b 	bl	80072c4 <_MW_CP_mc_relay_off_fast>
		_MW_CP_mc_relay_ctl(_OFF);
 80039ae:	2000      	movs	r0, #0
 80039b0:	f003 fc52 	bl	8007258 <_MW_CP_mc_relay_ctl>
		_MW_CP_set_pwm_duty(100);
 80039b4:	2000      	movs	r0, #0
 80039b6:	4902      	ldr	r1, [pc, #8]	; (80039c0 <_APP_CHARGSERV_device_stop.part.0+0x18>)
 80039b8:	f003 fbe2 	bl	8007180 <_MW_CP_set_pwm_duty>
	{
		_MW_CP_cp_relay_ctl(_OFF);
		_MW_CP_mc_relay_ctl(_OFF);
		_MW_CP_set_pwm_duty(100);
	}
}
 80039bc:	bd10      	pop	{r4, pc}
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	40590000 	.word	0x40590000

080039c4 <_APP_CHARGSERV_init_ok>:
	return Charger.state;
 80039c4:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <_APP_CHARGSERV_init_ok+0x30>)
	return _FALSE;
 80039c6:	2000      	movs	r0, #0
	return Charger.state;
 80039c8:	781a      	ldrb	r2, [r3, #0]
{
 80039ca:	b510      	push	{r4, lr}
	if((stemp == Init) && (1 == Charger.reg.init_proceeding))
 80039cc:	2a01      	cmp	r2, #1
 80039ce:	d000      	beq.n	80039d2 <_APP_CHARGSERV_init_ok+0xe>
}
 80039d0:	bd10      	pop	{r4, pc}
	if((stemp == Init) && (1 == Charger.reg.init_proceeding))
 80039d2:	2102      	movs	r1, #2
 80039d4:	0008      	movs	r0, r1
 80039d6:	78da      	ldrb	r2, [r3, #3]
 80039d8:	4010      	ands	r0, r2
 80039da:	4211      	tst	r1, r2
 80039dc:	d0f8      	beq.n	80039d0 <_APP_CHARGSERV_init_ok+0xc>
		Charger.reg.init_proceeding = 0;
 80039de:	3104      	adds	r1, #4
 80039e0:	438a      	bics	r2, r1
 80039e2:	2104      	movs	r1, #4
 80039e4:	430a      	orrs	r2, r1
		_LIB_LOGGING_printf("#### CHARGSERV : init ok #### \r\n");
 80039e6:	4804      	ldr	r0, [pc, #16]	; (80039f8 <_APP_CHARGSERV_init_ok+0x34>)
		Charger.reg.init_proceeding = 0;
 80039e8:	70da      	strb	r2, [r3, #3]
		_LIB_LOGGING_printf("#### CHARGSERV : init ok #### \r\n");
 80039ea:	f007 fa21 	bl	800ae30 <puts>
 80039ee:	2001      	movs	r0, #1
 80039f0:	e7ee      	b.n	80039d0 <_APP_CHARGSERV_init_ok+0xc>
 80039f2:	46c0      	nop			; (mov r8, r8)
 80039f4:	20000100 	.word	0x20000100
 80039f8:	0800c160 	.word	0x0800c160

080039fc <_APP_CHARGSERV_ready_cardtag>:
	return Charger.state;
 80039fc:	4b0a      	ldr	r3, [pc, #40]	; (8003a28 <_APP_CHARGSERV_ready_cardtag+0x2c>)
	return _FALSE;
 80039fe:	2000      	movs	r0, #0
	if((stemp == Ready) && (1 == Charger.reg.ready_standby) &&
 8003a00:	781a      	ldrb	r2, [r3, #0]
{
 8003a02:	b510      	push	{r4, lr}
	if((stemp == Ready) && (1 == Charger.reg.ready_standby) &&
 8003a04:	2a02      	cmp	r2, #2
 8003a06:	d000      	beq.n	8003a0a <_APP_CHARGSERV_ready_cardtag+0xe>
}
 8003a08:	bd10      	pop	{r4, pc}
			               (0 == Charger.reg.ready_ota_request) &&
 8003a0a:	78d9      	ldrb	r1, [r3, #3]
 8003a0c:	3266      	adds	r2, #102	; 0x66
 8003a0e:	400a      	ands	r2, r1
 8003a10:	2a08      	cmp	r2, #8
 8003a12:	d1f9      	bne.n	8003a08 <_APP_CHARGSERV_ready_cardtag+0xc>
		Charger.reg.ready_standby = 0;
 8003a14:	3210      	adds	r2, #16
 8003a16:	4391      	bics	r1, r2
 8003a18:	2210      	movs	r2, #16
 8003a1a:	4311      	orrs	r1, r2
		_LIB_LOGGING_printf("#### CHARGSERV : Card Tag #### \r\n");
 8003a1c:	4803      	ldr	r0, [pc, #12]	; (8003a2c <_APP_CHARGSERV_ready_cardtag+0x30>)
		Charger.reg.ready_standby = 0;
 8003a1e:	70d9      	strb	r1, [r3, #3]
		_LIB_LOGGING_printf("#### CHARGSERV : Card Tag #### \r\n");
 8003a20:	f007 fa06 	bl	800ae30 <puts>
 8003a24:	2001      	movs	r0, #1
 8003a26:	e7ef      	b.n	8003a08 <_APP_CHARGSERV_ready_cardtag+0xc>
 8003a28:	20000100 	.word	0x20000100
 8003a2c:	0800c180 	.word	0x0800c180

08003a30 <_APP_CHARGSERV_autoready_connected>:
	return Charger.state;
 8003a30:	4b0a      	ldr	r3, [pc, #40]	; (8003a5c <_APP_CHARGSERV_autoready_connected+0x2c>)
	return _FALSE;
 8003a32:	2000      	movs	r0, #0
	if((stemp == AutoReady) && (1 == Charger.reg.autoready_standby) &&
 8003a34:	781a      	ldrb	r2, [r3, #0]
{
 8003a36:	b510      	push	{r4, lr}
	if((stemp == AutoReady) && (1 == Charger.reg.autoready_standby) &&
 8003a38:	2a03      	cmp	r2, #3
 8003a3a:	d000      	beq.n	8003a3e <_APP_CHARGSERV_autoready_connected+0xe>
}
 8003a3c:	bd10      	pop	{r4, pc}
	if((stemp == AutoReady) && (1 == Charger.reg.autoready_standby) &&
 8003a3e:	7919      	ldrb	r1, [r3, #4]
 8003a40:	3203      	adds	r2, #3
 8003a42:	400a      	ands	r2, r1
 8003a44:	2a02      	cmp	r2, #2
 8003a46:	d1f9      	bne.n	8003a3c <_APP_CHARGSERV_autoready_connected+0xc>
		Charger.reg.autoready_standby = 0;
 8003a48:	3208      	adds	r2, #8
 8003a4a:	4391      	bics	r1, r2
 8003a4c:	2208      	movs	r2, #8
 8003a4e:	4311      	orrs	r1, r2
		_LIB_LOGGING_printf("#### CHARGSERV : AutoReady_connected #### \r\n");
 8003a50:	4803      	ldr	r0, [pc, #12]	; (8003a60 <_APP_CHARGSERV_autoready_connected+0x30>)
		Charger.reg.autoready_standby = 0;
 8003a52:	7119      	strb	r1, [r3, #4]
		_LIB_LOGGING_printf("#### CHARGSERV : AutoReady_connected #### \r\n");
 8003a54:	f007 f9ec 	bl	800ae30 <puts>
 8003a58:	2001      	movs	r0, #1
 8003a5a:	e7ef      	b.n	8003a3c <_APP_CHARGSERV_autoready_connected+0xc>
 8003a5c:	20000100 	.word	0x20000100
 8003a60:	0800c204 	.word	0x0800c204

08003a64 <_APP_CHARGSERV_usercheck_serverconnectstart>:
	return Charger.state;
 8003a64:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <_APP_CHARGSERV_usercheck_serverconnectstart+0x30>)
	return _FALSE;
 8003a66:	2000      	movs	r0, #0
	if((stemp == UserCheck) && (1 == Charger.reg.usercheck_tagok))
 8003a68:	781a      	ldrb	r2, [r3, #0]
{
 8003a6a:	b510      	push	{r4, lr}
	if((stemp == UserCheck) && (1 == Charger.reg.usercheck_tagok))
 8003a6c:	2a04      	cmp	r2, #4
 8003a6e:	d000      	beq.n	8003a72 <_APP_CHARGSERV_usercheck_serverconnectstart+0xe>
}
 8003a70:	bd10      	pop	{r4, pc}
	if((stemp == UserCheck) && (1 == Charger.reg.usercheck_tagok))
 8003a72:	2110      	movs	r1, #16
 8003a74:	0008      	movs	r0, r1
 8003a76:	791a      	ldrb	r2, [r3, #4]
 8003a78:	4010      	ands	r0, r2
 8003a7a:	4211      	tst	r1, r2
 8003a7c:	d0f8      	beq.n	8003a70 <_APP_CHARGSERV_usercheck_serverconnectstart+0xc>
		Charger.reg.usercheck_tagok = 0;
 8003a7e:	3120      	adds	r1, #32
 8003a80:	438a      	bics	r2, r1
 8003a82:	2120      	movs	r1, #32
 8003a84:	430a      	orrs	r2, r1
		_LIB_LOGGING_printf("#### CHARGSERV : Server Connect Start #### \r\n");
 8003a86:	4804      	ldr	r0, [pc, #16]	; (8003a98 <_APP_CHARGSERV_usercheck_serverconnectstart+0x34>)
		Charger.reg.usercheck_tagok = 0;
 8003a88:	711a      	strb	r2, [r3, #4]
		_LIB_LOGGING_printf("#### CHARGSERV : Server Connect Start #### \r\n");
 8003a8a:	f007 f9d1 	bl	800ae30 <puts>
 8003a8e:	2001      	movs	r0, #1
 8003a90:	e7ee      	b.n	8003a70 <_APP_CHARGSERV_usercheck_serverconnectstart+0xc>
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	20000100 	.word	0x20000100
 8003a98:	0800c230 	.word	0x0800c230

08003a9c <_APP_CHARGSERV_usercheck_user_ok>:
	return Charger.state;
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <_APP_CHARGSERV_usercheck_user_ok+0x30>)
	return _FALSE;
 8003a9e:	2000      	movs	r0, #0
	if((stemp == UserCheck) && (1 == Charger.reg.usercheck_serverconnecting))
 8003aa0:	781a      	ldrb	r2, [r3, #0]
{
 8003aa2:	b510      	push	{r4, lr}
	if((stemp == UserCheck) && (1 == Charger.reg.usercheck_serverconnecting))
 8003aa4:	2a04      	cmp	r2, #4
 8003aa6:	d000      	beq.n	8003aaa <_APP_CHARGSERV_usercheck_user_ok+0xe>
}
 8003aa8:	bd10      	pop	{r4, pc}
	if((stemp == UserCheck) && (1 == Charger.reg.usercheck_serverconnecting))
 8003aaa:	2120      	movs	r1, #32
 8003aac:	0008      	movs	r0, r1
 8003aae:	791a      	ldrb	r2, [r3, #4]
 8003ab0:	4010      	ands	r0, r2
 8003ab2:	4211      	tst	r1, r2
 8003ab4:	d0f8      	beq.n	8003aa8 <_APP_CHARGSERV_usercheck_user_ok+0xc>
		Charger.reg.usercheck_serverconnecting = 0;
 8003ab6:	3901      	subs	r1, #1
 8003ab8:	4011      	ands	r1, r2
 8003aba:	2280      	movs	r2, #128	; 0x80
 8003abc:	4252      	negs	r2, r2
 8003abe:	430a      	orrs	r2, r1
		_LIB_LOGGING_printf("#### CHARGSERV : UserCheck ok #### \r\n");
 8003ac0:	4803      	ldr	r0, [pc, #12]	; (8003ad0 <_APP_CHARGSERV_usercheck_user_ok+0x34>)
		Charger.reg.usercheck_serverconnecting = 0;
 8003ac2:	711a      	strb	r2, [r3, #4]
		_LIB_LOGGING_printf("#### CHARGSERV : UserCheck ok #### \r\n");
 8003ac4:	f007 f9b4 	bl	800ae30 <puts>
 8003ac8:	2001      	movs	r0, #1
 8003aca:	e7ed      	b.n	8003aa8 <_APP_CHARGSERV_usercheck_user_ok+0xc>
 8003acc:	20000100 	.word	0x20000100
 8003ad0:	0800c260 	.word	0x0800c260

08003ad4 <_APP_CHARGSERV_usercheck_user_retry>:
	return Charger.state;
 8003ad4:	4b0d      	ldr	r3, [pc, #52]	; (8003b0c <_APP_CHARGSERV_usercheck_user_retry+0x38>)
	return _FALSE;
 8003ad6:	2000      	movs	r0, #0
	if((stemp == UserCheck) && (1 == Charger.reg.usercheck_serverconnecting))
 8003ad8:	781a      	ldrb	r2, [r3, #0]
{
 8003ada:	b510      	push	{r4, lr}
	if((stemp == UserCheck) && (1 == Charger.reg.usercheck_serverconnecting))
 8003adc:	2a04      	cmp	r2, #4
 8003ade:	d000      	beq.n	8003ae2 <_APP_CHARGSERV_usercheck_user_retry+0xe>
}
 8003ae0:	bd10      	pop	{r4, pc}
	if((stemp == UserCheck) && (1 == Charger.reg.usercheck_serverconnecting))
 8003ae2:	2120      	movs	r1, #32
 8003ae4:	0008      	movs	r0, r1
 8003ae6:	791a      	ldrb	r2, [r3, #4]
 8003ae8:	4010      	ands	r0, r2
 8003aea:	4211      	tst	r1, r2
 8003aec:	d0f8      	beq.n	8003ae0 <_APP_CHARGSERV_usercheck_user_retry+0xc>
		Charger.reg.usercheck_serverconnecting = 0;
 8003aee:	889a      	ldrh	r2, [r3, #4]
 8003af0:	4907      	ldr	r1, [pc, #28]	; (8003b10 <_APP_CHARGSERV_usercheck_user_retry+0x3c>)
		_LIB_USERDELAY_stop(&gTimeout_usercheck);
 8003af2:	4808      	ldr	r0, [pc, #32]	; (8003b14 <_APP_CHARGSERV_usercheck_user_retry+0x40>)
		Charger.reg.usercheck_serverconnecting = 0;
 8003af4:	4011      	ands	r1, r2
 8003af6:	2280      	movs	r2, #128	; 0x80
 8003af8:	0052      	lsls	r2, r2, #1
 8003afa:	430a      	orrs	r2, r1
 8003afc:	809a      	strh	r2, [r3, #4]
		_LIB_USERDELAY_stop(&gTimeout_usercheck);
 8003afe:	f003 faa9 	bl	8007054 <_LIB_USERDELAY_stop>
		_LIB_LOGGING_printf("#### CHARGSERV : UserCheck Fail. Retry #### \r\n");
 8003b02:	4805      	ldr	r0, [pc, #20]	; (8003b18 <_APP_CHARGSERV_usercheck_user_retry+0x44>)
 8003b04:	f007 f994 	bl	800ae30 <puts>
 8003b08:	2001      	movs	r0, #1
 8003b0a:	e7e9      	b.n	8003ae0 <_APP_CHARGSERV_usercheck_user_retry+0xc>
 8003b0c:	20000100 	.word	0x20000100
 8003b10:	fffffe9f 	.word	0xfffffe9f
 8003b14:	200002d0 	.word	0x200002d0
 8003b18:	0800c288 	.word	0x0800c288

08003b1c <_APP_CHARGSERV_connect_ok>:
	return Charger.state;
 8003b1c:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <_APP_CHARGSERV_connect_ok+0x30>)
	return _FALSE;
 8003b1e:	2000      	movs	r0, #0
	if((stemp == Connect) && (1 == Charger.reg.connect_wait))
 8003b20:	781a      	ldrb	r2, [r3, #0]
{
 8003b22:	b510      	push	{r4, lr}
	if((stemp == Connect) && (1 == Charger.reg.connect_wait))
 8003b24:	2a05      	cmp	r2, #5
 8003b26:	d000      	beq.n	8003b2a <_APP_CHARGSERV_connect_ok+0xe>
}
 8003b28:	bd10      	pop	{r4, pc}
	if((stemp == Connect) && (1 == Charger.reg.connect_wait))
 8003b2a:	2102      	movs	r1, #2
 8003b2c:	0008      	movs	r0, r1
 8003b2e:	795a      	ldrb	r2, [r3, #5]
 8003b30:	4010      	ands	r0, r2
 8003b32:	4211      	tst	r1, r2
 8003b34:	d0f8      	beq.n	8003b28 <_APP_CHARGSERV_connect_ok+0xc>
		Charger.reg.connect_wait = 0;
 8003b36:	3104      	adds	r1, #4
 8003b38:	438a      	bics	r2, r1
 8003b3a:	2104      	movs	r1, #4
 8003b3c:	430a      	orrs	r2, r1
		_LIB_LOGGING_printf("#### CHARGSERV : EV Connect ok #### \r\n");
 8003b3e:	4804      	ldr	r0, [pc, #16]	; (8003b50 <_APP_CHARGSERV_connect_ok+0x34>)
		Charger.reg.connect_wait = 0;
 8003b40:	715a      	strb	r2, [r3, #5]
		_LIB_LOGGING_printf("#### CHARGSERV : EV Connect ok #### \r\n");
 8003b42:	f007 f975 	bl	800ae30 <puts>
 8003b46:	2001      	movs	r0, #1
 8003b48:	e7ee      	b.n	8003b28 <_APP_CHARGSERV_connect_ok+0xc>
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	20000100 	.word	0x20000100
 8003b50:	0800c2b8 	.word	0x0800c2b8

08003b54 <_APP_CHARGSERV_connect_timeout>:
	return Charger.state;
 8003b54:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <_APP_CHARGSERV_connect_timeout+0x30>)
	return _FALSE;
 8003b56:	2000      	movs	r0, #0
	if((stemp == Connect) && (1 == Charger.reg.connect_wait))
 8003b58:	781a      	ldrb	r2, [r3, #0]
{
 8003b5a:	b510      	push	{r4, lr}
	if((stemp == Connect) && (1 == Charger.reg.connect_wait))
 8003b5c:	2a05      	cmp	r2, #5
 8003b5e:	d000      	beq.n	8003b62 <_APP_CHARGSERV_connect_timeout+0xe>
}
 8003b60:	bd10      	pop	{r4, pc}
	if((stemp == Connect) && (1 == Charger.reg.connect_wait))
 8003b62:	2102      	movs	r1, #2
 8003b64:	0008      	movs	r0, r1
 8003b66:	795a      	ldrb	r2, [r3, #5]
 8003b68:	4010      	ands	r0, r2
 8003b6a:	4211      	tst	r1, r2
 8003b6c:	d0f8      	beq.n	8003b60 <_APP_CHARGSERV_connect_timeout+0xc>
		Charger.reg.connect_wait = 0;
 8003b6e:	3108      	adds	r1, #8
 8003b70:	438a      	bics	r2, r1
 8003b72:	2108      	movs	r1, #8
 8003b74:	430a      	orrs	r2, r1
		_LIB_LOGGING_printf("#### CHARGSERV : EV Connect Timeout #### \r\n");
 8003b76:	4804      	ldr	r0, [pc, #16]	; (8003b88 <_APP_CHARGSERV_connect_timeout+0x34>)
		Charger.reg.connect_wait = 0;
 8003b78:	715a      	strb	r2, [r3, #5]
		_LIB_LOGGING_printf("#### CHARGSERV : EV Connect Timeout #### \r\n");
 8003b7a:	f007 f959 	bl	800ae30 <puts>
 8003b7e:	2001      	movs	r0, #1
 8003b80:	e7ee      	b.n	8003b60 <_APP_CHARGSERV_connect_timeout+0xc>
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	20000100 	.word	0x20000100
 8003b88:	0800c2e0 	.word	0x0800c2e0

08003b8c <_APP_CHARGSERV_charging_ok>:
	return Charger.state;
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <_APP_CHARGSERV_charging_ok+0x30>)
	return _FALSE;
 8003b8e:	2000      	movs	r0, #0
	if((stemp == Charging) && (1 == Charger.reg.charging_proceeding))
 8003b90:	781a      	ldrb	r2, [r3, #0]
{
 8003b92:	b510      	push	{r4, lr}
	if((stemp == Charging) && (1 == Charger.reg.charging_proceeding))
 8003b94:	2a06      	cmp	r2, #6
 8003b96:	d000      	beq.n	8003b9a <_APP_CHARGSERV_charging_ok+0xe>
}
 8003b98:	bd10      	pop	{r4, pc}
	if((stemp == Charging) && (1 == Charger.reg.charging_proceeding))
 8003b9a:	2110      	movs	r1, #16
 8003b9c:	0008      	movs	r0, r1
 8003b9e:	795a      	ldrb	r2, [r3, #5]
 8003ba0:	4010      	ands	r0, r2
 8003ba2:	4211      	tst	r1, r2
 8003ba4:	d0f8      	beq.n	8003b98 <_APP_CHARGSERV_charging_ok+0xc>
		Charger.reg.charging_proceeding = 0;
 8003ba6:	315f      	adds	r1, #95	; 0x5f
 8003ba8:	4011      	ands	r1, r2
 8003baa:	2280      	movs	r2, #128	; 0x80
 8003bac:	4252      	negs	r2, r2
 8003bae:	430a      	orrs	r2, r1
		_LIB_LOGGING_printf("#### CHARGSERV : EV Charging ok #### \r\n");
 8003bb0:	4803      	ldr	r0, [pc, #12]	; (8003bc0 <_APP_CHARGSERV_charging_ok+0x34>)
		Charger.reg.charging_proceeding = 0;
 8003bb2:	715a      	strb	r2, [r3, #5]
		_LIB_LOGGING_printf("#### CHARGSERV : EV Charging ok #### \r\n");
 8003bb4:	f007 f93c 	bl	800ae30 <puts>
 8003bb8:	2001      	movs	r0, #1
 8003bba:	e7ed      	b.n	8003b98 <_APP_CHARGSERV_charging_ok+0xc>
 8003bbc:	20000100 	.word	0x20000100
 8003bc0:	0800c30c 	.word	0x0800c30c

08003bc4 <_APP_CHARGSERV_finish_ok>:
	return Charger.state;
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <_APP_CHARGSERV_finish_ok+0x30>)
	return _FALSE;
 8003bc6:	2000      	movs	r0, #0
	if((stemp == Finish) && (1 == Charger.reg.finish_proceeding))
 8003bc8:	781a      	ldrb	r2, [r3, #0]
{
 8003bca:	b510      	push	{r4, lr}
	if((stemp == Finish) && (1 == Charger.reg.finish_proceeding))
 8003bcc:	2a07      	cmp	r2, #7
 8003bce:	d000      	beq.n	8003bd2 <_APP_CHARGSERV_finish_ok+0xe>
}
 8003bd0:	bd10      	pop	{r4, pc}
	if((stemp == Finish) && (1 == Charger.reg.finish_proceeding))
 8003bd2:	2110      	movs	r1, #16
 8003bd4:	0008      	movs	r0, r1
 8003bd6:	799a      	ldrb	r2, [r3, #6]
 8003bd8:	4010      	ands	r0, r2
 8003bda:	4211      	tst	r1, r2
 8003bdc:	d0f8      	beq.n	8003bd0 <_APP_CHARGSERV_finish_ok+0xc>
		Charger.reg.finish_proceeding = 0;
 8003bde:	3140      	adds	r1, #64	; 0x40
 8003be0:	438a      	bics	r2, r1
 8003be2:	2140      	movs	r1, #64	; 0x40
 8003be4:	430a      	orrs	r2, r1
		_LIB_LOGGING_printf("#### CHARGSERV : Finish ok #### \r\n");
 8003be6:	4804      	ldr	r0, [pc, #16]	; (8003bf8 <_APP_CHARGSERV_finish_ok+0x34>)
		Charger.reg.finish_proceeding = 0;
 8003be8:	719a      	strb	r2, [r3, #6]
		_LIB_LOGGING_printf("#### CHARGSERV : Finish ok #### \r\n");
 8003bea:	f007 f921 	bl	800ae30 <puts>
 8003bee:	2001      	movs	r0, #1
 8003bf0:	e7ee      	b.n	8003bd0 <_APP_CHARGSERV_finish_ok+0xc>
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	20000100 	.word	0x20000100
 8003bf8:	0800c334 	.word	0x0800c334

08003bfc <_APP_CHARGSERV_fault_set>:
{
 8003bfc:	b510      	push	{r4, lr}
	return Charger.state;
 8003bfe:	4c0b      	ldr	r4, [pc, #44]	; (8003c2c <_APP_CHARGSERV_fault_set+0x30>)
	return _FALSE;
 8003c00:	2000      	movs	r0, #0
	return Charger.state;
 8003c02:	7823      	ldrb	r3, [r4, #0]
	if(stemp != Fault)
 8003c04:	2b09      	cmp	r3, #9
 8003c06:	d100      	bne.n	8003c0a <_APP_CHARGSERV_fault_set+0xe>
}
 8003c08:	bd10      	pop	{r4, pc}
	charger_reset_reg_all_bit(currentstate);
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	f7ff fd88 	bl	8003720 <charger_reset_reg_all_bit>
	Charger.state = cstate;
 8003c10:	2309      	movs	r3, #9
		Charger.reg.fault_set = 1;
 8003c12:	4a07      	ldr	r2, [pc, #28]	; (8003c30 <_APP_CHARGSERV_fault_set+0x34>)
	Charger.state = cstate;
 8003c14:	7023      	strb	r3, [r4, #0]
		Charger.reg.fault_set = 1;
 8003c16:	88e3      	ldrh	r3, [r4, #6]
			_LIB_LOGGING_printf("#### CHARGSERV : Fault Set #### \r\n");
 8003c18:	4806      	ldr	r0, [pc, #24]	; (8003c34 <_APP_CHARGSERV_fault_set+0x38>)
		Charger.reg.fault_set = 1;
 8003c1a:	401a      	ands	r2, r3
 8003c1c:	4b06      	ldr	r3, [pc, #24]	; (8003c38 <_APP_CHARGSERV_fault_set+0x3c>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	80e3      	strh	r3, [r4, #6]
			_LIB_LOGGING_printf("#### CHARGSERV : Fault Set #### \r\n");
 8003c22:	f007 f905 	bl	800ae30 <puts>
		return _TRUE;
 8003c26:	2001      	movs	r0, #1
 8003c28:	e7ee      	b.n	8003c08 <_APP_CHARGSERV_fault_set+0xc>
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	20000100 	.word	0x20000100
 8003c30:	00001f7f 	.word	0x00001f7f
 8003c34:	0800c358 	.word	0x0800c358
 8003c38:	ffffa080 	.word	0xffffa080

08003c3c <_APP_CHARGSERV_complete_duty_ondelay>:
{
 8003c3c:	b570      	push	{r4, r5, r6, lr}
	if(1 == _LIB_USERDELAY_isfired(&gDelay_setduty))
 8003c3e:	4d08      	ldr	r5, [pc, #32]	; (8003c60 <_APP_CHARGSERV_complete_duty_ondelay+0x24>)
		return _FALSE;
 8003c40:	2400      	movs	r4, #0
	if(1 == _LIB_USERDELAY_isfired(&gDelay_setduty))
 8003c42:	0028      	movs	r0, r5
 8003c44:	f003 fa0a 	bl	800705c <_LIB_USERDELAY_isfired>
 8003c48:	2801      	cmp	r0, #1
 8003c4a:	d001      	beq.n	8003c50 <_APP_CHARGSERV_complete_duty_ondelay+0x14>
}
 8003c4c:	0020      	movs	r0, r4
 8003c4e:	bd70      	pop	{r4, r5, r6, pc}
		_LIB_USERDELAY_stop(&gDelay_setduty);
 8003c50:	0028      	movs	r0, r5
 8003c52:	f003 f9ff 	bl	8007054 <_LIB_USERDELAY_stop>
		charger_duty_ondelay_flag = 0;
 8003c56:	4b03      	ldr	r3, [pc, #12]	; (8003c64 <_APP_CHARGSERV_complete_duty_ondelay+0x28>)
 8003c58:	701c      	strb	r4, [r3, #0]
 8003c5a:	3401      	adds	r4, #1
 8003c5c:	e7f6      	b.n	8003c4c <_APP_CHARGSERV_complete_duty_ondelay+0x10>
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	200001ec 	.word	0x200001ec
 8003c64:	2000018a 	.word	0x2000018a

08003c68 <charger_set_modecfg>:
	if(CHARGSERV_READ_MODE_7KW)
 8003c68:	2180      	movs	r1, #128	; 0x80
{
 8003c6a:	b570      	push	{r4, r5, r6, lr}
	if(CHARGSERV_READ_MODE_7KW)
 8003c6c:	4841      	ldr	r0, [pc, #260]	; (8003d74 <charger_set_modecfg+0x10c>)
 8003c6e:	0209      	lsls	r1, r1, #8
 8003c70:	f004 ff28 	bl	8008ac4 <HAL_GPIO_ReadPin>
 8003c74:	2801      	cmp	r0, #1
 8003c76:	d064      	beq.n	8003d42 <charger_set_modecfg+0xda>
	else if(CHARGSERV_READ_MODE_11KW)
 8003c78:	2180      	movs	r1, #128	; 0x80
 8003c7a:	483e      	ldr	r0, [pc, #248]	; (8003d74 <charger_set_modecfg+0x10c>)
 8003c7c:	0209      	lsls	r1, r1, #8
 8003c7e:	f004 ff21 	bl	8008ac4 <HAL_GPIO_ReadPin>
 8003c82:	2800      	cmp	r0, #0
 8003c84:	d03f      	beq.n	8003d06 <charger_set_modecfg+0x9e>
		_LIB_LOGGING_printf("mode : EVSE_7KW\r\n");
 8003c86:	483c      	ldr	r0, [pc, #240]	; (8003d78 <charger_set_modecfg+0x110>)
 8003c88:	f007 f8d2 	bl	800ae30 <puts>
		mode_temp = mode_7KW;
 8003c8c:	2502      	movs	r5, #2
	if(CHARGSERV_READ_DEFAULT_START_MODE)
 8003c8e:	2180      	movs	r1, #128	; 0x80
 8003c90:	4838      	ldr	r0, [pc, #224]	; (8003d74 <charger_set_modecfg+0x10c>)
 8003c92:	0189      	lsls	r1, r1, #6
 8003c94:	f004 ff16 	bl	8008ac4 <HAL_GPIO_ReadPin>
 8003c98:	2800      	cmp	r0, #0
 8003c9a:	d062      	beq.n	8003d62 <charger_set_modecfg+0xfa>
 8003c9c:	4c37      	ldr	r4, [pc, #220]	; (8003d7c <charger_set_modecfg+0x114>)
	if(CHARGSERV_READ_RESTART_FULLDETECT_ACTIVATION)
 8003c9e:	2180      	movs	r1, #128	; 0x80
 8003ca0:	4834      	ldr	r0, [pc, #208]	; (8003d74 <charger_set_modecfg+0x10c>)
 8003ca2:	0149      	lsls	r1, r1, #5
 8003ca4:	f004 ff0e 	bl	8008ac4 <HAL_GPIO_ReadPin>
 8003ca8:	2800      	cmp	r0, #0
 8003caa:	d053      	beq.n	8003d54 <charger_set_modecfg+0xec>
	if(CHARGSERV_AUTOSTART_MODE)
 8003cac:	2180      	movs	r1, #128	; 0x80
 8003cae:	2090      	movs	r0, #144	; 0x90
 8003cb0:	0189      	lsls	r1, r1, #6
 8003cb2:	05c0      	lsls	r0, r0, #23
	Charger.mode = cmode;
 8003cb4:	70a5      	strb	r5, [r4, #2]
	if(CHARGSERV_AUTOSTART_MODE)
 8003cb6:	f004 ff05 	bl	8008ac4 <HAL_GPIO_ReadPin>
 8003cba:	2800      	cmp	r0, #0
 8003cbc:	d02f      	beq.n	8003d1e <charger_set_modecfg+0xb6>
	if(0 == Charger.autostartmode_flag)
 8003cbe:	2383      	movs	r3, #131	; 0x83
 8003cc0:	5ce3      	ldrb	r3, [r4, r3]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d131      	bne.n	8003d2a <charger_set_modecfg+0xc2>
		Charger.reg.dev_flag = 0;
 8003cc6:	2201      	movs	r2, #1
		GPO_MC_TURN_OFF_ENABLE;//_MW_GPIO_set_gpo(MC_TURN_OFF, _ON);
 8003cc8:	2090      	movs	r0, #144	; 0x90
		Charger.reg.dev_flag = 0;
 8003cca:	78e3      	ldrb	r3, [r4, #3]
		GPO_MC_TURN_OFF_ENABLE;//_MW_GPIO_set_gpo(MC_TURN_OFF, _ON);
 8003ccc:	2140      	movs	r1, #64	; 0x40
		Charger.reg.dev_flag = 0;
 8003cce:	4393      	bics	r3, r2
		GPO_MC_TURN_OFF_ENABLE;//_MW_GPIO_set_gpo(MC_TURN_OFF, _ON);
 8003cd0:	05c0      	lsls	r0, r0, #23
		Charger.reg.dev_flag = 0;
 8003cd2:	70e3      	strb	r3, [r4, #3]
		GPO_MC_TURN_OFF_ENABLE;//_MW_GPIO_set_gpo(MC_TURN_OFF, _ON);
 8003cd4:	f004 fefc 	bl	8008ad0 <HAL_GPIO_WritePin>
		GPO_MC_TURN_ON_DISABLE;//_MW_GPIO_set_gpo(MC_TURN_ON, _OFF);
 8003cd8:	2200      	movs	r2, #0
		GPO_MC_TURN_ON_ENABLE;//_MW_GPIO_set_gpo(MC_TURN_ON, _OFF);
 8003cda:	2090      	movs	r0, #144	; 0x90
 8003cdc:	2180      	movs	r1, #128	; 0x80
 8003cde:	05c0      	lsls	r0, r0, #23
 8003ce0:	f004 fef6 	bl	8008ad0 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8003ce4:	2032      	movs	r0, #50	; 0x32
 8003ce6:	f004 fa0d 	bl	8008104 <HAL_Delay>
		GPO_MC_TURN_OFF_DISABLE;//_MW_GPIO_set_gpo(MC_TURN_OFF, _OFF);
 8003cea:	2090      	movs	r0, #144	; 0x90
 8003cec:	2200      	movs	r2, #0
 8003cee:	2140      	movs	r1, #64	; 0x40
 8003cf0:	05c0      	lsls	r0, r0, #23
 8003cf2:	f004 feed 	bl	8008ad0 <HAL_GPIO_WritePin>
		GPO_MC_TURN_ON_DISABLE;//_MW_GPIO_set_gpo(MC_TURN_ON, _OFF);
 8003cf6:	2090      	movs	r0, #144	; 0x90
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	2180      	movs	r1, #128	; 0x80
 8003cfc:	05c0      	lsls	r0, r0, #23
 8003cfe:	f004 fee7 	bl	8008ad0 <HAL_GPIO_WritePin>
}
 8003d02:	2001      	movs	r0, #1
 8003d04:	bd70      	pop	{r4, r5, r6, pc}
	else if(CHARGSERV_READ_MODE_11KW)
 8003d06:	2180      	movs	r1, #128	; 0x80
 8003d08:	481a      	ldr	r0, [pc, #104]	; (8003d74 <charger_set_modecfg+0x10c>)
 8003d0a:	01c9      	lsls	r1, r1, #7
 8003d0c:	f004 feda 	bl	8008ac4 <HAL_GPIO_ReadPin>
 8003d10:	2801      	cmp	r0, #1
 8003d12:	d1b8      	bne.n	8003c86 <charger_set_modecfg+0x1e>
		_LIB_LOGGING_printf("mode : EVSE_11KW\r\n");
 8003d14:	481a      	ldr	r0, [pc, #104]	; (8003d80 <charger_set_modecfg+0x118>)
 8003d16:	f007 f88b 	bl	800ae30 <puts>
		mode_temp = mode_11KW;
 8003d1a:	2503      	movs	r5, #3
 8003d1c:	e7b7      	b.n	8003c8e <charger_set_modecfg+0x26>
		_LIB_LOGGING_printf("mode : Auto Start Mode!! \r\n");
 8003d1e:	4819      	ldr	r0, [pc, #100]	; (8003d84 <charger_set_modecfg+0x11c>)
 8003d20:	f007 f886 	bl	800ae30 <puts>
		Charger.autostartmode_flag = 1;
 8003d24:	2383      	movs	r3, #131	; 0x83
 8003d26:	2201      	movs	r2, #1
 8003d28:	54e2      	strb	r2, [r4, r3]
		Charger.reg.dev_flag = 1;
 8003d2a:	2201      	movs	r2, #1
		GPO_MC_TURN_OFF_DISABLE;//_MW_GPIO_set_gpo(MC_TURN_OFF, _ON);
 8003d2c:	2090      	movs	r0, #144	; 0x90
		Charger.reg.dev_flag = 1;
 8003d2e:	78e3      	ldrb	r3, [r4, #3]
		GPO_MC_TURN_OFF_DISABLE;//_MW_GPIO_set_gpo(MC_TURN_OFF, _ON);
 8003d30:	2140      	movs	r1, #64	; 0x40
		Charger.reg.dev_flag = 1;
 8003d32:	4313      	orrs	r3, r2
		GPO_MC_TURN_OFF_DISABLE;//_MW_GPIO_set_gpo(MC_TURN_OFF, _ON);
 8003d34:	05c0      	lsls	r0, r0, #23
 8003d36:	2200      	movs	r2, #0
		Charger.reg.dev_flag = 1;
 8003d38:	70e3      	strb	r3, [r4, #3]
		GPO_MC_TURN_OFF_DISABLE;//_MW_GPIO_set_gpo(MC_TURN_OFF, _ON);
 8003d3a:	f004 fec9 	bl	8008ad0 <HAL_GPIO_WritePin>
		GPO_MC_TURN_ON_ENABLE;//_MW_GPIO_set_gpo(MC_TURN_ON, _OFF);
 8003d3e:	2201      	movs	r2, #1
 8003d40:	e7cb      	b.n	8003cda <charger_set_modecfg+0x72>
	if(CHARGSERV_READ_MODE_7KW)
 8003d42:	2180      	movs	r1, #128	; 0x80
 8003d44:	480b      	ldr	r0, [pc, #44]	; (8003d74 <charger_set_modecfg+0x10c>)
 8003d46:	01c9      	lsls	r1, r1, #7
 8003d48:	f004 febc 	bl	8008ac4 <HAL_GPIO_ReadPin>
 8003d4c:	2801      	cmp	r0, #1
 8003d4e:	d000      	beq.n	8003d52 <charger_set_modecfg+0xea>
 8003d50:	e792      	b.n	8003c78 <charger_set_modecfg+0x10>
 8003d52:	e798      	b.n	8003c86 <charger_set_modecfg+0x1e>
		_LIB_LOGGING_printf("Option __ RESTART_FULLDETECT_ACTIVATION : Disable \r\n");
 8003d54:	480c      	ldr	r0, [pc, #48]	; (8003d88 <charger_set_modecfg+0x120>)
 8003d56:	f007 f86b 	bl	800ae30 <puts>
		Charger.restart_fulldetect_act = 1;
 8003d5a:	2385      	movs	r3, #133	; 0x85
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	54e2      	strb	r2, [r4, r3]
 8003d60:	e7a4      	b.n	8003cac <charger_set_modecfg+0x44>
		_LIB_LOGGING_printf("Option __ DEFAULT_START : Auto START \r\n");
 8003d62:	480a      	ldr	r0, [pc, #40]	; (8003d8c <charger_set_modecfg+0x124>)
 8003d64:	f007 f864 	bl	800ae30 <puts>
		Charger.default_start_mode = 1;
 8003d68:	2384      	movs	r3, #132	; 0x84
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	4c03      	ldr	r4, [pc, #12]	; (8003d7c <charger_set_modecfg+0x114>)
 8003d6e:	54e2      	strb	r2, [r4, r3]
 8003d70:	e795      	b.n	8003c9e <charger_set_modecfg+0x36>
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	48000400 	.word	0x48000400
 8003d78:	0800c3a0 	.word	0x0800c3a0
 8003d7c:	20000100 	.word	0x20000100
 8003d80:	0800c3b4 	.word	0x0800c3b4
 8003d84:	0800c424 	.word	0x0800c424
 8003d88:	0800c3f0 	.word	0x0800c3f0
 8003d8c:	0800c3c8 	.word	0x0800c3c8

08003d90 <_APP_CHARGSERV_wake_up_seq_init>:
	Charger.wake_up_seq_flag = 0;
 8003d90:	2200      	movs	r2, #0
 8003d92:	2165      	movs	r1, #101	; 0x65
 8003d94:	4b0a      	ldr	r3, [pc, #40]	; (8003dc0 <_APP_CHARGSERV_wake_up_seq_init+0x30>)
{
 8003d96:	b510      	push	{r4, lr}
	_LIB_LOGGING_printf("wuseq disable\r\n");
 8003d98:	480a      	ldr	r0, [pc, #40]	; (8003dc4 <_APP_CHARGSERV_wake_up_seq_init+0x34>)
	Charger.wake_up_seq_flag = 0;
 8003d9a:	545a      	strb	r2, [r3, r1]
	Charger.wake_up_seq_step = NON;
 8003d9c:	3102      	adds	r1, #2
 8003d9e:	545a      	strb	r2, [r3, r1]
	_LIB_LOGGING_printf("wuseq disable\r\n");
 8003da0:	f007 f846 	bl	800ae30 <puts>
	_LIB_USERDELAY_set(&gDelay_wusqtimeout, CHARGSERV_WUSQ_NORMAL_TIMEOUT);
 8003da4:	4908      	ldr	r1, [pc, #32]	; (8003dc8 <_APP_CHARGSERV_wake_up_seq_init+0x38>)
 8003da6:	4809      	ldr	r0, [pc, #36]	; (8003dcc <_APP_CHARGSERV_wake_up_seq_init+0x3c>)
 8003da8:	f003 f93a 	bl	8007020 <_LIB_USERDELAY_set>
	_LIB_USERDELAY_set(&gDelay_wusqcpoff, CHARGSERV_WUSQ_CP_OFF);
 8003dac:	4908      	ldr	r1, [pc, #32]	; (8003dd0 <_APP_CHARGSERV_wake_up_seq_init+0x40>)
 8003dae:	4809      	ldr	r0, [pc, #36]	; (8003dd4 <_APP_CHARGSERV_wake_up_seq_init+0x44>)
 8003db0:	f003 f936 	bl	8007020 <_LIB_USERDELAY_set>
	_LIB_USERDELAY_set(&gDelay_wusqpwmoff, CHARGSERV_WUSQ_PWM_OFF);
 8003db4:	21c8      	movs	r1, #200	; 0xc8
 8003db6:	4808      	ldr	r0, [pc, #32]	; (8003dd8 <_APP_CHARGSERV_wake_up_seq_init+0x48>)
 8003db8:	0089      	lsls	r1, r1, #2
 8003dba:	f003 f931 	bl	8007020 <_LIB_USERDELAY_set>
}
 8003dbe:	bd10      	pop	{r4, pc}
 8003dc0:	20000100 	.word	0x20000100
 8003dc4:	0800c110 	.word	0x0800c110
 8003dc8:	00007530 	.word	0x00007530
 8003dcc:	20000210 	.word	0x20000210
 8003dd0:	00000bb8 	.word	0x00000bb8
 8003dd4:	200001f8 	.word	0x200001f8
 8003dd8:	20000204 	.word	0x20000204

08003ddc <_APP_CHARGSERV_state_machine>:
{
 8003ddc:	b570      	push	{r4, r5, r6, lr}
	return Charger.state;
 8003dde:	4c90      	ldr	r4, [pc, #576]	; (8004020 <_APP_CHARGSERV_state_machine+0x244>)
 8003de0:	7823      	ldrb	r3, [r4, #0]
 8003de2:	2b0a      	cmp	r3, #10
 8003de4:	d818      	bhi.n	8003e18 <_APP_CHARGSERV_state_machine+0x3c>
 8003de6:	4a8f      	ldr	r2, [pc, #572]	; (8004024 <_APP_CHARGSERV_state_machine+0x248>)
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	58d3      	ldr	r3, [r2, r3]
 8003dec:	469f      	mov	pc, r3
			if((1 == Charger.reg.finish_ok) &&
 8003dee:	4a8e      	ldr	r2, [pc, #568]	; (8004028 <_APP_CHARGSERV_state_machine+0x24c>)
 8003df0:	88e3      	ldrh	r3, [r4, #6]
 8003df2:	4013      	ands	r3, r2
 8003df4:	4a8d      	ldr	r2, [pc, #564]	; (800402c <_APP_CHARGSERV_state_machine+0x250>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d10e      	bne.n	8003e18 <_APP_CHARGSERV_state_machine+0x3c>
				if(1 == Charger.automode_active)
 8003dfa:	237b      	movs	r3, #123	; 0x7b
 8003dfc:	5ce3      	ldrb	r3, [r4, r3]
	charger_reset_reg_all_bit(currentstate);
 8003dfe:	2007      	movs	r0, #7
				if(1 == Charger.automode_active)
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d155      	bne.n	8003eb0 <_APP_CHARGSERV_state_machine+0xd4>
	charger_reset_reg_all_bit(currentstate);
 8003e04:	f7ff fc8c 	bl	8003720 <charger_reset_reg_all_bit>
	Charger.state = cstate;
 8003e08:	2303      	movs	r3, #3
					Charger.reg.autoready_standby = 1;
 8003e0a:	4a89      	ldr	r2, [pc, #548]	; (8004030 <_APP_CHARGSERV_state_machine+0x254>)
	Charger.state = cstate;
 8003e0c:	7023      	strb	r3, [r4, #0]
					Charger.reg.autoready_standby = 1;
 8003e0e:	6863      	ldr	r3, [r4, #4]
 8003e10:	401a      	ands	r2, r3
 8003e12:	4b88      	ldr	r3, [pc, #544]	; (8004034 <_APP_CHARGSERV_state_machine+0x258>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	6063      	str	r3, [r4, #4]
}
 8003e18:	bd70      	pop	{r4, r5, r6, pc}
			if((1 == Charger.reg.powercut_timepass) &&
 8003e1a:	226f      	movs	r2, #111	; 0x6f
 8003e1c:	79e3      	ldrb	r3, [r4, #7]
 8003e1e:	4393      	bics	r3, r2
 8003e20:	2b90      	cmp	r3, #144	; 0x90
 8003e22:	d1f9      	bne.n	8003e18 <_APP_CHARGSERV_state_machine+0x3c>
				_LIB_LOGGING_printf("Powercut Timepass\r\n");
 8003e24:	4884      	ldr	r0, [pc, #528]	; (8004038 <_APP_CHARGSERV_state_machine+0x25c>)
 8003e26:	f007 f803 	bl	800ae30 <puts>
	Charger.state = cstate;
 8003e2a:	2302      	movs	r3, #2
				Charger.reg.ready_standby = 1;
 8003e2c:	2208      	movs	r2, #8
	Charger.state = cstate;
 8003e2e:	7023      	strb	r3, [r4, #0]
				Charger.reg.ready_standby = 1;
 8003e30:	78e3      	ldrb	r3, [r4, #3]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	70e3      	strb	r3, [r4, #3]
			Charger.reg.powercut_proceeding = 0;
 8003e36:	2307      	movs	r3, #7
 8003e38:	79e2      	ldrb	r2, [r4, #7]
 8003e3a:	401a      	ands	r2, r3
 8003e3c:	3b67      	subs	r3, #103	; 0x67
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	71e3      	strb	r3, [r4, #7]
}
 8003e42:	e7e9      	b.n	8003e18 <_APP_CHARGSERV_state_machine+0x3c>
			if((1 == Charger.reg.init_complete) &&
 8003e44:	78e3      	ldrb	r3, [r4, #3]
 8003e46:	075a      	lsls	r2, r3, #29
 8003e48:	d5e6      	bpl.n	8003e18 <_APP_CHARGSERV_state_machine+0x3c>
 8003e4a:	79e2      	ldrb	r2, [r4, #7]
 8003e4c:	2a7f      	cmp	r2, #127	; 0x7f
 8003e4e:	d9e3      	bls.n	8003e18 <_APP_CHARGSERV_state_machine+0x3c>
	Charger.state = cstate;
 8003e50:	2102      	movs	r1, #2
 8003e52:	7021      	strb	r1, [r4, #0]
			Charger.reg.init_proceeding = 0;
 8003e54:	310c      	adds	r1, #12
 8003e56:	438b      	bics	r3, r1
 8003e58:	2108      	movs	r1, #8
 8003e5a:	430b      	orrs	r3, r1
 8003e5c:	70e3      	strb	r3, [r4, #3]
	Charger.reg.state_changed = 1;
 8003e5e:	231f      	movs	r3, #31
 8003e60:	4013      	ands	r3, r2
 8003e62:	2260      	movs	r2, #96	; 0x60
 8003e64:	4252      	negs	r2, r2
 8003e66:	431a      	orrs	r2, r3
 8003e68:	71e2      	strb	r2, [r4, #7]
 8003e6a:	e7d5      	b.n	8003e18 <_APP_CHARGSERV_state_machine+0x3c>
			if(1 == Charger.reg.state_changed)
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	79e3      	ldrb	r3, [r4, #7]
 8003e70:	421a      	tst	r2, r3
 8003e72:	d008      	beq.n	8003e86 <_APP_CHARGSERV_state_machine+0xaa>
				Charger.reg.state_changed = 0;
 8003e74:	4393      	bics	r3, r2
 8003e76:	71e3      	strb	r3, [r4, #7]
				if(0 == Charger.autostartmode_flag)
 8003e78:	2383      	movs	r3, #131	; 0x83
 8003e7a:	5ce3      	ldrb	r3, [r4, r3]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d102      	bne.n	8003e86 <_APP_CHARGSERV_state_machine+0xaa>
					_APP_RFID_set_start_tagging(0);
 8003e80:	2000      	movs	r0, #0
 8003e82:	f002 fc0b 	bl	800669c <_APP_RFID_set_start_tagging>
			if(1 == Charger.reg.ready_cardtag)
 8003e86:	78e3      	ldrb	r3, [r4, #3]
 8003e88:	06db      	lsls	r3, r3, #27
 8003e8a:	d500      	bpl.n	8003e8e <_APP_CHARGSERV_state_machine+0xb2>
 8003e8c:	e0a5      	b.n	8003fda <_APP_CHARGSERV_state_machine+0x1fe>
			if(1 == Charger.reg.ready_automodeflag)
 8003e8e:	7923      	ldrb	r3, [r4, #4]
	charger_reset_reg_all_bit(currentstate);
 8003e90:	2002      	movs	r0, #2
			if(1 == Charger.reg.ready_automodeflag)
 8003e92:	07db      	lsls	r3, r3, #31
 8003e94:	d5c0      	bpl.n	8003e18 <_APP_CHARGSERV_state_machine+0x3c>
 8003e96:	e7b5      	b.n	8003e04 <_APP_CHARGSERV_state_machine+0x28>
			if(1 == Charger.reg.state_changed)
 8003e98:	2220      	movs	r2, #32
 8003e9a:	79e3      	ldrb	r3, [r4, #7]
 8003e9c:	421a      	tst	r2, r3
 8003e9e:	d000      	beq.n	8003ea2 <_APP_CHARGSERV_state_machine+0xc6>
 8003ea0:	e081      	b.n	8003fa6 <_APP_CHARGSERV_state_machine+0x1ca>
			if(1 == Charger.reg.autoready_connected)
 8003ea2:	7923      	ldrb	r3, [r4, #4]
	charger_reset_reg_all_bit(currentstate);
 8003ea4:	2003      	movs	r0, #3
			if(1 == Charger.reg.autoready_connected)
 8003ea6:	071a      	lsls	r2, r3, #28
 8003ea8:	d472      	bmi.n	8003f90 <_APP_CHARGSERV_state_machine+0x1b4>
	charger_reset_reg_all_bit(currentstate);
 8003eaa:	2003      	movs	r0, #3
			else if(1 == Charger.reg.autoready_manualmodeflag)
 8003eac:	075b      	lsls	r3, r3, #29
 8003eae:	d5b3      	bpl.n	8003e18 <_APP_CHARGSERV_state_machine+0x3c>
	charger_reset_reg_all_bit(currentstate);
 8003eb0:	f7ff fc36 	bl	8003720 <charger_reset_reg_all_bit>
	Charger.state = cstate;
 8003eb4:	2302      	movs	r3, #2
				Charger.reg.ready_standby = 1;
 8003eb6:	2208      	movs	r2, #8
	Charger.state = cstate;
 8003eb8:	7023      	strb	r3, [r4, #0]
				Charger.reg.ready_standby = 1;
 8003eba:	78e3      	ldrb	r3, [r4, #3]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	70e3      	strb	r3, [r4, #3]
	Charger.reg.state_changed = 1;
 8003ec0:	231f      	movs	r3, #31
 8003ec2:	79e2      	ldrb	r2, [r4, #7]
 8003ec4:	401a      	ands	r2, r3
 8003ec6:	3b7f      	subs	r3, #127	; 0x7f
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	71e3      	strb	r3, [r4, #7]
 8003ecc:	e7a4      	b.n	8003e18 <_APP_CHARGSERV_state_machine+0x3c>
			if(1 == Charger.reg.state_changed)
 8003ece:	2220      	movs	r2, #32
 8003ed0:	79e3      	ldrb	r3, [r4, #7]
 8003ed2:	421a      	tst	r2, r3
 8003ed4:	d176      	bne.n	8003fc4 <_APP_CHARGSERV_state_machine+0x1e8>
 8003ed6:	4d59      	ldr	r5, [pc, #356]	; (800403c <_APP_CHARGSERV_state_machine+0x260>)
			if(_LIB_USERDELAY_isfired(&gTimeout_usercheck))
 8003ed8:	0028      	movs	r0, r5
 8003eda:	f003 f8bf 	bl	800705c <_LIB_USERDELAY_isfired>
 8003ede:	2800      	cmp	r0, #0
 8003ee0:	d167      	bne.n	8003fb2 <_APP_CHARGSERV_state_machine+0x1d6>
			if((1 == Charger.reg.usercheck_userok) &&
 8003ee2:	6863      	ldr	r3, [r4, #4]
 8003ee4:	4a56      	ldr	r2, [pc, #344]	; (8004040 <_APP_CHARGSERV_state_machine+0x264>)
 8003ee6:	0019      	movs	r1, r3
 8003ee8:	4011      	ands	r1, r2
 8003eea:	4291      	cmp	r1, r2
 8003eec:	d04c      	beq.n	8003f88 <_APP_CHARGSERV_state_machine+0x1ac>
			else if((1 == Charger.reg.usercheck_userretry)&&
 8003eee:	4a55      	ldr	r2, [pc, #340]	; (8004044 <_APP_CHARGSERV_state_machine+0x268>)
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d000      	beq.n	8003ef8 <_APP_CHARGSERV_state_machine+0x11c>
 8003ef6:	e78f      	b.n	8003e18 <_APP_CHARGSERV_state_machine+0x3c>
	charger_reset_reg_all_bit(currentstate);
 8003ef8:	2004      	movs	r0, #4
 8003efa:	e7d9      	b.n	8003eb0 <_APP_CHARGSERV_state_machine+0xd4>
			if((1 == Charger.reg.connect_wired) &&
 8003efc:	6863      	ldr	r3, [r4, #4]
 8003efe:	4a52      	ldr	r2, [pc, #328]	; (8004048 <_APP_CHARGSERV_state_machine+0x26c>)
 8003f00:	0019      	movs	r1, r3
 8003f02:	4011      	ands	r1, r2
 8003f04:	4291      	cmp	r1, r2
 8003f06:	d07a      	beq.n	8003ffe <_APP_CHARGSERV_state_machine+0x222>
			else if((1 == Charger.reg.connect_timeout) &&
 8003f08:	4a50      	ldr	r2, [pc, #320]	; (800404c <_APP_CHARGSERV_state_machine+0x270>)
	charger_reset_reg_all_bit(currentstate);
 8003f0a:	2005      	movs	r0, #5
			else if((1 == Charger.reg.connect_timeout) &&
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d000      	beq.n	8003f14 <_APP_CHARGSERV_state_machine+0x138>
 8003f12:	e781      	b.n	8003e18 <_APP_CHARGSERV_state_machine+0x3c>
 8003f14:	e7cc      	b.n	8003eb0 <_APP_CHARGSERV_state_machine+0xd4>
			if(1 == Charger.reg.state_changed)
 8003f16:	2220      	movs	r2, #32
 8003f18:	79e3      	ldrb	r3, [r4, #7]
 8003f1a:	421a      	tst	r2, r3
 8003f1c:	d169      	bne.n	8003ff2 <_APP_CHARGSERV_state_machine+0x216>
			if(1 == Charger.reg.charging_ok)
 8003f1e:	7963      	ldrb	r3, [r4, #5]
 8003f20:	2b7f      	cmp	r3, #127	; 0x7f
 8003f22:	d800      	bhi.n	8003f26 <_APP_CHARGSERV_state_machine+0x14a>
 8003f24:	e778      	b.n	8003e18 <_APP_CHARGSERV_state_machine+0x3c>
	Charger.state = cstate;
 8003f26:	2307      	movs	r3, #7
			Charger.reg.charging_proceeding = 0;
 8003f28:	4a49      	ldr	r2, [pc, #292]	; (8004050 <_APP_CHARGSERV_state_machine+0x274>)
	Charger.state = cstate;
 8003f2a:	7023      	strb	r3, [r4, #0]
			Charger.reg.charging_proceeding = 0;
 8003f2c:	6863      	ldr	r3, [r4, #4]
 8003f2e:	401a      	ands	r2, r3
 8003f30:	4b48      	ldr	r3, [pc, #288]	; (8004054 <_APP_CHARGSERV_state_machine+0x278>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	6063      	str	r3, [r4, #4]
 8003f36:	e76f      	b.n	8003e18 <_APP_CHARGSERV_state_machine+0x3c>
			if(1 == Charger.reg.ota_ok)
 8003f38:	79e3      	ldrb	r3, [r4, #7]
 8003f3a:	075a      	lsls	r2, r3, #29
 8003f3c:	d400      	bmi.n	8003f40 <_APP_CHARGSERV_state_machine+0x164>
 8003f3e:	e76b      	b.n	8003e18 <_APP_CHARGSERV_state_machine+0x3c>
	Charger.state = cstate;
 8003f40:	2202      	movs	r2, #2
				Charger.reg.ready_standby = 1;
 8003f42:	2108      	movs	r1, #8
	Charger.state = cstate;
 8003f44:	7022      	strb	r2, [r4, #0]
				Charger.reg.ready_standby = 1;
 8003f46:	78e2      	ldrb	r2, [r4, #3]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	70e2      	strb	r2, [r4, #3]
			Charger.reg.ota_proceeding = 0;
 8003f4c:	2219      	movs	r2, #25
 8003f4e:	401a      	ands	r2, r3
 8003f50:	2360      	movs	r3, #96	; 0x60
 8003f52:	425b      	negs	r3, r3
 8003f54:	4313      	orrs	r3, r2
 8003f56:	71e3      	strb	r3, [r4, #7]
 8003f58:	e75e      	b.n	8003e18 <_APP_CHARGSERV_state_machine+0x3c>
			if((1 == Charger.reg.fault_reset) &&
 8003f5a:	227e      	movs	r2, #126	; 0x7e
 8003f5c:	79e3      	ldrb	r3, [r4, #7]
 8003f5e:	4393      	bics	r3, r2
 8003f60:	2b81      	cmp	r3, #129	; 0x81
 8003f62:	d000      	beq.n	8003f66 <_APP_CHARGSERV_state_machine+0x18a>
 8003f64:	e758      	b.n	8003e18 <_APP_CHARGSERV_state_machine+0x3c>
				if(1 == Charger.automode_active)
 8003f66:	3b06      	subs	r3, #6
 8003f68:	5ce3      	ldrb	r3, [r4, r3]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d053      	beq.n	8004016 <_APP_CHARGSERV_state_machine+0x23a>
	Charger.state = cstate;
 8003f6e:	2302      	movs	r3, #2
					Charger.reg.ready_standby = 1;
 8003f70:	2208      	movs	r2, #8
	Charger.state = cstate;
 8003f72:	7023      	strb	r3, [r4, #0]
					Charger.reg.ready_standby = 1;
 8003f74:	78e3      	ldrb	r3, [r4, #3]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	70e3      	strb	r3, [r4, #3]
			Charger.reg.fault_set = 0;
 8003f7a:	4a37      	ldr	r2, [pc, #220]	; (8004058 <_APP_CHARGSERV_state_machine+0x27c>)
 8003f7c:	88e3      	ldrh	r3, [r4, #6]
 8003f7e:	401a      	ands	r2, r3
 8003f80:	4b36      	ldr	r3, [pc, #216]	; (800405c <_APP_CHARGSERV_state_machine+0x280>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	80e3      	strh	r3, [r4, #6]
 8003f86:	e747      	b.n	8003e18 <_APP_CHARGSERV_state_machine+0x3c>
				_LIB_USERDELAY_stop(&gTimeout_usercheck);
 8003f88:	0028      	movs	r0, r5
 8003f8a:	f003 f863 	bl	8007054 <_LIB_USERDELAY_stop>
	charger_reset_reg_all_bit(currentstate);
 8003f8e:	2004      	movs	r0, #4
 8003f90:	f7ff fbc6 	bl	8003720 <charger_reset_reg_all_bit>
	Charger.state = cstate;
 8003f94:	2305      	movs	r3, #5
				Charger.reg.connect_wait = 1;
 8003f96:	4a32      	ldr	r2, [pc, #200]	; (8004060 <_APP_CHARGSERV_state_machine+0x284>)
	Charger.state = cstate;
 8003f98:	7023      	strb	r3, [r4, #0]
				Charger.reg.connect_wait = 1;
 8003f9a:	6863      	ldr	r3, [r4, #4]
 8003f9c:	401a      	ands	r2, r3
 8003f9e:	4b31      	ldr	r3, [pc, #196]	; (8004064 <_APP_CHARGSERV_state_machine+0x288>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	6063      	str	r3, [r4, #4]
 8003fa4:	e738      	b.n	8003e18 <_APP_CHARGSERV_state_machine+0x3c>
				Charger.reg.state_changed = 0;
 8003fa6:	4393      	bics	r3, r2
				_APP_RFID_set_start_tagging(1);
 8003fa8:	2001      	movs	r0, #1
				Charger.reg.state_changed = 0;
 8003faa:	71e3      	strb	r3, [r4, #7]
				_APP_RFID_set_start_tagging(1);
 8003fac:	f002 fb76 	bl	800669c <_APP_RFID_set_start_tagging>
 8003fb0:	e777      	b.n	8003ea2 <_APP_CHARGSERV_state_machine+0xc6>
				_LIB_USERDELAY_stop(&gTimeout_usercheck);
 8003fb2:	0028      	movs	r0, r5
 8003fb4:	f003 f84e 	bl	8007054 <_LIB_USERDELAY_stop>
				_LIB_LOGGING_printf("#### CHARGSERV : UserCheck_Timeout. go to Ready #### \r\n");
 8003fb8:	482b      	ldr	r0, [pc, #172]	; (8004068 <_APP_CHARGSERV_state_machine+0x28c>)
 8003fba:	f006 ff39 	bl	800ae30 <puts>
				_APP_CHARGSERV_usercheck_user_retry();
 8003fbe:	f7ff fd89 	bl	8003ad4 <_APP_CHARGSERV_usercheck_user_retry>
 8003fc2:	e78e      	b.n	8003ee2 <_APP_CHARGSERV_state_machine+0x106>
				Charger.reg.state_changed = 0;
 8003fc4:	4393      	bics	r3, r2
 8003fc6:	71e3      	strb	r3, [r4, #7]
				_LIB_LOGGING_printf("#### CHARGSERV : UserCheck_Timeout_start #### \r\n");
 8003fc8:	4828      	ldr	r0, [pc, #160]	; (800406c <_APP_CHARGSERV_state_machine+0x290>)
 8003fca:	f006 ff31 	bl	800ae30 <puts>
				_LIB_USERDELAY_start(&gTimeout_usercheck,DELAY_RENEW_OFF);
 8003fce:	4d1b      	ldr	r5, [pc, #108]	; (800403c <_APP_CHARGSERV_state_machine+0x260>)
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	0028      	movs	r0, r5
 8003fd4:	f003 f82e 	bl	8007034 <_LIB_USERDELAY_start>
 8003fd8:	e77e      	b.n	8003ed8 <_APP_CHARGSERV_state_machine+0xfc>
	charger_reset_reg_all_bit(currentstate);
 8003fda:	2002      	movs	r0, #2
 8003fdc:	f7ff fba0 	bl	8003720 <charger_reset_reg_all_bit>
	Charger.state = cstate;
 8003fe0:	2304      	movs	r3, #4
				Charger.reg.usercheck_tagok = 1;
 8003fe2:	4a23      	ldr	r2, [pc, #140]	; (8004070 <_APP_CHARGSERV_state_machine+0x294>)
	Charger.state = cstate;
 8003fe4:	7023      	strb	r3, [r4, #0]
				Charger.reg.usercheck_tagok = 1;
 8003fe6:	6863      	ldr	r3, [r4, #4]
 8003fe8:	401a      	ands	r2, r3
 8003fea:	4b22      	ldr	r3, [pc, #136]	; (8004074 <_APP_CHARGSERV_state_machine+0x298>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	6063      	str	r3, [r4, #4]
 8003ff0:	e74d      	b.n	8003e8e <_APP_CHARGSERV_state_machine+0xb2>
				Charger.reg.state_changed = 0;
 8003ff2:	4393      	bics	r3, r2
				_APP_RFID_set_start_tagging(0);
 8003ff4:	2000      	movs	r0, #0
				Charger.reg.state_changed = 0;
 8003ff6:	71e3      	strb	r3, [r4, #7]
				_APP_RFID_set_start_tagging(0);
 8003ff8:	f002 fb50 	bl	800669c <_APP_RFID_set_start_tagging>
 8003ffc:	e78f      	b.n	8003f1e <_APP_CHARGSERV_state_machine+0x142>
	charger_reset_reg_all_bit(currentstate);
 8003ffe:	2005      	movs	r0, #5
 8004000:	f7ff fb8e 	bl	8003720 <charger_reset_reg_all_bit>
	Charger.state = cstate;
 8004004:	2306      	movs	r3, #6
				Charger.reg.charging_proceeding = 1;
 8004006:	4a1c      	ldr	r2, [pc, #112]	; (8004078 <_APP_CHARGSERV_state_machine+0x29c>)
	Charger.state = cstate;
 8004008:	7023      	strb	r3, [r4, #0]
				Charger.reg.charging_proceeding = 1;
 800400a:	6863      	ldr	r3, [r4, #4]
 800400c:	401a      	ands	r2, r3
 800400e:	4b1b      	ldr	r3, [pc, #108]	; (800407c <_APP_CHARGSERV_state_machine+0x2a0>)
 8004010:	4313      	orrs	r3, r2
 8004012:	6063      	str	r3, [r4, #4]
 8004014:	e700      	b.n	8003e18 <_APP_CHARGSERV_state_machine+0x3c>
	Charger.state = cstate;
 8004016:	3302      	adds	r3, #2
					Charger.reg.autoready_standby = 1;
 8004018:	4a19      	ldr	r2, [pc, #100]	; (8004080 <_APP_CHARGSERV_state_machine+0x2a4>)
	Charger.state = cstate;
 800401a:	7023      	strb	r3, [r4, #0]
					Charger.reg.autoready_standby = 1;
 800401c:	e6f7      	b.n	8003e0e <_APP_CHARGSERV_state_machine+0x32>
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	20000100 	.word	0x20000100
 8004024:	0800c4cc 	.word	0x0800c4cc
 8004028:	ffff8040 	.word	0xffff8040
 800402c:	00008040 	.word	0x00008040
 8004030:	1ffffffd 	.word	0x1ffffffd
 8004034:	a0000002 	.word	0xa0000002
 8004038:	0800c4b8 	.word	0x0800c4b8
 800403c:	200002d0 	.word	0x200002d0
 8004040:	80000080 	.word	0x80000080
 8004044:	80000100 	.word	0x80000100
 8004048:	80000400 	.word	0x80000400
 800404c:	80000800 	.word	0x80000800
 8004050:	1fcf6fff 	.word	0x1fcf6fff
 8004054:	a0100000 	.word	0xa0100000
 8004058:	00001e7f 	.word	0x00001e7f
 800405c:	ffffa000 	.word	0xffffa000
 8004060:	1ffffdff 	.word	0x1ffffdff
 8004064:	a0000200 	.word	0xa0000200
 8004068:	0800c480 	.word	0x0800c480
 800406c:	0800c450 	.word	0x0800c450
 8004070:	1fffffef 	.word	0x1fffffef
 8004074:	a0000010 	.word	0xa0000010
 8004078:	1fffefff 	.word	0x1fffefff
 800407c:	a0001000 	.word	0xa0001000
 8004080:	1e7ffffd 	.word	0x1e7ffffd

08004084 <charger_indiled_display>:
{
 8004084:	b570      	push	{r4, r5, r6, lr}
	return Charger.state;
 8004086:	4e67      	ldr	r6, [pc, #412]	; (8004224 <charger_indiled_display+0x1a0>)
 8004088:	7834      	ldrb	r4, [r6, #0]
	CP_StateDef	cp_state = _MW_CP_get_cp_state();
 800408a:	f003 f941 	bl	8007310 <_MW_CP_get_cp_state>
	indiledtickcount++;
 800408e:	4d66      	ldr	r5, [pc, #408]	; (8004228 <charger_indiled_display+0x1a4>)
 8004090:	782a      	ldrb	r2, [r5, #0]
 8004092:	1c53      	adds	r3, r2, #1
 8004094:	b2db      	uxtb	r3, r3
 8004096:	702b      	strb	r3, [r5, #0]
	switch(state)
 8004098:	2c09      	cmp	r4, #9
 800409a:	d83d      	bhi.n	8004118 <charger_indiled_display+0x94>
 800409c:	4963      	ldr	r1, [pc, #396]	; (800422c <charger_indiled_display+0x1a8>)
 800409e:	00a4      	lsls	r4, r4, #2
 80040a0:	5909      	ldr	r1, [r1, r4]
 80040a2:	468f      	mov	pc, r1
			if((indiledtickcount == 1) || (indiledtickcount == 2))
 80040a4:	2a01      	cmp	r2, #1
 80040a6:	d800      	bhi.n	80040aa <charger_indiled_display+0x26>
 80040a8:	e091      	b.n	80041ce <charger_indiled_display+0x14a>
			else if((indiledtickcount == 3) || (indiledtickcount == 4))
 80040aa:	1e91      	subs	r1, r2, #2
 80040ac:	2901      	cmp	r1, #1
 80040ae:	d800      	bhi.n	80040b2 <charger_indiled_display+0x2e>
 80040b0:	e073      	b.n	800419a <charger_indiled_display+0x116>
			else if((indiledtickcount == 5) || (indiledtickcount == 6))
 80040b2:	3a04      	subs	r2, #4
 80040b4:	2a01      	cmp	r2, #1
 80040b6:	d82f      	bhi.n	8004118 <charger_indiled_display+0x94>
				if(_ON == charger_fault_status_bak.AC_OC_ERR)
 80040b8:	2608      	movs	r6, #8
 80040ba:	4c5d      	ldr	r4, [pc, #372]	; (8004230 <charger_indiled_display+0x1ac>)
					_MW_INDILED_sled_ctl(YELLOW);
 80040bc:	2004      	movs	r0, #4
				if(_ON == charger_fault_status_bak.AC_OC_ERR)
 80040be:	7822      	ldrb	r2, [r4, #0]
 80040c0:	4216      	tst	r6, r2
 80040c2:	d000      	beq.n	80040c6 <charger_indiled_display+0x42>
 80040c4:	e090      	b.n	80041e8 <charger_indiled_display+0x164>
				else if(_ON == charger_fault_status_bak.LEAKAGE_ERR)
 80040c6:	2601      	movs	r6, #1
					_MW_INDILED_sled_ctl(GREEN);
 80040c8:	2002      	movs	r0, #2
				else if(_ON == charger_fault_status_bak.LEAKAGE_ERR)
 80040ca:	4216      	tst	r6, r2
 80040cc:	d000      	beq.n	80040d0 <charger_indiled_display+0x4c>
 80040ce:	e08b      	b.n	80041e8 <charger_indiled_display+0x164>
				else if(_ON == charger_fault_status_bak.MC_START_ERR)
 80040d0:	2602      	movs	r6, #2
 80040d2:	4216      	tst	r6, r2
 80040d4:	d000      	beq.n	80040d8 <charger_indiled_display+0x54>
 80040d6:	e086      	b.n	80041e6 <charger_indiled_display+0x162>
				else if(_ON == charger_fault_status_bak.MC_STOP_ERR)
 80040d8:	2604      	movs	r6, #4
 80040da:	4216      	tst	r6, r2
 80040dc:	d000      	beq.n	80040e0 <charger_indiled_display+0x5c>
 80040de:	e082      	b.n	80041e6 <charger_indiled_display+0x162>
				else if(_ON == charger_fault_status_bak.AC_OV_ERR)
 80040e0:	2620      	movs	r6, #32
					_MW_INDILED_sled_ctl(SKY);
 80040e2:	2005      	movs	r0, #5
				else if(_ON == charger_fault_status_bak.AC_OV_ERR)
 80040e4:	4216      	tst	r6, r2
 80040e6:	d000      	beq.n	80040ea <charger_indiled_display+0x66>
 80040e8:	e07e      	b.n	80041e8 <charger_indiled_display+0x164>
				else if(_ON == charger_fault_status_bak.CP_ERR)
 80040ea:	2640      	movs	r6, #64	; 0x40
					_MW_INDILED_sled_ctl(PURPLE);
 80040ec:	2006      	movs	r0, #6
				else if(_ON == charger_fault_status_bak.CP_ERR)
 80040ee:	4216      	tst	r6, r2
 80040f0:	d000      	beq.n	80040f4 <charger_indiled_display+0x70>
 80040f2:	e079      	b.n	80041e8 <charger_indiled_display+0x164>
				else if(_ON == charger_fault_status_bak.CP_VOLTAGE_ERR)
 80040f4:	7861      	ldrb	r1, [r4, #1]
 80040f6:	06c8      	lsls	r0, r1, #27
 80040f8:	d500      	bpl.n	80040fc <charger_indiled_display+0x78>
 80040fa:	e081      	b.n	8004200 <charger_indiled_display+0x17c>
				else if(_ON == charger_fault_status_bak.OTEMP_ERR)
 80040fc:	b252      	sxtb	r2, r2
 80040fe:	2a00      	cmp	r2, #0
 8004100:	da00      	bge.n	8004104 <charger_indiled_display+0x80>
 8004102:	e086      	b.n	8004212 <charger_indiled_display+0x18e>
				else if(_ON == charger_fault_status_bak.RFID_COMM_ERR)
 8004104:	2604      	movs	r6, #4
 8004106:	4231      	tst	r1, r6
 8004108:	d006      	beq.n	8004118 <charger_indiled_display+0x94>
					_MW_INDILED_sled_ctl(WHITE);
 800410a:	2007      	movs	r0, #7
 800410c:	f003 fd76 	bl	8007bfc <_MW_INDILED_sled_ctl>
					charger_fault_status_bak.RFID_COMM_ERR = _OFF;
 8004110:	7863      	ldrb	r3, [r4, #1]
 8004112:	43b3      	bics	r3, r6
 8004114:	7063      	strb	r3, [r4, #1]
 8004116:	782b      	ldrb	r3, [r5, #0]
	if(indiledtickcount >= 6)
 8004118:	2b05      	cmp	r3, #5
 800411a:	d901      	bls.n	8004120 <charger_indiled_display+0x9c>
		indiledtickcount = 0;
 800411c:	2300      	movs	r3, #0
 800411e:	702b      	strb	r3, [r5, #0]
}
 8004120:	bd70      	pop	{r4, r5, r6, pc}
			if((DC_6V == cp_state) || (PWM_6V == cp_state))
 8004122:	2803      	cmp	r0, #3
 8004124:	d034      	beq.n	8004190 <charger_indiled_display+0x10c>
 8004126:	2806      	cmp	r0, #6
 8004128:	d032      	beq.n	8004190 <charger_indiled_display+0x10c>
				if(1 == Charger.forcestop_wake_up_seq_count_limit_detect)
 800412a:	2179      	movs	r1, #121	; 0x79
 800412c:	5c71      	ldrb	r1, [r6, r1]
 800412e:	2901      	cmp	r1, #1
 8004130:	d011      	beq.n	8004156 <charger_indiled_display+0xd2>
				else if(1 == Charger.stable_full_detect)
 8004132:	2381      	movs	r3, #129	; 0x81
 8004134:	5cf3      	ldrb	r3, [r6, r3]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d006      	beq.n	8004148 <charger_indiled_display+0xc4>
						_MW_INDILED_sled_ctl(BLUE);
 800413a:	2003      	movs	r0, #3
 800413c:	f003 fd5e 	bl	8007bfc <_MW_INDILED_sled_ctl>
 8004140:	782b      	ldrb	r3, [r5, #0]
	if(indiledtickcount >= 6)
 8004142:	2b05      	cmp	r3, #5
 8004144:	d9ec      	bls.n	8004120 <charger_indiled_display+0x9c>
 8004146:	e7e9      	b.n	800411c <charger_indiled_display+0x98>
			_MW_INDILED_sled_ctl(SKY);
 8004148:	2005      	movs	r0, #5
 800414a:	f003 fd57 	bl	8007bfc <_MW_INDILED_sled_ctl>
		break;
 800414e:	782b      	ldrb	r3, [r5, #0]
	if(indiledtickcount >= 6)
 8004150:	2b05      	cmp	r3, #5
 8004152:	d9e5      	bls.n	8004120 <charger_indiled_display+0x9c>
 8004154:	e7e2      	b.n	800411c <charger_indiled_display+0x98>
					if((indiledtickcount == 1) || (indiledtickcount == 2) || (indiledtickcount == 3))
 8004156:	2a02      	cmp	r2, #2
 8004158:	d9ef      	bls.n	800413a <charger_indiled_display+0xb6>
					else if((indiledtickcount == 4) || (indiledtickcount == 5) || (indiledtickcount == 6))
 800415a:	3a03      	subs	r2, #3
 800415c:	2a02      	cmp	r2, #2
 800415e:	d8db      	bhi.n	8004118 <charger_indiled_display+0x94>
			_MW_INDILED_sled_ctl(BLACK);
 8004160:	2000      	movs	r0, #0
 8004162:	f003 fd4b 	bl	8007bfc <_MW_INDILED_sled_ctl>
		break;
 8004166:	782b      	ldrb	r3, [r5, #0]
	if(indiledtickcount >= 6)
 8004168:	2b05      	cmp	r3, #5
 800416a:	d9d9      	bls.n	8004120 <charger_indiled_display+0x9c>
 800416c:	e7d6      	b.n	800411c <charger_indiled_display+0x98>
					_MW_INDILED_sled_ctl(PURPLE);
 800416e:	2006      	movs	r0, #6
 8004170:	f003 fd44 	bl	8007bfc <_MW_INDILED_sled_ctl>
 8004174:	782b      	ldrb	r3, [r5, #0]
	if(indiledtickcount >= 6)
 8004176:	2b05      	cmp	r3, #5
 8004178:	d9d2      	bls.n	8004120 <charger_indiled_display+0x9c>
 800417a:	e7cf      	b.n	800411c <charger_indiled_display+0x98>
			if(_OFF == _MW_GPIO_get_gpi(EMG))
 800417c:	2005      	movs	r0, #5
 800417e:	f003 fd0d 	bl	8007b9c <_MW_GPIO_get_gpi>
 8004182:	2800      	cmp	r0, #0
 8004184:	d11e      	bne.n	80041c4 <charger_indiled_display+0x140>
				_MW_INDILED_sled_ctl(RED);
 8004186:	3001      	adds	r0, #1
 8004188:	f003 fd38 	bl	8007bfc <_MW_INDILED_sled_ctl>
 800418c:	782b      	ldrb	r3, [r5, #0]
 800418e:	e7c3      	b.n	8004118 <charger_indiled_display+0x94>
					_MW_INDILED_sled_ctl(GREEN);
 8004190:	2002      	movs	r0, #2
 8004192:	f003 fd33 	bl	8007bfc <_MW_INDILED_sled_ctl>
 8004196:	782b      	ldrb	r3, [r5, #0]
				if(0)
 8004198:	e7be      	b.n	8004118 <charger_indiled_display+0x94>
				if(_ON == charger_fault_status_bak.AC_OC_ERR)
 800419a:	4925      	ldr	r1, [pc, #148]	; (8004230 <charger_indiled_display+0x1ac>)
 800419c:	780a      	ldrb	r2, [r1, #0]
 800419e:	0710      	lsls	r0, r2, #28
 80041a0:	d429      	bmi.n	80041f6 <charger_indiled_display+0x172>
				else if(_ON == charger_fault_status_bak.LEAKAGE_ERR)
 80041a2:	07d0      	lsls	r0, r2, #31
 80041a4:	d4f4      	bmi.n	8004190 <charger_indiled_display+0x10c>
				else if(_ON == charger_fault_status_bak.MC_STOP_ERR)
 80041a6:	2006      	movs	r0, #6
 80041a8:	4210      	tst	r0, r2
 80041aa:	d1c6      	bne.n	800413a <charger_indiled_display+0xb6>
				else if(_ON == charger_fault_status_bak.AC_OV_ERR)
 80041ac:	0690      	lsls	r0, r2, #26
 80041ae:	d4cb      	bmi.n	8004148 <charger_indiled_display+0xc4>
				else if(_ON == charger_fault_status_bak.CP_ERR)
 80041b0:	0650      	lsls	r0, r2, #25
 80041b2:	d4dc      	bmi.n	800416e <charger_indiled_display+0xea>
				else if(_ON == charger_fault_status_bak.CP_VOLTAGE_ERR)
 80041b4:	7849      	ldrb	r1, [r1, #1]
 80041b6:	06c8      	lsls	r0, r1, #27
 80041b8:	d4d9      	bmi.n	800416e <charger_indiled_display+0xea>
				else if(_ON == charger_fault_status_bak.OTEMP_ERR)
 80041ba:	b252      	sxtb	r2, r2
 80041bc:	2a00      	cmp	r2, #0
 80041be:	dbcf      	blt.n	8004160 <charger_indiled_display+0xdc>
				else if(_ON == charger_fault_status_bak.RFID_COMM_ERR)
 80041c0:	074a      	lsls	r2, r1, #29
 80041c2:	d5a9      	bpl.n	8004118 <charger_indiled_display+0x94>
					_MW_INDILED_sled_ctl(WHITE);
 80041c4:	2007      	movs	r0, #7
 80041c6:	f003 fd19 	bl	8007bfc <_MW_INDILED_sled_ctl>
 80041ca:	782b      	ldrb	r3, [r5, #0]
 80041cc:	e7a4      	b.n	8004118 <charger_indiled_display+0x94>
				if(0 == charger_fault_status_bak.Raw)
 80041ce:	4c18      	ldr	r4, [pc, #96]	; (8004230 <charger_indiled_display+0x1ac>)
 80041d0:	6822      	ldr	r2, [r4, #0]
 80041d2:	2a00      	cmp	r2, #0
 80041d4:	d1a0      	bne.n	8004118 <charger_indiled_display+0x94>
					_MW_INDILED_sled_ctl(RED);
 80041d6:	2001      	movs	r0, #1
 80041d8:	f003 fd10 	bl	8007bfc <_MW_INDILED_sled_ctl>
					charger_fault_status_bak = charger_fault_status;
 80041dc:	4b15      	ldr	r3, [pc, #84]	; (8004234 <charger_indiled_display+0x1b0>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6023      	str	r3, [r4, #0]
 80041e2:	782b      	ldrb	r3, [r5, #0]
 80041e4:	e798      	b.n	8004118 <charger_indiled_display+0x94>
					_MW_INDILED_sled_ctl(BLUE);
 80041e6:	2003      	movs	r0, #3
 80041e8:	f003 fd08 	bl	8007bfc <_MW_INDILED_sled_ctl>
					charger_fault_status_bak.MC_START_ERR = _OFF;
 80041ec:	7823      	ldrb	r3, [r4, #0]
 80041ee:	43b3      	bics	r3, r6
 80041f0:	7023      	strb	r3, [r4, #0]
 80041f2:	782b      	ldrb	r3, [r5, #0]
 80041f4:	e790      	b.n	8004118 <charger_indiled_display+0x94>
					_MW_INDILED_sled_ctl(YELLOW);
 80041f6:	2004      	movs	r0, #4
 80041f8:	f003 fd00 	bl	8007bfc <_MW_INDILED_sled_ctl>
 80041fc:	782b      	ldrb	r3, [r5, #0]
 80041fe:	e78b      	b.n	8004118 <charger_indiled_display+0x94>
					_MW_INDILED_sled_ctl(SKY);
 8004200:	2005      	movs	r0, #5
 8004202:	f003 fcfb 	bl	8007bfc <_MW_INDILED_sled_ctl>
					charger_fault_status_bak.CP_VOLTAGE_ERR = _OFF;
 8004206:	2210      	movs	r2, #16
 8004208:	7863      	ldrb	r3, [r4, #1]
 800420a:	4393      	bics	r3, r2
 800420c:	7063      	strb	r3, [r4, #1]
 800420e:	782b      	ldrb	r3, [r5, #0]
 8004210:	e782      	b.n	8004118 <charger_indiled_display+0x94>
					_MW_INDILED_sled_ctl(BLACK);
 8004212:	2000      	movs	r0, #0
 8004214:	f003 fcf2 	bl	8007bfc <_MW_INDILED_sled_ctl>
					charger_fault_status_bak.OTEMP_ERR = _OFF;
 8004218:	227f      	movs	r2, #127	; 0x7f
 800421a:	7823      	ldrb	r3, [r4, #0]
 800421c:	4013      	ands	r3, r2
 800421e:	7023      	strb	r3, [r4, #0]
 8004220:	782b      	ldrb	r3, [r5, #0]
 8004222:	e779      	b.n	8004118 <charger_indiled_display+0x94>
 8004224:	20000100 	.word	0x20000100
 8004228:	20000319 	.word	0x20000319
 800422c:	0800c4f8 	.word	0x0800c4f8
 8004230:	20000190 	.word	0x20000190
 8004234:	2000018c 	.word	0x2000018c

08004238 <charger_dipled_display>:
{
 8004238:	b510      	push	{r4, lr}
	dipledtickcount++;
 800423a:	4c0f      	ldr	r4, [pc, #60]	; (8004278 <charger_dipled_display+0x40>)
	if(_ON == _MW_GPIO_get_gpi(WELD))
 800423c:	2004      	movs	r0, #4
	dipledtickcount++;
 800423e:	7823      	ldrb	r3, [r4, #0]
 8004240:	3301      	adds	r3, #1
 8004242:	7023      	strb	r3, [r4, #0]
	if(_ON == _MW_GPIO_get_gpi(WELD))
 8004244:	f003 fcaa 	bl	8007b9c <_MW_GPIO_get_gpi>
	if((dipledtickcount >= 0) && (dipledtickcount < 50))
 8004248:	7823      	ldrb	r3, [r4, #0]
 800424a:	2b31      	cmp	r3, #49	; 0x31
 800424c:	d90e      	bls.n	800426c <charger_dipled_display+0x34>
	else if((dipledtickcount >= 50) && (dipledtickcount < 100))
 800424e:	001a      	movs	r2, r3
 8004250:	3a32      	subs	r2, #50	; 0x32
 8004252:	2a31      	cmp	r2, #49	; 0x31
 8004254:	d904      	bls.n	8004260 <charger_dipled_display+0x28>
	if(dipledtickcount >= 100)
 8004256:	2b63      	cmp	r3, #99	; 0x63
 8004258:	d901      	bls.n	800425e <charger_dipled_display+0x26>
		dipledtickcount = 0;
 800425a:	2300      	movs	r3, #0
 800425c:	7023      	strb	r3, [r4, #0]
}
 800425e:	bd10      	pop	{r4, pc}
		_MW_GPIO_set_gpo(STUS_LED_01, _OFF);
 8004260:	2100      	movs	r1, #0
 8004262:	2000      	movs	r0, #0
 8004264:	f003 fc0e 	bl	8007a84 <_MW_GPIO_set_gpo>
 8004268:	7823      	ldrb	r3, [r4, #0]
 800426a:	e7f4      	b.n	8004256 <charger_dipled_display+0x1e>
		_MW_GPIO_set_gpo(STUS_LED_01, _ON);
 800426c:	2101      	movs	r1, #1
 800426e:	2000      	movs	r0, #0
 8004270:	f003 fc08 	bl	8007a84 <_MW_GPIO_set_gpo>
 8004274:	7823      	ldrb	r3, [r4, #0]
 8004276:	e7ee      	b.n	8004256 <charger_dipled_display+0x1e>
 8004278:	20000194 	.word	0x20000194

0800427c <_APP_CHARGSERV_display_loop>:
{
 800427c:	b510      	push	{r4, lr}
	if(tickcyclecnt >= 25)
 800427e:	4c07      	ldr	r4, [pc, #28]	; (800429c <_APP_CHARGSERV_display_loop+0x20>)
 8004280:	7823      	ldrb	r3, [r4, #0]
 8004282:	2b18      	cmp	r3, #24
 8004284:	d805      	bhi.n	8004292 <_APP_CHARGSERV_display_loop+0x16>
 8004286:	3301      	adds	r3, #1
 8004288:	b2db      	uxtb	r3, r3
	tickcyclecnt++;
 800428a:	7023      	strb	r3, [r4, #0]
	charger_dipled_display();
 800428c:	f7ff ffd4 	bl	8004238 <charger_dipled_display>
}
 8004290:	bd10      	pop	{r4, pc}
		charger_indiled_display();
 8004292:	f7ff fef7 	bl	8004084 <charger_indiled_display>
 8004296:	2301      	movs	r3, #1
 8004298:	e7f7      	b.n	800428a <_APP_CHARGSERV_display_loop+0xe>
 800429a:	46c0      	nop			; (mov r8, r8)
 800429c:	2000031c 	.word	0x2000031c

080042a0 <charger_cp_ry_control>:
{
 80042a0:	b570      	push	{r4, r5, r6, lr}
	return Charger.state;
 80042a2:	4d0d      	ldr	r5, [pc, #52]	; (80042d8 <charger_cp_ry_control+0x38>)
 80042a4:	782c      	ldrb	r4, [r5, #0]
	CP_StateDef	cp_state = _MW_CP_get_cp_state();
 80042a6:	f003 f833 	bl	8007310 <_MW_CP_get_cp_state>
	switch(charger_state)
 80042aa:	2c06      	cmp	r4, #6
 80042ac:	d00c      	beq.n	80042c8 <charger_cp_ry_control+0x28>
 80042ae:	d806      	bhi.n	80042be <charger_cp_ry_control+0x1e>
 80042b0:	3c02      	subs	r4, #2
 80042b2:	2c03      	cmp	r4, #3
 80042b4:	d802      	bhi.n	80042bc <charger_cp_ry_control+0x1c>
				_MW_CP_cp_relay_ctl(_ON);
 80042b6:	2001      	movs	r0, #1
 80042b8:	f002 ff8a 	bl	80071d0 <_MW_CP_cp_relay_ctl>
}
 80042bc:	bd70      	pop	{r4, r5, r6, pc}
	switch(charger_state)
 80042be:	2c07      	cmp	r4, #7
 80042c0:	d1fc      	bne.n	80042bc <charger_cp_ry_control+0x1c>
			if(cp_state == DC_12V)
 80042c2:	2801      	cmp	r0, #1
 80042c4:	d1fa      	bne.n	80042bc <charger_cp_ry_control+0x1c>
 80042c6:	e7f6      	b.n	80042b6 <charger_cp_ry_control+0x16>
	return Charger.wake_up_seq_step;
 80042c8:	2367      	movs	r3, #103	; 0x67
			if(charger_get_wake_up_seq_step() == CP_OFF)
 80042ca:	5ceb      	ldrb	r3, [r5, r3]
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d1f2      	bne.n	80042b6 <charger_cp_ry_control+0x16>
				_MW_CP_cp_relay_ctl(_OFF);
 80042d0:	2000      	movs	r0, #0
 80042d2:	f002 ff7d 	bl	80071d0 <_MW_CP_cp_relay_ctl>
 80042d6:	e7f1      	b.n	80042bc <charger_cp_ry_control+0x1c>
 80042d8:	20000100 	.word	0x20000100

080042dc <charger_cp_state_control>:
{
 80042dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return Charger.state;
 80042de:	4dbf      	ldr	r5, [pc, #764]	; (80045dc <charger_cp_state_control+0x300>)
 80042e0:	782c      	ldrb	r4, [r5, #0]
	CP_StateDef	cp_state = _MW_CP_get_cp_state();
 80042e2:	f003 f815 	bl	8007310 <_MW_CP_get_cp_state>
 80042e6:	1f23      	subs	r3, r4, #4
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	0006      	movs	r6, r0
	switch(charger_state)
 80042ec:	2b05      	cmp	r3, #5
 80042ee:	d839      	bhi.n	8004364 <charger_cp_state_control+0x88>
 80042f0:	4abb      	ldr	r2, [pc, #748]	; (80045e0 <charger_cp_state_control+0x304>)
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	58d3      	ldr	r3, [r2, r3]
 80042f6:	469f      	mov	pc, r3
				if((0 == Charger.forcestop_wake_up_seq_flag) && (Charger.current_I_rms > CHARGSERV_AMPE_MIN_VALUE))
 80042f8:	2478      	movs	r4, #120	; 0x78
 80042fa:	5d2b      	ldrb	r3, [r5, r4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d105      	bne.n	800430c <charger_cp_state_control+0x30>
 8004300:	23fa      	movs	r3, #250	; 0xfa
 8004302:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	429a      	cmp	r2, r3
 8004308:	d900      	bls.n	800430c <charger_cp_state_control+0x30>
 800430a:	e1d3      	b.n	80046b4 <charger_cp_state_control+0x3d8>
					_LIB_USERDELAY_stop(&gDelay_forcestop_wake_up_seq_flag_set);
 800430c:	48b5      	ldr	r0, [pc, #724]	; (80045e4 <charger_cp_state_control+0x308>)
 800430e:	f002 fea1 	bl	8007054 <_LIB_USERDELAY_stop>
				switch(Charger.chargstate)
 8004312:	2473      	movs	r4, #115	; 0x73
 8004314:	5d2b      	ldrb	r3, [r5, r4]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d100      	bne.n	800431c <charger_cp_state_control+0x40>
 800431a:	e1a9      	b.n	8004670 <charger_cp_state_control+0x394>
 800431c:	2b02      	cmp	r3, #2
 800431e:	d100      	bne.n	8004322 <charger_cp_state_control+0x46>
 8004320:	e18c      	b.n	800463c <charger_cp_state_control+0x360>
 8004322:	2b00      	cmp	r3, #0
 8004324:	d11e      	bne.n	8004364 <charger_cp_state_control+0x88>
	if(Charger.wake_up_seq_flag == 1)
 8004326:	2365      	movs	r3, #101	; 0x65
 8004328:	5ceb      	ldrb	r3, [r5, r3]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d100      	bne.n	8004330 <charger_cp_state_control+0x54>
 800432e:	e2a5      	b.n	800487c <charger_cp_state_control+0x5a0>
						_LIB_USERDELAY_stop(&gTimeout_auto_finish);
 8004330:	48ad      	ldr	r0, [pc, #692]	; (80045e8 <charger_cp_state_control+0x30c>)
 8004332:	f002 fe8f 	bl	8007054 <_LIB_USERDELAY_stop>
						_LIB_USERDELAY_stop(&gTimeout_charging_stable);
 8004336:	48ad      	ldr	r0, [pc, #692]	; (80045ec <charger_cp_state_control+0x310>)
 8004338:	f002 fe8c 	bl	8007054 <_LIB_USERDELAY_stop>
						_LIB_USERDELAY_stop(&gTimeout_charging_full);
 800433c:	48ac      	ldr	r0, [pc, #688]	; (80045f0 <charger_cp_state_control+0x314>)
 800433e:	f002 fe89 	bl	8007054 <_LIB_USERDELAY_stop>
						_LIB_USERDELAY_stop(&gTimeout_forcestop_wake_up_seq_is_finish);
 8004342:	48ac      	ldr	r0, [pc, #688]	; (80045f4 <charger_cp_state_control+0x318>)
 8004344:	f002 fe86 	bl	8007054 <_LIB_USERDELAY_stop>
						_LIB_USERDELAY_stop(&gTimeout_full_wake_up_seq_is_finish);
 8004348:	48ab      	ldr	r0, [pc, #684]	; (80045f8 <charger_cp_state_control+0x31c>)
 800434a:	f002 fe83 	bl	8007054 <_LIB_USERDELAY_stop>
						Charger.forcestop_wake_up_seq_count = 0;
 800434e:	2300      	movs	r3, #0
 8004350:	2276      	movs	r2, #118	; 0x76
 8004352:	54ab      	strb	r3, [r5, r2]
						Charger.forcestop_wake_up_seq_count_limit_detect = 0;
 8004354:	3203      	adds	r2, #3
 8004356:	54ab      	strb	r3, [r5, r2]
						_LIB_LOGGING_printf("#### CHARGSERV : chargstate : Start #### \r\n");
 8004358:	48a8      	ldr	r0, [pc, #672]	; (80045fc <charger_cp_state_control+0x320>)
						Charger.chargstate = Charg_Start;//is_charging_sign = 1;
 800435a:	3373      	adds	r3, #115	; 0x73
 800435c:	3a78      	subs	r2, #120	; 0x78
 800435e:	54ea      	strb	r2, [r5, r3]
						_LIB_LOGGING_printf("#### CHARGSERV : chargstate : Start #### \r\n");
 8004360:	f006 fd66 	bl	800ae30 <puts>
}
 8004364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			_MW_CP_set_pwm_duty(100);
 8004366:	49a6      	ldr	r1, [pc, #664]	; (8004600 <charger_cp_state_control+0x324>)
 8004368:	2000      	movs	r0, #0
 800436a:	f002 ff09 	bl	8007180 <_MW_CP_set_pwm_duty>
}
 800436e:	e7f9      	b.n	8004364 <charger_cp_state_control+0x88>
			if(Charger.chargstate > Charg_Standby)//if(is_charging_sign == 1)
 8004370:	2373      	movs	r3, #115	; 0x73
 8004372:	5cea      	ldrb	r2, [r5, r3]
 8004374:	2a00      	cmp	r2, #0
 8004376:	d000      	beq.n	800437a <charger_cp_state_control+0x9e>
 8004378:	e0ae      	b.n	80044d8 <charger_cp_state_control+0x1fc>
			if((cp_state == PWM_12V) || (cp_state == PWM_9V) || (cp_state == PWM_6V))
 800437a:	1f33      	subs	r3, r6, #4
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d9f1      	bls.n	8004366 <charger_cp_state_control+0x8a>
			if(cp_state == DC_12V)
 8004382:	2e01      	cmp	r6, #1
 8004384:	d1ee      	bne.n	8004364 <charger_cp_state_control+0x88>
				_APP_CHARGSERV_finish_ok();
 8004386:	f7ff fc1d 	bl	8003bc4 <_APP_CHARGSERV_finish_ok>
				Charger.reg.charging_id_tagging_stop = 0;
 800438a:	2240      	movs	r2, #64	; 0x40
 800438c:	796b      	ldrb	r3, [r5, #5]
 800438e:	4393      	bics	r3, r2
 8004390:	716b      	strb	r3, [r5, #5]
 8004392:	e7e7      	b.n	8004364 <charger_cp_state_control+0x88>
			if(Charger.chargstate > Charg_Standby)//if(is_charging_sign == 1)
 8004394:	2373      	movs	r3, #115	; 0x73
 8004396:	5cea      	ldrb	r2, [r5, r3]
 8004398:	2a00      	cmp	r2, #0
 800439a:	d0e3      	beq.n	8004364 <charger_cp_state_control+0x88>
				Charger.chargstate = Charg_Standby;//is_charging_sign = 0;
 800439c:	2200      	movs	r2, #0
				_LIB_LOGGING_printf("#### CHARGSERV : chargstate : Standby(UserCheck) #### \r\n");
 800439e:	4899      	ldr	r0, [pc, #612]	; (8004604 <charger_cp_state_control+0x328>)
				Charger.chargstate = Charg_Standby;//is_charging_sign = 0;
 80043a0:	54ea      	strb	r2, [r5, r3]
				_LIB_LOGGING_printf("#### CHARGSERV : chargstate : Standby(UserCheck) #### \r\n");
 80043a2:	f006 fd45 	bl	800ae30 <puts>
 80043a6:	e7dd      	b.n	8004364 <charger_cp_state_control+0x88>
			if(((cp_state == DC_9V) || (cp_state == DC_6V)) && (0 == Charger.reg.connect_timeout))
 80043a8:	3e02      	subs	r6, #2
 80043aa:	b2f0      	uxtb	r0, r6
 80043ac:	2801      	cmp	r0, #1
 80043ae:	d8d9      	bhi.n	8004364 <charger_cp_state_control+0x88>
 80043b0:	796b      	ldrb	r3, [r5, #5]
 80043b2:	071b      	lsls	r3, r3, #28
 80043b4:	d4d6      	bmi.n	8004364 <charger_cp_state_control+0x88>
				_LIB_USERDELAY_stop(&gTimeout_connect);
 80043b6:	4894      	ldr	r0, [pc, #592]	; (8004608 <charger_cp_state_control+0x32c>)
 80043b8:	f002 fe4c 	bl	8007054 <_LIB_USERDELAY_stop>
	if(0 == charger_duty_ondelay_flag)
 80043bc:	4c93      	ldr	r4, [pc, #588]	; (800460c <charger_cp_state_control+0x330>)
 80043be:	7823      	ldrb	r3, [r4, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d100      	bne.n	80043c6 <charger_cp_state_control+0xea>
 80043c4:	e224      	b.n	8004810 <charger_cp_state_control+0x534>
				if(_TRUE == _APP_CHARGSERV_complete_duty_ondelay())
 80043c6:	f7ff fc39 	bl	8003c3c <_APP_CHARGSERV_complete_duty_ondelay>
 80043ca:	2801      	cmp	r0, #1
 80043cc:	d1ca      	bne.n	8004364 <charger_cp_state_control+0x88>
					_MW_CP_set_pwm_duty(_MW_CP_cal_ampe_to_duty(_APP_CHARGSERV_get_active_Ampe()));
 80043ce:	2364      	movs	r3, #100	; 0x64
 80043d0:	5ce8      	ldrb	r0, [r5, r3]
 80043d2:	f002 ffa3 	bl	800731c <_MW_CP_cal_ampe_to_duty>
 80043d6:	f7fe fb83 	bl	8002ae0 <__aeabi_ui2d>
 80043da:	f002 fed1 	bl	8007180 <_MW_CP_set_pwm_duty>
					_APP_CHARGSERV_connect_ok();
 80043de:	f7ff fb9d 	bl	8003b1c <_APP_CHARGSERV_connect_ok>
					Charger.full_wake_up_seq_count = 0;
 80043e2:	2300      	movs	r3, #0
 80043e4:	2274      	movs	r2, #116	; 0x74
					Charger.stable_full_detect = 0;
 80043e6:	2100      	movs	r1, #0
					Charger.full_wake_up_seq_count = 0;
 80043e8:	54ab      	strb	r3, [r5, r2]
					Charger.forcestop_wake_up_seq_count = 0;
 80043ea:	3202      	adds	r2, #2
 80043ec:	54ab      	strb	r3, [r5, r2]
					Charger.forcestop_wake_up_seq_flag = 0;
 80043ee:	3202      	adds	r2, #2
 80043f0:	52ab      	strh	r3, [r5, r2]
					Charger.stable_full_detect = 0;
 80043f2:	3209      	adds	r2, #9
 80043f4:	54a9      	strb	r1, [r5, r2]
	Charger.startpoint_Energy = energy;
 80043f6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
	Charger.use_energy = 0;
 80043f8:	66ab      	str	r3, [r5, #104]	; 0x68
	Charger.startpoint_Energy = energy;
 80043fa:	662a      	str	r2, [r5, #96]	; 0x60
}
 80043fc:	e7b2      	b.n	8004364 <charger_cp_state_control+0x88>
	if(Charger.current_Active_Energy > Charger.startpoint_Energy)
 80043fe:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004400:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8004402:	4293      	cmp	r3, r2
 8004404:	d847      	bhi.n	8004496 <charger_cp_state_control+0x1ba>
		ret_value = 0;
 8004406:	2100      	movs	r1, #0
	else if(Charger.current_Active_Energy < Charger.startpoint_Energy)
 8004408:	4293      	cmp	r3, r2
 800440a:	d341      	bcc.n	8004490 <charger_cp_state_control+0x1b4>
	return Charger.wake_up_seq_step;
 800440c:	2367      	movs	r3, #103	; 0x67
	Charger.use_energy = ret_value;
 800440e:	66a9      	str	r1, [r5, #104]	; 0x68
			if((charger_get_wake_up_seq_step() == CP_OFF) || (charger_get_wake_up_seq_step() == PWM_DISABLE) || (1 == Charger.leakage_instop_flag))
 8004410:	5ceb      	ldrb	r3, [r5, r3]
 8004412:	3b02      	subs	r3, #2
 8004414:	2b01      	cmp	r3, #1
 8004416:	d903      	bls.n	8004420 <charger_cp_state_control+0x144>
 8004418:	237c      	movs	r3, #124	; 0x7c
 800441a:	5ceb      	ldrb	r3, [r5, r3]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d161      	bne.n	80044e4 <charger_cp_state_control+0x208>
				_MW_CP_set_pwm_duty(100);
 8004420:	2000      	movs	r0, #0
 8004422:	4977      	ldr	r1, [pc, #476]	; (8004600 <charger_cp_state_control+0x324>)
 8004424:	f002 feac 	bl	8007180 <_MW_CP_set_pwm_duty>
			if((cp_state == Err_PWMH) || (cp_state == Err_PWML) || (cp_state == Err_DC))
 8004428:	0033      	movs	r3, r6
 800442a:	3b08      	subs	r3, #8
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d811      	bhi.n	8004456 <charger_cp_state_control+0x17a>
				if(Charger.chargstate > Charg_Standby)//if(is_charging_sign == 1)
 8004432:	2373      	movs	r3, #115	; 0x73
 8004434:	5cea      	ldrb	r2, [r5, r3]
 8004436:	2a00      	cmp	r2, #0
 8004438:	d000      	beq.n	800443c <charger_cp_state_control+0x160>
 800443a:	e0b5      	b.n	80045a8 <charger_cp_state_control+0x2cc>
	if(Charger.wake_up_seq_flag == 1)
 800443c:	2365      	movs	r3, #101	; 0x65
 800443e:	5ceb      	ldrb	r3, [r5, r3]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d100      	bne.n	8004446 <charger_cp_state_control+0x16a>
 8004444:	e0c6      	b.n	80045d4 <charger_cp_state_control+0x2f8>
				_LIB_USERDELAY_stop(&gTimeout_auto_finish);
 8004446:	4868      	ldr	r0, [pc, #416]	; (80045e8 <charger_cp_state_control+0x30c>)
 8004448:	f002 fe04 	bl	8007054 <_LIB_USERDELAY_stop>
	charger_fault_status.LEAKAGE_ERR = _OFF;
}

void _APP_CHARGSERV_cp_fault_set()
{
	charger_fault_status.CP_ERR = _ON;
 800444c:	2140      	movs	r1, #64	; 0x40
 800444e:	4a70      	ldr	r2, [pc, #448]	; (8004610 <charger_cp_state_control+0x334>)
 8004450:	7813      	ldrb	r3, [r2, #0]
 8004452:	430b      	orrs	r3, r1
 8004454:	7013      	strb	r3, [r2, #0]
			if(1 == Charger.leakage_instop_flag)
 8004456:	237c      	movs	r3, #124	; 0x7c
 8004458:	5ceb      	ldrb	r3, [r5, r3]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d01d      	beq.n	800449a <charger_cp_state_control+0x1be>
			if(3 == Charger.leakage_instop_step)
 800445e:	247d      	movs	r4, #125	; 0x7d
 8004460:	5d2b      	ldrb	r3, [r5, r4]
 8004462:	2b03      	cmp	r3, #3
 8004464:	d100      	bne.n	8004468 <charger_cp_state_control+0x18c>
 8004466:	e0a5      	b.n	80045b4 <charger_cp_state_control+0x2d8>
			if(cp_state == PWM_6V)
 8004468:	2e06      	cmp	r6, #6
 800446a:	d100      	bne.n	800446e <charger_cp_state_control+0x192>
 800446c:	e744      	b.n	80042f8 <charger_cp_state_control+0x1c>
			if(cp_state == PWM_9V)
 800446e:	2e05      	cmp	r6, #5
 8004470:	d141      	bne.n	80044f6 <charger_cp_state_control+0x21a>
				switch(Charger.chargstate)
 8004472:	2273      	movs	r2, #115	; 0x73
 8004474:	5cab      	ldrb	r3, [r5, r2]
 8004476:	2b02      	cmp	r3, #2
 8004478:	d100      	bne.n	800447c <charger_cp_state_control+0x1a0>
 800447a:	e17c      	b.n	8004776 <charger_cp_state_control+0x49a>
 800447c:	d876      	bhi.n	800456c <charger_cp_state_control+0x290>
 800447e:	2b00      	cmp	r3, #0
 8004480:	d100      	bne.n	8004484 <charger_cp_state_control+0x1a8>
 8004482:	e12e      	b.n	80046e2 <charger_cp_state_control+0x406>
						Charger.chargstate = Charg_Standby;
 8004484:	2300      	movs	r3, #0
						_LIB_LOGGING_printf("#### CHARGSERV : chargstate : Standby(PMW6V -> PWM9V) #### \r\n");
 8004486:	4863      	ldr	r0, [pc, #396]	; (8004614 <charger_cp_state_control+0x338>)
						Charger.chargstate = Charg_Standby;
 8004488:	54ab      	strb	r3, [r5, r2]
						_LIB_LOGGING_printf("#### CHARGSERV : chargstate : Standby(PMW6V -> PWM9V) #### \r\n");
 800448a:	f006 fcd1 	bl	800ae30 <puts>
					break;
 800448e:	e769      	b.n	8004364 <charger_cp_state_control+0x88>
		ret_value = ((CHARGSERV_MAXIMUM_ENERGY_VALUE) - Charger.startpoint_Energy + Charger.current_Active_Energy + 1);
 8004490:	4961      	ldr	r1, [pc, #388]	; (8004618 <charger_cp_state_control+0x33c>)
 8004492:	468c      	mov	ip, r1
 8004494:	4463      	add	r3, ip
 8004496:	1a99      	subs	r1, r3, r2
 8004498:	e7b8      	b.n	800440c <charger_cp_state_control+0x130>
				switch(Charger.leakage_instop_step)
 800449a:	227d      	movs	r2, #125	; 0x7d
 800449c:	5cab      	ldrb	r3, [r5, r2]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d059      	beq.n	8004556 <charger_cp_state_control+0x27a>
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d046      	beq.n	8004534 <charger_cp_state_control+0x258>
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d000      	beq.n	80044ac <charger_cp_state_control+0x1d0>
 80044aa:	e75b      	b.n	8004364 <charger_cp_state_control+0x88>
	if(Charger.wake_up_seq_flag == 0)
 80044ac:	3365      	adds	r3, #101	; 0x65
 80044ae:	5ceb      	ldrb	r3, [r5, r3]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d100      	bne.n	80044b6 <charger_cp_state_control+0x1da>
 80044b4:	e1a4      	b.n	8004800 <charger_cp_state_control+0x524>
	Charger.wake_up_seq_flag = 1;
 80044b6:	2365      	movs	r3, #101	; 0x65
 80044b8:	2201      	movs	r2, #1
 80044ba:	54ea      	strb	r2, [r5, r3]
	return Charger.wake_up_seq_step;
 80044bc:	3302      	adds	r3, #2
	if((charger_get_wake_up_seq_flag() == 1) && (charger_get_wake_up_seq_step() == NON))
 80044be:	5ceb      	ldrb	r3, [r5, r3]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d102      	bne.n	80044ca <charger_cp_state_control+0x1ee>
 80044c4:	2063      	movs	r0, #99	; 0x63
 80044c6:	f7ff f985 	bl	80037d4 <charger_wake_up_seq_start.part.0>
						Charger.leakage_instop_step = 1;
 80044ca:	237d      	movs	r3, #125	; 0x7d
 80044cc:	2201      	movs	r2, #1
						_LIB_LOGGING_printf("#### CHARGSERV : Leakage_instop_wake_up_seq_start #### \r\n");
 80044ce:	4853      	ldr	r0, [pc, #332]	; (800461c <charger_cp_state_control+0x340>)
						Charger.leakage_instop_step = 1;
 80044d0:	54ea      	strb	r2, [r5, r3]
						_LIB_LOGGING_printf("#### CHARGSERV : Leakage_instop_wake_up_seq_start #### \r\n");
 80044d2:	f006 fcad 	bl	800ae30 <puts>
					break;
 80044d6:	e745      	b.n	8004364 <charger_cp_state_control+0x88>
				Charger.chargstate = Charg_Standby;//is_charging_sign = 0;
 80044d8:	2200      	movs	r2, #0
				_LIB_LOGGING_printf("#### CHARGSERV : chargstate : Standby(finish) #### \r\n");
 80044da:	4851      	ldr	r0, [pc, #324]	; (8004620 <charger_cp_state_control+0x344>)
				Charger.chargstate = Charg_Standby;//is_charging_sign = 0;
 80044dc:	54ea      	strb	r2, [r5, r3]
				_LIB_LOGGING_printf("#### CHARGSERV : chargstate : Standby(finish) #### \r\n");
 80044de:	f006 fca7 	bl	800ae30 <puts>
 80044e2:	e74a      	b.n	800437a <charger_cp_state_control+0x9e>
				_MW_CP_set_pwm_duty(_MW_CP_cal_ampe_to_duty(_APP_CHARGSERV_get_active_Ampe()));
 80044e4:	2364      	movs	r3, #100	; 0x64
 80044e6:	5ce8      	ldrb	r0, [r5, r3]
 80044e8:	f002 ff18 	bl	800731c <_MW_CP_cal_ampe_to_duty>
 80044ec:	f7fe faf8 	bl	8002ae0 <__aeabi_ui2d>
 80044f0:	f002 fe46 	bl	8007180 <_MW_CP_set_pwm_duty>
 80044f4:	e798      	b.n	8004428 <charger_cp_state_control+0x14c>
			if(cp_state == PWM_12V)
 80044f6:	2e04      	cmp	r6, #4
 80044f8:	d000      	beq.n	80044fc <charger_cp_state_control+0x220>
 80044fa:	e733      	b.n	8004364 <charger_cp_state_control+0x88>
	if(Charger.wake_up_seq_flag == 1)
 80044fc:	2365      	movs	r3, #101	; 0x65
 80044fe:	5ceb      	ldrb	r3, [r5, r3]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d100      	bne.n	8004506 <charger_cp_state_control+0x22a>
 8004504:	e0ea      	b.n	80046dc <charger_cp_state_control+0x400>
				_LIB_USERDELAY_stop(&gTimeout_auto_finish);
 8004506:	4838      	ldr	r0, [pc, #224]	; (80045e8 <charger_cp_state_control+0x30c>)
 8004508:	f002 fda4 	bl	8007054 <_LIB_USERDELAY_stop>
				if(Charg_Start >= Charger.chargstate)
 800450c:	2373      	movs	r3, #115	; 0x73
 800450e:	5ceb      	ldrb	r3, [r5, r3]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d80a      	bhi.n	800452a <charger_cp_state_control+0x24e>
						if(0 == Charger.reg.charging_compulsionunplug)
 8004514:	79ab      	ldrb	r3, [r5, #6]
 8004516:	07db      	lsls	r3, r3, #31
 8004518:	d400      	bmi.n	800451c <charger_cp_state_control+0x240>
 800451a:	e16d      	b.n	80047f8 <charger_cp_state_control+0x51c>
	}
}

void _APP_CHARGSERV_set_charging_to_unplug()
{
	Charger.reg.charging_compulsionunplug = 1;
 800451c:	2201      	movs	r2, #1
 800451e:	79ab      	ldrb	r3, [r5, #6]
 8004520:	4313      	orrs	r3, r2
 8004522:	71ab      	strb	r3, [r5, #6]
						if(Charger.reg.charging_continuous == 0)
 8004524:	079b      	lsls	r3, r3, #30
 8004526:	d500      	bpl.n	800452a <charger_cp_state_control+0x24e>
 8004528:	e71c      	b.n	8004364 <charger_cp_state_control+0x88>
							_MW_CP_mc_relay_off_fast();
 800452a:	f002 fecb 	bl	80072c4 <_MW_CP_mc_relay_off_fast>
							_APP_CHARGSERV_charging_ok();
 800452e:	f7ff fb2d 	bl	8003b8c <_APP_CHARGSERV_charging_ok>
 8004532:	e717      	b.n	8004364 <charger_cp_state_control+0x88>
	if(Charger.wake_up_seq_flag == 1)
 8004534:	2365      	movs	r3, #101	; 0x65
 8004536:	5ceb      	ldrb	r3, [r5, r3]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d100      	bne.n	800453e <charger_cp_state_control+0x262>
 800453c:	e187      	b.n	800484e <charger_cp_state_control+0x572>
						Charger.leakage_instop_flag = 0;
 800453e:	22c0      	movs	r2, #192	; 0xc0
 8004540:	237c      	movs	r3, #124	; 0x7c
 8004542:	0092      	lsls	r2, r2, #2
						_LIB_USERDELAY_start(&gTimout_Leakage_Relapse, DELAY_RENEW_OFF);
 8004544:	2100      	movs	r1, #0
						Charger.leakage_instop_flag = 0;
 8004546:	52ea      	strh	r2, [r5, r3]
						_LIB_USERDELAY_start(&gTimout_Leakage_Relapse, DELAY_RENEW_OFF);
 8004548:	4836      	ldr	r0, [pc, #216]	; (8004624 <charger_cp_state_control+0x348>)
 800454a:	f002 fd73 	bl	8007034 <_LIB_USERDELAY_start>
						_LIB_LOGGING_printf("#### CHARGSERV : Leakage_instop_Relapse_timeout_start #### \r\n");
 800454e:	4836      	ldr	r0, [pc, #216]	; (8004628 <charger_cp_state_control+0x34c>)
 8004550:	f006 fc6e 	bl	800ae30 <puts>
					break;
 8004554:	e706      	b.n	8004364 <charger_cp_state_control+0x88>
	if(Charger.wake_up_seq_flag == 1)
 8004556:	2365      	movs	r3, #101	; 0x65
 8004558:	5ceb      	ldrb	r3, [r5, r3]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d100      	bne.n	8004560 <charger_cp_state_control+0x284>
 800455e:	e701      	b.n	8004364 <charger_cp_state_control+0x88>
							Charger.leakage_instop_step = 2;
 8004560:	2302      	movs	r3, #2
						_LIB_LOGGING_printf("#### CHARGSERV : Leakage_instop_wake_up_seq_OK #### \r\n");
 8004562:	4832      	ldr	r0, [pc, #200]	; (800462c <charger_cp_state_control+0x350>)
							Charger.leakage_instop_step = 2;
 8004564:	54ab      	strb	r3, [r5, r2]
						_LIB_LOGGING_printf("#### CHARGSERV : Leakage_instop_wake_up_seq_OK #### \r\n");
 8004566:	f006 fc63 	bl	800ae30 <puts>
 800456a:	e6fb      	b.n	8004364 <charger_cp_state_control+0x88>
 800456c:	2b03      	cmp	r3, #3
 800456e:	d000      	beq.n	8004572 <charger_cp_state_control+0x296>
 8004570:	e6f8      	b.n	8004364 <charger_cp_state_control+0x88>
						_LIB_USERDELAY_start(&gTimeout_auto_finish, DELAY_RENEW_OFF);
 8004572:	4c1d      	ldr	r4, [pc, #116]	; (80045e8 <charger_cp_state_control+0x30c>)
 8004574:	2100      	movs	r1, #0
 8004576:	0020      	movs	r0, r4
 8004578:	f002 fd5c 	bl	8007034 <_LIB_USERDELAY_start>
						if(_LIB_USERDELAY_isfired(&gTimeout_auto_finish))
 800457c:	0020      	movs	r0, r4
 800457e:	f002 fd6d 	bl	800705c <_LIB_USERDELAY_isfired>
 8004582:	2800      	cmp	r0, #0
 8004584:	d100      	bne.n	8004588 <charger_cp_state_control+0x2ac>
 8004586:	e6ed      	b.n	8004364 <charger_cp_state_control+0x88>
							_LIB_USERDELAY_stop(&gTimeout_auto_finish);
 8004588:	0020      	movs	r0, r4
 800458a:	f002 fd63 	bl	8007054 <_LIB_USERDELAY_stop>
							Charger.forcestop_wake_up_seq_count = 0;
 800458e:	2300      	movs	r3, #0
 8004590:	2276      	movs	r2, #118	; 0x76
 8004592:	54ab      	strb	r3, [r5, r2]
							Charger.full_wake_up_seq_count = 0;
 8004594:	3a02      	subs	r2, #2
 8004596:	54ab      	strb	r3, [r5, r2]
							_LIB_LOGGING_printf("#### CHARGSERV : auto finish #### \r\n");
 8004598:	4825      	ldr	r0, [pc, #148]	; (8004630 <charger_cp_state_control+0x354>)
							Charger.forcestop_wake_up_seq_flag = 0;
 800459a:	3204      	adds	r2, #4
 800459c:	54ab      	strb	r3, [r5, r2]
							_LIB_LOGGING_printf("#### CHARGSERV : auto finish #### \r\n");
 800459e:	f006 fc47 	bl	800ae30 <puts>
							_APP_CHARGSERV_charging_ok();
 80045a2:	f7ff faf3 	bl	8003b8c <_APP_CHARGSERV_charging_ok>
 80045a6:	e6dd      	b.n	8004364 <charger_cp_state_control+0x88>
					Charger.chargstate = Charg_Standby;//is_charging_sign = 0;
 80045a8:	2200      	movs	r2, #0
					_LIB_LOGGING_printf("#### CHARGSERV : chargstate : Standby(fault) #### \r\n");
 80045aa:	4822      	ldr	r0, [pc, #136]	; (8004634 <charger_cp_state_control+0x358>)
					Charger.chargstate = Charg_Standby;//is_charging_sign = 0;
 80045ac:	54ea      	strb	r2, [r5, r3]
					_LIB_LOGGING_printf("#### CHARGSERV : chargstate : Standby(fault) #### \r\n");
 80045ae:	f006 fc3f 	bl	800ae30 <puts>
 80045b2:	e743      	b.n	800443c <charger_cp_state_control+0x160>
				if(_LIB_USERDELAY_isfired(&gTimout_Leakage_Relapse))
 80045b4:	4f1b      	ldr	r7, [pc, #108]	; (8004624 <charger_cp_state_control+0x348>)
 80045b6:	0038      	movs	r0, r7
 80045b8:	f002 fd50 	bl	800705c <_LIB_USERDELAY_isfired>
 80045bc:	2800      	cmp	r0, #0
 80045be:	d100      	bne.n	80045c2 <charger_cp_state_control+0x2e6>
 80045c0:	e752      	b.n	8004468 <charger_cp_state_control+0x18c>
					_LIB_USERDELAY_stop(&gTimout_Leakage_Relapse);
 80045c2:	0038      	movs	r0, r7
 80045c4:	f002 fd46 	bl	8007054 <_LIB_USERDELAY_stop>
					Charger.leakage_instop_step = 0;
 80045c8:	2300      	movs	r3, #0
						_LIB_LOGGING_printf("#### CHARGSERV : Leakage_instop_Relapse_timeout_clear #### \r\n");
 80045ca:	481b      	ldr	r0, [pc, #108]	; (8004638 <charger_cp_state_control+0x35c>)
					Charger.leakage_instop_step = 0;
 80045cc:	552b      	strb	r3, [r5, r4]
						_LIB_LOGGING_printf("#### CHARGSERV : Leakage_instop_Relapse_timeout_clear #### \r\n");
 80045ce:	f006 fc2f 	bl	800ae30 <puts>
 80045d2:	e749      	b.n	8004468 <charger_cp_state_control+0x18c>
 80045d4:	f7ff f94c 	bl	8003870 <charger_wake_up_seq_forced_stop.part.0>
 80045d8:	e735      	b.n	8004446 <charger_cp_state_control+0x16a>
 80045da:	46c0      	nop			; (mov r8, r8)
 80045dc:	20000100 	.word	0x20000100
 80045e0:	0800c9fc 	.word	0x0800c9fc
 80045e4:	200001e0 	.word	0x200001e0
 80045e8:	20000258 	.word	0x20000258
 80045ec:	20000270 	.word	0x20000270
 80045f0:	20000264 	.word	0x20000264
 80045f4:	20000294 	.word	0x20000294
 80045f8:	200002ac 	.word	0x200002ac
 80045fc:	0800c6b8 	.word	0x0800c6b8
 8004600:	40590000 	.word	0x40590000
 8004604:	0800c520 	.word	0x0800c520
 8004608:	2000027c 	.word	0x2000027c
 800460c:	2000018a 	.word	0x2000018a
 8004610:	2000018c 	.word	0x2000018c
 8004614:	0800c874 	.word	0x0800c874
 8004618:	000f4240 	.word	0x000f4240
 800461c:	0800c58c 	.word	0x0800c58c
 8004620:	0800c9c4 	.word	0x0800c9c4
 8004624:	200002f4 	.word	0x200002f4
 8004628:	0800c600 	.word	0x0800c600
 800462c:	0800c5c8 	.word	0x0800c5c8
 8004630:	0800c974 	.word	0x0800c974
 8004634:	0800c558 	.word	0x0800c558
 8004638:	0800c640 	.word	0x0800c640
						if(1 == Charger.stable_changed_flag)
 800463c:	2382      	movs	r3, #130	; 0x82
 800463e:	5cea      	ldrb	r2, [r5, r3]
 8004640:	2a01      	cmp	r2, #1
 8004642:	d000      	beq.n	8004646 <charger_cp_state_control+0x36a>
 8004644:	e68e      	b.n	8004364 <charger_cp_state_control+0x88>
							Charger.stable_changed_flag = 0;
 8004646:	2200      	movs	r2, #0
 8004648:	54ea      	strb	r2, [r5, r3]
							Charger.full_wake_up_seq_count = 0;
 800464a:	3b0e      	subs	r3, #14
 800464c:	54ea      	strb	r2, [r5, r3]
							Charger.stable_full_detect = 0;
 800464e:	330d      	adds	r3, #13
 8004650:	54ea      	strb	r2, [r5, r3]
	if(Charger.wake_up_seq_flag == 1)
 8004652:	3b1c      	subs	r3, #28
 8004654:	5ceb      	ldrb	r3, [r5, r3]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d100      	bne.n	800465c <charger_cp_state_control+0x380>
 800465a:	e12d      	b.n	80048b8 <charger_cp_state_control+0x5dc>
							_LIB_USERDELAY_stop(&gTimeout_charging_full);
 800465c:	48a1      	ldr	r0, [pc, #644]	; (80048e4 <charger_cp_state_control+0x608>)
 800465e:	f002 fcf9 	bl	8007054 <_LIB_USERDELAY_stop>
							_LIB_USERDELAY_stop(&gTimeout_full_wake_up_seq_is_finish);
 8004662:	48a1      	ldr	r0, [pc, #644]	; (80048e8 <charger_cp_state_control+0x60c>)
 8004664:	f002 fcf6 	bl	8007054 <_LIB_USERDELAY_stop>
							_LIB_LOGGING_printf("#### CHARGSERV : chargstate : Stable(PWM6V)_full_wake_up_seq_reinit #### \r\n");
 8004668:	48a0      	ldr	r0, [pc, #640]	; (80048ec <charger_cp_state_control+0x610>)
 800466a:	f006 fbe1 	bl	800ae30 <puts>
 800466e:	e679      	b.n	8004364 <charger_cp_state_control+0x88>
						if(Charger.current_I_rms > (Charger.active_Ampe * 500))
 8004670:	2364      	movs	r3, #100	; 0x64
 8004672:	5ce9      	ldrb	r1, [r5, r3]
 8004674:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8004676:	014b      	lsls	r3, r1, #5
 8004678:	1a5b      	subs	r3, r3, r1
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	185b      	adds	r3, r3, r1
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	429a      	cmp	r2, r3
 8004682:	d800      	bhi.n	8004686 <charger_cp_state_control+0x3aa>
 8004684:	e0c0      	b.n	8004808 <charger_cp_state_control+0x52c>
							_LIB_USERDELAY_start(&gTimeout_charging_stable, DELAY_RENEW_OFF);
 8004686:	4e9a      	ldr	r6, [pc, #616]	; (80048f0 <charger_cp_state_control+0x614>)
 8004688:	2100      	movs	r1, #0
 800468a:	0030      	movs	r0, r6
 800468c:	f002 fcd2 	bl	8007034 <_LIB_USERDELAY_start>
							if(_LIB_USERDELAY_isfired(&gTimeout_charging_stable))
 8004690:	0030      	movs	r0, r6
 8004692:	f002 fce3 	bl	800705c <_LIB_USERDELAY_isfired>
 8004696:	2800      	cmp	r0, #0
 8004698:	d100      	bne.n	800469c <charger_cp_state_control+0x3c0>
 800469a:	e663      	b.n	8004364 <charger_cp_state_control+0x88>
								_LIB_USERDELAY_stop(&gTimeout_charging_stable);
 800469c:	0030      	movs	r0, r6
 800469e:	f002 fcd9 	bl	8007054 <_LIB_USERDELAY_stop>
								Charger.chargstate = Charg_Stable;
 80046a2:	2302      	movs	r3, #2
								Charger.forcestop_wake_up_seq_count = 0;
 80046a4:	2200      	movs	r2, #0
								Charger.chargstate = Charg_Stable;
 80046a6:	552b      	strb	r3, [r5, r4]
								_LIB_LOGGING_printf("#### CHARGSERV : chargstate : Stable(PWM6V) #### \r\n");
 80046a8:	4892      	ldr	r0, [pc, #584]	; (80048f4 <charger_cp_state_control+0x618>)
								Charger.forcestop_wake_up_seq_count = 0;
 80046aa:	3374      	adds	r3, #116	; 0x74
 80046ac:	54ea      	strb	r2, [r5, r3]
								_LIB_LOGGING_printf("#### CHARGSERV : chargstate : Stable(PWM6V) #### \r\n");
 80046ae:	f006 fbbf 	bl	800ae30 <puts>
 80046b2:	e657      	b.n	8004364 <charger_cp_state_control+0x88>
					_LIB_USERDELAY_start(&gDelay_forcestop_wake_up_seq_flag_set, DELAY_RENEW_OFF);
 80046b4:	4e90      	ldr	r6, [pc, #576]	; (80048f8 <charger_cp_state_control+0x61c>)
 80046b6:	2100      	movs	r1, #0
 80046b8:	0030      	movs	r0, r6
 80046ba:	f002 fcbb 	bl	8007034 <_LIB_USERDELAY_start>
					if(_LIB_USERDELAY_isfired(&gDelay_forcestop_wake_up_seq_flag_set))
 80046be:	0030      	movs	r0, r6
 80046c0:	f002 fccc 	bl	800705c <_LIB_USERDELAY_isfired>
 80046c4:	2800      	cmp	r0, #0
 80046c6:	d100      	bne.n	80046ca <charger_cp_state_control+0x3ee>
 80046c8:	e623      	b.n	8004312 <charger_cp_state_control+0x36>
						_LIB_USERDELAY_stop(&gDelay_forcestop_wake_up_seq_flag_set);
 80046ca:	0030      	movs	r0, r6
 80046cc:	f002 fcc2 	bl	8007054 <_LIB_USERDELAY_stop>
						Charger.forcestop_wake_up_seq_flag = 1;
 80046d0:	2301      	movs	r3, #1
						_LIB_LOGGING_printf("#### CHARGSERV : forcestop_wake_up_seq start!! #### \r\n");
 80046d2:	488a      	ldr	r0, [pc, #552]	; (80048fc <charger_cp_state_control+0x620>)
						Charger.forcestop_wake_up_seq_flag = 1;
 80046d4:	552b      	strb	r3, [r5, r4]
						_LIB_LOGGING_printf("#### CHARGSERV : forcestop_wake_up_seq start!! #### \r\n");
 80046d6:	f006 fbab 	bl	800ae30 <puts>
 80046da:	e61a      	b.n	8004312 <charger_cp_state_control+0x36>
 80046dc:	f7ff f8c8 	bl	8003870 <charger_wake_up_seq_forced_stop.part.0>
 80046e0:	e711      	b.n	8004506 <charger_cp_state_control+0x22a>
						if(0 == Charger.forcestop_wake_up_seq_flag)
 80046e2:	2378      	movs	r3, #120	; 0x78
 80046e4:	5cea      	ldrb	r2, [r5, r3]
							wake_up_seq_count_limit = 3;
 80046e6:	4253      	negs	r3, r2
 80046e8:	4153      	adcs	r3, r2
 80046ea:	2101      	movs	r1, #1
 80046ec:	425b      	negs	r3, r3
 80046ee:	438b      	bics	r3, r1
						if(Charger.forcestop_wake_up_seq_count >= wake_up_seq_count_limit)
 80046f0:	3175      	adds	r1, #117	; 0x75
 80046f2:	5c69      	ldrb	r1, [r5, r1]
							wake_up_seq_count_limit = 3;
 80046f4:	3303      	adds	r3, #3
						if(Charger.forcestop_wake_up_seq_count >= wake_up_seq_count_limit)
 80046f6:	4299      	cmp	r1, r3
 80046f8:	db00      	blt.n	80046fc <charger_cp_state_control+0x420>
 80046fa:	e0ab      	b.n	8004854 <charger_cp_state_control+0x578>
	if(Charger.wake_up_seq_flag == 1)
 80046fc:	2365      	movs	r3, #101	; 0x65
 80046fe:	5ceb      	ldrb	r3, [r5, r3]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d00c      	beq.n	800471e <charger_cp_state_control+0x442>
								if(0 == Charger.forcestop_wake_up_seq_flag)
 8004704:	2a00      	cmp	r2, #0
 8004706:	d000      	beq.n	800470a <charger_cp_state_control+0x42e>
 8004708:	e0bb      	b.n	8004882 <charger_cp_state_control+0x5a6>
	if(Charger.wake_up_seq_flag == 0)
 800470a:	2b00      	cmp	r3, #0
 800470c:	d100      	bne.n	8004710 <charger_cp_state_control+0x434>
 800470e:	e0d6      	b.n	80048be <charger_cp_state_control+0x5e2>
	Charger.wake_up_seq_flag = 1;
 8004710:	2365      	movs	r3, #101	; 0x65
 8004712:	2201      	movs	r2, #1
 8004714:	54ea      	strb	r2, [r5, r3]
	return Charger.wake_up_seq_step;
 8004716:	3302      	adds	r3, #2
	if((charger_get_wake_up_seq_flag() == 1) && (charger_get_wake_up_seq_step() == NON))
 8004718:	5ceb      	ldrb	r3, [r5, r3]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d027      	beq.n	800476e <charger_cp_state_control+0x492>
 800471e:	4c78      	ldr	r4, [pc, #480]	; (8004900 <charger_cp_state_control+0x624>)
	if(1 == Charger.wake_up_seq_finish_flag)
 8004720:	2366      	movs	r3, #102	; 0x66
 8004722:	5cea      	ldrb	r2, [r5, r3]
 8004724:	2a01      	cmp	r2, #1
 8004726:	d108      	bne.n	800473a <charger_cp_state_control+0x45e>
		Charger.wake_up_seq_finish_flag = 0;
 8004728:	2200      	movs	r2, #0
							_LIB_USERDELAY_start(&gTimeout_forcestop_wake_up_seq_is_finish, DELAY_RENEW_OFF);
 800472a:	2100      	movs	r1, #0
 800472c:	0020      	movs	r0, r4
		Charger.wake_up_seq_finish_flag = 0;
 800472e:	54ea      	strb	r2, [r5, r3]
							_LIB_USERDELAY_start(&gTimeout_forcestop_wake_up_seq_is_finish, DELAY_RENEW_OFF);
 8004730:	f002 fc80 	bl	8007034 <_LIB_USERDELAY_start>
							_LIB_LOGGING_printf("#### CHARGSERV : forcestop_wake_up_seq_ is finish start #### \r\n");
 8004734:	4873      	ldr	r0, [pc, #460]	; (8004904 <charger_cp_state_control+0x628>)
 8004736:	f006 fb7b 	bl	800ae30 <puts>
						if(_LIB_USERDELAY_isfired(&gTimeout_forcestop_wake_up_seq_is_finish))
 800473a:	0020      	movs	r0, r4
 800473c:	f002 fc8e 	bl	800705c <_LIB_USERDELAY_isfired>
 8004740:	2800      	cmp	r0, #0
 8004742:	d100      	bne.n	8004746 <charger_cp_state_control+0x46a>
 8004744:	e60e      	b.n	8004364 <charger_cp_state_control+0x88>
							_LIB_USERDELAY_stop(&gTimeout_forcestop_wake_up_seq_is_finish);
 8004746:	0020      	movs	r0, r4
 8004748:	f002 fc84 	bl	8007054 <_LIB_USERDELAY_stop>
							if((3 != Charger.leakage_instop_step))							
 800474c:	237d      	movs	r3, #125	; 0x7d
 800474e:	5ceb      	ldrb	r3, [r5, r3]
 8004750:	2b03      	cmp	r3, #3
 8004752:	d003      	beq.n	800475c <charger_cp_state_control+0x480>
								Charger.forcestop_wake_up_seq_count++;
 8004754:	2276      	movs	r2, #118	; 0x76
 8004756:	5cab      	ldrb	r3, [r5, r2]
 8004758:	3301      	adds	r3, #1
 800475a:	54ab      	strb	r3, [r5, r2]
							_LIB_LOGGING_printf("#### CHARGSERV : chargstate : Standby_wake-up-squ(PWM9V) #### \r\n");
 800475c:	486a      	ldr	r0, [pc, #424]	; (8004908 <charger_cp_state_control+0x62c>)
 800475e:	f006 fb67 	bl	800ae30 <puts>
							_LIB_LOGGING_printf("#### CHARGSERV : chargstate : forcestop_wake_up_seq_count : %d #### \r\n", Charger.forcestop_wake_up_seq_count);
 8004762:	2376      	movs	r3, #118	; 0x76
 8004764:	4869      	ldr	r0, [pc, #420]	; (800490c <charger_cp_state_control+0x630>)
 8004766:	5ce9      	ldrb	r1, [r5, r3]
 8004768:	f006 fad6 	bl	800ad18 <iprintf>
 800476c:	e5fa      	b.n	8004364 <charger_cp_state_control+0x88>
 800476e:	2000      	movs	r0, #0
 8004770:	f7ff f830 	bl	80037d4 <charger_wake_up_seq_start.part.0>
 8004774:	e7d3      	b.n	800471e <charger_cp_state_control+0x442>
						if(Charger.full_wake_up_seq_count >= CHARGSERV_FULL_WAKE_UP_SEQ_COUNT)
 8004776:	2474      	movs	r4, #116	; 0x74
 8004778:	5d2b      	ldrb	r3, [r5, r4]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d854      	bhi.n	8004828 <charger_cp_state_control+0x54c>
	if(Charger.wake_up_seq_flag == 1)
 800477e:	2265      	movs	r2, #101	; 0x65
 8004780:	5caa      	ldrb	r2, [r5, r2]
 8004782:	2a01      	cmp	r2, #1
 8004784:	d00d      	beq.n	80047a2 <charger_cp_state_control+0x4c6>
								if(0 == Charger.restart_fulldetect_act)
 8004786:	2185      	movs	r1, #133	; 0x85
 8004788:	5c69      	ldrb	r1, [r5, r1]
 800478a:	2900      	cmp	r1, #0
 800478c:	d109      	bne.n	80047a2 <charger_cp_state_control+0x4c6>
	if(Charger.wake_up_seq_flag == 0)
 800478e:	2a00      	cmp	r2, #0
 8004790:	d100      	bne.n	8004794 <charger_cp_state_control+0x4b8>
 8004792:	e098      	b.n	80048c6 <charger_cp_state_control+0x5ea>
	Charger.wake_up_seq_flag = 1;
 8004794:	2265      	movs	r2, #101	; 0x65
 8004796:	2101      	movs	r1, #1
 8004798:	54a9      	strb	r1, [r5, r2]
	return Charger.wake_up_seq_step;
 800479a:	3202      	adds	r2, #2
	if((charger_get_wake_up_seq_flag() == 1) && (charger_get_wake_up_seq_step() == NON))
 800479c:	5caa      	ldrb	r2, [r5, r2]
 800479e:	2a00      	cmp	r2, #0
 80047a0:	d025      	beq.n	80047ee <charger_cp_state_control+0x512>
 80047a2:	4c51      	ldr	r4, [pc, #324]	; (80048e8 <charger_cp_state_control+0x60c>)
	if(1 == Charger.wake_up_seq_finish_flag)
 80047a4:	2366      	movs	r3, #102	; 0x66
 80047a6:	5cee      	ldrb	r6, [r5, r3]
 80047a8:	2e01      	cmp	r6, #1
 80047aa:	d10a      	bne.n	80047c2 <charger_cp_state_control+0x4e6>
		Charger.wake_up_seq_finish_flag = 0;
 80047ac:	2200      	movs	r2, #0
							_LIB_USERDELAY_start(&gTimeout_full_wake_up_seq_is_finish, DELAY_RENEW_OFF);
 80047ae:	2100      	movs	r1, #0
 80047b0:	0020      	movs	r0, r4
		Charger.wake_up_seq_finish_flag = 0;
 80047b2:	54ea      	strb	r2, [r5, r3]
							_LIB_USERDELAY_start(&gTimeout_full_wake_up_seq_is_finish, DELAY_RENEW_OFF);
 80047b4:	f002 fc3e 	bl	8007034 <_LIB_USERDELAY_start>
							Charger.stable_changed_flag = 1;
 80047b8:	2382      	movs	r3, #130	; 0x82
							_LIB_LOGGING_printf("#### CHARGSERV : full_wake_up_seq_ is finish start #### \r\n");
 80047ba:	4855      	ldr	r0, [pc, #340]	; (8004910 <charger_cp_state_control+0x634>)
							Charger.stable_changed_flag = 1;
 80047bc:	54ee      	strb	r6, [r5, r3]
							_LIB_LOGGING_printf("#### CHARGSERV : full_wake_up_seq_ is finish start #### \r\n");
 80047be:	f006 fb37 	bl	800ae30 <puts>
						if(_LIB_USERDELAY_isfired(&gTimeout_full_wake_up_seq_is_finish))
 80047c2:	0020      	movs	r0, r4
 80047c4:	f002 fc4a 	bl	800705c <_LIB_USERDELAY_isfired>
 80047c8:	2800      	cmp	r0, #0
 80047ca:	d100      	bne.n	80047ce <charger_cp_state_control+0x4f2>
 80047cc:	e5ca      	b.n	8004364 <charger_cp_state_control+0x88>
							_LIB_USERDELAY_stop(&gTimeout_full_wake_up_seq_is_finish);
 80047ce:	0020      	movs	r0, r4
 80047d0:	f002 fc40 	bl	8007054 <_LIB_USERDELAY_stop>
							if((3 != Charger.leakage_instop_step))							
 80047d4:	237d      	movs	r3, #125	; 0x7d
 80047d6:	5ceb      	ldrb	r3, [r5, r3]
 80047d8:	2b03      	cmp	r3, #3
 80047da:	d06a      	beq.n	80048b2 <charger_cp_state_control+0x5d6>
								Charger.full_wake_up_seq_count++;
 80047dc:	2374      	movs	r3, #116	; 0x74
 80047de:	5ce9      	ldrb	r1, [r5, r3]
 80047e0:	3101      	adds	r1, #1
 80047e2:	b2c9      	uxtb	r1, r1
 80047e4:	54e9      	strb	r1, [r5, r3]
							_LIB_LOGGING_printf("#### CHARGSERV : chargstate : Stable_wake-up-squ(PWM9V) : %d #### \r\n",Charger.full_wake_up_seq_count);
 80047e6:	484b      	ldr	r0, [pc, #300]	; (8004914 <charger_cp_state_control+0x638>)
 80047e8:	f006 fa96 	bl	800ad18 <iprintf>
 80047ec:	e5ba      	b.n	8004364 <charger_cp_state_control+0x88>
									charger_wake_up_seq_start(Charger.full_wake_up_seq_count + 1);
 80047ee:	3301      	adds	r3, #1
 80047f0:	b2d8      	uxtb	r0, r3
 80047f2:	f7fe ffef 	bl	80037d4 <charger_wake_up_seq_start.part.0>
 80047f6:	e7d4      	b.n	80047a2 <charger_cp_state_control+0x4c6>
							_LIB_LOGGING_printf("#### CHARGSERV : compulsion unplug #### \r\n");
 80047f8:	4847      	ldr	r0, [pc, #284]	; (8004918 <charger_cp_state_control+0x63c>)
 80047fa:	f006 fb19 	bl	800ae30 <puts>
 80047fe:	e68d      	b.n	800451c <charger_cp_state_control+0x240>
		_LIB_LOGGING_printf("wuseq enable\r\n");
 8004800:	4846      	ldr	r0, [pc, #280]	; (800491c <charger_cp_state_control+0x640>)
 8004802:	f006 fb15 	bl	800ae30 <puts>
 8004806:	e656      	b.n	80044b6 <charger_cp_state_control+0x1da>
							_LIB_USERDELAY_stop(&gTimeout_charging_stable);
 8004808:	4839      	ldr	r0, [pc, #228]	; (80048f0 <charger_cp_state_control+0x614>)
 800480a:	f002 fc23 	bl	8007054 <_LIB_USERDELAY_stop>
 800480e:	e5a9      	b.n	8004364 <charger_cp_state_control+0x88>
		_LIB_USERDELAY_set(&gDelay_setduty, ondelay);
 8004810:	4e43      	ldr	r6, [pc, #268]	; (8004920 <charger_cp_state_control+0x644>)
 8004812:	21c8      	movs	r1, #200	; 0xc8
 8004814:	0030      	movs	r0, r6
 8004816:	f002 fc03 	bl	8007020 <_LIB_USERDELAY_set>
		_LIB_USERDELAY_start(&gDelay_setduty, DELAY_RENEW_OFF);
 800481a:	2100      	movs	r1, #0
 800481c:	0030      	movs	r0, r6
 800481e:	f002 fc09 	bl	8007034 <_LIB_USERDELAY_start>
		charger_duty_ondelay_flag = 1;
 8004822:	2301      	movs	r3, #1
 8004824:	7023      	strb	r3, [r4, #0]
		return _TRUE;
 8004826:	e5ce      	b.n	80043c6 <charger_cp_state_control+0xea>
							_LIB_USERDELAY_stop(&gTimeout_full_wake_up_seq_is_finish);
 8004828:	4c2f      	ldr	r4, [pc, #188]	; (80048e8 <charger_cp_state_control+0x60c>)
 800482a:	0020      	movs	r0, r4
 800482c:	f002 fc12 	bl	8007054 <_LIB_USERDELAY_stop>
							if(0 == Charger.stable_full_detect)
 8004830:	2381      	movs	r3, #129	; 0x81
 8004832:	5ceb      	ldrb	r3, [r5, r3]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1b5      	bne.n	80047a4 <charger_cp_state_control+0x4c8>
	if(Charger.wake_up_seq_flag == 1)
 8004838:	3365      	adds	r3, #101	; 0x65
 800483a:	5ceb      	ldrb	r3, [r5, r3]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d04b      	beq.n	80048d8 <charger_cp_state_control+0x5fc>
								Charger.stable_full_detect = 1;
 8004840:	2381      	movs	r3, #129	; 0x81
 8004842:	2201      	movs	r2, #1
								_LIB_LOGGING_printf("#### CHARGSERV : chargstate : Stable -> Full(PWM9V) #### \r\n");
 8004844:	4837      	ldr	r0, [pc, #220]	; (8004924 <charger_cp_state_control+0x648>)
								Charger.stable_full_detect = 1;
 8004846:	54ea      	strb	r2, [r5, r3]
								_LIB_LOGGING_printf("#### CHARGSERV : chargstate : Stable -> Full(PWM9V) #### \r\n");
 8004848:	f006 faf2 	bl	800ae30 <puts>
 800484c:	e7aa      	b.n	80047a4 <charger_cp_state_control+0x4c8>
 800484e:	f7ff f80f 	bl	8003870 <charger_wake_up_seq_forced_stop.part.0>
 8004852:	e674      	b.n	800453e <charger_cp_state_control+0x262>
							_LIB_USERDELAY_stop(&gTimeout_forcestop_wake_up_seq_is_finish);
 8004854:	4c2a      	ldr	r4, [pc, #168]	; (8004900 <charger_cp_state_control+0x624>)
 8004856:	0020      	movs	r0, r4
 8004858:	f002 fbfc 	bl	8007054 <_LIB_USERDELAY_stop>
							if(0 == Charger.forcestop_wake_up_seq_count_limit_detect)
 800485c:	2379      	movs	r3, #121	; 0x79
 800485e:	5ceb      	ldrb	r3, [r5, r3]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d000      	beq.n	8004866 <charger_cp_state_control+0x58a>
 8004864:	e75c      	b.n	8004720 <charger_cp_state_control+0x444>
	if(Charger.wake_up_seq_flag == 1)
 8004866:	3365      	adds	r3, #101	; 0x65
 8004868:	5ceb      	ldrb	r3, [r5, r3]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d037      	beq.n	80048de <charger_cp_state_control+0x602>
								Charger.forcestop_wake_up_seq_count_limit_detect = 1;
 800486e:	2379      	movs	r3, #121	; 0x79
 8004870:	2201      	movs	r2, #1
								_LIB_LOGGING_printf("#### CHARGSERV : chargstate : ForceStop -> count limit(PWM9V) #### \r\n");
 8004872:	482d      	ldr	r0, [pc, #180]	; (8004928 <charger_cp_state_control+0x64c>)
								Charger.forcestop_wake_up_seq_count_limit_detect = 1;
 8004874:	54ea      	strb	r2, [r5, r3]
								_LIB_LOGGING_printf("#### CHARGSERV : chargstate : ForceStop -> count limit(PWM9V) #### \r\n");
 8004876:	f006 fadb 	bl	800ae30 <puts>
 800487a:	e751      	b.n	8004720 <charger_cp_state_control+0x444>
 800487c:	f7fe fff8 	bl	8003870 <charger_wake_up_seq_forced_stop.part.0>
 8004880:	e556      	b.n	8004330 <charger_cp_state_control+0x54>
									if(0 == Charger.restart_fulldetect_act)
 8004882:	2285      	movs	r2, #133	; 0x85
 8004884:	5caa      	ldrb	r2, [r5, r2]
 8004886:	4c1e      	ldr	r4, [pc, #120]	; (8004900 <charger_cp_state_control+0x624>)
 8004888:	2a00      	cmp	r2, #0
 800488a:	d000      	beq.n	800488e <charger_cp_state_control+0x5b2>
 800488c:	e748      	b.n	8004720 <charger_cp_state_control+0x444>
	if(Charger.wake_up_seq_flag == 0)
 800488e:	2b00      	cmp	r3, #0
 8004890:	d01e      	beq.n	80048d0 <charger_cp_state_control+0x5f4>
	Charger.wake_up_seq_flag = 1;
 8004892:	2365      	movs	r3, #101	; 0x65
 8004894:	2201      	movs	r2, #1
 8004896:	54ea      	strb	r2, [r5, r3]
	return Charger.wake_up_seq_step;
 8004898:	3302      	adds	r3, #2
	if((charger_get_wake_up_seq_flag() == 1) && (charger_get_wake_up_seq_step() == NON))
 800489a:	5ceb      	ldrb	r3, [r5, r3]
 800489c:	4c18      	ldr	r4, [pc, #96]	; (8004900 <charger_cp_state_control+0x624>)
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d000      	beq.n	80048a4 <charger_cp_state_control+0x5c8>
 80048a2:	e73d      	b.n	8004720 <charger_cp_state_control+0x444>
										charger_wake_up_seq_start(Charger.forcestop_wake_up_seq_count + 1);
 80048a4:	3376      	adds	r3, #118	; 0x76
 80048a6:	5ce8      	ldrb	r0, [r5, r3]
 80048a8:	1880      	adds	r0, r0, r2
 80048aa:	b2c0      	uxtb	r0, r0
 80048ac:	f7fe ff92 	bl	80037d4 <charger_wake_up_seq_start.part.0>
 80048b0:	e736      	b.n	8004720 <charger_cp_state_control+0x444>
 80048b2:	3371      	adds	r3, #113	; 0x71
 80048b4:	5ce9      	ldrb	r1, [r5, r3]
 80048b6:	e796      	b.n	80047e6 <charger_cp_state_control+0x50a>
 80048b8:	f7fe ffda 	bl	8003870 <charger_wake_up_seq_forced_stop.part.0>
 80048bc:	e6ce      	b.n	800465c <charger_cp_state_control+0x380>
		_LIB_LOGGING_printf("wuseq enable\r\n");
 80048be:	4817      	ldr	r0, [pc, #92]	; (800491c <charger_cp_state_control+0x640>)
 80048c0:	f006 fab6 	bl	800ae30 <puts>
 80048c4:	e724      	b.n	8004710 <charger_cp_state_control+0x434>
 80048c6:	4815      	ldr	r0, [pc, #84]	; (800491c <charger_cp_state_control+0x640>)
 80048c8:	f006 fab2 	bl	800ae30 <puts>
 80048cc:	5d2b      	ldrb	r3, [r5, r4]
 80048ce:	e761      	b.n	8004794 <charger_cp_state_control+0x4b8>
 80048d0:	4812      	ldr	r0, [pc, #72]	; (800491c <charger_cp_state_control+0x640>)
 80048d2:	f006 faad 	bl	800ae30 <puts>
 80048d6:	e7dc      	b.n	8004892 <charger_cp_state_control+0x5b6>
 80048d8:	f7fe ffca 	bl	8003870 <charger_wake_up_seq_forced_stop.part.0>
 80048dc:	e7b0      	b.n	8004840 <charger_cp_state_control+0x564>
 80048de:	f7fe ffc7 	bl	8003870 <charger_wake_up_seq_forced_stop.part.0>
 80048e2:	e7c4      	b.n	800486e <charger_cp_state_control+0x592>
 80048e4:	20000264 	.word	0x20000264
 80048e8:	200002ac 	.word	0x200002ac
 80048ec:	0800c718 	.word	0x0800c718
 80048f0:	20000270 	.word	0x20000270
 80048f4:	0800c6e4 	.word	0x0800c6e4
 80048f8:	200001e0 	.word	0x200001e0
 80048fc:	0800c680 	.word	0x0800c680
 8004900:	20000294 	.word	0x20000294
 8004904:	0800c7ac 	.word	0x0800c7ac
 8004908:	0800c7ec 	.word	0x0800c7ec
 800490c:	0800c82c 	.word	0x0800c82c
 8004910:	0800c8f0 	.word	0x0800c8f0
 8004914:	0800c92c 	.word	0x0800c92c
 8004918:	0800c998 	.word	0x0800c998
 800491c:	0800c440 	.word	0x0800c440
 8004920:	200001ec 	.word	0x200001ec
 8004924:	0800c8b4 	.word	0x0800c8b4
 8004928:	0800c764 	.word	0x0800c764

0800492c <charger_mc_ry_control>:
{
 800492c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800492e:	46d6      	mov	lr, sl
 8004930:	464f      	mov	r7, r9
 8004932:	4646      	mov	r6, r8
	return Charger.state;
 8004934:	4b4c      	ldr	r3, [pc, #304]	; (8004a68 <charger_mc_ry_control+0x13c>)
{
 8004936:	b5c0      	push	{r6, r7, lr}
	return Charger.state;
 8004938:	469a      	mov	sl, r3
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	4698      	mov	r8, r3
	CP_StateDef	cp_state = _MW_CP_get_cp_state();
 800493e:	f002 fce7 	bl	8007310 <_MW_CP_get_cp_state>
 8004942:	4681      	mov	r9, r0
	double temp_l_final_volt = _MW_CP_get_l_final_voltage();
 8004944:	f002 fc3e 	bl	80071c4 <_MW_CP_get_l_final_voltage>
 8004948:	0004      	movs	r4, r0
 800494a:	000d      	movs	r5, r1
	double temp_H_final_volt = _MW_CP_get_h_final_voltage();
 800494c:	f002 fc34 	bl	80071b8 <_MW_CP_get_h_final_voltage>
	switch(charger_state)
 8004950:	4643      	mov	r3, r8
	double temp_H_final_volt = _MW_CP_get_h_final_voltage();
 8004952:	0006      	movs	r6, r0
 8004954:	000f      	movs	r7, r1
	switch(charger_state)
 8004956:	2b07      	cmp	r3, #7
 8004958:	d035      	beq.n	80049c6 <charger_mc_ry_control+0x9a>
 800495a:	2b09      	cmp	r3, #9
 800495c:	d02f      	beq.n	80049be <charger_mc_ry_control+0x92>
 800495e:	2b06      	cmp	r3, #6
 8004960:	d00c      	beq.n	800497c <charger_mc_ry_control+0x50>
 8004962:	4c42      	ldr	r4, [pc, #264]	; (8004a6c <charger_mc_ry_control+0x140>)
	if(_LIB_USERDELAY_isfired(&gDelay_finish_mcoff))
 8004964:	0020      	movs	r0, r4
 8004966:	f002 fb79 	bl	800705c <_LIB_USERDELAY_isfired>
 800496a:	2800      	cmp	r0, #0
 800496c:	d11d      	bne.n	80049aa <charger_mc_ry_control+0x7e>
	_MW_CP_mc_relay_clear();
 800496e:	f002 fc55 	bl	800721c <_MW_CP_mc_relay_clear>
}
 8004972:	bce0      	pop	{r5, r6, r7}
 8004974:	46ba      	mov	sl, r7
 8004976:	46b1      	mov	r9, r6
 8004978:	46a8      	mov	r8, r5
 800497a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(1 == Charger.leakage_instop_flag)
 800497c:	237c      	movs	r3, #124	; 0x7c
 800497e:	4652      	mov	r2, sl
 8004980:	5cd3      	ldrb	r3, [r2, r3]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d008      	beq.n	8004998 <charger_mc_ry_control+0x6c>
			if(cp_state == PWM_6V)
 8004986:	464b      	mov	r3, r9
 8004988:	2b06      	cmp	r3, #6
 800498a:	d02f      	beq.n	80049ec <charger_mc_ry_control+0xc0>
			if(cp_state == PWM_9V)
 800498c:	2b05      	cmp	r3, #5
 800498e:	d1e8      	bne.n	8004962 <charger_mc_ry_control+0x36>
				if(bak_state != 3)
 8004990:	4c37      	ldr	r4, [pc, #220]	; (8004a70 <charger_mc_ry_control+0x144>)
 8004992:	7823      	ldrb	r3, [r4, #0]
 8004994:	2b03      	cmp	r3, #3
 8004996:	d15f      	bne.n	8004a58 <charger_mc_ry_control+0x12c>
 8004998:	4c34      	ldr	r4, [pc, #208]	; (8004a6c <charger_mc_ry_control+0x140>)
				_MW_CP_mc_relay_ctl(_OFF);
 800499a:	2000      	movs	r0, #0
 800499c:	f002 fc5c 	bl	8007258 <_MW_CP_mc_relay_ctl>
	if(_LIB_USERDELAY_isfired(&gDelay_finish_mcoff))
 80049a0:	0020      	movs	r0, r4
 80049a2:	f002 fb5b 	bl	800705c <_LIB_USERDELAY_isfired>
 80049a6:	2800      	cmp	r0, #0
 80049a8:	d0e1      	beq.n	800496e <charger_mc_ry_control+0x42>
		_LIB_USERDELAY_stop(&gDelay_finish_mcoff);
 80049aa:	0020      	movs	r0, r4
 80049ac:	f002 fb52 	bl	8007054 <_LIB_USERDELAY_stop>
		_MW_CP_mc_relay_ctl(_OFF);
 80049b0:	2000      	movs	r0, #0
 80049b2:	f002 fc51 	bl	8007258 <_MW_CP_mc_relay_ctl>
		_LIB_LOGGING_printf("#### CHARGSERV : finish_mc off delay ok #### \r\n");
 80049b6:	482f      	ldr	r0, [pc, #188]	; (8004a74 <charger_mc_ry_control+0x148>)
 80049b8:	f006 fa3a 	bl	800ae30 <puts>
 80049bc:	e7d7      	b.n	800496e <charger_mc_ry_control+0x42>
			_MW_CP_mc_relay_ctl(_OFF);
 80049be:	2000      	movs	r0, #0
 80049c0:	f002 fc4a 	bl	8007258 <_MW_CP_mc_relay_ctl>
 80049c4:	e7cd      	b.n	8004962 <charger_mc_ry_control+0x36>
			if(_ON == _MW_CP_get_mc_relay_state())
 80049c6:	f002 fc99 	bl	80072fc <_MW_CP_get_mc_relay_state>
				if(_TRUE == _LIB_USERDELAY_start(&gDelay_finish_mcoff, DELAY_RENEW_OFF))
 80049ca:	4c28      	ldr	r4, [pc, #160]	; (8004a6c <charger_mc_ry_control+0x140>)
			if(_ON == _MW_CP_get_mc_relay_state())
 80049cc:	2801      	cmp	r0, #1
 80049ce:	d003      	beq.n	80049d8 <charger_mc_ry_control+0xac>
			if(cp_state == DC_9V)
 80049d0:	464b      	mov	r3, r9
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d1c6      	bne.n	8004964 <charger_mc_ry_control+0x38>
 80049d6:	e7e0      	b.n	800499a <charger_mc_ry_control+0x6e>
				if(_TRUE == _LIB_USERDELAY_start(&gDelay_finish_mcoff, DELAY_RENEW_OFF))
 80049d8:	2100      	movs	r1, #0
 80049da:	0020      	movs	r0, r4
 80049dc:	f002 fb2a 	bl	8007034 <_LIB_USERDELAY_start>
 80049e0:	2801      	cmp	r0, #1
 80049e2:	d1f5      	bne.n	80049d0 <charger_mc_ry_control+0xa4>
					_LIB_LOGGING_printf("#### CHARGSERV : finish_mc off delay start #### \r\n");
 80049e4:	4824      	ldr	r0, [pc, #144]	; (8004a78 <charger_mc_ry_control+0x14c>)
 80049e6:	f006 fa23 	bl	800ae30 <puts>
 80049ea:	e7f1      	b.n	80049d0 <charger_mc_ry_control+0xa4>
				if(temp_l_final_volt > CP_N12V_MINIMUM)
 80049ec:	2200      	movs	r2, #0
 80049ee:	0020      	movs	r0, r4
 80049f0:	0029      	movs	r1, r5
 80049f2:	4b22      	ldr	r3, [pc, #136]	; (8004a7c <charger_mc_ry_control+0x150>)
 80049f4:	f7fb fc48 	bl	8000288 <__aeabi_dcmpgt>
 80049f8:	2800      	cmp	r0, #0
 80049fa:	d10d      	bne.n	8004a18 <charger_mc_ry_control+0xec>
					if(bak_state != 2)
 80049fc:	4c1c      	ldr	r4, [pc, #112]	; (8004a70 <charger_mc_ry_control+0x144>)
 80049fe:	7823      	ldrb	r3, [r4, #0]
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d004      	beq.n	8004a0e <charger_mc_ry_control+0xe2>
						_LIB_LOGGING_printf("#### CHARGSERV : -12V is good #### \r\n");
 8004a04:	481e      	ldr	r0, [pc, #120]	; (8004a80 <charger_mc_ry_control+0x154>)
 8004a06:	f006 fa13 	bl	800ae30 <puts>
						bak_state = 2;
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	7023      	strb	r3, [r4, #0]
					_MW_CP_mc_relay_ctl(_ON);
 8004a0e:	2001      	movs	r0, #1
 8004a10:	f002 fc22 	bl	8007258 <_MW_CP_mc_relay_ctl>
 8004a14:	4c15      	ldr	r4, [pc, #84]	; (8004a6c <charger_mc_ry_control+0x140>)
 8004a16:	e7a5      	b.n	8004964 <charger_mc_ry_control+0x38>
					if(bak_state != 1)
 8004a18:	4b15      	ldr	r3, [pc, #84]	; (8004a70 <charger_mc_ry_control+0x144>)
 8004a1a:	4698      	mov	r8, r3
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d0ba      	beq.n	8004998 <charger_mc_ry_control+0x6c>
						_LIB_LOGGING_printf("#### CHARGSERV : -12V is err : %d, %d #### \r\n", (int)(temp_l_final_volt * 100), (int)(temp_H_final_volt * 100));
 8004a22:	2200      	movs	r2, #0
 8004a24:	4b17      	ldr	r3, [pc, #92]	; (8004a84 <charger_mc_ry_control+0x158>)
 8004a26:	0030      	movs	r0, r6
 8004a28:	0039      	movs	r1, r7
 8004a2a:	f7fd f9d7 	bl	8001ddc <__aeabi_dmul>
 8004a2e:	f7fd fff1 	bl	8002a14 <__aeabi_d2iz>
 8004a32:	4b14      	ldr	r3, [pc, #80]	; (8004a84 <charger_mc_ry_control+0x158>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	0006      	movs	r6, r0
 8004a38:	0029      	movs	r1, r5
 8004a3a:	0020      	movs	r0, r4
 8004a3c:	f7fd f9ce 	bl	8001ddc <__aeabi_dmul>
 8004a40:	f7fd ffe8 	bl	8002a14 <__aeabi_d2iz>
 8004a44:	0032      	movs	r2, r6
 8004a46:	0001      	movs	r1, r0
 8004a48:	480f      	ldr	r0, [pc, #60]	; (8004a88 <charger_mc_ry_control+0x15c>)
 8004a4a:	f006 f965 	bl	800ad18 <iprintf>
						bak_state = 1;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	4642      	mov	r2, r8
 8004a52:	4c06      	ldr	r4, [pc, #24]	; (8004a6c <charger_mc_ry_control+0x140>)
 8004a54:	7013      	strb	r3, [r2, #0]
 8004a56:	e7a0      	b.n	800499a <charger_mc_ry_control+0x6e>
					_LIB_LOGGING_printf("#### CHARGSERV : PWM_9V #### \r\n");
 8004a58:	480c      	ldr	r0, [pc, #48]	; (8004a8c <charger_mc_ry_control+0x160>)
 8004a5a:	f006 f9e9 	bl	800ae30 <puts>
					bak_state = 3;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	7023      	strb	r3, [r4, #0]
 8004a62:	4c02      	ldr	r4, [pc, #8]	; (8004a6c <charger_mc_ry_control+0x140>)
 8004a64:	e799      	b.n	800499a <charger_mc_ry_control+0x6e>
 8004a66:	46c0      	nop			; (mov r8, r8)
 8004a68:	20000100 	.word	0x20000100
 8004a6c:	200001d4 	.word	0x200001d4
 8004a70:	20000189 	.word	0x20000189
 8004a74:	0800cac0 	.word	0x0800cac0
 8004a78:	0800ca8c 	.word	0x0800ca8c
 8004a7c:	c0230000 	.word	0xc0230000
 8004a80:	0800ca44 	.word	0x0800ca44
 8004a84:	40590000 	.word	0x40590000
 8004a88:	0800ca14 	.word	0x0800ca14
 8004a8c:	0800ca6c 	.word	0x0800ca6c

08004a90 <_APP_CHARGSERV_check_charging_cardnum>:
	for(i = 0; i<8;i++)
 8004a90:	4b09      	ldr	r3, [pc, #36]	; (8004ab8 <_APP_CHARGSERV_check_charging_cardnum+0x28>)
{
 8004a92:	b510      	push	{r4, lr}
 8004a94:	0018      	movs	r0, r3
 8004a96:	3008      	adds	r0, #8
		if(Charger.current_card_num[i] != Charger.charging_card_num[i])
 8004a98:	7819      	ldrb	r1, [r3, #0]
 8004a9a:	7f9a      	ldrb	r2, [r3, #30]
 8004a9c:	4291      	cmp	r1, r2
 8004a9e:	d109      	bne.n	8004ab4 <_APP_CHARGSERV_check_charging_cardnum+0x24>
	for(i = 0; i<8;i++)
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	4283      	cmp	r3, r0
 8004aa4:	d1f8      	bne.n	8004a98 <_APP_CHARGSERV_check_charging_cardnum+0x8>
		memset(Charger.charging_card_num,0xFF,30);
 8004aa6:	221e      	movs	r2, #30
 8004aa8:	21ff      	movs	r1, #255	; 0xff
 8004aaa:	4804      	ldr	r0, [pc, #16]	; (8004abc <_APP_CHARGSERV_check_charging_cardnum+0x2c>)
 8004aac:	f006 f92b 	bl	800ad06 <memset>
 8004ab0:	2001      	movs	r0, #1
}
 8004ab2:	bd10      	pop	{r4, pc}
	uint8_t ret_value = _FALSE;
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	e7fc      	b.n	8004ab2 <_APP_CHARGSERV_check_charging_cardnum+0x22>
 8004ab8:	20000112 	.word	0x20000112
 8004abc:	20000130 	.word	0x20000130

08004ac0 <charger_common_control>:
{
 8004ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return Charger.state;
 8004ac2:	4e60      	ldr	r6, [pc, #384]	; (8004c44 <charger_common_control+0x184>)
 8004ac4:	7834      	ldrb	r4, [r6, #0]
	CP_StateDef	cp_state = _MW_CP_get_cp_state();
 8004ac6:	f002 fc23 	bl	8007310 <_MW_CP_get_cp_state>
 8004aca:	0005      	movs	r5, r0
	switch(charger_state)
 8004acc:	2c07      	cmp	r4, #7
 8004ace:	d817      	bhi.n	8004b00 <charger_common_control+0x40>
 8004ad0:	4b5d      	ldr	r3, [pc, #372]	; (8004c48 <charger_common_control+0x188>)
 8004ad2:	00a4      	lsls	r4, r4, #2
 8004ad4:	591b      	ldr	r3, [r3, r4]
 8004ad6:	469f      	mov	pc, r3
			if(0 == Charger.autostartmode_flag)
 8004ad8:	2383      	movs	r3, #131	; 0x83
 8004ada:	5cf4      	ldrb	r4, [r6, r3]
 8004adc:	2c00      	cmp	r4, #0
 8004ade:	d000      	beq.n	8004ae2 <charger_common_control+0x22>
 8004ae0:	e070      	b.n	8004bc4 <charger_common_control+0x104>
				switch(step)
 8004ae2:	4f5a      	ldr	r7, [pc, #360]	; (8004c4c <charger_common_control+0x18c>)
 8004ae4:	783d      	ldrb	r5, [r7, #0]
 8004ae6:	2d00      	cmp	r5, #0
 8004ae8:	d15f      	bne.n	8004baa <charger_common_control+0xea>
						ret_value = _APP_RFID_get_tagging_result();
 8004aea:	f001 fe03 	bl	80066f4 <_APP_RFID_get_tagging_result>
 8004aee:	0004      	movs	r4, r0
						if(_TRUE == ret_value)
 8004af0:	2801      	cmp	r0, #1
 8004af2:	d100      	bne.n	8004af6 <charger_common_control+0x36>
 8004af4:	e09d      	b.n	8004c32 <charger_common_control+0x172>
							_APP_CHARGSERV_usercheck_serverconnectstart();
 8004af6:	f7fe ffb5 	bl	8003a64 <_APP_CHARGSERV_usercheck_serverconnectstart>
							_APP_CHARGSERV_usercheck_user_retry();
 8004afa:	f7fe ffeb 	bl	8003ad4 <_APP_CHARGSERV_usercheck_user_retry>
							step = 0;
 8004afe:	703d      	strb	r5, [r7, #0]
}
 8004b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			_APP_RFID_set_start_tagging(1);
 8004b02:	2001      	movs	r0, #1
 8004b04:	f001 fdca 	bl	800669c <_APP_RFID_set_start_tagging>
}
 8004b08:	e7fa      	b.n	8004b00 <charger_common_control+0x40>
			if(_OFF == _MW_GPIO_get_gpi(EMG))
 8004b0a:	2005      	movs	r0, #5
 8004b0c:	f003 f846 	bl	8007b9c <_MW_GPIO_get_gpi>
 8004b10:	4243      	negs	r3, r0
 8004b12:	4143      	adcs	r3, r0
 8004b14:	4a4e      	ldr	r2, [pc, #312]	; (8004c50 <charger_common_control+0x190>)
				emg_value = 1;
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	7013      	strb	r3, [r2, #0]
			if(emg_value_bak != emg_value)
 8004b1a:	4a4e      	ldr	r2, [pc, #312]	; (8004c54 <charger_common_control+0x194>)
 8004b1c:	7811      	ldrb	r1, [r2, #0]
 8004b1e:	4299      	cmp	r1, r3
 8004b20:	d005      	beq.n	8004b2e <charger_common_control+0x6e>
				emg_value_bak = emg_value;
 8004b22:	7013      	strb	r3, [r2, #0]
				switch(emg_value)
 8004b24:	2800      	cmp	r0, #0
 8004b26:	d16b      	bne.n	8004c00 <charger_common_control+0x140>
						_APP_RFID_set_start_tagging(1);
 8004b28:	2001      	movs	r0, #1
 8004b2a:	f001 fdb7 	bl	800669c <_APP_RFID_set_start_tagging>
			if(0 == Charger.autostartmode_flag)
 8004b2e:	2383      	movs	r3, #131	; 0x83
 8004b30:	5cf3      	ldrb	r3, [r6, r3]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d05e      	beq.n	8004bf4 <charger_common_control+0x134>
				if((DC_9V == cp_state) || (DC_6V == cp_state))
 8004b36:	3d02      	subs	r5, #2
 8004b38:	b2e8      	uxtb	r0, r5
 8004b3a:	2801      	cmp	r0, #1
 8004b3c:	d8e0      	bhi.n	8004b00 <charger_common_control+0x40>
					_APP_CHARGSERV_ready_cardtag();
 8004b3e:	f7fe ff5d 	bl	80039fc <_APP_CHARGSERV_ready_cardtag>
 8004b42:	e7dd      	b.n	8004b00 <charger_common_control+0x40>
			if((DC_9V == cp_state) || (DC_6V == cp_state))
 8004b44:	3d02      	subs	r5, #2
 8004b46:	b2e8      	uxtb	r0, r5
 8004b48:	2801      	cmp	r0, #1
 8004b4a:	d8d9      	bhi.n	8004b00 <charger_common_control+0x40>
				_APP_CHARGSERV_autoready_connected();
 8004b4c:	f7fe ff70 	bl	8003a30 <_APP_CHARGSERV_autoready_connected>
 8004b50:	e7d6      	b.n	8004b00 <charger_common_control+0x40>
			switch(step)
 8004b52:	4c3e      	ldr	r4, [pc, #248]	; (8004c4c <charger_common_control+0x18c>)
 8004b54:	7823      	ldrb	r3, [r4, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d03d      	beq.n	8004bd6 <charger_common_control+0x116>
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d1d0      	bne.n	8004b00 <charger_common_control+0x40>
					if(1 == _LIB_USERDELAY_isfired(&gTimeout_connect))
 8004b5e:	4d3e      	ldr	r5, [pc, #248]	; (8004c58 <charger_common_control+0x198>)
 8004b60:	0028      	movs	r0, r5
 8004b62:	f002 fa7b 	bl	800705c <_LIB_USERDELAY_isfired>
 8004b66:	2801      	cmp	r0, #1
 8004b68:	d1ca      	bne.n	8004b00 <charger_common_control+0x40>
						_LIB_LOGGING_printf("#### CHARGSERV : Connect_Timeout... go to ready #### \r\n");
 8004b6a:	483c      	ldr	r0, [pc, #240]	; (8004c5c <charger_common_control+0x19c>)
 8004b6c:	f006 f960 	bl	800ae30 <puts>
						_LIB_USERDELAY_stop(&gTimeout_connect);
 8004b70:	0028      	movs	r0, r5
 8004b72:	f002 fa6f 	bl	8007054 <_LIB_USERDELAY_stop>
						_APP_CHARGSERV_connect_timeout();
 8004b76:	f7fe ffed 	bl	8003b54 <_APP_CHARGSERV_connect_timeout>
						step = 0;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	7023      	strb	r3, [r4, #0]
 8004b7e:	e7bf      	b.n	8004b00 <charger_common_control+0x40>
			ret_value = _APP_RFID_get_tagging_result();
 8004b80:	f001 fdb8 	bl	80066f4 <_APP_RFID_get_tagging_result>
			if(_TRUE == ret_value)
 8004b84:	2801      	cmp	r0, #1
 8004b86:	d1bb      	bne.n	8004b00 <charger_common_control+0x40>
				_LIB_LOGGING_printf("#### CHARGSERV : tagging state to charging #### \r\n");
 8004b88:	4835      	ldr	r0, [pc, #212]	; (8004c60 <charger_common_control+0x1a0>)
 8004b8a:	f006 f951 	bl	800ae30 <puts>
				_APP_RFID_get_card_number(Charger.current_card_num);
 8004b8e:	4835      	ldr	r0, [pc, #212]	; (8004c64 <charger_common_control+0x1a4>)
 8004b90:	f001 fdc2 	bl	8006718 <_APP_RFID_get_card_number>
				if(_TRUE == _APP_CHARGSERV_check_charging_cardnum())//TODO : 230109 PES : check start cardnumber data == tagging cardnumber
 8004b94:	f7ff ff7c 	bl	8004a90 <_APP_CHARGSERV_check_charging_cardnum>
 8004b98:	2801      	cmp	r0, #1
 8004b9a:	d03a      	beq.n	8004c12 <charger_common_control+0x152>
					_LIB_LOGGING_printf("#### CHARGSERV : charging cardnum != tagging cardnum. retry tagging #### \r\n");
 8004b9c:	4832      	ldr	r0, [pc, #200]	; (8004c68 <charger_common_control+0x1a8>)
 8004b9e:	f006 f947 	bl	800ae30 <puts>
					_APP_RFID_set_start_tagging(0);
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	f001 fd7a 	bl	800669c <_APP_RFID_set_start_tagging>
 8004ba8:	e7aa      	b.n	8004b00 <charger_common_control+0x40>
 8004baa:	2d01      	cmp	r5, #1
 8004bac:	d1a8      	bne.n	8004b00 <charger_common_control+0x40>
						if(_TRUE == _APP_SYSTEMCTL_check_cardnum(Charger.current_card_num))//TODO : 230109 PES : check eeprom cardnumber data == tagging cardnumber
 8004bae:	0035      	movs	r5, r6
 8004bb0:	3512      	adds	r5, #18
 8004bb2:	0028      	movs	r0, r5
 8004bb4:	f002 f886 	bl	8006cc4 <_APP_SYSTEMCTL_check_cardnum>
 8004bb8:	2801      	cmp	r0, #1
 8004bba:	d030      	beq.n	8004c1e <charger_common_control+0x15e>
							_APP_CHARGSERV_usercheck_user_retry();
 8004bbc:	f7fe ff8a 	bl	8003ad4 <_APP_CHARGSERV_usercheck_user_retry>
							step = 0;
 8004bc0:	703c      	strb	r4, [r7, #0]
 8004bc2:	e79d      	b.n	8004b00 <charger_common_control+0x40>
				if((DC_9V == cp_state) || (DC_6V == cp_state))
 8004bc4:	3d02      	subs	r5, #2
 8004bc6:	b2e8      	uxtb	r0, r5
 8004bc8:	2801      	cmp	r0, #1
 8004bca:	d899      	bhi.n	8004b00 <charger_common_control+0x40>
					_APP_CHARGSERV_usercheck_serverconnectstart();
 8004bcc:	f7fe ff4a 	bl	8003a64 <_APP_CHARGSERV_usercheck_serverconnectstart>
					_APP_CHARGSERV_usercheck_user_ok();
 8004bd0:	f7fe ff64 	bl	8003a9c <_APP_CHARGSERV_usercheck_user_ok>
 8004bd4:	e794      	b.n	8004b00 <charger_common_control+0x40>
					_LIB_USERDELAY_stop(&gTimeout_connect);
 8004bd6:	4d20      	ldr	r5, [pc, #128]	; (8004c58 <charger_common_control+0x198>)
 8004bd8:	0028      	movs	r0, r5
 8004bda:	f002 fa3b 	bl	8007054 <_LIB_USERDELAY_stop>
					if(1 == _LIB_USERDELAY_start(&gTimeout_connect, DELAY_RENEW_OFF))
 8004bde:	0028      	movs	r0, r5
 8004be0:	2100      	movs	r1, #0
 8004be2:	f002 fa27 	bl	8007034 <_LIB_USERDELAY_start>
 8004be6:	0005      	movs	r5, r0
 8004be8:	2801      	cmp	r0, #1
 8004bea:	d00d      	beq.n	8004c08 <charger_common_control+0x148>
						_LIB_LOGGING_printf("#### CHARGSERV : Connect_Timeout start fail #### \r\n");
 8004bec:	481f      	ldr	r0, [pc, #124]	; (8004c6c <charger_common_control+0x1ac>)
 8004bee:	f006 f91f 	bl	800ae30 <puts>
 8004bf2:	e785      	b.n	8004b00 <charger_common_control+0x40>
				ret_value = _APP_RFID_get_tagging_result();
 8004bf4:	f001 fd7e 	bl	80066f4 <_APP_RFID_get_tagging_result>
				if(_CONTINUE != ret_value)
 8004bf8:	2802      	cmp	r0, #2
 8004bfa:	d100      	bne.n	8004bfe <charger_common_control+0x13e>
 8004bfc:	e780      	b.n	8004b00 <charger_common_control+0x40>
 8004bfe:	e79e      	b.n	8004b3e <charger_common_control+0x7e>
						_APP_RFID_set_start_tagging(0);
 8004c00:	2000      	movs	r0, #0
 8004c02:	f001 fd4b 	bl	800669c <_APP_RFID_set_start_tagging>
					break;
 8004c06:	e792      	b.n	8004b2e <charger_common_control+0x6e>
						_LIB_LOGGING_printf("#### CHARGSERV : Connect_Timeout start #### \r\n");
 8004c08:	4819      	ldr	r0, [pc, #100]	; (8004c70 <charger_common_control+0x1b0>)
 8004c0a:	f006 f911 	bl	800ae30 <puts>
						step = 1;
 8004c0e:	7025      	strb	r5, [r4, #0]
 8004c10:	e776      	b.n	8004b00 <charger_common_control+0x40>
				_LIB_LOGGING_printf("#### CHARGSERV : charging cardnum == tagging cardnum. charging ok #### \r\n");
 8004c12:	4818      	ldr	r0, [pc, #96]	; (8004c74 <charger_common_control+0x1b4>)
 8004c14:	f006 f90c 	bl	800ae30 <puts>
					_APP_CHARGSERV_charging_ok();
 8004c18:	f7fe ffb8 	bl	8003b8c <_APP_CHARGSERV_charging_ok>
 8004c1c:	e770      	b.n	8004b00 <charger_common_control+0x40>
							memcpy(Charger.charging_card_num,Charger.current_card_num,30);
 8004c1e:	0030      	movs	r0, r6
 8004c20:	221e      	movs	r2, #30
 8004c22:	0029      	movs	r1, r5
 8004c24:	3030      	adds	r0, #48	; 0x30
 8004c26:	f006 f865 	bl	800acf4 <memcpy>
							_APP_CHARGSERV_usercheck_user_ok();
 8004c2a:	f7fe ff37 	bl	8003a9c <_APP_CHARGSERV_usercheck_user_ok>
							step = 0;
 8004c2e:	703c      	strb	r4, [r7, #0]
 8004c30:	e766      	b.n	8004b00 <charger_common_control+0x40>
							_APP_RFID_get_card_number(Charger.current_card_num);
 8004c32:	0030      	movs	r0, r6
 8004c34:	3012      	adds	r0, #18
 8004c36:	f001 fd6f 	bl	8006718 <_APP_RFID_get_card_number>
							_APP_CHARGSERV_usercheck_serverconnectstart();
 8004c3a:	f7fe ff13 	bl	8003a64 <_APP_CHARGSERV_usercheck_serverconnectstart>
							step = 1;
 8004c3e:	703c      	strb	r4, [r7, #0]
 8004c40:	e75e      	b.n	8004b00 <charger_common_control+0x40>
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	20000100 	.word	0x20000100
 8004c48:	0800cc58 	.word	0x0800cc58
 8004c4c:	2000031b 	.word	0x2000031b
 8004c50:	20000195 	.word	0x20000195
 8004c54:	20000196 	.word	0x20000196
 8004c58:	2000027c 	.word	0x2000027c
 8004c5c:	0800cb54 	.word	0x0800cb54
 8004c60:	0800cb8c 	.word	0x0800cb8c
 8004c64:	20000112 	.word	0x20000112
 8004c68:	0800cc0c 	.word	0x0800cc0c
 8004c6c:	0800cb20 	.word	0x0800cb20
 8004c70:	0800caf0 	.word	0x0800caf0
 8004c74:	0800cbc0 	.word	0x0800cbc0

08004c78 <charger_userconfigmode_handler>:
{
 8004c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c7a:	46c6      	mov	lr, r8
	return Charger.state;
 8004c7c:	4d25      	ldr	r5, [pc, #148]	; (8004d14 <charger_userconfigmode_handler+0x9c>)
	button_value = _MW_GPIO_get_gpi(EMG);
 8004c7e:	2005      	movs	r0, #5
{
 8004c80:	b500      	push	{lr}
	return Charger.state;
 8004c82:	782e      	ldrb	r6, [r5, #0]
	button_value = _MW_GPIO_get_gpi(EMG);
 8004c84:	f002 ff8a 	bl	8007b9c <_MW_GPIO_get_gpi>
	if((_OFF == button_value) && (_ON == bak_button_value))
 8004c88:	4b23      	ldr	r3, [pc, #140]	; (8004d18 <charger_userconfigmode_handler+0xa0>)
	button_value = _MW_GPIO_get_gpi(EMG);
 8004c8a:	1e04      	subs	r4, r0, #0
	if((_OFF == button_value) && (_ON == bak_button_value))
 8004c8c:	d127      	bne.n	8004cde <charger_userconfigmode_handler+0x66>
 8004c8e:	781a      	ldrb	r2, [r3, #0]
	bak_button_value = button_value;
 8004c90:	7018      	strb	r0, [r3, #0]
	if((_OFF == button_value) && (_ON == bak_button_value))
 8004c92:	2a01      	cmp	r2, #1
 8004c94:	d120      	bne.n	8004cd8 <charger_userconfigmode_handler+0x60>
	if(0 == Charger.userconfigmode_input_count)
 8004c96:	277a      	movs	r7, #122	; 0x7a
 8004c98:	5deb      	ldrb	r3, [r5, r7]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d021      	beq.n	8004ce2 <charger_userconfigmode_handler+0x6a>
		if(0 == _LIB_USERDELAY_isfired(&gTimeout_userconfigmode_input))
 8004c9e:	4b1f      	ldr	r3, [pc, #124]	; (8004d1c <charger_userconfigmode_handler+0xa4>)
 8004ca0:	0018      	movs	r0, r3
 8004ca2:	4698      	mov	r8, r3
 8004ca4:	f002 f9da 	bl	800705c <_LIB_USERDELAY_isfired>
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	d120      	bne.n	8004cee <charger_userconfigmode_handler+0x76>
			Charger.userconfigmode_input_count++;
 8004cac:	5deb      	ldrb	r3, [r5, r7]
			_LIB_USERDELAY_start(&gTimeout_userconfigmode_input, DELAY_RENEW_ON);
 8004cae:	2101      	movs	r1, #1
			Charger.userconfigmode_input_count++;
 8004cb0:	3301      	adds	r3, #1
			_LIB_USERDELAY_start(&gTimeout_userconfigmode_input, DELAY_RENEW_ON);
 8004cb2:	4640      	mov	r0, r8
			Charger.userconfigmode_input_count++;
 8004cb4:	55eb      	strb	r3, [r5, r7]
			_LIB_USERDELAY_start(&gTimeout_userconfigmode_input, DELAY_RENEW_ON);
 8004cb6:	f002 f9bd 	bl	8007034 <_LIB_USERDELAY_start>
	printf("userconfigmode_handler_button_pushed : %d\r\n",Charger.userconfigmode_input_count);
 8004cba:	247a      	movs	r4, #122	; 0x7a
 8004cbc:	4818      	ldr	r0, [pc, #96]	; (8004d20 <charger_userconfigmode_handler+0xa8>)
 8004cbe:	5d29      	ldrb	r1, [r5, r4]
 8004cc0:	f006 f82a 	bl	800ad18 <iprintf>
	if(Charger.userconfigmode_input_count >= CHARGSERV_USERCONFIGMODE_INPUT_MAX_COUNT)
 8004cc4:	5d2b      	ldrb	r3, [r5, r4]
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	d906      	bls.n	8004cd8 <charger_userconfigmode_handler+0x60>
		Charger.userconfigmode_input_count = 0;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	552b      	strb	r3, [r5, r4]
		if((Ready == charger_state))
 8004cce:	2e02      	cmp	r6, #2
 8004cd0:	d015      	beq.n	8004cfe <charger_userconfigmode_handler+0x86>
			printf("userconfigmode_handler_go to configmode _ NO EFFECT \r\n");
 8004cd2:	4814      	ldr	r0, [pc, #80]	; (8004d24 <charger_userconfigmode_handler+0xac>)
 8004cd4:	f006 f8ac 	bl	800ae30 <puts>
}
 8004cd8:	bc80      	pop	{r7}
 8004cda:	46b8      	mov	r8, r7
 8004cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bak_button_value = button_value;
 8004cde:	7018      	strb	r0, [r3, #0]
	if(0 == button_pushed)		return;
 8004ce0:	e7fa      	b.n	8004cd8 <charger_userconfigmode_handler+0x60>
		_LIB_USERDELAY_start(&gTimeout_userconfigmode_input, DELAY_RENEW_ON);
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	480d      	ldr	r0, [pc, #52]	; (8004d1c <charger_userconfigmode_handler+0xa4>)
		Charger.userconfigmode_input_count++;
 8004ce6:	55ea      	strb	r2, [r5, r7]
		_LIB_USERDELAY_start(&gTimeout_userconfigmode_input, DELAY_RENEW_ON);
 8004ce8:	f002 f9a4 	bl	8007034 <_LIB_USERDELAY_start>
 8004cec:	e7e5      	b.n	8004cba <charger_userconfigmode_handler+0x42>
			_LIB_USERDELAY_stop(&gTimeout_userconfigmode_input);
 8004cee:	4640      	mov	r0, r8
 8004cf0:	f002 f9b0 	bl	8007054 <_LIB_USERDELAY_stop>
			printf("userconfigmode_handler_timeout\r\n");
 8004cf4:	480c      	ldr	r0, [pc, #48]	; (8004d28 <charger_userconfigmode_handler+0xb0>)
			Charger.userconfigmode_input_count = 0;
 8004cf6:	55ec      	strb	r4, [r5, r7]
			printf("userconfigmode_handler_timeout\r\n");
 8004cf8:	f006 f89a 	bl	800ae30 <puts>
 8004cfc:	e7dd      	b.n	8004cba <charger_userconfigmode_handler+0x42>
			printf("userconfigmode_handler_go to configmode\r\n");
 8004cfe:	480b      	ldr	r0, [pc, #44]	; (8004d2c <charger_userconfigmode_handler+0xb4>)
 8004d00:	f006 f896 	bl	800ae30 <puts>
	Charger.mode = cmode;
 8004d04:	2304      	movs	r3, #4
			_APP_CONFIGSERV_flag(_TRUE,_TRUE);
 8004d06:	2101      	movs	r1, #1
 8004d08:	2001      	movs	r0, #1
	Charger.mode = cmode;
 8004d0a:	70ab      	strb	r3, [r5, #2]
			_APP_CONFIGSERV_flag(_TRUE,_TRUE);
 8004d0c:	f000 fdc2 	bl	8005894 <_APP_CONFIGSERV_flag>
 8004d10:	e7e2      	b.n	8004cd8 <charger_userconfigmode_handler+0x60>
 8004d12:	46c0      	nop			; (mov r8, r8)
 8004d14:	20000100 	.word	0x20000100
 8004d18:	20000188 	.word	0x20000188
 8004d1c:	200002dc 	.word	0x200002dc
 8004d20:	0800cc98 	.word	0x0800cc98
 8004d24:	0800ccf0 	.word	0x0800ccf0
 8004d28:	0800cc78 	.word	0x0800cc78
 8004d2c:	0800ccc4 	.word	0x0800ccc4

08004d30 <charger_autostartmode_handler>:
{
 8004d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d32:	46c6      	mov	lr, r8
	if(1 == Charger.default_start_mode)
 8004d34:	2384      	movs	r3, #132	; 0x84
{
 8004d36:	b500      	push	{lr}
	return Charger.state;
 8004d38:	4c47      	ldr	r4, [pc, #284]	; (8004e58 <charger_autostartmode_handler+0x128>)
	if(1 == Charger.default_start_mode)
 8004d3a:	5ce3      	ldrb	r3, [r4, r3]
	return Charger.state;
 8004d3c:	7827      	ldrb	r7, [r4, #0]
	if(1 == Charger.default_start_mode)
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d018      	beq.n	8004d74 <charger_autostartmode_handler+0x44>
	button_value = _MW_GPIO_get_gpi(EMG);
 8004d42:	2005      	movs	r0, #5
 8004d44:	f002 ff2a 	bl	8007b9c <_MW_GPIO_get_gpi>
	if((_OFF == button_value))
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	d10f      	bne.n	8004d6c <charger_autostartmode_handler+0x3c>
		if(1 == _LIB_USERDELAY_start(&gDelay_autostartmode_input, DELAY_RENEW_OFF))
 8004d4c:	4e43      	ldr	r6, [pc, #268]	; (8004e5c <charger_autostartmode_handler+0x12c>)
 8004d4e:	2100      	movs	r1, #0
 8004d50:	0030      	movs	r0, r6
 8004d52:	f002 f96f 	bl	8007034 <_LIB_USERDELAY_start>
 8004d56:	2801      	cmp	r0, #1
 8004d58:	d038      	beq.n	8004dcc <charger_autostartmode_handler+0x9c>
		if(1 == _LIB_USERDELAY_isfired(&gDelay_autostartmode_input))
 8004d5a:	0030      	movs	r0, r6
 8004d5c:	f002 f97e 	bl	800705c <_LIB_USERDELAY_isfired>
 8004d60:	0005      	movs	r5, r0
 8004d62:	2801      	cmp	r0, #1
 8004d64:	d03b      	beq.n	8004dde <charger_autostartmode_handler+0xae>
}
 8004d66:	bc80      	pop	{r7}
 8004d68:	46b8      	mov	r8, r7
 8004d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_LIB_USERDELAY_stop(&gDelay_autostartmode_input);
 8004d6c:	483b      	ldr	r0, [pc, #236]	; (8004e5c <charger_autostartmode_handler+0x12c>)
 8004d6e:	f002 f971 	bl	8007054 <_LIB_USERDELAY_stop>
 8004d72:	e7f8      	b.n	8004d66 <charger_autostartmode_handler+0x36>
		if(0 == handler_first_loop)
 8004d74:	4d3a      	ldr	r5, [pc, #232]	; (8004e60 <charger_autostartmode_handler+0x130>)
 8004d76:	782b      	ldrb	r3, [r5, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1e2      	bne.n	8004d42 <charger_autostartmode_handler+0x12>
			if(1 == _LIB_USERDELAY_start(&gDelay_autostartmode_default_set, DELAY_RENEW_OFF))
 8004d7c:	4b39      	ldr	r3, [pc, #228]	; (8004e64 <charger_autostartmode_handler+0x134>)
 8004d7e:	2100      	movs	r1, #0
 8004d80:	0018      	movs	r0, r3
 8004d82:	4698      	mov	r8, r3
 8004d84:	f002 f956 	bl	8007034 <_LIB_USERDELAY_start>
 8004d88:	2801      	cmp	r0, #1
 8004d8a:	d03a      	beq.n	8004e02 <charger_autostartmode_handler+0xd2>
			if(1 == _LIB_USERDELAY_isfired(&gDelay_autostartmode_default_set))
 8004d8c:	4640      	mov	r0, r8
 8004d8e:	f002 f965 	bl	800705c <_LIB_USERDELAY_isfired>
 8004d92:	0006      	movs	r6, r0
 8004d94:	2801      	cmp	r0, #1
 8004d96:	d1d4      	bne.n	8004d42 <charger_autostartmode_handler+0x12>
	if((stemp == Ready) && (1 == Charger.reg.ready_standby))
 8004d98:	7823      	ldrb	r3, [r4, #0]
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d1d1      	bne.n	8004d42 <charger_autostartmode_handler+0x12>
 8004d9e:	2208      	movs	r2, #8
 8004da0:	78e3      	ldrb	r3, [r4, #3]
 8004da2:	421a      	tst	r2, r3
 8004da4:	d0cd      	beq.n	8004d42 <charger_autostartmode_handler+0x12>
		Charger.reg.ready_standby = 0;
 8004da6:	4393      	bics	r3, r2
		Charger.reg.ready_automodeflag = 1;
 8004da8:	2201      	movs	r2, #1
		Charger.reg.ready_standby = 0;
 8004daa:	70e3      	strb	r3, [r4, #3]
		Charger.reg.ready_automodeflag = 1;
 8004dac:	7923      	ldrb	r3, [r4, #4]
		_LIB_LOGGING_printf("#### CHARGSERV : ready_Automodeflag #### \r\n");
 8004dae:	482e      	ldr	r0, [pc, #184]	; (8004e68 <charger_autostartmode_handler+0x138>)
		Charger.reg.ready_automodeflag = 1;
 8004db0:	4313      	orrs	r3, r2
 8004db2:	7123      	strb	r3, [r4, #4]
		_LIB_LOGGING_printf("#### CHARGSERV : ready_Automodeflag #### \r\n");
 8004db4:	f006 f83c 	bl	800ae30 <puts>
					_LIB_USERDELAY_stop(&gDelay_autostartmode_default_set);
 8004db8:	4640      	mov	r0, r8
 8004dba:	f002 f94b 	bl	8007054 <_LIB_USERDELAY_stop>
					Charger.automode_active = 1;
 8004dbe:	237b      	movs	r3, #123	; 0x7b
					printf("_DEFAULT_AUTOSTART_ACTIVE_ __ Manualstartmode --> Autostartmode \r\n");
 8004dc0:	482a      	ldr	r0, [pc, #168]	; (8004e6c <charger_autostartmode_handler+0x13c>)
					handler_first_loop = 1;
 8004dc2:	702e      	strb	r6, [r5, #0]
					Charger.automode_active = 1;
 8004dc4:	54e6      	strb	r6, [r4, r3]
					printf("_DEFAULT_AUTOSTART_ACTIVE_ __ Manualstartmode --> Autostartmode \r\n");
 8004dc6:	f006 f833 	bl	800ae30 <puts>
 8004dca:	e7ba      	b.n	8004d42 <charger_autostartmode_handler+0x12>
			printf("Autostartmode_handler_button_pushed...\r\n");
 8004dcc:	4828      	ldr	r0, [pc, #160]	; (8004e70 <charger_autostartmode_handler+0x140>)
 8004dce:	f006 f82f 	bl	800ae30 <puts>
		if(1 == _LIB_USERDELAY_isfired(&gDelay_autostartmode_input))
 8004dd2:	0030      	movs	r0, r6
 8004dd4:	f002 f942 	bl	800705c <_LIB_USERDELAY_isfired>
 8004dd8:	0005      	movs	r5, r0
 8004dda:	2801      	cmp	r0, #1
 8004ddc:	d1c3      	bne.n	8004d66 <charger_autostartmode_handler+0x36>
			_LIB_USERDELAY_stop(&gDelay_autostartmode_input);
 8004dde:	0030      	movs	r0, r6
			if((Ready == charger_state) || (AutoReady == charger_state))
 8004de0:	3f02      	subs	r7, #2
			_LIB_USERDELAY_stop(&gDelay_autostartmode_input);
 8004de2:	f002 f937 	bl	8007054 <_LIB_USERDELAY_stop>
			if((Ready == charger_state) || (AutoReady == charger_state))
 8004de6:	2f01      	cmp	r7, #1
 8004de8:	d8bd      	bhi.n	8004d66 <charger_autostartmode_handler+0x36>
				printf("Autostartmode_handler_pushed on delay timer pass! \r\n");
 8004dea:	4822      	ldr	r0, [pc, #136]	; (8004e74 <charger_autostartmode_handler+0x144>)
 8004dec:	f006 f820 	bl	800ae30 <puts>
	return Charger.state;
 8004df0:	7823      	ldrb	r3, [r4, #0]
	if((stemp == Ready) && (1 == Charger.reg.ready_standby))
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d009      	beq.n	8004e0a <charger_autostartmode_handler+0xda>
	if((stemp == AutoReady) && (1 == Charger.reg.autoready_standby) &&
 8004df6:	2b03      	cmp	r3, #3
 8004df8:	d01a      	beq.n	8004e30 <charger_autostartmode_handler+0x100>
					printf("Autostartmode --> Manualstartmode No Effect \r\n");
 8004dfa:	481f      	ldr	r0, [pc, #124]	; (8004e78 <charger_autostartmode_handler+0x148>)
 8004dfc:	f006 f818 	bl	800ae30 <puts>
}
 8004e00:	e7b1      	b.n	8004d66 <charger_autostartmode_handler+0x36>
				printf("_DEFAULT_AUTOSTART_ACTIVE_ delay start\r\n");
 8004e02:	481e      	ldr	r0, [pc, #120]	; (8004e7c <charger_autostartmode_handler+0x14c>)
 8004e04:	f006 f814 	bl	800ae30 <puts>
 8004e08:	e7c0      	b.n	8004d8c <charger_autostartmode_handler+0x5c>
	if((stemp == Ready) && (1 == Charger.reg.ready_standby))
 8004e0a:	2208      	movs	r2, #8
 8004e0c:	78e3      	ldrb	r3, [r4, #3]
 8004e0e:	421a      	tst	r2, r3
 8004e10:	d0f3      	beq.n	8004dfa <charger_autostartmode_handler+0xca>
		Charger.reg.ready_standby = 0;
 8004e12:	4393      	bics	r3, r2
		Charger.reg.ready_automodeflag = 1;
 8004e14:	2201      	movs	r2, #1
		Charger.reg.ready_standby = 0;
 8004e16:	70e3      	strb	r3, [r4, #3]
		Charger.reg.ready_automodeflag = 1;
 8004e18:	7923      	ldrb	r3, [r4, #4]
		_LIB_LOGGING_printf("#### CHARGSERV : ready_Automodeflag #### \r\n");
 8004e1a:	4813      	ldr	r0, [pc, #76]	; (8004e68 <charger_autostartmode_handler+0x138>)
		Charger.reg.ready_automodeflag = 1;
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	7123      	strb	r3, [r4, #4]
		_LIB_LOGGING_printf("#### CHARGSERV : ready_Automodeflag #### \r\n");
 8004e20:	f006 f806 	bl	800ae30 <puts>
					printf("Manualstartmode --> Autostartmode \r\n");
 8004e24:	4816      	ldr	r0, [pc, #88]	; (8004e80 <charger_autostartmode_handler+0x150>)
 8004e26:	f006 f803 	bl	800ae30 <puts>
					Charger.automode_active = 1;
 8004e2a:	237b      	movs	r3, #123	; 0x7b
 8004e2c:	54e5      	strb	r5, [r4, r3]
 8004e2e:	e79a      	b.n	8004d66 <charger_autostartmode_handler+0x36>
	if((stemp == AutoReady) && (1 == Charger.reg.autoready_standby) &&
 8004e30:	7922      	ldrb	r2, [r4, #4]
 8004e32:	3307      	adds	r3, #7
 8004e34:	4013      	ands	r3, r2
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d1df      	bne.n	8004dfa <charger_autostartmode_handler+0xca>
		Charger.reg.autoready_standby = 0;
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	439a      	bics	r2, r3
 8004e3e:	2304      	movs	r3, #4
 8004e40:	431a      	orrs	r2, r3
 8004e42:	7122      	strb	r2, [r4, #4]
		_LIB_LOGGING_printf("#### CHARGSERV : AutoReady_maunalmodeflag #### \r\n");
 8004e44:	480f      	ldr	r0, [pc, #60]	; (8004e84 <charger_autostartmode_handler+0x154>)
 8004e46:	f005 fff3 	bl	800ae30 <puts>
					printf("Autostartmode --> Manualstartmode \r\n");
 8004e4a:	480f      	ldr	r0, [pc, #60]	; (8004e88 <charger_autostartmode_handler+0x158>)
 8004e4c:	f005 fff0 	bl	800ae30 <puts>
					Charger.automode_active = 0;
 8004e50:	237b      	movs	r3, #123	; 0x7b
 8004e52:	2200      	movs	r2, #0
 8004e54:	54e2      	strb	r2, [r4, r3]
 8004e56:	e786      	b.n	8004d66 <charger_autostartmode_handler+0x36>
 8004e58:	20000100 	.word	0x20000100
 8004e5c:	200001a4 	.word	0x200001a4
 8004e60:	20000318 	.word	0x20000318
 8004e64:	20000198 	.word	0x20000198
 8004e68:	0800c1a4 	.word	0x0800c1a4
 8004e6c:	0800cd50 	.word	0x0800cd50
 8004e70:	0800cd94 	.word	0x0800cd94
 8004e74:	0800cdbc 	.word	0x0800cdbc
 8004e78:	0800ce38 	.word	0x0800ce38
 8004e7c:	0800cd28 	.word	0x0800cd28
 8004e80:	0800cdf0 	.word	0x0800cdf0
 8004e84:	0800c1d0 	.word	0x0800c1d0
 8004e88:	0800ce14 	.word	0x0800ce14

08004e8c <_APP_CHARGSERV_ctrl_loop>:
	if(Charger.wake_up_seq_flag == 1)
 8004e8c:	2365      	movs	r3, #101	; 0x65
{
 8004e8e:	b510      	push	{r4, lr}
	if(Charger.wake_up_seq_flag == 1)
 8004e90:	4a09      	ldr	r2, [pc, #36]	; (8004eb8 <_APP_CHARGSERV_ctrl_loop+0x2c>)
 8004e92:	5cd3      	ldrb	r3, [r2, r3]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d00c      	beq.n	8004eb2 <_APP_CHARGSERV_ctrl_loop+0x26>
	charger_cp_ry_control();
 8004e98:	f7ff fa02 	bl	80042a0 <charger_cp_ry_control>
	charger_cp_state_control();
 8004e9c:	f7ff fa1e 	bl	80042dc <charger_cp_state_control>
	charger_mc_ry_control();
 8004ea0:	f7ff fd44 	bl	800492c <charger_mc_ry_control>
	charger_common_control();
 8004ea4:	f7ff fe0c 	bl	8004ac0 <charger_common_control>
	charger_userconfigmode_handler();
 8004ea8:	f7ff fee6 	bl	8004c78 <charger_userconfigmode_handler>
	charger_autostartmode_handler();
 8004eac:	f7ff ff40 	bl	8004d30 <charger_autostartmode_handler>
}
 8004eb0:	bd10      	pop	{r4, pc}
 8004eb2:	f7fe fcfb 	bl	80038ac <charger_wake_up_seq_control.part.0>
 8004eb6:	e7ef      	b.n	8004e98 <_APP_CHARGSERV_ctrl_loop+0xc>
 8004eb8:	20000100 	.word	0x20000100

08004ebc <_APP_CHARGSERV_print_state>:
	if(state != Charger.state_bk)
 8004ebc:	2372      	movs	r3, #114	; 0x72
{
 8004ebe:	b570      	push	{r4, r5, r6, lr}
	return Charger.state;
 8004ec0:	4d1c      	ldr	r5, [pc, #112]	; (8004f34 <_APP_CHARGSERV_print_state+0x78>)
 8004ec2:	782c      	ldrb	r4, [r5, #0]
	if(state != Charger.state_bk)
 8004ec4:	5ceb      	ldrb	r3, [r5, r3]
 8004ec6:	42a3      	cmp	r3, r4
 8004ec8:	d00a      	beq.n	8004ee0 <_APP_CHARGSERV_print_state+0x24>
		switch(state)
 8004eca:	2c0a      	cmp	r4, #10
 8004ecc:	d80a      	bhi.n	8004ee4 <_APP_CHARGSERV_print_state+0x28>
 8004ece:	4a1a      	ldr	r2, [pc, #104]	; (8004f38 <_APP_CHARGSERV_print_state+0x7c>)
 8004ed0:	00a3      	lsls	r3, r4, #2
 8004ed2:	58d3      	ldr	r3, [r2, r3]
 8004ed4:	469f      	mov	pc, r3
				_LIB_LOGGING_printf("#### CHARGSERV State : Powercut #### \r\n");
 8004ed6:	4819      	ldr	r0, [pc, #100]	; (8004f3c <_APP_CHARGSERV_print_state+0x80>)
 8004ed8:	f005 ffaa 	bl	800ae30 <puts>
		Charger.state_bk = state;
 8004edc:	2372      	movs	r3, #114	; 0x72
 8004ede:	54ec      	strb	r4, [r5, r3]
}
 8004ee0:	2001      	movs	r0, #1
 8004ee2:	bd70      	pop	{r4, r5, r6, pc}
				_LIB_LOGGING_printf("#### CHARGSERV State : default #### \r\n");
 8004ee4:	4816      	ldr	r0, [pc, #88]	; (8004f40 <_APP_CHARGSERV_print_state+0x84>)
 8004ee6:	f005 ffa3 	bl	800ae30 <puts>
			break;
 8004eea:	e7f7      	b.n	8004edc <_APP_CHARGSERV_print_state+0x20>
				_LIB_LOGGING_printf("#### CHARGSERV State : Init #### \r\n");
 8004eec:	4815      	ldr	r0, [pc, #84]	; (8004f44 <_APP_CHARGSERV_print_state+0x88>)
 8004eee:	f005 ff9f 	bl	800ae30 <puts>
			break;
 8004ef2:	e7f3      	b.n	8004edc <_APP_CHARGSERV_print_state+0x20>
				_LIB_LOGGING_printf("#### CHARGSERV State : Ready #### \r\n");
 8004ef4:	4814      	ldr	r0, [pc, #80]	; (8004f48 <_APP_CHARGSERV_print_state+0x8c>)
 8004ef6:	f005 ff9b 	bl	800ae30 <puts>
			break;
 8004efa:	e7ef      	b.n	8004edc <_APP_CHARGSERV_print_state+0x20>
				_LIB_LOGGING_printf("#### CHARGSERV State : AutoReady #### \r\n");
 8004efc:	4813      	ldr	r0, [pc, #76]	; (8004f4c <_APP_CHARGSERV_print_state+0x90>)
 8004efe:	f005 ff97 	bl	800ae30 <puts>
			break;
 8004f02:	e7eb      	b.n	8004edc <_APP_CHARGSERV_print_state+0x20>
				_LIB_LOGGING_printf("#### CHARGSERV State : UserCheck #### \r\n");
 8004f04:	4812      	ldr	r0, [pc, #72]	; (8004f50 <_APP_CHARGSERV_print_state+0x94>)
 8004f06:	f005 ff93 	bl	800ae30 <puts>
			break;
 8004f0a:	e7e7      	b.n	8004edc <_APP_CHARGSERV_print_state+0x20>
				_LIB_LOGGING_printf("#### CHARGSERV State : Connect #### \r\n");
 8004f0c:	4811      	ldr	r0, [pc, #68]	; (8004f54 <_APP_CHARGSERV_print_state+0x98>)
 8004f0e:	f005 ff8f 	bl	800ae30 <puts>
			break;
 8004f12:	e7e3      	b.n	8004edc <_APP_CHARGSERV_print_state+0x20>
				_LIB_LOGGING_printf("#### CHARGSERV State : Charging #### \r\n");
 8004f14:	4810      	ldr	r0, [pc, #64]	; (8004f58 <_APP_CHARGSERV_print_state+0x9c>)
 8004f16:	f005 ff8b 	bl	800ae30 <puts>
			break;
 8004f1a:	e7df      	b.n	8004edc <_APP_CHARGSERV_print_state+0x20>
				_LIB_LOGGING_printf("#### CHARGSERV State : Finish #### \r\n");
 8004f1c:	480f      	ldr	r0, [pc, #60]	; (8004f5c <_APP_CHARGSERV_print_state+0xa0>)
 8004f1e:	f005 ff87 	bl	800ae30 <puts>
			break;
 8004f22:	e7db      	b.n	8004edc <_APP_CHARGSERV_print_state+0x20>
				_LIB_LOGGING_printf("#### CHARGSERV State : OTA #### \r\n");
 8004f24:	480e      	ldr	r0, [pc, #56]	; (8004f60 <_APP_CHARGSERV_print_state+0xa4>)
 8004f26:	f005 ff83 	bl	800ae30 <puts>
			break;
 8004f2a:	e7d7      	b.n	8004edc <_APP_CHARGSERV_print_state+0x20>
				_LIB_LOGGING_printf("#### CHARGSERV State : Fault #### \r\n");
 8004f2c:	480d      	ldr	r0, [pc, #52]	; (8004f64 <_APP_CHARGSERV_print_state+0xa8>)
 8004f2e:	f005 ff7f 	bl	800ae30 <puts>
			break;
 8004f32:	e7d3      	b.n	8004edc <_APP_CHARGSERV_print_state+0x20>
 8004f34:	20000100 	.word	0x20000100
 8004f38:	0800d010 	.word	0x0800d010
 8004f3c:	0800cfc0 	.word	0x0800cfc0
 8004f40:	0800cfe8 	.word	0x0800cfe8
 8004f44:	0800ce68 	.word	0x0800ce68
 8004f48:	0800ce8c 	.word	0x0800ce8c
 8004f4c:	0800ceb0 	.word	0x0800ceb0
 8004f50:	0800ced8 	.word	0x0800ced8
 8004f54:	0800cf00 	.word	0x0800cf00
 8004f58:	0800cf28 	.word	0x0800cf28
 8004f5c:	0800cf50 	.word	0x0800cf50
 8004f60:	0800cf78 	.word	0x0800cf78
 8004f64:	0800cf9c 	.word	0x0800cf9c

08004f68 <_APP_CHARGSERV_device_stop>:
{
 8004f68:	b510      	push	{r4, lr}
	if(mode == 1)
 8004f6a:	2801      	cmp	r0, #1
 8004f6c:	d00a      	beq.n	8004f84 <_APP_CHARGSERV_device_stop+0x1c>
		_MW_CP_cp_relay_ctl(_OFF);
 8004f6e:	2000      	movs	r0, #0
 8004f70:	f002 f92e 	bl	80071d0 <_MW_CP_cp_relay_ctl>
		_MW_CP_mc_relay_ctl(_OFF);
 8004f74:	2000      	movs	r0, #0
 8004f76:	f002 f96f 	bl	8007258 <_MW_CP_mc_relay_ctl>
		_MW_CP_set_pwm_duty(100);
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	4903      	ldr	r1, [pc, #12]	; (8004f8c <_APP_CHARGSERV_device_stop+0x24>)
 8004f7e:	f002 f8ff 	bl	8007180 <_MW_CP_set_pwm_duty>
}
 8004f82:	bd10      	pop	{r4, pc}
 8004f84:	f7fe fd10 	bl	80039a8 <_APP_CHARGSERV_device_stop.part.0>
 8004f88:	e7fb      	b.n	8004f82 <_APP_CHARGSERV_device_stop+0x1a>
 8004f8a:	46c0      	nop			; (mov r8, r8)
 8004f8c:	40590000 	.word	0x40590000

08004f90 <_APP_CHARGSERV_set_active_Ampe>:
{
 8004f90:	b570      	push	{r4, r5, r6, lr}
	return Charger.mode;
 8004f92:	4d14      	ldr	r5, [pc, #80]	; (8004fe4 <_APP_CHARGSERV_set_active_Ampe+0x54>)
{
 8004f94:	0004      	movs	r4, r0
	return Charger.mode;
 8004f96:	78ab      	ldrb	r3, [r5, #2]
	switch(temp_mode)
 8004f98:	2b03      	cmp	r3, #3
 8004f9a:	d81b      	bhi.n	8004fd4 <_APP_CHARGSERV_set_active_Ampe+0x44>
 8004f9c:	4a12      	ldr	r2, [pc, #72]	; (8004fe8 <_APP_CHARGSERV_set_active_Ampe+0x58>)
 8004f9e:	5cd0      	ldrb	r0, [r2, r3]
 8004fa0:	f7fb ff66 	bl	8000e70 <__aeabi_i2f>
	switch(step)
 8004fa4:	2c01      	cmp	r4, #1
 8004fa6:	d018      	beq.n	8004fda <_APP_CHARGSERV_set_active_Ampe+0x4a>
 8004fa8:	2c02      	cmp	r4, #2
 8004faa:	d102      	bne.n	8004fb2 <_APP_CHARGSERV_set_active_Ampe+0x22>
		break;
 8004fac:	490f      	ldr	r1, [pc, #60]	; (8004fec <_APP_CHARGSERV_set_active_Ampe+0x5c>)
 8004fae:	f7fb fc5d 	bl	800086c <__aeabi_fmul>
	Charger.active_Ampe = (uint8_t)(max_ampe * step_constant);
 8004fb2:	f7fb f97d 	bl	80002b0 <__aeabi_f2uiz>
 8004fb6:	2664      	movs	r6, #100	; 0x64
	if(ampe_bak != Charger.active_Ampe)
 8004fb8:	4c0d      	ldr	r4, [pc, #52]	; (8004ff0 <_APP_CHARGSERV_set_active_Ampe+0x60>)
	Charger.active_Ampe = (uint8_t)(max_ampe * step_constant);
 8004fba:	b2c1      	uxtb	r1, r0
	if(ampe_bak != Charger.active_Ampe)
 8004fbc:	7823      	ldrb	r3, [r4, #0]
	uint8_t ret_value = _FALSE;
 8004fbe:	2000      	movs	r0, #0
	Charger.active_Ampe = (uint8_t)(max_ampe * step_constant);
 8004fc0:	55a9      	strb	r1, [r5, r6]
	if(ampe_bak != Charger.active_Ampe)
 8004fc2:	428b      	cmp	r3, r1
 8004fc4:	d005      	beq.n	8004fd2 <_APP_CHARGSERV_set_active_Ampe+0x42>
		_LIB_LOGGING_printf("#### CHARGSERV_set_active_Ampe :%d #### \r\n",Charger.active_Ampe);
 8004fc6:	480b      	ldr	r0, [pc, #44]	; (8004ff4 <_APP_CHARGSERV_set_active_Ampe+0x64>)
 8004fc8:	f005 fea6 	bl	800ad18 <iprintf>
		ret_value = _TRUE;
 8004fcc:	2001      	movs	r0, #1
		ampe_bak = Charger.active_Ampe;
 8004fce:	5dab      	ldrb	r3, [r5, r6]
 8004fd0:	7023      	strb	r3, [r4, #0]
}
 8004fd2:	bd70      	pop	{r4, r5, r6, pc}
	return Charger.mode;
 8004fd4:	4808      	ldr	r0, [pc, #32]	; (8004ff8 <_APP_CHARGSERV_set_active_Ampe+0x68>)
	switch(step)
 8004fd6:	2c01      	cmp	r4, #1
 8004fd8:	d1e6      	bne.n	8004fa8 <_APP_CHARGSERV_set_active_Ampe+0x18>
 8004fda:	4908      	ldr	r1, [pc, #32]	; (8004ffc <_APP_CHARGSERV_set_active_Ampe+0x6c>)
 8004fdc:	f7fb fc46 	bl	800086c <__aeabi_fmul>
 8004fe0:	e7e7      	b.n	8004fb2 <_APP_CHARGSERV_set_active_Ampe+0x22>
 8004fe2:	46c0      	nop			; (mov r8, r8)
 8004fe4:	20000100 	.word	0x20000100
 8004fe8:	0800d2f0 	.word	0x0800d2f0
 8004fec:	3f4ccccd 	.word	0x3f4ccccd
 8004ff0:	20000004 	.word	0x20000004
 8004ff4:	0800d03c 	.word	0x0800d03c
 8004ff8:	42480000 	.word	0x42480000
 8004ffc:	3f666666 	.word	0x3f666666

08005000 <_APP_CHARGSERV_set_voltage_rms_V>:
	Charger.current_V_rms = Vrms;
 8005000:	4b01      	ldr	r3, [pc, #4]	; (8005008 <_APP_CHARGSERV_set_voltage_rms_V+0x8>)
 8005002:	6558      	str	r0, [r3, #84]	; 0x54
}
 8005004:	4770      	bx	lr
 8005006:	46c0      	nop			; (mov r8, r8)
 8005008:	20000100 	.word	0x20000100

0800500c <_APP_CHARGSERV_set_current_rms_A>:
	Charger.current_I_rms = Irms;
 800500c:	4b01      	ldr	r3, [pc, #4]	; (8005014 <_APP_CHARGSERV_set_current_rms_A+0x8>)
 800500e:	6598      	str	r0, [r3, #88]	; 0x58
}
 8005010:	4770      	bx	lr
 8005012:	46c0      	nop			; (mov r8, r8)
 8005014:	20000100 	.word	0x20000100

08005018 <charger_emg_fault>:
	return Charger.state;
 8005018:	4a1a      	ldr	r2, [pc, #104]	; (8005084 <charger_emg_fault+0x6c>)
{
 800501a:	b570      	push	{r4, r5, r6, lr}
	return Charger.state;
 800501c:	7813      	ldrb	r3, [r2, #0]
	if((AutoReady == charger_state) || (1 == Charger.automode_active))
 800501e:	2b03      	cmp	r3, #3
 8005020:	d016      	beq.n	8005050 <charger_emg_fault+0x38>
 8005022:	217b      	movs	r1, #123	; 0x7b
 8005024:	5c52      	ldrb	r2, [r2, r1]
 8005026:	2a01      	cmp	r2, #1
 8005028:	d012      	beq.n	8005050 <charger_emg_fault+0x38>
	if((Charging == charger_state) || (Fault == charger_state))
 800502a:	2b06      	cmp	r3, #6
 800502c:	d002      	beq.n	8005034 <charger_emg_fault+0x1c>
 800502e:	2b09      	cmp	r3, #9
 8005030:	d000      	beq.n	8005034 <charger_emg_fault+0x1c>
}
 8005032:	bd70      	pop	{r4, r5, r6, pc}
		if(_OFF == _MW_GPIO_get_gpi(EMG))
 8005034:	2005      	movs	r0, #5
 8005036:	f002 fdb1 	bl	8007b9c <_MW_GPIO_get_gpi>
			if(_OFF == charger_fault_status.EMG_INPUT)
 800503a:	4c13      	ldr	r4, [pc, #76]	; (8005088 <charger_emg_fault+0x70>)
		if(_OFF == _MW_GPIO_get_gpi(EMG))
 800503c:	2800      	cmp	r0, #0
 800503e:	d10d      	bne.n	800505c <charger_emg_fault+0x44>
			if(_OFF == charger_fault_status.EMG_INPUT)
 8005040:	7863      	ldrb	r3, [r4, #1]
 8005042:	071b      	lsls	r3, r3, #28
 8005044:	d51a      	bpl.n	800507c <charger_emg_fault+0x64>
			charger_fault_status.EMG_INPUT = _ON;
 8005046:	2208      	movs	r2, #8
 8005048:	7863      	ldrb	r3, [r4, #1]
 800504a:	4313      	orrs	r3, r2
 800504c:	7063      	strb	r3, [r4, #1]
 800504e:	e7f0      	b.n	8005032 <charger_emg_fault+0x1a>
		charger_fault_status.EMG_INPUT = _OFF;
 8005050:	2108      	movs	r1, #8
 8005052:	4a0d      	ldr	r2, [pc, #52]	; (8005088 <charger_emg_fault+0x70>)
 8005054:	7853      	ldrb	r3, [r2, #1]
 8005056:	438b      	bics	r3, r1
 8005058:	7053      	strb	r3, [r2, #1]
		return;
 800505a:	e7ea      	b.n	8005032 <charger_emg_fault+0x1a>
		else if((_ON == charger_fault_status.EMG_INPUT) && (_ON == _MW_GPIO_get_gpi(EMG)))
 800505c:	2508      	movs	r5, #8
 800505e:	7863      	ldrb	r3, [r4, #1]
 8005060:	421d      	tst	r5, r3
 8005062:	d0e6      	beq.n	8005032 <charger_emg_fault+0x1a>
 8005064:	2005      	movs	r0, #5
 8005066:	f002 fd99 	bl	8007b9c <_MW_GPIO_get_gpi>
 800506a:	2801      	cmp	r0, #1
 800506c:	d1e1      	bne.n	8005032 <charger_emg_fault+0x1a>
			charger_fault_status.EMG_INPUT = _OFF;
 800506e:	7863      	ldrb	r3, [r4, #1]
				_LIB_LOGGING_printf("#### CHARGSERV_FAULT_CLR : EMG_INPUT #### \r\n");
 8005070:	4806      	ldr	r0, [pc, #24]	; (800508c <charger_emg_fault+0x74>)
			charger_fault_status.EMG_INPUT = _OFF;
 8005072:	43ab      	bics	r3, r5
 8005074:	7063      	strb	r3, [r4, #1]
				_LIB_LOGGING_printf("#### CHARGSERV_FAULT_CLR : EMG_INPUT #### \r\n");
 8005076:	f005 fedb 	bl	800ae30 <puts>
 800507a:	e7da      	b.n	8005032 <charger_emg_fault+0x1a>
				_LIB_LOGGING_printf("#### CHARGSERV_FAULT_SET : EMG_INPUT #### \r\n");
 800507c:	4804      	ldr	r0, [pc, #16]	; (8005090 <charger_emg_fault+0x78>)
 800507e:	f005 fed7 	bl	800ae30 <puts>
 8005082:	e7e0      	b.n	8005046 <charger_emg_fault+0x2e>
 8005084:	20000100 	.word	0x20000100
 8005088:	2000018c 	.word	0x2000018c
 800508c:	0800d094 	.word	0x0800d094
 8005090:	0800d068 	.word	0x0800d068

08005094 <charger_wd_fault>:
{
 8005094:	b570      	push	{r4, r5, r6, lr}
	if((_ON == _MW_CP_get_mc_relay_state()) && (_OFF == _MW_GPIO_get_gpi(WELD)))
 8005096:	f002 f931 	bl	80072fc <_MW_CP_get_mc_relay_state>
 800509a:	2801      	cmp	r0, #1
 800509c:	d02b      	beq.n	80050f6 <charger_wd_fault+0x62>
	else if((_OFF == _MW_CP_get_mc_relay_state()) && (_ON == _MW_GPIO_get_gpi(WELD)))
 800509e:	f002 f92d 	bl	80072fc <_MW_CP_get_mc_relay_state>
 80050a2:	2800      	cmp	r0, #0
 80050a4:	d042      	beq.n	800512c <charger_wd_fault+0x98>
	else if((charger_fault_status.MC_START_ERR == _ON)
 80050a6:	2502      	movs	r5, #2
 80050a8:	4c3f      	ldr	r4, [pc, #252]	; (80051a8 <charger_wd_fault+0x114>)
 80050aa:	7823      	ldrb	r3, [r4, #0]
 80050ac:	421d      	tst	r5, r3
 80050ae:	d158      	bne.n	8005162 <charger_wd_fault+0xce>
	else if((charger_fault_status.MC_STOP_ERR == _ON)
 80050b0:	2504      	movs	r5, #4
 80050b2:	421d      	tst	r5, r3
 80050b4:	d103      	bne.n	80050be <charger_wd_fault+0x2a>
		_LIB_USERDELAY_stop(&gTimeout_wd_fault);
 80050b6:	483d      	ldr	r0, [pc, #244]	; (80051ac <charger_wd_fault+0x118>)
 80050b8:	f001 ffcc 	bl	8007054 <_LIB_USERDELAY_stop>
}
 80050bc:	bd70      	pop	{r4, r5, r6, pc}
			&& (_MW_CP_get_mc_relay_state() == _MW_GPIO_get_gpi(WELD)))
 80050be:	f002 f91d 	bl	80072fc <_MW_CP_get_mc_relay_state>
 80050c2:	0006      	movs	r6, r0
 80050c4:	2004      	movs	r0, #4
 80050c6:	f002 fd69 	bl	8007b9c <_MW_GPIO_get_gpi>
 80050ca:	4286      	cmp	r6, r0
 80050cc:	d1f3      	bne.n	80050b6 <charger_wd_fault+0x22>
		if(_TRUE == _LIB_USERDELAY_start(&gTimeout_wd_fault, DELAY_RENEW_OFF))
 80050ce:	4e37      	ldr	r6, [pc, #220]	; (80051ac <charger_wd_fault+0x118>)
 80050d0:	2100      	movs	r1, #0
 80050d2:	0030      	movs	r0, r6
 80050d4:	f001 ffae 	bl	8007034 <_LIB_USERDELAY_start>
		if(_TRUE == _LIB_USERDELAY_isfired(&gTimeout_wd_fault))
 80050d8:	0030      	movs	r0, r6
 80050da:	f001 ffbf 	bl	800705c <_LIB_USERDELAY_isfired>
 80050de:	2801      	cmp	r0, #1
 80050e0:	d1ec      	bne.n	80050bc <charger_wd_fault+0x28>
			_LIB_USERDELAY_stop(&gTimeout_wd_fault);
 80050e2:	0030      	movs	r0, r6
 80050e4:	f001 ffb6 	bl	8007054 <_LIB_USERDELAY_stop>
			charger_fault_status.MC_STOP_ERR = _OFF;
 80050e8:	7823      	ldrb	r3, [r4, #0]
			_LIB_LOGGING_printf("#### CHARGSERV_FAULT_CLR : MC_STOP_ERR #### \r\n");
 80050ea:	4831      	ldr	r0, [pc, #196]	; (80051b0 <charger_wd_fault+0x11c>)
			charger_fault_status.MC_STOP_ERR = _OFF;
 80050ec:	43ab      	bics	r3, r5
 80050ee:	7023      	strb	r3, [r4, #0]
			_LIB_LOGGING_printf("#### CHARGSERV_FAULT_CLR : MC_STOP_ERR #### \r\n");
 80050f0:	f005 fe9e 	bl	800ae30 <puts>
 80050f4:	e7e2      	b.n	80050bc <charger_wd_fault+0x28>
	if((_ON == _MW_CP_get_mc_relay_state()) && (_OFF == _MW_GPIO_get_gpi(WELD)))
 80050f6:	3003      	adds	r0, #3
 80050f8:	f002 fd50 	bl	8007b9c <_MW_GPIO_get_gpi>
 80050fc:	2800      	cmp	r0, #0
 80050fe:	d1ce      	bne.n	800509e <charger_wd_fault+0xa>
		if(_TRUE == _LIB_USERDELAY_start(&gTimeout_wd_fault, DELAY_RENEW_OFF))
 8005100:	4c2a      	ldr	r4, [pc, #168]	; (80051ac <charger_wd_fault+0x118>)
 8005102:	2100      	movs	r1, #0
 8005104:	0020      	movs	r0, r4
 8005106:	f001 ff95 	bl	8007034 <_LIB_USERDELAY_start>
		if(_TRUE == _LIB_USERDELAY_isfired(&gTimeout_wd_fault))
 800510a:	0020      	movs	r0, r4
 800510c:	f001 ffa6 	bl	800705c <_LIB_USERDELAY_isfired>
 8005110:	2801      	cmp	r0, #1
 8005112:	d1d3      	bne.n	80050bc <charger_wd_fault+0x28>
			_LIB_USERDELAY_stop(&gTimeout_wd_fault);
 8005114:	0020      	movs	r0, r4
 8005116:	f001 ff9d 	bl	8007054 <_LIB_USERDELAY_stop>
			charger_fault_status.MC_START_ERR = _ON;
 800511a:	2102      	movs	r1, #2
 800511c:	4a22      	ldr	r2, [pc, #136]	; (80051a8 <charger_wd_fault+0x114>)
			_LIB_LOGGING_printf("#### CHARGSERV_FAULT_SET : MC_START_ERR #### \r\n");
 800511e:	4825      	ldr	r0, [pc, #148]	; (80051b4 <charger_wd_fault+0x120>)
			charger_fault_status.MC_START_ERR = _ON;
 8005120:	7813      	ldrb	r3, [r2, #0]
 8005122:	430b      	orrs	r3, r1
 8005124:	7013      	strb	r3, [r2, #0]
			_LIB_LOGGING_printf("#### CHARGSERV_FAULT_SET : MC_START_ERR #### \r\n");
 8005126:	f005 fe83 	bl	800ae30 <puts>
 800512a:	e7c7      	b.n	80050bc <charger_wd_fault+0x28>
	else if((_OFF == _MW_CP_get_mc_relay_state()) && (_ON == _MW_GPIO_get_gpi(WELD)))
 800512c:	3004      	adds	r0, #4
 800512e:	f002 fd35 	bl	8007b9c <_MW_GPIO_get_gpi>
 8005132:	2801      	cmp	r0, #1
 8005134:	d1b7      	bne.n	80050a6 <charger_wd_fault+0x12>
		if(_TRUE == _LIB_USERDELAY_start(&gTimeout_wd_fault, DELAY_RENEW_OFF))
 8005136:	4c1d      	ldr	r4, [pc, #116]	; (80051ac <charger_wd_fault+0x118>)
 8005138:	2100      	movs	r1, #0
 800513a:	0020      	movs	r0, r4
 800513c:	f001 ff7a 	bl	8007034 <_LIB_USERDELAY_start>
		if(_TRUE == _LIB_USERDELAY_isfired(&gTimeout_wd_fault))
 8005140:	0020      	movs	r0, r4
 8005142:	f001 ff8b 	bl	800705c <_LIB_USERDELAY_isfired>
 8005146:	2801      	cmp	r0, #1
 8005148:	d1b8      	bne.n	80050bc <charger_wd_fault+0x28>
			_LIB_USERDELAY_stop(&gTimeout_wd_fault);
 800514a:	0020      	movs	r0, r4
 800514c:	f001 ff82 	bl	8007054 <_LIB_USERDELAY_stop>
			charger_fault_status.MC_STOP_ERR = _ON;
 8005150:	2104      	movs	r1, #4
 8005152:	4a15      	ldr	r2, [pc, #84]	; (80051a8 <charger_wd_fault+0x114>)
			_LIB_LOGGING_printf("#### CHARGSERV_FAULT_SET : MC_STOP_ERR #### \r\n");
 8005154:	4818      	ldr	r0, [pc, #96]	; (80051b8 <charger_wd_fault+0x124>)
			charger_fault_status.MC_STOP_ERR = _ON;
 8005156:	7813      	ldrb	r3, [r2, #0]
 8005158:	430b      	orrs	r3, r1
 800515a:	7013      	strb	r3, [r2, #0]
			_LIB_LOGGING_printf("#### CHARGSERV_FAULT_SET : MC_STOP_ERR #### \r\n");
 800515c:	f005 fe68 	bl	800ae30 <puts>
 8005160:	e7ac      	b.n	80050bc <charger_wd_fault+0x28>
			&& (_MW_CP_get_mc_relay_state() == _MW_GPIO_get_gpi(WELD))
 8005162:	f002 f8cb 	bl	80072fc <_MW_CP_get_mc_relay_state>
 8005166:	0006      	movs	r6, r0
 8005168:	2004      	movs	r0, #4
 800516a:	f002 fd17 	bl	8007b9c <_MW_GPIO_get_gpi>
 800516e:	4286      	cmp	r6, r0
 8005170:	d001      	beq.n	8005176 <charger_wd_fault+0xe2>
 8005172:	7823      	ldrb	r3, [r4, #0]
 8005174:	e79c      	b.n	80050b0 <charger_wd_fault+0x1c>
			&& (_MW_CP_get_cp_state() == DC_12V))
 8005176:	f002 f8cb 	bl	8007310 <_MW_CP_get_cp_state>
 800517a:	2801      	cmp	r0, #1
 800517c:	d1f9      	bne.n	8005172 <charger_wd_fault+0xde>
		if(_TRUE == _LIB_USERDELAY_start(&gTimeout_wd_fault, DELAY_RENEW_OFF))
 800517e:	4e0b      	ldr	r6, [pc, #44]	; (80051ac <charger_wd_fault+0x118>)
 8005180:	2100      	movs	r1, #0
 8005182:	0030      	movs	r0, r6
 8005184:	f001 ff56 	bl	8007034 <_LIB_USERDELAY_start>
		if(_TRUE == _LIB_USERDELAY_isfired(&gTimeout_wd_fault))
 8005188:	0030      	movs	r0, r6
 800518a:	f001 ff67 	bl	800705c <_LIB_USERDELAY_isfired>
 800518e:	2801      	cmp	r0, #1
 8005190:	d000      	beq.n	8005194 <charger_wd_fault+0x100>
 8005192:	e793      	b.n	80050bc <charger_wd_fault+0x28>
			_LIB_USERDELAY_stop(&gTimeout_wd_fault);
 8005194:	0030      	movs	r0, r6
 8005196:	f001 ff5d 	bl	8007054 <_LIB_USERDELAY_stop>
			charger_fault_status.MC_START_ERR = _OFF;
 800519a:	7823      	ldrb	r3, [r4, #0]
			_LIB_LOGGING_printf("#### CHARGSERV_FAULT_CLR : MC_START_ERR #### \r\n");
 800519c:	4807      	ldr	r0, [pc, #28]	; (80051bc <charger_wd_fault+0x128>)
			charger_fault_status.MC_START_ERR = _OFF;
 800519e:	43ab      	bics	r3, r5
 80051a0:	7023      	strb	r3, [r4, #0]
			_LIB_LOGGING_printf("#### CHARGSERV_FAULT_CLR : MC_START_ERR #### \r\n");
 80051a2:	f005 fe45 	bl	800ae30 <puts>
 80051a6:	e789      	b.n	80050bc <charger_wd_fault+0x28>
 80051a8:	2000018c 	.word	0x2000018c
 80051ac:	200002e8 	.word	0x200002e8
 80051b0:	0800d150 	.word	0x0800d150
 80051b4:	0800d0c0 	.word	0x0800d0c0
 80051b8:	0800d0f0 	.word	0x0800d0f0
 80051bc:	0800d120 	.word	0x0800d120

080051c0 <charger_over_voltage_fault>:
{
 80051c0:	b570      	push	{r4, r5, r6, lr}
	if(charger_fault_status.AC_OV_ERR == _OFF)
 80051c2:	4d1f      	ldr	r5, [pc, #124]	; (8005240 <charger_over_voltage_fault+0x80>)
 80051c4:	782b      	ldrb	r3, [r5, #0]
 80051c6:	069b      	lsls	r3, r3, #26
 80051c8:	d41f      	bmi.n	800520a <charger_over_voltage_fault+0x4a>
		if(Charger.current_V_rms >= fault_over_voltage)
 80051ca:	4a1e      	ldr	r2, [pc, #120]	; (8005244 <charger_over_voltage_fault+0x84>)
 80051cc:	4b1e      	ldr	r3, [pc, #120]	; (8005248 <charger_over_voltage_fault+0x88>)
 80051ce:	6d52      	ldr	r2, [r2, #84]	; 0x54
			_LIB_USERDELAY_start(&gTimeout_ac_ov_fault, DELAY_RENEW_OFF);
 80051d0:	4c1e      	ldr	r4, [pc, #120]	; (800524c <charger_over_voltage_fault+0x8c>)
		if(Charger.current_V_rms >= fault_over_voltage)
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d808      	bhi.n	80051e8 <charger_over_voltage_fault+0x28>
			_LIB_USERDELAY_stop(&gTimeout_ac_ov_fault);
 80051d6:	0020      	movs	r0, r4
 80051d8:	f001 ff3c 	bl	8007054 <_LIB_USERDELAY_stop>
		if(_TRUE == _LIB_USERDELAY_isfired(&gTimeout_ac_ov_fault))
 80051dc:	0020      	movs	r0, r4
 80051de:	f001 ff3d 	bl	800705c <_LIB_USERDELAY_isfired>
 80051e2:	2801      	cmp	r0, #1
 80051e4:	d009      	beq.n	80051fa <charger_over_voltage_fault+0x3a>
}
 80051e6:	bd70      	pop	{r4, r5, r6, pc}
			_LIB_USERDELAY_start(&gTimeout_ac_ov_fault, DELAY_RENEW_OFF);
 80051e8:	2100      	movs	r1, #0
 80051ea:	0020      	movs	r0, r4
 80051ec:	f001 ff22 	bl	8007034 <_LIB_USERDELAY_start>
		if(_TRUE == _LIB_USERDELAY_isfired(&gTimeout_ac_ov_fault))
 80051f0:	0020      	movs	r0, r4
 80051f2:	f001 ff33 	bl	800705c <_LIB_USERDELAY_isfired>
 80051f6:	2801      	cmp	r0, #1
 80051f8:	d1f5      	bne.n	80051e6 <charger_over_voltage_fault+0x26>
			_LIB_USERDELAY_stop(&gTimeout_ac_ov_fault);
 80051fa:	0020      	movs	r0, r4
 80051fc:	f001 ff2a 	bl	8007054 <_LIB_USERDELAY_stop>
			charger_fault_status.AC_OV_ERR = _ON;
 8005200:	2220      	movs	r2, #32
 8005202:	782b      	ldrb	r3, [r5, #0]
 8005204:	4313      	orrs	r3, r2
 8005206:	702b      	strb	r3, [r5, #0]
}
 8005208:	e7ed      	b.n	80051e6 <charger_over_voltage_fault+0x26>
		if(Charger.current_V_rms < fault_over_voltage)
 800520a:	4a0e      	ldr	r2, [pc, #56]	; (8005244 <charger_over_voltage_fault+0x84>)
 800520c:	4b0e      	ldr	r3, [pc, #56]	; (8005248 <charger_over_voltage_fault+0x88>)
 800520e:	6d52      	ldr	r2, [r2, #84]	; 0x54
			_LIB_USERDELAY_start(&gTimeout_ac_ov_fault, DELAY_RENEW_OFF);
 8005210:	4c0e      	ldr	r4, [pc, #56]	; (800524c <charger_over_voltage_fault+0x8c>)
		if(Charger.current_V_rms < fault_over_voltage)
 8005212:	429a      	cmp	r2, r3
 8005214:	d810      	bhi.n	8005238 <charger_over_voltage_fault+0x78>
			_LIB_USERDELAY_start(&gTimeout_ac_ov_fault, DELAY_RENEW_OFF);
 8005216:	2100      	movs	r1, #0
 8005218:	0020      	movs	r0, r4
 800521a:	f001 ff0b 	bl	8007034 <_LIB_USERDELAY_start>
		if(_TRUE == _LIB_USERDELAY_isfired(&gTimeout_ac_ov_fault))
 800521e:	0020      	movs	r0, r4
 8005220:	f001 ff1c 	bl	800705c <_LIB_USERDELAY_isfired>
 8005224:	2801      	cmp	r0, #1
 8005226:	d1de      	bne.n	80051e6 <charger_over_voltage_fault+0x26>
			_LIB_USERDELAY_stop(&gTimeout_ac_ov_fault);
 8005228:	0020      	movs	r0, r4
 800522a:	f001 ff13 	bl	8007054 <_LIB_USERDELAY_stop>
			charger_fault_status.AC_OV_ERR = _OFF;
 800522e:	2220      	movs	r2, #32
 8005230:	782b      	ldrb	r3, [r5, #0]
 8005232:	4393      	bics	r3, r2
 8005234:	702b      	strb	r3, [r5, #0]
}
 8005236:	e7d6      	b.n	80051e6 <charger_over_voltage_fault+0x26>
			_LIB_USERDELAY_stop(&gTimeout_ac_ov_fault);
 8005238:	0020      	movs	r0, r4
 800523a:	f001 ff0b 	bl	8007054 <_LIB_USERDELAY_stop>
 800523e:	e7ee      	b.n	800521e <charger_over_voltage_fault+0x5e>
 8005240:	2000018c 	.word	0x2000018c
 8005244:	20000100 	.word	0x20000100
 8005248:	000060df 	.word	0x000060df
 800524c:	20000234 	.word	0x20000234

08005250 <charger_over_current_fault>:
{
 8005250:	b570      	push	{r4, r5, r6, lr}
	return Charger.state;
 8005252:	4c2b      	ldr	r4, [pc, #172]	; (8005300 <charger_over_current_fault+0xb0>)
 8005254:	7826      	ldrb	r6, [r4, #0]
	CP_StateDef	cp_state = _MW_CP_get_cp_state();
 8005256:	f002 f85b 	bl	8007310 <_MW_CP_get_cp_state>
	if(charger_fault_status.AC_OC_ERR == _OFF)
 800525a:	2208      	movs	r2, #8
 800525c:	4d29      	ldr	r5, [pc, #164]	; (8005304 <charger_over_current_fault+0xb4>)
 800525e:	782b      	ldrb	r3, [r5, #0]
 8005260:	421a      	tst	r2, r3
 8005262:	d102      	bne.n	800526a <charger_over_current_fault+0x1a>
		if((state == Charging) && (charger_is_load_detect_evse() == _TRUE))
 8005264:	2e06      	cmp	r6, #6
 8005266:	d005      	beq.n	8005274 <charger_over_current_fault+0x24>
}
 8005268:	bd70      	pop	{r4, r5, r6, pc}
		if(cp_state == DC_12V)
 800526a:	2801      	cmp	r0, #1
 800526c:	d1fc      	bne.n	8005268 <charger_over_current_fault+0x18>
			charger_fault_status.AC_OC_ERR = _OFF;
 800526e:	4393      	bics	r3, r2
 8005270:	702b      	strb	r3, [r5, #0]
}
 8005272:	e7f9      	b.n	8005268 <charger_over_current_fault+0x18>
	if(Charger.current_I_rms >= CHARGSERV_EVSE_LOAD_DETECT_VALUE)
 8005274:	23fa      	movs	r3, #250	; 0xfa
 8005276:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	429a      	cmp	r2, r3
 800527c:	d3f4      	bcc.n	8005268 <charger_over_current_fault+0x18>
	unsigned int waring_over_current = Charger.active_Ampe * 1200;
 800527e:	3b91      	subs	r3, #145	; 0x91
 8005280:	3bff      	subs	r3, #255	; 0xff
 8005282:	5ce1      	ldrb	r1, [r4, r3]
	unsigned int fault_over_current = Charger.active_Ampe * 1250;//CHARGSERV_MAXIMUM_AMPE * 1140;
 8005284:	4820      	ldr	r0, [pc, #128]	; (8005308 <charger_over_current_fault+0xb8>)
	unsigned int waring_over_current = Charger.active_Ampe * 1200;
 8005286:	008b      	lsls	r3, r1, #2
	unsigned int fault_over_current = Charger.active_Ampe * 1250;//CHARGSERV_MAXIMUM_AMPE * 1140;
 8005288:	4348      	muls	r0, r1
	unsigned int waring_over_current = Charger.active_Ampe * 1200;
 800528a:	1859      	adds	r1, r3, r1
 800528c:	010b      	lsls	r3, r1, #4
 800528e:	1a5b      	subs	r3, r3, r1
 8005290:	011b      	lsls	r3, r3, #4
			if((Charger.current_I_rms >= waring_over_current) &&
 8005292:	429a      	cmp	r2, r3
 8005294:	d316      	bcc.n	80052c4 <charger_over_current_fault+0x74>
 8005296:	4282      	cmp	r2, r0
 8005298:	d31d      	bcc.n	80052d6 <charger_over_current_fault+0x86>
				if(_TRUE == _LIB_USERDELAY_start(&gTimeout_ac_oc_fast_fault, DELAY_RENEW_OFF))
 800529a:	4c1c      	ldr	r4, [pc, #112]	; (800530c <charger_over_current_fault+0xbc>)
 800529c:	2100      	movs	r1, #0
 800529e:	0020      	movs	r0, r4
 80052a0:	f001 fec8 	bl	8007034 <_LIB_USERDELAY_start>
				if(_TRUE == _LIB_USERDELAY_isfired(&gTimeout_ac_oc_fast_fault))
 80052a4:	0020      	movs	r0, r4
 80052a6:	f001 fed9 	bl	800705c <_LIB_USERDELAY_isfired>
 80052aa:	2801      	cmp	r0, #1
 80052ac:	d1dc      	bne.n	8005268 <charger_over_current_fault+0x18>
					_LIB_USERDELAY_stop(&gTimeout_ac_oc_fast_fault);
 80052ae:	0020      	movs	r0, r4
 80052b0:	f001 fed0 	bl	8007054 <_LIB_USERDELAY_stop>
					charger_fault_status.AC_OC_ERR = _ON;
 80052b4:	2208      	movs	r2, #8
 80052b6:	782b      	ldrb	r3, [r5, #0]
				_LIB_LOGGING_printf("#### CHARGSERV_FAULT_SET : OVERFLOW CURRENT #### \r\n");
 80052b8:	4815      	ldr	r0, [pc, #84]	; (8005310 <charger_over_current_fault+0xc0>)
					charger_fault_status.AC_OC_ERR = _ON;
 80052ba:	4313      	orrs	r3, r2
 80052bc:	702b      	strb	r3, [r5, #0]
				_LIB_LOGGING_printf("#### CHARGSERV_FAULT_SET : OVERFLOW CURRENT #### \r\n");
 80052be:	f005 fdb7 	bl	800ae30 <puts>
 80052c2:	e7d1      	b.n	8005268 <charger_over_current_fault+0x18>
			else if(Charger.current_I_rms >= fault_over_current)
 80052c4:	4282      	cmp	r2, r0
 80052c6:	d2e8      	bcs.n	800529a <charger_over_current_fault+0x4a>
				_LIB_USERDELAY_stop(&gTimeout_ac_oc_fault);
 80052c8:	4812      	ldr	r0, [pc, #72]	; (8005314 <charger_over_current_fault+0xc4>)
 80052ca:	f001 fec3 	bl	8007054 <_LIB_USERDELAY_stop>
				_LIB_USERDELAY_stop(&gTimeout_ac_oc_fast_fault);
 80052ce:	480f      	ldr	r0, [pc, #60]	; (800530c <charger_over_current_fault+0xbc>)
 80052d0:	f001 fec0 	bl	8007054 <_LIB_USERDELAY_stop>
 80052d4:	e7c8      	b.n	8005268 <charger_over_current_fault+0x18>
				if(_TRUE == _LIB_USERDELAY_start(&gTimeout_ac_oc_fault, DELAY_RENEW_OFF))
 80052d6:	4c0f      	ldr	r4, [pc, #60]	; (8005314 <charger_over_current_fault+0xc4>)
 80052d8:	2100      	movs	r1, #0
 80052da:	0020      	movs	r0, r4
 80052dc:	f001 feaa 	bl	8007034 <_LIB_USERDELAY_start>
				if(_TRUE == _LIB_USERDELAY_isfired(&gTimeout_ac_oc_fault))
 80052e0:	0020      	movs	r0, r4
 80052e2:	f001 febb 	bl	800705c <_LIB_USERDELAY_isfired>
 80052e6:	2801      	cmp	r0, #1
 80052e8:	d1be      	bne.n	8005268 <charger_over_current_fault+0x18>
					_LIB_USERDELAY_stop(&gTimeout_ac_oc_fault);
 80052ea:	0020      	movs	r0, r4
 80052ec:	f001 feb2 	bl	8007054 <_LIB_USERDELAY_stop>
					charger_fault_status.AC_OC_ERR = _ON;
 80052f0:	2208      	movs	r2, #8
 80052f2:	782b      	ldrb	r3, [r5, #0]
				_LIB_LOGGING_printf("#### CHARGSERV_FAULT_SET : WARING OVER CURRENT #### \r\n");
 80052f4:	4808      	ldr	r0, [pc, #32]	; (8005318 <charger_over_current_fault+0xc8>)
					charger_fault_status.AC_OC_ERR = _ON;
 80052f6:	4313      	orrs	r3, r2
 80052f8:	702b      	strb	r3, [r5, #0]
				_LIB_LOGGING_printf("#### CHARGSERV_FAULT_SET : WARING OVER CURRENT #### \r\n");
 80052fa:	f005 fd99 	bl	800ae30 <puts>
 80052fe:	e7b3      	b.n	8005268 <charger_over_current_fault+0x18>
 8005300:	20000100 	.word	0x20000100
 8005304:	2000018c 	.word	0x2000018c
 8005308:	000004e2 	.word	0x000004e2
 800530c:	2000021c 	.word	0x2000021c
 8005310:	0800d1b8 	.word	0x0800d1b8
 8005314:	20000228 	.word	0x20000228
 8005318:	0800d180 	.word	0x0800d180

0800531c <charger_over_temperature_under_voltage_fault>:
	return charger_fault_status.OTEMP_ERR;
 800531c:	4b44      	ldr	r3, [pc, #272]	; (8005430 <charger_over_temperature_under_voltage_fault+0x114>)
{
 800531e:	b570      	push	{r4, r5, r6, lr}
	return charger_fault_status.OTEMP_ERR;
 8005320:	781b      	ldrb	r3, [r3, #0]
	return Charger.state;
 8005322:	4e44      	ldr	r6, [pc, #272]	; (8005434 <charger_over_temperature_under_voltage_fault+0x118>)
	if(_ON == _APP_CHARGSERV_is_over_temperature_fault_set())
 8005324:	09db      	lsrs	r3, r3, #7
	return Charger.state;
 8005326:	7835      	ldrb	r5, [r6, #0]
	if(_ON == _APP_CHARGSERV_is_over_temperature_fault_set())
 8005328:	2b01      	cmp	r3, #1
 800532a:	d04f      	beq.n	80053cc <charger_over_temperature_under_voltage_fault+0xb0>
		_LIB_USERDELAY_stop(&gTimeout_over_temp_set_fault);
 800532c:	4842      	ldr	r0, [pc, #264]	; (8005438 <charger_over_temperature_under_voltage_fault+0x11c>)
 800532e:	f001 fe91 	bl	8007054 <_LIB_USERDELAY_stop>
		if(over_temp_step != 0)
 8005332:	4c42      	ldr	r4, [pc, #264]	; (800543c <charger_over_temperature_under_voltage_fault+0x120>)
 8005334:	7823      	ldrb	r3, [r4, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d124      	bne.n	8005384 <charger_over_temperature_under_voltage_fault+0x68>
	if(Charging == state)
 800533a:	2d06      	cmp	r5, #6
 800533c:	d029      	beq.n	8005392 <charger_over_temperature_under_voltage_fault+0x76>
	else if((Ready == state) && (under_voltage_step > 0))
 800533e:	2d02      	cmp	r5, #2
 8005340:	d00c      	beq.n	800535c <charger_over_temperature_under_voltage_fault+0x40>
 8005342:	4b3f      	ldr	r3, [pc, #252]	; (8005440 <charger_over_temperature_under_voltage_fault+0x124>)
 8005344:	7819      	ldrb	r1, [r3, #0]
	total_step = over_temp_step + under_voltage_step;
 8005346:	7823      	ldrb	r3, [r4, #0]
 8005348:	18c9      	adds	r1, r1, r3
 800534a:	b2c9      	uxtb	r1, r1
	_APP_CHARGSERV_set_active_Ampe(total_step);
 800534c:	1c08      	adds	r0, r1, #0
 800534e:	2902      	cmp	r1, #2
 8005350:	d900      	bls.n	8005354 <charger_over_temperature_under_voltage_fault+0x38>
 8005352:	2002      	movs	r0, #2
 8005354:	b2c0      	uxtb	r0, r0
 8005356:	f7ff fe1b 	bl	8004f90 <_APP_CHARGSERV_set_active_Ampe>
}
 800535a:	bd70      	pop	{r4, r5, r6, pc}
	else if((Ready == state) && (under_voltage_step > 0))
 800535c:	4d38      	ldr	r5, [pc, #224]	; (8005440 <charger_over_temperature_under_voltage_fault+0x124>)
 800535e:	7829      	ldrb	r1, [r5, #0]
 8005360:	2900      	cmp	r1, #0
 8005362:	d0f0      	beq.n	8005346 <charger_over_temperature_under_voltage_fault+0x2a>
		if(Charger.current_V_rms >= fault_under_voltage)
 8005364:	4b37      	ldr	r3, [pc, #220]	; (8005444 <charger_over_temperature_under_voltage_fault+0x128>)
 8005366:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8005368:	429a      	cmp	r2, r3
 800536a:	d94d      	bls.n	8005408 <charger_over_temperature_under_voltage_fault+0xec>
			_LIB_USERDELAY_start(&gTimeout_ac_uv_clr_fault, DELAY_RENEW_OFF);
 800536c:	4e36      	ldr	r6, [pc, #216]	; (8005448 <charger_over_temperature_under_voltage_fault+0x12c>)
 800536e:	2100      	movs	r1, #0
 8005370:	0030      	movs	r0, r6
 8005372:	f001 fe5f 	bl	8007034 <_LIB_USERDELAY_start>
			if(_TRUE == _LIB_USERDELAY_isfired(&gTimeout_ac_uv_clr_fault))
 8005376:	0030      	movs	r0, r6
 8005378:	f001 fe70 	bl	800705c <_LIB_USERDELAY_isfired>
 800537c:	2801      	cmp	r0, #1
 800537e:	d048      	beq.n	8005412 <charger_over_temperature_under_voltage_fault+0xf6>
 8005380:	7829      	ldrb	r1, [r5, #0]
 8005382:	e7e0      	b.n	8005346 <charger_over_temperature_under_voltage_fault+0x2a>
			over_temp_step = 0;
 8005384:	2300      	movs	r3, #0
			_LIB_LOGGING_printf("^^^^ over_temperature_step_clear \r\n");
 8005386:	4831      	ldr	r0, [pc, #196]	; (800544c <charger_over_temperature_under_voltage_fault+0x130>)
			over_temp_step = 0;
 8005388:	7023      	strb	r3, [r4, #0]
			_LIB_LOGGING_printf("^^^^ over_temperature_step_clear \r\n");
 800538a:	f005 fd51 	bl	800ae30 <puts>
	if(Charging == state)
 800538e:	2d06      	cmp	r5, #6
 8005390:	d1d5      	bne.n	800533e <charger_over_temperature_under_voltage_fault+0x22>
		if(Charger.current_V_rms < fault_under_voltage)
 8005392:	4b2c      	ldr	r3, [pc, #176]	; (8005444 <charger_over_temperature_under_voltage_fault+0x128>)
 8005394:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8005396:	429a      	cmp	r2, r3
 8005398:	d824      	bhi.n	80053e4 <charger_over_temperature_under_voltage_fault+0xc8>
			_LIB_USERDELAY_start(&gTimeout_ac_uv_set_fault, DELAY_RENEW_OFF);
 800539a:	4d2d      	ldr	r5, [pc, #180]	; (8005450 <charger_over_temperature_under_voltage_fault+0x134>)
 800539c:	2100      	movs	r1, #0
 800539e:	0028      	movs	r0, r5
 80053a0:	f001 fe48 	bl	8007034 <_LIB_USERDELAY_start>
			if(_TRUE == _LIB_USERDELAY_isfired(&gTimeout_ac_uv_set_fault))
 80053a4:	0028      	movs	r0, r5
 80053a6:	f001 fe59 	bl	800705c <_LIB_USERDELAY_isfired>
 80053aa:	2801      	cmp	r0, #1
 80053ac:	d1c9      	bne.n	8005342 <charger_over_temperature_under_voltage_fault+0x26>
				_LIB_USERDELAY_stop(&gTimeout_ac_uv_set_fault);
 80053ae:	0028      	movs	r0, r5
 80053b0:	f001 fe50 	bl	8007054 <_LIB_USERDELAY_stop>
				if(under_voltage_step < CHARGSERV_AMPE_CONVERSION_STEP)
 80053b4:	4d22      	ldr	r5, [pc, #136]	; (8005440 <charger_over_temperature_under_voltage_fault+0x124>)
 80053b6:	7829      	ldrb	r1, [r5, #0]
 80053b8:	2901      	cmp	r1, #1
 80053ba:	d8c4      	bhi.n	8005346 <charger_over_temperature_under_voltage_fault+0x2a>
					under_voltage_step++;
 80053bc:	3101      	adds	r1, #1
 80053be:	b2c9      	uxtb	r1, r1
					_LIB_LOGGING_printf("^^^^ under_voltage_step++ : %d \r\n",under_voltage_step);
 80053c0:	4824      	ldr	r0, [pc, #144]	; (8005454 <charger_over_temperature_under_voltage_fault+0x138>)
					under_voltage_step++;
 80053c2:	7029      	strb	r1, [r5, #0]
					_LIB_LOGGING_printf("^^^^ under_voltage_step++ : %d \r\n",under_voltage_step);
 80053c4:	f005 fca8 	bl	800ad18 <iprintf>
 80053c8:	7829      	ldrb	r1, [r5, #0]
 80053ca:	e7bc      	b.n	8005346 <charger_over_temperature_under_voltage_fault+0x2a>
		_LIB_USERDELAY_start(&gTimeout_over_temp_set_fault, DELAY_RENEW_OFF);
 80053cc:	4c1a      	ldr	r4, [pc, #104]	; (8005438 <charger_over_temperature_under_voltage_fault+0x11c>)
 80053ce:	2100      	movs	r1, #0
 80053d0:	0020      	movs	r0, r4
 80053d2:	f001 fe2f 	bl	8007034 <_LIB_USERDELAY_start>
		if(_TRUE == _LIB_USERDELAY_isfired(&gTimeout_over_temp_set_fault))
 80053d6:	0020      	movs	r0, r4
 80053d8:	f001 fe40 	bl	800705c <_LIB_USERDELAY_isfired>
 80053dc:	2801      	cmp	r0, #1
 80053de:	d005      	beq.n	80053ec <charger_over_temperature_under_voltage_fault+0xd0>
 80053e0:	4c16      	ldr	r4, [pc, #88]	; (800543c <charger_over_temperature_under_voltage_fault+0x120>)
 80053e2:	e7aa      	b.n	800533a <charger_over_temperature_under_voltage_fault+0x1e>
			_LIB_USERDELAY_stop(&gTimeout_ac_uv_set_fault);
 80053e4:	481a      	ldr	r0, [pc, #104]	; (8005450 <charger_over_temperature_under_voltage_fault+0x134>)
 80053e6:	f001 fe35 	bl	8007054 <_LIB_USERDELAY_stop>
 80053ea:	e7aa      	b.n	8005342 <charger_over_temperature_under_voltage_fault+0x26>
			_LIB_USERDELAY_stop(&gTimeout_over_temp_set_fault);
 80053ec:	0020      	movs	r0, r4
 80053ee:	f001 fe31 	bl	8007054 <_LIB_USERDELAY_stop>
			if(over_temp_step < CHARGSERV_AMPE_CONVERSION_STEP)
 80053f2:	4c12      	ldr	r4, [pc, #72]	; (800543c <charger_over_temperature_under_voltage_fault+0x120>)
 80053f4:	7821      	ldrb	r1, [r4, #0]
 80053f6:	2901      	cmp	r1, #1
 80053f8:	d89f      	bhi.n	800533a <charger_over_temperature_under_voltage_fault+0x1e>
				over_temp_step++;
 80053fa:	3101      	adds	r1, #1
 80053fc:	b2c9      	uxtb	r1, r1
				_LIB_LOGGING_printf("^^^^ over_temperature_step++ : %d \r\n",over_temp_step);
 80053fe:	4816      	ldr	r0, [pc, #88]	; (8005458 <charger_over_temperature_under_voltage_fault+0x13c>)
				over_temp_step++;
 8005400:	7021      	strb	r1, [r4, #0]
				_LIB_LOGGING_printf("^^^^ over_temperature_step++ : %d \r\n",over_temp_step);
 8005402:	f005 fc89 	bl	800ad18 <iprintf>
 8005406:	e798      	b.n	800533a <charger_over_temperature_under_voltage_fault+0x1e>
			_LIB_USERDELAY_stop(&gTimeout_ac_uv_clr_fault);
 8005408:	480f      	ldr	r0, [pc, #60]	; (8005448 <charger_over_temperature_under_voltage_fault+0x12c>)
 800540a:	f001 fe23 	bl	8007054 <_LIB_USERDELAY_stop>
 800540e:	7829      	ldrb	r1, [r5, #0]
 8005410:	e799      	b.n	8005346 <charger_over_temperature_under_voltage_fault+0x2a>
				_LIB_USERDELAY_stop(&gTimeout_ac_uv_clr_fault);
 8005412:	0030      	movs	r0, r6
 8005414:	f001 fe1e 	bl	8007054 <_LIB_USERDELAY_stop>
				if(under_voltage_step != 0)
 8005418:	7829      	ldrb	r1, [r5, #0]
 800541a:	2900      	cmp	r1, #0
 800541c:	d100      	bne.n	8005420 <charger_over_temperature_under_voltage_fault+0x104>
 800541e:	e792      	b.n	8005346 <charger_over_temperature_under_voltage_fault+0x2a>
					under_voltage_step = 0;
 8005420:	2300      	movs	r3, #0
					_LIB_LOGGING_printf("^^^^ under_voltage_step_clear \r\n");
 8005422:	480e      	ldr	r0, [pc, #56]	; (800545c <charger_over_temperature_under_voltage_fault+0x140>)
					under_voltage_step = 0;
 8005424:	702b      	strb	r3, [r5, #0]
					_LIB_LOGGING_printf("^^^^ under_voltage_step_clear \r\n");
 8005426:	f005 fd03 	bl	800ae30 <puts>
 800542a:	7829      	ldrb	r1, [r5, #0]
 800542c:	e78b      	b.n	8005346 <charger_over_temperature_under_voltage_fault+0x2a>
 800542e:	46c0      	nop			; (mov r8, r8)
 8005430:	2000018c 	.word	0x2000018c
 8005434:	20000100 	.word	0x20000100
 8005438:	200002c4 	.word	0x200002c4
 800543c:	2000031a 	.word	0x2000031a
 8005440:	2000031d 	.word	0x2000031d
 8005444:	0000464f 	.word	0x0000464f
 8005448:	20000240 	.word	0x20000240
 800544c:	0800d214 	.word	0x0800d214
 8005450:	2000024c 	.word	0x2000024c
 8005454:	0800d238 	.word	0x0800d238
 8005458:	0800d1ec 	.word	0x0800d1ec
 800545c:	0800d25c 	.word	0x0800d25c

08005460 <_APP_CHARGSERV_over_temperature_fault_set>:
	charger_fault_status.OTEMP_ERR = _ON;
 8005460:	2380      	movs	r3, #128	; 0x80
 8005462:	4a03      	ldr	r2, [pc, #12]	; (8005470 <_APP_CHARGSERV_over_temperature_fault_set+0x10>)
 8005464:	425b      	negs	r3, r3
 8005466:	7811      	ldrb	r1, [r2, #0]
 8005468:	430b      	orrs	r3, r1
 800546a:	7013      	strb	r3, [r2, #0]
}
 800546c:	4770      	bx	lr
 800546e:	46c0      	nop			; (mov r8, r8)
 8005470:	2000018c 	.word	0x2000018c

08005474 <charger_cp_fault>:
{
 8005474:	b510      	push	{r4, lr}
	CP_StateDef	cp_state = _MW_CP_get_cp_state();
 8005476:	f001 ff4b 	bl	8007310 <_MW_CP_get_cp_state>
	if(_ON == charger_fault_status.CP_ERR)
 800547a:	2140      	movs	r1, #64	; 0x40
 800547c:	4a04      	ldr	r2, [pc, #16]	; (8005490 <charger_cp_fault+0x1c>)
 800547e:	7813      	ldrb	r3, [r2, #0]
 8005480:	4219      	tst	r1, r3
 8005482:	d001      	beq.n	8005488 <charger_cp_fault+0x14>
		if(cp_state == DC_12V)
 8005484:	2801      	cmp	r0, #1
 8005486:	d000      	beq.n	800548a <charger_cp_fault+0x16>
}
 8005488:	bd10      	pop	{r4, pc}
			charger_fault_status.CP_ERR = _OFF;
 800548a:	438b      	bics	r3, r1
 800548c:	7013      	strb	r3, [r2, #0]
}
 800548e:	e7fb      	b.n	8005488 <charger_cp_fault+0x14>
 8005490:	2000018c 	.word	0x2000018c

08005494 <_APP_CHARGSERV_is_leakage_fault_set>:
	return charger_fault_status.LEAKAGE_ERR;
 8005494:	4b02      	ldr	r3, [pc, #8]	; (80054a0 <_APP_CHARGSERV_is_leakage_fault_set+0xc>)
 8005496:	7818      	ldrb	r0, [r3, #0]
 8005498:	07c0      	lsls	r0, r0, #31
 800549a:	0fc0      	lsrs	r0, r0, #31
}
 800549c:	4770      	bx	lr
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	2000018c 	.word	0x2000018c

080054a4 <_APP_CHARGSERV_leakage_fault_set>:
{
 80054a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(_OFF == Charger.reg.dev_flag)
 80054a6:	2501      	movs	r5, #1
{
 80054a8:	46c6      	mov	lr, r8
	if(_OFF == Charger.reg.dev_flag)
 80054aa:	002f      	movs	r7, r5
 80054ac:	4e14      	ldr	r6, [pc, #80]	; (8005500 <_APP_CHARGSERV_leakage_fault_set+0x5c>)
{
 80054ae:	0004      	movs	r4, r0
	if(_OFF == Charger.reg.dev_flag)
 80054b0:	78f3      	ldrb	r3, [r6, #3]
{
 80054b2:	b500      	push	{lr}
	if(_OFF == Charger.reg.dev_flag)
 80054b4:	401f      	ands	r7, r3
 80054b6:	421d      	tst	r5, r3
 80054b8:	d002      	beq.n	80054c0 <_APP_CHARGSERV_leakage_fault_set+0x1c>
}
 80054ba:	bc80      	pop	{r7}
 80054bc:	46b8      	mov	r8, r7
 80054be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == 1)
 80054c0:	f7fe fa72 	bl	80039a8 <_APP_CHARGSERV_device_stop.part.0>
		if(3 == Charger.leakage_instop_step)
 80054c4:	237d      	movs	r3, #125	; 0x7d
 80054c6:	4698      	mov	r8, r3
 80054c8:	5cf3      	ldrb	r3, [r6, r3]
 80054ca:	2b03      	cmp	r3, #3
 80054cc:	d006      	beq.n	80054dc <_APP_CHARGSERV_leakage_fault_set+0x38>
			Charger.leakage_instop_flag = 1;
 80054ce:	237c      	movs	r3, #124	; 0x7c
			_LIB_LOGGING_printf("#### CHARGSERV : leakage_instop  : %d #### \r\n",value);
 80054d0:	0021      	movs	r1, r4
			Charger.leakage_instop_flag = 1;
 80054d2:	52f5      	strh	r5, [r6, r3]
			_LIB_LOGGING_printf("#### CHARGSERV : leakage_instop  : %d #### \r\n",value);
 80054d4:	480b      	ldr	r0, [pc, #44]	; (8005504 <_APP_CHARGSERV_leakage_fault_set+0x60>)
 80054d6:	f005 fc1f 	bl	800ad18 <iprintf>
}
 80054da:	e7ee      	b.n	80054ba <_APP_CHARGSERV_leakage_fault_set+0x16>
			_LIB_LOGGING_printf("#### CHARGSERV : leakage_Relapse....Fault detected  : %d #### \r\n",value);
 80054dc:	0021      	movs	r1, r4
 80054de:	480a      	ldr	r0, [pc, #40]	; (8005508 <_APP_CHARGSERV_leakage_fault_set+0x64>)
 80054e0:	f005 fc1a 	bl	800ad18 <iprintf>
			_LIB_USERDELAY_stop(&gTimout_Leakage_Relapse);
 80054e4:	4809      	ldr	r0, [pc, #36]	; (800550c <_APP_CHARGSERV_leakage_fault_set+0x68>)
 80054e6:	f001 fdb5 	bl	8007054 <_LIB_USERDELAY_stop>
			Charger.leakage_instop_step = 0;
 80054ea:	4643      	mov	r3, r8
 80054ec:	54f7      	strb	r7, [r6, r3]
			_APP_CHARGSERV_fault_set();
 80054ee:	f7fe fb85 	bl	8003bfc <_APP_CHARGSERV_fault_set>
			charger_fault_status.LEAKAGE_ERR = _ON;
 80054f2:	2101      	movs	r1, #1
 80054f4:	4a06      	ldr	r2, [pc, #24]	; (8005510 <_APP_CHARGSERV_leakage_fault_set+0x6c>)
 80054f6:	7813      	ldrb	r3, [r2, #0]
 80054f8:	430b      	orrs	r3, r1
 80054fa:	7013      	strb	r3, [r2, #0]
 80054fc:	e7dd      	b.n	80054ba <_APP_CHARGSERV_leakage_fault_set+0x16>
 80054fe:	46c0      	nop			; (mov r8, r8)
 8005500:	20000100 	.word	0x20000100
 8005504:	0800d2c0 	.word	0x0800d2c0
 8005508:	0800d27c 	.word	0x0800d27c
 800550c:	200002f4 	.word	0x200002f4
 8005510:	2000018c 	.word	0x2000018c

08005514 <_APP_CHARGSERV_fault_loop>:
{
	*value = charger_fault_status;
}

void _APP_CHARGSERV_fault_loop()
{
 8005514:	b570      	push	{r4, r5, r6, lr}
#if ((_CERTIFICATION_MODE_)==_CERTIFICATION_NON_)
	if(0 == Charger.reg.dev_flag)
 8005516:	4d25      	ldr	r5, [pc, #148]	; (80055ac <_APP_CHARGSERV_fault_loop+0x98>)
 8005518:	78eb      	ldrb	r3, [r5, #3]
 800551a:	07db      	lsls	r3, r3, #31
 800551c:	d415      	bmi.n	800554a <_APP_CHARGSERV_fault_loop+0x36>
	{
		charger_emg_fault();
 800551e:	f7ff fd7b 	bl	8005018 <charger_emg_fault>
		charger_wd_fault();
 8005522:	f7ff fdb7 	bl	8005094 <charger_wd_fault>
		charger_over_voltage_fault();
 8005526:	f7ff fe4b 	bl	80051c0 <charger_over_voltage_fault>
		charger_over_current_fault();
 800552a:	f7ff fe91 	bl	8005250 <charger_over_current_fault>
		//charger_over_temperature_under_voltage_fault();
		charger_cp_fault();
 800552e:	f7ff ffa1 	bl	8005474 <charger_cp_fault>
	CP_StateDef	cp_state = _MW_CP_get_cp_state();
 8005532:	f001 feed 	bl	8007310 <_MW_CP_get_cp_state>
	charger_fault_status.LEAKAGE_ERR = _OFF;
 8005536:	4c1e      	ldr	r4, [pc, #120]	; (80055b0 <_APP_CHARGSERV_fault_loop+0x9c>)
	if(cp_state == DC_12V)
 8005538:	2801      	cmp	r0, #1
 800553a:	d02f      	beq.n	800559c <_APP_CHARGSERV_fault_loop+0x88>
		charger_leakage_fault();
		charger_over_current_fault();
#endif


	if(charger_fault_status.Raw != 0)
 800553c:	6823      	ldr	r3, [r4, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10d      	bne.n	800555e <_APP_CHARGSERV_fault_loop+0x4a>
	if((stemp == Fault) && (1 == Charger.reg.fault_set))
 8005542:	782b      	ldrb	r3, [r5, #0]
 8005544:	2b09      	cmp	r3, #9
 8005546:	d01b      	beq.n	8005580 <_APP_CHARGSERV_fault_loop+0x6c>

	if(charger_fault_status.Raw == 0/*fault status bits is reset*/)
	{
		_APP_CHARGSERV_fault_reset();
	}
}
 8005548:	bd70      	pop	{r4, r5, r6, pc}
		charger_over_voltage_fault();
 800554a:	f7ff fe39 	bl	80051c0 <charger_over_voltage_fault>
		charger_over_current_fault();
 800554e:	f7ff fe7f 	bl	8005250 <charger_over_current_fault>
		charger_over_temperature_under_voltage_fault();
 8005552:	f7ff fee3 	bl	800531c <charger_over_temperature_under_voltage_fault>
 8005556:	4c16      	ldr	r4, [pc, #88]	; (80055b0 <_APP_CHARGSERV_fault_loop+0x9c>)
	if(charger_fault_status.Raw != 0)
 8005558:	6823      	ldr	r3, [r4, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0f1      	beq.n	8005542 <_APP_CHARGSERV_fault_loop+0x2e>
		_APP_CHARGSERV_fault_set();
 800555e:	f7fe fb4d 	bl	8003bfc <_APP_CHARGSERV_fault_set>
				&& (charger_fault_status.MC_START_ERR == _OFF))
 8005562:	2302      	movs	r3, #2
				&& (charger_fault_status.CP_ERR == _OFF)
 8005564:	2249      	movs	r2, #73	; 0x49
 8005566:	7820      	ldrb	r0, [r4, #0]
				&& (charger_fault_status.MC_START_ERR == _OFF))
 8005568:	7861      	ldrb	r1, [r4, #1]
				&& (charger_fault_status.CP_ERR == _OFF)
 800556a:	4002      	ands	r2, r0
				&& (charger_fault_status.MC_START_ERR == _OFF))
 800556c:	4301      	orrs	r1, r0
 800556e:	400b      	ands	r3, r1
 8005570:	4313      	orrs	r3, r2
 8005572:	d017      	beq.n	80055a4 <_APP_CHARGSERV_fault_loop+0x90>
	if(mode == 1)
 8005574:	f7fe fa18 	bl	80039a8 <_APP_CHARGSERV_device_stop.part.0>
	if(charger_fault_status.Raw == 0/*fault status bits is reset*/)
 8005578:	6823      	ldr	r3, [r4, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1e4      	bne.n	8005548 <_APP_CHARGSERV_fault_loop+0x34>
 800557e:	e7e0      	b.n	8005542 <_APP_CHARGSERV_fault_loop+0x2e>
	if((stemp == Fault) && (1 == Charger.reg.fault_set))
 8005580:	79ab      	ldrb	r3, [r5, #6]
 8005582:	2b7f      	cmp	r3, #127	; 0x7f
 8005584:	d9e0      	bls.n	8005548 <_APP_CHARGSERV_fault_loop+0x34>
		Charger.reg.fault_set = 0;
 8005586:	88eb      	ldrh	r3, [r5, #6]
 8005588:	4a0a      	ldr	r2, [pc, #40]	; (80055b4 <_APP_CHARGSERV_fault_loop+0xa0>)
		_LIB_LOGGING_printf("#### CHARGSERV : Fault Reset #### \r\n");
 800558a:	480b      	ldr	r0, [pc, #44]	; (80055b8 <_APP_CHARGSERV_fault_loop+0xa4>)
		Charger.reg.fault_set = 0;
 800558c:	401a      	ands	r2, r3
 800558e:	2380      	movs	r3, #128	; 0x80
 8005590:	005b      	lsls	r3, r3, #1
 8005592:	4313      	orrs	r3, r2
 8005594:	80eb      	strh	r3, [r5, #6]
		_LIB_LOGGING_printf("#### CHARGSERV : Fault Reset #### \r\n");
 8005596:	f005 fc4b 	bl	800ae30 <puts>
}
 800559a:	e7d5      	b.n	8005548 <_APP_CHARGSERV_fault_loop+0x34>
	charger_fault_status.LEAKAGE_ERR = _OFF;
 800559c:	7823      	ldrb	r3, [r4, #0]
 800559e:	4383      	bics	r3, r0
 80055a0:	7023      	strb	r3, [r4, #0]
}
 80055a2:	e7cb      	b.n	800553c <_APP_CHARGSERV_fault_loop+0x28>
			_APP_CHARGSERV_device_stop(0);
 80055a4:	2000      	movs	r0, #0
 80055a6:	f7ff fcdf 	bl	8004f68 <_APP_CHARGSERV_device_stop>
 80055aa:	e7e5      	b.n	8005578 <_APP_CHARGSERV_fault_loop+0x64>
 80055ac:	20000100 	.word	0x20000100
 80055b0:	2000018c 	.word	0x2000018c
 80055b4:	fffffe7f 	.word	0xfffffe7f
 80055b8:	0800c37c 	.word	0x0800c37c

080055bc <_APP_CHARGSERV_startup>:

#endif
}

void _APP_CHARGSERV_startup()
{
 80055bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Charger.state = cstate;
 80055be:	2201      	movs	r2, #1
{
 80055c0:	46ce      	mov	lr, r9
 80055c2:	4647      	mov	r7, r8

	//charger_reset_connect_wait_count();
	charger_reset_powercut_pass_count();

	//Charger.state_changed = _OFF;
	Charger.state_bk = Chargerstateend;
 80055c4:	210b      	movs	r1, #11
	Charger.reg.Raw = 0;
 80055c6:	4c58      	ldr	r4, [pc, #352]	; (8005728 <_APP_CHARGSERV_startup+0x16c>)
{
 80055c8:	b580      	push	{r7, lr}
	Charger.state = cstate;
 80055ca:	7022      	strb	r2, [r4, #0]
	Charger.reg.init_proceeding = 1;
 80055cc:	3201      	adds	r2, #1
	Charger.reg.Raw = 0;
 80055ce:	2300      	movs	r3, #0
	Charger.reg.init_proceeding = 1;
 80055d0:	70e2      	strb	r2, [r4, #3]
	Charger.charger_powercut_timepass_count = 10;
 80055d2:	3208      	adds	r2, #8
 80055d4:	8222      	strh	r2, [r4, #16]
	Charger.state_bk = Chargerstateend;
 80055d6:	3268      	adds	r2, #104	; 0x68
 80055d8:	54a1      	strb	r1, [r4, r2]

	Charger.full_wake_up_seq_step = 0;

	//Charger.fullcharge_finish_flag = 0;
	Charger.stable_changed_flag = 0;
	Charger.stable_full_detect = 0;
 80055da:	2100      	movs	r1, #0
	Charger.default_start_mode = 0;
	Charger.restart_fulldetect_act = 0;

	Charger_reset_use_energy();

	memset(Charger.current_card_num,0xFF,30);
 80055dc:	0020      	movs	r0, r4
	Charger.full_wake_up_seq_step = 0;
 80055de:	3203      	adds	r2, #3
 80055e0:	54a3      	strb	r3, [r4, r2]
	Charger.forcestop_wake_up_seq_count = 0;
 80055e2:	3201      	adds	r2, #1
 80055e4:	52a3      	strh	r3, [r4, r2]
	Charger.stable_full_detect = 0;
 80055e6:	320b      	adds	r2, #11
 80055e8:	54a1      	strb	r1, [r4, r2]
	Charger.stable_changed_flag = 0;
 80055ea:	3201      	adds	r2, #1
 80055ec:	52a3      	strh	r3, [r4, r2]
	Charger.default_start_mode = 0;
 80055ee:	3202      	adds	r2, #2
 80055f0:	52a3      	strh	r3, [r4, r2]
	Charger.forcestop_wake_up_seq_flag = 0;
 80055f2:	67a3      	str	r3, [r4, #120]	; 0x78
	memset(Charger.current_card_num,0xFF,30);
 80055f4:	21ff      	movs	r1, #255	; 0xff
 80055f6:	3a66      	subs	r2, #102	; 0x66
 80055f8:	3012      	adds	r0, #18
	Charger.reg.Raw = 0;
 80055fa:	7123      	strb	r3, [r4, #4]
 80055fc:	7163      	strb	r3, [r4, #5]
 80055fe:	71a3      	strb	r3, [r4, #6]
 8005600:	71e3      	strb	r3, [r4, #7]
 8005602:	7223      	strb	r3, [r4, #8]
 8005604:	7263      	strb	r3, [r4, #9]
 8005606:	72a3      	strb	r3, [r4, #10]
	Charger.init_flag.Raw = 0x00;
 8005608:	72e3      	strb	r3, [r4, #11]
	Charger.use_energy = 0;
 800560a:	66a3      	str	r3, [r4, #104]	; 0x68
	memset(Charger.current_card_num,0xFF,30);
 800560c:	f005 fb7b 	bl	800ad06 <memset>
	memset(Charger.charging_card_num,0xFF,30);
 8005610:	0020      	movs	r0, r4
 8005612:	221e      	movs	r2, #30

	_LIB_USERDELAY_set(&gDelay_chargserv_periodic_loop_time,10);
	_LIB_USERDELAY_set(&gTimeout_wd_fault,5000);
 8005614:	4d45      	ldr	r5, [pc, #276]	; (800572c <_APP_CHARGSERV_startup+0x170>)
	memset(Charger.charging_card_num,0xFF,30);
 8005616:	21ff      	movs	r1, #255	; 0xff
 8005618:	3030      	adds	r0, #48	; 0x30
 800561a:	f005 fb74 	bl	800ad06 <memset>
	_LIB_USERDELAY_set(&gDelay_chargserv_periodic_loop_time,10);
 800561e:	210a      	movs	r1, #10
 8005620:	4843      	ldr	r0, [pc, #268]	; (8005730 <_APP_CHARGSERV_startup+0x174>)
 8005622:	f001 fcfd 	bl	8007020 <_LIB_USERDELAY_set>
	_LIB_USERDELAY_set(&gTimeout_ac_oc_fault,1000000);
	_LIB_USERDELAY_set(&gTimeout_ac_oc_fast_fault,10000);
 8005626:	4c43      	ldr	r4, [pc, #268]	; (8005734 <_APP_CHARGSERV_startup+0x178>)
	_LIB_USERDELAY_set(&gTimeout_wd_fault,5000);
 8005628:	0029      	movs	r1, r5
 800562a:	4843      	ldr	r0, [pc, #268]	; (8005738 <_APP_CHARGSERV_startup+0x17c>)
 800562c:	f001 fcf8 	bl	8007020 <_LIB_USERDELAY_set>
	_LIB_USERDELAY_set(&gTimeout_ac_oc_fault,1000000);
 8005630:	4942      	ldr	r1, [pc, #264]	; (800573c <_APP_CHARGSERV_startup+0x180>)
 8005632:	4843      	ldr	r0, [pc, #268]	; (8005740 <_APP_CHARGSERV_startup+0x184>)
 8005634:	f001 fcf4 	bl	8007020 <_LIB_USERDELAY_set>
	_LIB_USERDELAY_set(&gTimeout_ac_ov_fault,5000);
	_LIB_USERDELAY_set(&gTimeout_ac_uv_set_fault,30000);
 8005638:	4e42      	ldr	r6, [pc, #264]	; (8005744 <_APP_CHARGSERV_startup+0x188>)
	_LIB_USERDELAY_set(&gTimeout_ac_oc_fast_fault,10000);
 800563a:	0021      	movs	r1, r4
 800563c:	4842      	ldr	r0, [pc, #264]	; (8005748 <_APP_CHARGSERV_startup+0x18c>)
 800563e:	f001 fcef 	bl	8007020 <_LIB_USERDELAY_set>
	_LIB_USERDELAY_set(&gTimeout_ac_ov_fault,5000);
 8005642:	0029      	movs	r1, r5
 8005644:	4841      	ldr	r0, [pc, #260]	; (800574c <_APP_CHARGSERV_startup+0x190>)
 8005646:	f001 fceb 	bl	8007020 <_LIB_USERDELAY_set>
	_LIB_USERDELAY_set(&gTimeout_ac_uv_set_fault,30000);
 800564a:	0031      	movs	r1, r6
 800564c:	4840      	ldr	r0, [pc, #256]	; (8005750 <_APP_CHARGSERV_startup+0x194>)
 800564e:	f001 fce7 	bl	8007020 <_LIB_USERDELAY_set>
	_LIB_USERDELAY_set(&gTimeout_ac_uv_clr_fault,5000);
 8005652:	0029      	movs	r1, r5
 8005654:	483f      	ldr	r0, [pc, #252]	; (8005754 <_APP_CHARGSERV_startup+0x198>)
 8005656:	f001 fce3 	bl	8007020 <_LIB_USERDELAY_set>
	_LIB_USERDELAY_set(&gDelay_cp_fault,1000);
 800565a:	21fa      	movs	r1, #250	; 0xfa
 800565c:	483e      	ldr	r0, [pc, #248]	; (8005758 <_APP_CHARGSERV_startup+0x19c>)
 800565e:	0089      	lsls	r1, r1, #2
 8005660:	f001 fcde 	bl	8007020 <_LIB_USERDELAY_set>
	_LIB_USERDELAY_set(&gTimeout_over_temp_set_fault,600000);
 8005664:	493d      	ldr	r1, [pc, #244]	; (800575c <_APP_CHARGSERV_startup+0x1a0>)
 8005666:	483e      	ldr	r0, [pc, #248]	; (8005760 <_APP_CHARGSERV_startup+0x1a4>)
 8005668:	f001 fcda 	bl	8007020 <_LIB_USERDELAY_set>
	_LIB_USERDELAY_set(&gTimeout_over_temp_clr_fault,5000);
 800566c:	0029      	movs	r1, r5
 800566e:	483d      	ldr	r0, [pc, #244]	; (8005764 <_APP_CHARGSERV_startup+0x1a8>)
	_LIB_USERDELAY_set(&gTimeout_auto_finish,CHARGSERV_AUTOFINISH_TIMEOUT);
	_LIB_USERDELAY_set(&gDelay_finish_mcoff,3000);
 8005670:	4d3d      	ldr	r5, [pc, #244]	; (8005768 <_APP_CHARGSERV_startup+0x1ac>)
	_LIB_USERDELAY_set(&gTimeout_over_temp_clr_fault,5000);
 8005672:	f001 fcd5 	bl	8007020 <_LIB_USERDELAY_set>
	_LIB_USERDELAY_set(&gTimeout_auto_finish,CHARGSERV_AUTOFINISH_TIMEOUT);
 8005676:	0021      	movs	r1, r4
 8005678:	483c      	ldr	r0, [pc, #240]	; (800576c <_APP_CHARGSERV_startup+0x1b0>)
 800567a:	f001 fcd1 	bl	8007020 <_LIB_USERDELAY_set>
	_LIB_USERDELAY_set(&gDelay_finish_mcoff,3000);
 800567e:	0029      	movs	r1, r5
 8005680:	483b      	ldr	r0, [pc, #236]	; (8005770 <_APP_CHARGSERV_startup+0x1b4>)
 8005682:	f001 fccd 	bl	8007020 <_LIB_USERDELAY_set>

	_LIB_USERDELAY_set(&gTimeout_connect, 60000);
 8005686:	4b3b      	ldr	r3, [pc, #236]	; (8005774 <_APP_CHARGSERV_startup+0x1b8>)
 8005688:	483b      	ldr	r0, [pc, #236]	; (8005778 <_APP_CHARGSERV_startup+0x1bc>)
 800568a:	0019      	movs	r1, r3
 800568c:	4699      	mov	r9, r3
 800568e:	f001 fcc7 	bl	8007020 <_LIB_USERDELAY_set>
//220802 PES : charging_stable, charging_full detect
	_LIB_USERDELAY_set(&gTimeout_charging_stable,5400000);
 8005692:	493a      	ldr	r1, [pc, #232]	; (800577c <_APP_CHARGSERV_startup+0x1c0>)
 8005694:	483a      	ldr	r0, [pc, #232]	; (8005780 <_APP_CHARGSERV_startup+0x1c4>)
 8005696:	f001 fcc3 	bl	8007020 <_LIB_USERDELAY_set>
	_LIB_USERDELAY_set(&gTimeout_csms_fault,1800000);

	_LIB_USERDELAY_set(&gTimeout_usercheck,25000);
	_LIB_USERDELAY_set(&gTimeout_userconfigmode_input,3000);
	_LIB_USERDELAY_set(&gDelay_autostartmode_input,10000);
	_LIB_USERDELAY_set(&gDelay_charging_ok_button_input, 500);
 800569a:	27fa      	movs	r7, #250	; 0xfa
	_LIB_USERDELAY_set(&gTimeout_charging_full,30000);
 800569c:	0031      	movs	r1, r6
 800569e:	4839      	ldr	r0, [pc, #228]	; (8005784 <_APP_CHARGSERV_startup+0x1c8>)
 80056a0:	f001 fcbe 	bl	8007020 <_LIB_USERDELAY_set>
	_LIB_USERDELAY_set(&gTimeout_csms_fault,1800000);
 80056a4:	4938      	ldr	r1, [pc, #224]	; (8005788 <_APP_CHARGSERV_startup+0x1cc>)
 80056a6:	4839      	ldr	r0, [pc, #228]	; (800578c <_APP_CHARGSERV_startup+0x1d0>)
 80056a8:	f001 fcba 	bl	8007020 <_LIB_USERDELAY_set>
	_LIB_USERDELAY_set(&gTimeout_usercheck,25000);
 80056ac:	4b38      	ldr	r3, [pc, #224]	; (8005790 <_APP_CHARGSERV_startup+0x1d4>)
 80056ae:	4839      	ldr	r0, [pc, #228]	; (8005794 <_APP_CHARGSERV_startup+0x1d8>)
 80056b0:	4698      	mov	r8, r3
 80056b2:	0019      	movs	r1, r3
 80056b4:	f001 fcb4 	bl	8007020 <_LIB_USERDELAY_set>
	_LIB_USERDELAY_set(&gTimeout_userconfigmode_input,3000);
 80056b8:	0029      	movs	r1, r5
 80056ba:	4837      	ldr	r0, [pc, #220]	; (8005798 <_APP_CHARGSERV_startup+0x1dc>)
 80056bc:	f001 fcb0 	bl	8007020 <_LIB_USERDELAY_set>
	_LIB_USERDELAY_set(&gDelay_charging_ok_button_input, 500);
 80056c0:	007f      	lsls	r7, r7, #1
	_LIB_USERDELAY_set(&gDelay_autostartmode_input,10000);
 80056c2:	0021      	movs	r1, r4
 80056c4:	4835      	ldr	r0, [pc, #212]	; (800579c <_APP_CHARGSERV_startup+0x1e0>)
 80056c6:	f001 fcab 	bl	8007020 <_LIB_USERDELAY_set>
	_LIB_USERDELAY_set(&gDelay_charging_ok_button_input, 500);
 80056ca:	0039      	movs	r1, r7
 80056cc:	4834      	ldr	r0, [pc, #208]	; (80057a0 <_APP_CHARGSERV_startup+0x1e4>)
 80056ce:	f001 fca7 	bl	8007020 <_LIB_USERDELAY_set>

	_LIB_USERDELAY_set(&gTimeout_full_charge_minimum_ampe, 60000);
 80056d2:	4649      	mov	r1, r9
 80056d4:	4833      	ldr	r0, [pc, #204]	; (80057a4 <_APP_CHARGSERV_startup+0x1e8>)
 80056d6:	f001 fca3 	bl	8007020 <_LIB_USERDELAY_set>

	_LIB_USERDELAY_set(&gDelay_forcestop_wake_up_seq_flag_set, 3000);
 80056da:	0029      	movs	r1, r5
 80056dc:	4832      	ldr	r0, [pc, #200]	; (80057a8 <_APP_CHARGSERV_startup+0x1ec>)
 80056de:	f001 fc9f 	bl	8007020 <_LIB_USERDELAY_set>

	//_LIB_USERDELAY_set(&gTimeout_forcestop_wake_up_seq_is_finish, 20000);
	//_LIB_USERDELAY_set(&gTimeout_full_wake_up_seq_is_finish, 15000);
	_LIB_USERDELAY_set(&gTimeout_forcestop_wake_up_seq_is_finish, 25000);
 80056e2:	4641      	mov	r1, r8
 80056e4:	4831      	ldr	r0, [pc, #196]	; (80057ac <_APP_CHARGSERV_startup+0x1f0>)
 80056e6:	f001 fc9b 	bl	8007020 <_LIB_USERDELAY_set>
	_LIB_USERDELAY_set(&gTimeout_full_wake_up_seq_is_finish, 30000);
 80056ea:	0031      	movs	r1, r6
 80056ec:	4830      	ldr	r0, [pc, #192]	; (80057b0 <_APP_CHARGSERV_startup+0x1f4>)
 80056ee:	f001 fc97 	bl	8007020 <_LIB_USERDELAY_set>

	_LIB_USERDELAY_set(&gTimout_Leakage_Relapse, 10000);
 80056f2:	0021      	movs	r1, r4
 80056f4:	482f      	ldr	r0, [pc, #188]	; (80057b4 <_APP_CHARGSERV_startup+0x1f8>)
 80056f6:	f001 fc93 	bl	8007020 <_LIB_USERDELAY_set>

	_LIB_USERDELAY_set(&gTimout_oc_waring_Relapse, 1100000);
 80056fa:	492f      	ldr	r1, [pc, #188]	; (80057b8 <_APP_CHARGSERV_startup+0x1fc>)
 80056fc:	482f      	ldr	r0, [pc, #188]	; (80057bc <_APP_CHARGSERV_startup+0x200>)
 80056fe:	f001 fc8f 	bl	8007020 <_LIB_USERDELAY_set>

	_LIB_USERDELAY_set(&gTimout_oc_over_Relapse, 15000);
 8005702:	492f      	ldr	r1, [pc, #188]	; (80057c0 <_APP_CHARGSERV_startup+0x204>)
 8005704:	482f      	ldr	r0, [pc, #188]	; (80057c4 <_APP_CHARGSERV_startup+0x208>)
 8005706:	f001 fc8b 	bl	8007020 <_LIB_USERDELAY_set>
	//_MW_GPIO_set_gpo(KWH_LED, _OFF);
	//_MW_GPIO_set_gpo(LOAD_LED, _OFF);

	_LIB_USERDELAY_set(&gDelay_autostartmode_default_set,500);
 800570a:	0039      	movs	r1, r7
 800570c:	482e      	ldr	r0, [pc, #184]	; (80057c8 <_APP_CHARGSERV_startup+0x20c>)
 800570e:	f001 fc87 	bl	8007020 <_LIB_USERDELAY_set>

	charger_set_modecfg();
 8005712:	f7fe faa9 	bl	8003c68 <charger_set_modecfg>

	_APP_CHARGSERV_set_active_Ampe(0);
 8005716:	2000      	movs	r0, #0
 8005718:	f7ff fc3a 	bl	8004f90 <_APP_CHARGSERV_set_active_Ampe>

	_APP_CHARGSERV_wake_up_seq_init();
 800571c:	f7fe fb38 	bl	8003d90 <_APP_CHARGSERV_wake_up_seq_init>
//#if ((_VRMS_IRMS_CALC_LPF_FILTER_) == 1)
//	_LIB_LPF_init(&Vrms_calc, _LPF_TIMEINTERVAL_, _LPF_TAU_);
//	_LIB_LPF_init(&Irms_calc, _LPF_TIMEINTERVAL_, _LPF_TAU_);
//#endif

}
 8005720:	bcc0      	pop	{r6, r7}
 8005722:	46b9      	mov	r9, r7
 8005724:	46b0      	mov	r8, r6
 8005726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005728:	20000100 	.word	0x20000100
 800572c:	00001388 	.word	0x00001388
 8005730:	200001bc 	.word	0x200001bc
 8005734:	00002710 	.word	0x00002710
 8005738:	200002e8 	.word	0x200002e8
 800573c:	000f4240 	.word	0x000f4240
 8005740:	20000228 	.word	0x20000228
 8005744:	00007530 	.word	0x00007530
 8005748:	2000021c 	.word	0x2000021c
 800574c:	20000234 	.word	0x20000234
 8005750:	2000024c 	.word	0x2000024c
 8005754:	20000240 	.word	0x20000240
 8005758:	200001c8 	.word	0x200001c8
 800575c:	000927c0 	.word	0x000927c0
 8005760:	200002c4 	.word	0x200002c4
 8005764:	200002b8 	.word	0x200002b8
 8005768:	00000bb8 	.word	0x00000bb8
 800576c:	20000258 	.word	0x20000258
 8005770:	200001d4 	.word	0x200001d4
 8005774:	0000ea60 	.word	0x0000ea60
 8005778:	2000027c 	.word	0x2000027c
 800577c:	005265c0 	.word	0x005265c0
 8005780:	20000270 	.word	0x20000270
 8005784:	20000264 	.word	0x20000264
 8005788:	001b7740 	.word	0x001b7740
 800578c:	20000288 	.word	0x20000288
 8005790:	000061a8 	.word	0x000061a8
 8005794:	200002d0 	.word	0x200002d0
 8005798:	200002dc 	.word	0x200002dc
 800579c:	200001a4 	.word	0x200001a4
 80057a0:	200001b0 	.word	0x200001b0
 80057a4:	200002a0 	.word	0x200002a0
 80057a8:	200001e0 	.word	0x200001e0
 80057ac:	20000294 	.word	0x20000294
 80057b0:	200002ac 	.word	0x200002ac
 80057b4:	200002f4 	.word	0x200002f4
 80057b8:	0010c8e0 	.word	0x0010c8e0
 80057bc:	2000030c 	.word	0x2000030c
 80057c0:	00003a98 	.word	0x00003a98
 80057c4:	20000300 	.word	0x20000300
 80057c8:	20000198 	.word	0x20000198

080057cc <_APP_CHARGSERV_init>:

void _APP_CHARGSERV_init()
{
 80057cc:	b510      	push	{r4, lr}
	if(_TRUE == _APP_RFID_is_init_ok())
 80057ce:	f000 ffef 	bl	80067b0 <_APP_RFID_is_init_ok>
	{
		Charger.init_flag.rfid_init_ok = 1;
 80057d2:	4b09      	ldr	r3, [pc, #36]	; (80057f8 <_APP_CHARGSERV_init+0x2c>)
	if(_TRUE == _APP_RFID_is_init_ok())
 80057d4:	2801      	cmp	r0, #1
 80057d6:	d103      	bne.n	80057e0 <_APP_CHARGSERV_init+0x14>
		Charger.init_flag.rfid_init_ok = 1;
 80057d8:	2101      	movs	r1, #1
 80057da:	7ada      	ldrb	r2, [r3, #11]
 80057dc:	430a      	orrs	r2, r1
 80057de:	72da      	strb	r2, [r3, #11]
	}

	Charger.init_flag.systemctl_init_ok = 1;
 80057e0:	2102      	movs	r1, #2
 80057e2:	7ada      	ldrb	r2, [r3, #11]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	72da      	strb	r2, [r3, #11]

	//230106 PES : non display. always on
	Charger.reg.display_cyclefinish = 1;
 80057e8:	2280      	movs	r2, #128	; 0x80
 80057ea:	79d9      	ldrb	r1, [r3, #7]
 80057ec:	4252      	negs	r2, r2
 80057ee:	430a      	orrs	r2, r1
 80057f0:	71da      	strb	r2, [r3, #7]

	_APP_CHARGSERV_init_ok();
 80057f2:	f7fe f8e7 	bl	80039c4 <_APP_CHARGSERV_init_ok>
}
 80057f6:	bd10      	pop	{r4, pc}
 80057f8:	20000100 	.word	0x20000100

080057fc <_APP_CHARGSERV_deinit>:
	Charger.state = cstate;
 80057fc:	2201      	movs	r2, #1

uint8_t _APP_CHARGSERV_deinit()
{
	charger_set_state(Init);
	Charger.reg.init_proceeding = 1;
 80057fe:	2102      	movs	r1, #2
	Charger.state = cstate;
 8005800:	4b08      	ldr	r3, [pc, #32]	; (8005824 <_APP_CHARGSERV_deinit+0x28>)
{
 8005802:	b510      	push	{r4, lr}
	Charger.state = cstate;
 8005804:	701a      	strb	r2, [r3, #0]
	Charger.reg.init_proceeding = 1;
 8005806:	78da      	ldrb	r2, [r3, #3]
 8005808:	430a      	orrs	r2, r1
 800580a:	70da      	strb	r2, [r3, #3]
	Charger.state_bk = Chargerstateend;
 800580c:	210b      	movs	r1, #11
 800580e:	2272      	movs	r2, #114	; 0x72
 8005810:	5499      	strb	r1, [r3, r2]

	charger_set_modecfg();
 8005812:	f7fe fa29 	bl	8003c68 <charger_set_modecfg>

	_APP_CHARGSERV_set_active_Ampe(0);
 8005816:	2000      	movs	r0, #0
 8005818:	f7ff fbba 	bl	8004f90 <_APP_CHARGSERV_set_active_Ampe>

	_APP_CHARGSERV_wake_up_seq_init();
 800581c:	f7fe fab8 	bl	8003d90 <_APP_CHARGSERV_wake_up_seq_init>

	return 0;
}
 8005820:	2000      	movs	r0, #0
 8005822:	bd10      	pop	{r4, pc}
 8005824:	20000100 	.word	0x20000100

08005828 <_APP_CHARGSERV_main>:
	return Charger.state;
 8005828:	4b0a      	ldr	r3, [pc, #40]	; (8005854 <_APP_CHARGSERV_main+0x2c>)


void _APP_CHARGSERV_main()
{
 800582a:	b510      	push	{r4, lr}
	return Charger.state;
 800582c:	781c      	ldrb	r4, [r3, #0]
	eCharger_State state = _APP_CHARGSERV_get_current_state();

	_APP_CHARGSERV_init();
 800582e:	f7ff ffcd 	bl	80057cc <_APP_CHARGSERV_init>

	_MW_CP_main();
 8005832:	f001 ff45 	bl	80076c0 <_MW_CP_main>

	if((state != Init) && (state != OTA) && (state != Powercut))
 8005836:	2c01      	cmp	r4, #1
 8005838:	d005      	beq.n	8005846 <_APP_CHARGSERV_main+0x1e>
 800583a:	2302      	movs	r3, #2
 800583c:	439c      	bics	r4, r3
 800583e:	2c08      	cmp	r4, #8
 8005840:	d001      	beq.n	8005846 <_APP_CHARGSERV_main+0x1e>
	{
		_APP_CHARGSERV_fault_loop();
 8005842:	f7ff fe67 	bl	8005514 <_APP_CHARGSERV_fault_loop>
	}
	_APP_CHARGSERV_state_machine();
 8005846:	f7fe fac9 	bl	8003ddc <_APP_CHARGSERV_state_machine>
	_APP_CHARGSERV_ctrl_loop();
 800584a:	f7ff fb1f 	bl	8004e8c <_APP_CHARGSERV_ctrl_loop>

#if((__CHARGSERV_DEBUG__)==1)
	_APP_CHARGSERV_print_state();
 800584e:	f7ff fb35 	bl	8004ebc <_APP_CHARGSERV_print_state>
#endif
}
 8005852:	bd10      	pop	{r4, pc}
 8005854:	20000100 	.word	0x20000100

08005858 <_APP_CHARGSERV_process>:

void _APP_CHARGSERV_process(void)
{
 8005858:	b570      	push	{r4, r5, r6, lr}
	return Charger.mode;
 800585a:	4b0c      	ldr	r3, [pc, #48]	; (800588c <_APP_CHARGSERV_process+0x34>)
	eCharger_Mode mode = charger_get_mode();

	_LIB_USERDELAY_start(&gDelay_chargserv_periodic_loop_time, DELAY_RENEW_OFF);
 800585c:	4c0c      	ldr	r4, [pc, #48]	; (8005890 <_APP_CHARGSERV_process+0x38>)
	return Charger.mode;
 800585e:	789d      	ldrb	r5, [r3, #2]
	_LIB_USERDELAY_start(&gDelay_chargserv_periodic_loop_time, DELAY_RENEW_OFF);
 8005860:	2100      	movs	r1, #0
 8005862:	0020      	movs	r0, r4
 8005864:	f001 fbe6 	bl	8007034 <_LIB_USERDELAY_start>

	if(mode_config == mode)
 8005868:	2d04      	cmp	r5, #4
 800586a:	d004      	beq.n	8005876 <_APP_CHARGSERV_process+0x1e>
	{
		return;
	}

    if(_LIB_USERDELAY_isfired(&gDelay_chargserv_periodic_loop_time))
 800586c:	0020      	movs	r0, r4
 800586e:	f001 fbf5 	bl	800705c <_LIB_USERDELAY_isfired>
 8005872:	2800      	cmp	r0, #0
 8005874:	d100      	bne.n	8005878 <_APP_CHARGSERV_process+0x20>

		_APP_CHARGSERV_set_event();

	  	_LIB_USERDELAY_start(&gDelay_chargserv_periodic_loop_time, DELAY_RENEW_ON);
    }
}
 8005876:	bd70      	pop	{r4, r5, r6, pc}
		_APP_CHARGSERV_main();
 8005878:	f7ff ffd6 	bl	8005828 <_APP_CHARGSERV_main>
		_APP_CHARGSERV_display_loop();
 800587c:	f7fe fcfe 	bl	800427c <_APP_CHARGSERV_display_loop>
	  	_LIB_USERDELAY_start(&gDelay_chargserv_periodic_loop_time, DELAY_RENEW_ON);
 8005880:	2101      	movs	r1, #1
 8005882:	0020      	movs	r0, r4
 8005884:	f001 fbd6 	bl	8007034 <_LIB_USERDELAY_start>
 8005888:	e7f5      	b.n	8005876 <_APP_CHARGSERV_process+0x1e>
 800588a:	46c0      	nop			; (mov r8, r8)
 800588c:	20000100 	.word	0x20000100
 8005890:	200001bc 	.word	0x200001bc

08005894 <_APP_CONFIGSERV_flag>:
static gUserDelay gDelay_configserv_periodic_loop_time;
static gUserDelay gDelay_finish;
static gUserDelay gDelay_fault;

uint8_t _APP_CONFIGSERV_flag(uint8_t value, uint8_t is_userconfig)
{
 8005894:	b570      	push	{r4, r5, r6, lr}
 8005896:	000c      	movs	r4, r1
	uint8_t ret_value = _TRUE;

	if((_TRUE == value) && (0 == Config.reg.enable))
 8005898:	2801      	cmp	r0, #1
 800589a:	d00c      	beq.n	80058b6 <_APP_CONFIGSERV_flag+0x22>
		{
			printf("%%%%%%$ CONFIGRATION _ USERCONFIGMODE ON %%%%%%$\r\n");
			Config.reg.is_userconfigmode = 1;
		}
	}
	else if((_FALSE == value) && (1 == Config.reg.enable))
 800589c:	2800      	cmp	r0, #0
 800589e:	d108      	bne.n	80058b2 <_APP_CONFIGSERV_flag+0x1e>
 80058a0:	2201      	movs	r2, #1
 80058a2:	0015      	movs	r5, r2
 80058a4:	4916      	ldr	r1, [pc, #88]	; (8005900 <_APP_CONFIGSERV_flag+0x6c>)
 80058a6:	788b      	ldrb	r3, [r1, #2]
 80058a8:	401d      	ands	r5, r3
 80058aa:	421a      	tst	r2, r3
 80058ac:	d122      	bne.n	80058f4 <_APP_CONFIGSERV_flag+0x60>
	{
		ret_value = _FALSE;
	}

	return ret_value;
}
 80058ae:	0028      	movs	r0, r5
 80058b0:	bd70      	pop	{r4, r5, r6, pc}
		ret_value = _FALSE;
 80058b2:	2500      	movs	r5, #0
 80058b4:	e7fb      	b.n	80058ae <_APP_CONFIGSERV_flag+0x1a>
	if((_TRUE == value) && (0 == Config.reg.enable))
 80058b6:	4e12      	ldr	r6, [pc, #72]	; (8005900 <_APP_CONFIGSERV_flag+0x6c>)
		ret_value = _FALSE;
 80058b8:	2500      	movs	r5, #0
	if((_TRUE == value) && (0 == Config.reg.enable))
 80058ba:	78b3      	ldrb	r3, [r6, #2]
 80058bc:	4218      	tst	r0, r3
 80058be:	d1f6      	bne.n	80058ae <_APP_CONFIGSERV_flag+0x1a>
		memset(Config.read_card_num,0xFF,30);
 80058c0:	0030      	movs	r0, r6
		Config.state = C_Init;
 80058c2:	6833      	ldr	r3, [r6, #0]
 80058c4:	4a0f      	ldr	r2, [pc, #60]	; (8005904 <_APP_CONFIGSERV_flag+0x70>)
 80058c6:	0c9b      	lsrs	r3, r3, #18
 80058c8:	049b      	lsls	r3, r3, #18
 80058ca:	4313      	orrs	r3, r2
		memset(Config.read_card_num,0xFF,30);
 80058cc:	21ff      	movs	r1, #255	; 0xff
 80058ce:	221e      	movs	r2, #30
		Config.state = C_Init;
 80058d0:	6033      	str	r3, [r6, #0]
		memset(Config.read_card_num,0xFF,30);
 80058d2:	300a      	adds	r0, #10
 80058d4:	f005 fa17 	bl	800ad06 <memset>
		printf("%%%%%%$ CONFIGRATION FLAG ON Enable set %%%%%%$\r\n");
 80058d8:	480b      	ldr	r0, [pc, #44]	; (8005908 <_APP_CONFIGSERV_flag+0x74>)
 80058da:	f005 fa1d 	bl	800ad18 <iprintf>
	uint8_t ret_value = _TRUE;
 80058de:	3501      	adds	r5, #1
		if(_TRUE == is_userconfig)
 80058e0:	2c01      	cmp	r4, #1
 80058e2:	d1e4      	bne.n	80058ae <_APP_CONFIGSERV_flag+0x1a>
			printf("%%%%%%$ CONFIGRATION _ USERCONFIGMODE ON %%%%%%$\r\n");
 80058e4:	4809      	ldr	r0, [pc, #36]	; (800590c <_APP_CONFIGSERV_flag+0x78>)
 80058e6:	f005 fa17 	bl	800ad18 <iprintf>
			Config.reg.is_userconfigmode = 1;
 80058ea:	2240      	movs	r2, #64	; 0x40
 80058ec:	78f3      	ldrb	r3, [r6, #3]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	70f3      	strb	r3, [r6, #3]
	return ret_value;
 80058f2:	e7dc      	b.n	80058ae <_APP_CONFIGSERV_flag+0x1a>
		Config.reg.enable = 0;
 80058f4:	4393      	bics	r3, r2
		printf("%%%%%%$ CONFIGRATION FLAG OFF Enable reset %%%%%%$\r\n");
 80058f6:	4806      	ldr	r0, [pc, #24]	; (8005910 <_APP_CONFIGSERV_flag+0x7c>)
		Config.reg.enable = 0;
 80058f8:	708b      	strb	r3, [r1, #2]
		printf("%%%%%%$ CONFIGRATION FLAG OFF Enable reset %%%%%%$\r\n");
 80058fa:	f005 fa0d 	bl	800ad18 <iprintf>
 80058fe:	e7d6      	b.n	80058ae <_APP_CONFIGSERV_flag+0x1a>
 8005900:	20000320 	.word	0x20000320
 8005904:	00030101 	.word	0x00030101
 8005908:	0800d2f4 	.word	0x0800d2f4
 800590c:	0800d328 	.word	0x0800d328
 8005910:	0800d35c 	.word	0x0800d35c

08005914 <_APP_CONFIGSERV_startup>:

void _APP_CONFIGSERV_startup()
{
	Config.reg.Raw = 0;
 8005914:	2200      	movs	r2, #0
{
 8005916:	b510      	push	{r4, lr}

		printf("is not CONFIGRATION MODE \r\n");
	}

	_LIB_USERDELAY_set(&gDelay_configserv_periodic_loop_time,10);
	_LIB_USERDELAY_set(&gDelay_finish,2000);
 8005918:	24fa      	movs	r4, #250	; 0xfa
	Config.reg.Raw = 0;
 800591a:	4b0c      	ldr	r3, [pc, #48]	; (800594c <_APP_CONFIGSERV_startup+0x38>)
		printf("is not CONFIGRATION MODE \r\n");
 800591c:	480c      	ldr	r0, [pc, #48]	; (8005950 <_APP_CONFIGSERV_startup+0x3c>)
	Config.reg.Raw = 0;
 800591e:	805a      	strh	r2, [r3, #2]
 8005920:	809a      	strh	r2, [r3, #4]
 8005922:	80da      	strh	r2, [r3, #6]
 8005924:	811a      	strh	r2, [r3, #8]
		Config.reg.enable = 0;
 8005926:	709a      	strb	r2, [r3, #2]
		Config.state = Configstateend;
 8005928:	3206      	adds	r2, #6
 800592a:	701a      	strb	r2, [r3, #0]
	_LIB_USERDELAY_set(&gDelay_finish,2000);
 800592c:	00e4      	lsls	r4, r4, #3
		printf("is not CONFIGRATION MODE \r\n");
 800592e:	f005 fa7f 	bl	800ae30 <puts>
	_LIB_USERDELAY_set(&gDelay_configserv_periodic_loop_time,10);
 8005932:	210a      	movs	r1, #10
 8005934:	4807      	ldr	r0, [pc, #28]	; (8005954 <_APP_CONFIGSERV_startup+0x40>)
 8005936:	f001 fb73 	bl	8007020 <_LIB_USERDELAY_set>
	_LIB_USERDELAY_set(&gDelay_finish,2000);
 800593a:	0021      	movs	r1, r4
 800593c:	4806      	ldr	r0, [pc, #24]	; (8005958 <_APP_CONFIGSERV_startup+0x44>)
 800593e:	f001 fb6f 	bl	8007020 <_LIB_USERDELAY_set>
	_LIB_USERDELAY_set(&gDelay_fault,2000);
 8005942:	0021      	movs	r1, r4
 8005944:	4805      	ldr	r0, [pc, #20]	; (800595c <_APP_CONFIGSERV_startup+0x48>)
 8005946:	f001 fb6b 	bl	8007020 <_LIB_USERDELAY_set>
}
 800594a:	bd10      	pop	{r4, pc}
 800594c:	20000320 	.word	0x20000320
 8005950:	0800d394 	.word	0x0800d394
 8005954:	20000348 	.word	0x20000348
 8005958:	20000360 	.word	0x20000360
 800595c:	20000354 	.word	0x20000354

08005960 <_APP_CONFIGSERV_init>:

void _APP_CONFIGSERV_init()
{
 8005960:	b510      	push	{r4, lr}
	static uint8_t init_stack = 0xFF;

	if(_TRUE == _APP_RFID_is_init_ok())
 8005962:	f000 ff25 	bl	80067b0 <_APP_RFID_is_init_ok>
	{
		init_stack = 0x00;
 8005966:	4b07      	ldr	r3, [pc, #28]	; (8005984 <_APP_CONFIGSERV_init+0x24>)
	if(_TRUE == _APP_RFID_is_init_ok())
 8005968:	2801      	cmp	r0, #1
 800596a:	d003      	beq.n	8005974 <_APP_CONFIGSERV_init+0x14>
	}

	if(0 == init_stack)
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d002      	beq.n	8005978 <_APP_CONFIGSERV_init+0x18>
	{
		Config.reg.init_complete = 1;
	}
}
 8005972:	bd10      	pop	{r4, pc}
		init_stack = 0x00;
 8005974:	2200      	movs	r2, #0
 8005976:	701a      	strb	r2, [r3, #0]
		Config.reg.init_complete = 1;
 8005978:	2104      	movs	r1, #4
 800597a:	4a03      	ldr	r2, [pc, #12]	; (8005988 <_APP_CONFIGSERV_init+0x28>)
 800597c:	7893      	ldrb	r3, [r2, #2]
 800597e:	430b      	orrs	r3, r1
 8005980:	7093      	strb	r3, [r2, #2]
}
 8005982:	e7f6      	b.n	8005972 <_APP_CONFIGSERV_init+0x12>
 8005984:	20000005 	.word	0x20000005
 8005988:	20000320 	.word	0x20000320

0800598c <config_state_changed_check>:

uint8_t config_state_changed_check()
{
 800598c:	b510      	push	{r4, lr}
	if(Config.state != Config.state_bk)
 800598e:	4c21      	ldr	r4, [pc, #132]	; (8005a14 <config_state_changed_check+0x88>)
 8005990:	7823      	ldrb	r3, [r4, #0]
 8005992:	7862      	ldrb	r2, [r4, #1]
 8005994:	429a      	cmp	r2, r3
 8005996:	d026      	beq.n	80059e6 <config_state_changed_check+0x5a>
	{
		switch(Config.state)
 8005998:	2b05      	cmp	r3, #5
 800599a:	d826      	bhi.n	80059ea <config_state_changed_check+0x5e>
 800599c:	4a1e      	ldr	r2, [pc, #120]	; (8005a18 <config_state_changed_check+0x8c>)
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	58d3      	ldr	r3, [r2, r3]
 80059a2:	469f      	mov	pc, r3
			case C_Finish :
				_LIB_LOGGING_printf("#### CHARGSERV State : Finish #### \r\n");
			break;

			case C_Fault :
				_LIB_LOGGING_printf("#### CHARGSERV State : Fault #### \r\n");
 80059a4:	481d      	ldr	r0, [pc, #116]	; (8005a1c <config_state_changed_check+0x90>)
 80059a6:	f005 fa43 	bl	800ae30 <puts>
			default :
				_LIB_LOGGING_printf("#### CHARGSERV State : default #### \r\n");
			break;
		}

		if(((C_Finish == Config.state_bk) || (C_Fault == Config.state_bk)) && (C_Ready == Config.state))
 80059aa:	7863      	ldrb	r3, [r4, #1]
 80059ac:	3b04      	subs	r3, #4
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d813      	bhi.n	80059da <config_state_changed_check+0x4e>
 80059b2:	7823      	ldrb	r3, [r4, #0]
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d111      	bne.n	80059dc <config_state_changed_check+0x50>
		{
			if(1 == Config.reg.is_userconfigmode)
 80059b8:	2140      	movs	r1, #64	; 0x40
 80059ba:	78e2      	ldrb	r2, [r4, #3]
 80059bc:	4211      	tst	r1, r2
 80059be:	d00d      	beq.n	80059dc <config_state_changed_check+0x50>
			{
				Config.reg.is_userconfigmode = 0;
 80059c0:	438a      	bics	r2, r1
				Config.state = C_Init;
 80059c2:	3b01      	subs	r3, #1
				Config.reg.is_userconfigmode = 0;
 80059c4:	70e2      	strb	r2, [r4, #3]
				printf("userconfigmode is only one try. go to chargermode \r\n");
 80059c6:	4816      	ldr	r0, [pc, #88]	; (8005a20 <config_state_changed_check+0x94>)
				Config.state = C_Init;
 80059c8:	7023      	strb	r3, [r4, #0]
				printf("userconfigmode is only one try. go to chargermode \r\n");
 80059ca:	f005 fa31 	bl	800ae30 <puts>
				_APP_CONFIGSERV_flag(_FALSE,_FALSE);
 80059ce:	2100      	movs	r1, #0
 80059d0:	2000      	movs	r0, #0
 80059d2:	f7ff ff5f 	bl	8005894 <_APP_CONFIGSERV_flag>
				_APP_CHARGSERV_deinit();
 80059d6:	f7ff ff11 	bl	80057fc <_APP_CHARGSERV_deinit>
 80059da:	7823      	ldrb	r3, [r4, #0]
			}
		}

		Config.state_bk = Config.state;
		Config.reg.state_changed = 1;
 80059dc:	2220      	movs	r2, #32
		Config.state_bk = Config.state;
 80059de:	7063      	strb	r3, [r4, #1]
		Config.reg.state_changed = 1;
 80059e0:	78e3      	ldrb	r3, [r4, #3]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	70e3      	strb	r3, [r4, #3]
	}
	return _TRUE;
}
 80059e6:	2001      	movs	r0, #1
 80059e8:	bd10      	pop	{r4, pc}
				_LIB_LOGGING_printf("#### CHARGSERV State : default #### \r\n");
 80059ea:	480e      	ldr	r0, [pc, #56]	; (8005a24 <config_state_changed_check+0x98>)
 80059ec:	f005 fa20 	bl	800ae30 <puts>
			break;
 80059f0:	e7db      	b.n	80059aa <config_state_changed_check+0x1e>
				_LIB_LOGGING_printf("%%%% CONFIGSERV State : Init #### \r\n");
 80059f2:	480d      	ldr	r0, [pc, #52]	; (8005a28 <config_state_changed_check+0x9c>)
 80059f4:	f005 f990 	bl	800ad18 <iprintf>
			break;
 80059f8:	e7d7      	b.n	80059aa <config_state_changed_check+0x1e>
				_LIB_LOGGING_printf("#### CHARGSERV State : Ready #### \r\n");
 80059fa:	480c      	ldr	r0, [pc, #48]	; (8005a2c <config_state_changed_check+0xa0>)
 80059fc:	f005 fa18 	bl	800ae30 <puts>
			break;
 8005a00:	e7d3      	b.n	80059aa <config_state_changed_check+0x1e>
				_LIB_LOGGING_printf("#### CHARGSERV State : Setting #### \r\n");
 8005a02:	480b      	ldr	r0, [pc, #44]	; (8005a30 <config_state_changed_check+0xa4>)
 8005a04:	f005 fa14 	bl	800ae30 <puts>
			break;
 8005a08:	e7cf      	b.n	80059aa <config_state_changed_check+0x1e>
				_LIB_LOGGING_printf("#### CHARGSERV State : Finish #### \r\n");
 8005a0a:	480a      	ldr	r0, [pc, #40]	; (8005a34 <config_state_changed_check+0xa8>)
 8005a0c:	f005 fa10 	bl	800ae30 <puts>
			break;
 8005a10:	e7cb      	b.n	80059aa <config_state_changed_check+0x1e>
 8005a12:	46c0      	nop			; (mov r8, r8)
 8005a14:	20000320 	.word	0x20000320
 8005a18:	0800d434 	.word	0x0800d434
 8005a1c:	0800cf9c 	.word	0x0800cf9c
 8005a20:	0800d400 	.word	0x0800d400
 8005a24:	0800cfe8 	.word	0x0800cfe8
 8005a28:	0800d3b0 	.word	0x0800d3b0
 8005a2c:	0800ce8c 	.word	0x0800ce8c
 8005a30:	0800d3d8 	.word	0x0800d3d8
 8005a34:	0800cf50 	.word	0x0800cf50

08005a38 <_APP_CONFIGSERV_state_machine>:

void _APP_CONFIGSERV_state_machine()
{
	switch(Config.state)
 8005a38:	4a30      	ldr	r2, [pc, #192]	; (8005afc <_APP_CONFIGSERV_state_machine+0xc4>)
{
 8005a3a:	b510      	push	{r4, lr}
 8005a3c:	7813      	ldrb	r3, [r2, #0]
 8005a3e:	2b05      	cmp	r3, #5
 8005a40:	d815      	bhi.n	8005a6e <_APP_CONFIGSERV_state_machine+0x36>
 8005a42:	492f      	ldr	r1, [pc, #188]	; (8005b00 <_APP_CONFIGSERV_state_machine+0xc8>)
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	58cb      	ldr	r3, [r1, r3]
 8005a48:	469f      	mov	pc, r3
				Config.reg.fault_set = 1;
			}
		break;

		case C_Setting :
			if(1 == Config.reg.setting_proceeding)
 8005a4a:	7893      	ldrb	r3, [r2, #2]
 8005a4c:	0659      	lsls	r1, r3, #25
 8005a4e:	d50e      	bpl.n	8005a6e <_APP_CONFIGSERV_state_machine+0x36>
			{
				if(1 == Config.reg.setting_ok)
 8005a50:	b25b      	sxtb	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	db47      	blt.n	8005ae6 <_APP_CONFIGSERV_state_machine+0xae>
					Config.reg.setting_ok = 0;

					Config.state = C_Finish;
					Config.reg.finish_proceeding = 1;
				}
				else if(1 == Config.reg.setting_fail)
 8005a56:	78d3      	ldrb	r3, [r2, #3]
 8005a58:	07db      	lsls	r3, r3, #31
 8005a5a:	d508      	bpl.n	8005a6e <_APP_CONFIGSERV_state_machine+0x36>
				{
					Config.reg.setting_proceeding = 0;
					Config.reg.setting_fail = 0;

					Config.state = C_Fault;
 8005a5c:	2305      	movs	r3, #5
					Config.reg.setting_proceeding = 0;
 8005a5e:	4929      	ldr	r1, [pc, #164]	; (8005b04 <_APP_CONFIGSERV_state_machine+0xcc>)
					Config.state = C_Fault;
 8005a60:	7013      	strb	r3, [r2, #0]
					Config.reg.setting_proceeding = 0;
 8005a62:	8853      	ldrh	r3, [r2, #2]
 8005a64:	4019      	ands	r1, r3
 8005a66:	2380      	movs	r3, #128	; 0x80
 8005a68:	011b      	lsls	r3, r3, #4
 8005a6a:	430b      	orrs	r3, r1
 8005a6c:	8053      	strh	r3, [r2, #2]

		break;

	}

	config_state_changed_check();
 8005a6e:	f7ff ff8d 	bl	800598c <config_state_changed_check>
}
 8005a72:	bd10      	pop	{r4, pc}
			if(1 == Config.reg.fault_reset)
 8005a74:	78d3      	ldrb	r3, [r2, #3]
 8005a76:	06db      	lsls	r3, r3, #27
 8005a78:	d5f9      	bpl.n	8005a6e <_APP_CONFIGSERV_state_machine+0x36>
				Config.state = C_Ready;
 8005a7a:	2302      	movs	r3, #2
				Config.reg.ready_standby = 1;
 8005a7c:	4922      	ldr	r1, [pc, #136]	; (8005b08 <_APP_CONFIGSERV_state_machine+0xd0>)
				Config.state = C_Ready;
 8005a7e:	7013      	strb	r3, [r2, #0]
				Config.reg.ready_standby = 1;
 8005a80:	8853      	ldrh	r3, [r2, #2]
 8005a82:	400b      	ands	r3, r1
 8005a84:	2108      	movs	r1, #8
 8005a86:	430b      	orrs	r3, r1
 8005a88:	8053      	strh	r3, [r2, #2]
 8005a8a:	e7f0      	b.n	8005a6e <_APP_CONFIGSERV_state_machine+0x36>
			if((1 == Config.reg.init_proceeding) &&
 8005a8c:	2306      	movs	r3, #6
 8005a8e:	7891      	ldrb	r1, [r2, #2]
 8005a90:	400b      	ands	r3, r1
 8005a92:	2b06      	cmp	r3, #6
 8005a94:	d1eb      	bne.n	8005a6e <_APP_CONFIGSERV_state_machine+0x36>
				Config.state = C_Ready;
 8005a96:	3b04      	subs	r3, #4
 8005a98:	7013      	strb	r3, [r2, #0]
				Config.reg.init_proceeding = 0;
 8005a9a:	330c      	adds	r3, #12
 8005a9c:	4399      	bics	r1, r3
 8005a9e:	2308      	movs	r3, #8
 8005aa0:	4319      	orrs	r1, r3
 8005aa2:	7091      	strb	r1, [r2, #2]
 8005aa4:	e7e3      	b.n	8005a6e <_APP_CONFIGSERV_state_machine+0x36>
			if(1 == Config.reg.ready_cardtag)
 8005aa6:	7893      	ldrb	r3, [r2, #2]
 8005aa8:	06d9      	lsls	r1, r3, #27
 8005aaa:	d515      	bpl.n	8005ad8 <_APP_CONFIGSERV_state_machine+0xa0>
				Config.state = C_Setting;
 8005aac:	2103      	movs	r1, #3
 8005aae:	7011      	strb	r1, [r2, #0]
				Config.reg.ready_standby = 0;
 8005ab0:	3155      	adds	r1, #85	; 0x55
 8005ab2:	438b      	bics	r3, r1
 8005ab4:	2140      	movs	r1, #64	; 0x40
 8005ab6:	430b      	orrs	r3, r1
 8005ab8:	7093      	strb	r3, [r2, #2]
 8005aba:	e7d8      	b.n	8005a6e <_APP_CONFIGSERV_state_machine+0x36>
			if((1 == Config.reg.finish_proceeding) &&
 8005abc:	2306      	movs	r3, #6
 8005abe:	78d1      	ldrb	r1, [r2, #3]
 8005ac0:	400b      	ands	r3, r1
 8005ac2:	2b06      	cmp	r3, #6
 8005ac4:	d1d3      	bne.n	8005a6e <_APP_CONFIGSERV_state_machine+0x36>
				Config.state = C_Ready;
 8005ac6:	3b04      	subs	r3, #4
				Config.reg.ready_standby = 1;
 8005ac8:	4910      	ldr	r1, [pc, #64]	; (8005b0c <_APP_CONFIGSERV_state_machine+0xd4>)
				Config.state = C_Ready;
 8005aca:	7013      	strb	r3, [r2, #0]
				Config.reg.ready_standby = 1;
 8005acc:	8853      	ldrh	r3, [r2, #2]
 8005ace:	400b      	ands	r3, r1
 8005ad0:	2108      	movs	r1, #8
 8005ad2:	430b      	orrs	r3, r1
 8005ad4:	8053      	strh	r3, [r2, #2]
 8005ad6:	e7ca      	b.n	8005a6e <_APP_CONFIGSERV_state_machine+0x36>
			else if(1 == Config.reg.ready_cardtagfail)
 8005ad8:	069b      	lsls	r3, r3, #26
 8005ada:	d5c8      	bpl.n	8005a6e <_APP_CONFIGSERV_state_machine+0x36>
				Config.state = C_Fault;
 8005adc:	2305      	movs	r3, #5
				Config.reg.ready_standby = 0;
 8005ade:	490c      	ldr	r1, [pc, #48]	; (8005b10 <_APP_CONFIGSERV_state_machine+0xd8>)
				Config.state = C_Fault;
 8005ae0:	7013      	strb	r3, [r2, #0]
				Config.reg.ready_standby = 0;
 8005ae2:	8853      	ldrh	r3, [r2, #2]
 8005ae4:	e7be      	b.n	8005a64 <_APP_CONFIGSERV_state_machine+0x2c>
					Config.state = C_Finish;
 8005ae6:	2304      	movs	r3, #4
					Config.reg.setting_proceeding = 0;
 8005ae8:	490a      	ldr	r1, [pc, #40]	; (8005b14 <_APP_CONFIGSERV_state_machine+0xdc>)
					Config.state = C_Finish;
 8005aea:	7013      	strb	r3, [r2, #0]
					Config.reg.setting_proceeding = 0;
 8005aec:	8853      	ldrh	r3, [r2, #2]
 8005aee:	4019      	ands	r1, r3
 8005af0:	2380      	movs	r3, #128	; 0x80
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	430b      	orrs	r3, r1
 8005af6:	8053      	strh	r3, [r2, #2]
 8005af8:	e7b9      	b.n	8005a6e <_APP_CONFIGSERV_state_machine+0x36>
 8005afa:	46c0      	nop			; (mov r8, r8)
 8005afc:	20000320 	.word	0x20000320
 8005b00:	0800d44c 	.word	0x0800d44c
 8005b04:	fffff6bf 	.word	0xfffff6bf
 8005b08:	ffffe7f7 	.word	0xffffe7f7
 8005b0c:	fffff9f7 	.word	0xfffff9f7
 8005b10:	fffff7d7 	.word	0xfffff7d7
 8005b14:	fffffd3f 	.word	0xfffffd3f

08005b18 <_APP_CONFIGSERV_ctrl_loop>:

	return ret_value;
}

void _APP_CONFIGSERV_ctrl_loop()
{
 8005b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b1a:	46d6      	mov	lr, sl
 8005b1c:	464f      	mov	r7, r9
 8005b1e:	4646      	mov	r6, r8
	uint8_t ret_value = 0x00;
	static int8_t step = 0;
	int i = 0;
	int j = 0;
	uint8_t rxtemp[30] = {0,};
 8005b20:	2400      	movs	r4, #0
{
 8005b22:	b5c0      	push	{r6, r7, lr}
 8005b24:	b090      	sub	sp, #64	; 0x40
	uint8_t rxtemp[30] = {0,};
 8005b26:	221a      	movs	r2, #26
 8005b28:	2100      	movs	r1, #0
 8005b2a:	a801      	add	r0, sp, #4
 8005b2c:	9400      	str	r4, [sp, #0]
 8005b2e:	f005 f8ea 	bl	800ad06 <memset>
	uint8_t txtemp[30] = {0,};
 8005b32:	221a      	movs	r2, #26
 8005b34:	2100      	movs	r1, #0
 8005b36:	a809      	add	r0, sp, #36	; 0x24
 8005b38:	9408      	str	r4, [sp, #32]
 8005b3a:	f005 f8e4 	bl	800ad06 <memset>

	switch(Config.state)
 8005b3e:	4c94      	ldr	r4, [pc, #592]	; (8005d90 <_APP_CONFIGSERV_ctrl_loop+0x278>)
 8005b40:	7823      	ldrb	r3, [r4, #0]
 8005b42:	2b05      	cmp	r3, #5
 8005b44:	d809      	bhi.n	8005b5a <_APP_CONFIGSERV_ctrl_loop+0x42>
 8005b46:	4a93      	ldr	r2, [pc, #588]	; (8005d94 <_APP_CONFIGSERV_ctrl_loop+0x27c>)
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	58d3      	ldr	r3, [r2, r3]
 8005b4c:	469f      	mov	pc, r3
	if(1 == Config.reg.state_changed)
 8005b4e:	2220      	movs	r2, #32
 8005b50:	78e3      	ldrb	r3, [r4, #3]
 8005b52:	421a      	tst	r2, r3
 8005b54:	d001      	beq.n	8005b5a <_APP_CONFIGSERV_ctrl_loop+0x42>
		Config.reg.state_changed = 0;
 8005b56:	4393      	bics	r3, r2
 8005b58:	70e3      	strb	r3, [r4, #3]

		default :

		break;
	}
}
 8005b5a:	b010      	add	sp, #64	; 0x40
 8005b5c:	bce0      	pop	{r5, r6, r7}
 8005b5e:	46ba      	mov	sl, r7
 8005b60:	46b1      	mov	r9, r6
 8005b62:	46a8      	mov	r8, r5
 8005b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(1 == Config.reg.state_changed)
 8005b66:	2220      	movs	r2, #32
 8005b68:	78e3      	ldrb	r3, [r4, #3]
 8005b6a:	421a      	tst	r2, r3
 8005b6c:	d167      	bne.n	8005c3e <_APP_CONFIGSERV_ctrl_loop+0x126>
 8005b6e:	4d8a      	ldr	r5, [pc, #552]	; (8005d98 <_APP_CONFIGSERV_ctrl_loop+0x280>)
			if(_TRUE == _LIB_USERDELAY_isfired(&gDelay_fault))
 8005b70:	0028      	movs	r0, r5
 8005b72:	f001 fa73 	bl	800705c <_LIB_USERDELAY_isfired>
 8005b76:	2801      	cmp	r0, #1
 8005b78:	d1ef      	bne.n	8005b5a <_APP_CONFIGSERV_ctrl_loop+0x42>
				_LIB_LOGGING_printf("%%%% CONFIGSERV Fault : delay_OK : #### \r\n");
 8005b7a:	4888      	ldr	r0, [pc, #544]	; (8005d9c <_APP_CONFIGSERV_ctrl_loop+0x284>)
 8005b7c:	f005 f8cc 	bl	800ad18 <iprintf>
				_LIB_USERDELAY_stop(&gDelay_fault);
 8005b80:	0028      	movs	r0, r5
 8005b82:	f001 fa67 	bl	8007054 <_LIB_USERDELAY_stop>
				Config.reg.fault_reset = 1;
 8005b86:	2210      	movs	r2, #16
 8005b88:	78e3      	ldrb	r3, [r4, #3]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	70e3      	strb	r3, [r4, #3]
}
 8005b8e:	e7e4      	b.n	8005b5a <_APP_CONFIGSERV_ctrl_loop+0x42>
	if(1 == Config.reg.state_changed)
 8005b90:	2320      	movs	r3, #32
 8005b92:	78e2      	ldrb	r2, [r4, #3]
 8005b94:	4213      	tst	r3, r2
 8005b96:	d047      	beq.n	8005c28 <_APP_CONFIGSERV_ctrl_loop+0x110>
		Config.reg.state_changed = 0;
 8005b98:	439a      	bics	r2, r3
				step = 0;
 8005b9a:	4b81      	ldr	r3, [pc, #516]	; (8005da0 <_APP_CONFIGSERV_ctrl_loop+0x288>)
		Config.reg.state_changed = 0;
 8005b9c:	70e2      	strb	r2, [r4, #3]
				step = 0;
 8005b9e:	4698      	mov	r8, r3
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	4642      	mov	r2, r8
 8005ba4:	7013      	strb	r3, [r2, #0]
{
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	e003      	b.n	8005bb2 <_APP_CONFIGSERV_ctrl_loop+0x9a>
							i++;
 8005baa:	3101      	adds	r1, #1
					while(i<30)
 8005bac:	291e      	cmp	r1, #30
 8005bae:	d100      	bne.n	8005bb2 <_APP_CONFIGSERV_ctrl_loop+0x9a>
 8005bb0:	e0cb      	b.n	8005d4a <_APP_CONFIGSERV_ctrl_loop+0x232>
						if(Config.read_card_num[i] == 0xFF)
 8005bb2:	1863      	adds	r3, r4, r1
 8005bb4:	7a9b      	ldrb	r3, [r3, #10]
 8005bb6:	2bff      	cmp	r3, #255	; 0xff
 8005bb8:	d1f7      	bne.n	8005baa <_APP_CONFIGSERV_ctrl_loop+0x92>
					if(i == 8)
 8005bba:	2908      	cmp	r1, #8
 8005bbc:	d000      	beq.n	8005bc0 <_APP_CONFIGSERV_ctrl_loop+0xa8>
 8005bbe:	e0c4      	b.n	8005d4a <_APP_CONFIGSERV_ctrl_loop+0x232>
						_LIB_LOGGING_printf("%%%% CONFIGSERV Setting : Step 1 _ OK #### \r\n");
 8005bc0:	4878      	ldr	r0, [pc, #480]	; (8005da4 <_APP_CONFIGSERV_ctrl_loop+0x28c>)
 8005bc2:	f005 f8a9 	bl	800ad18 <iprintf>
						step = 1;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	4642      	mov	r2, r8
 8005bca:	7013      	strb	r3, [r2, #0]
 8005bcc:	e7c5      	b.n	8005b5a <_APP_CONFIGSERV_ctrl_loop+0x42>
	if(1 == Config.reg.state_changed)
 8005bce:	2220      	movs	r2, #32
 8005bd0:	78e3      	ldrb	r3, [r4, #3]
 8005bd2:	421a      	tst	r2, r3
 8005bd4:	d13e      	bne.n	8005c54 <_APP_CONFIGSERV_ctrl_loop+0x13c>
 8005bd6:	4d74      	ldr	r5, [pc, #464]	; (8005da8 <_APP_CONFIGSERV_ctrl_loop+0x290>)
			if(_TRUE == _LIB_USERDELAY_isfired(&gDelay_finish))
 8005bd8:	0028      	movs	r0, r5
 8005bda:	f001 fa3f 	bl	800705c <_LIB_USERDELAY_isfired>
 8005bde:	2801      	cmp	r0, #1
 8005be0:	d1bb      	bne.n	8005b5a <_APP_CONFIGSERV_ctrl_loop+0x42>
				_LIB_LOGGING_printf("%%%% CONFIGSERV Finish : delay_OK : #### \r\n");
 8005be2:	4872      	ldr	r0, [pc, #456]	; (8005dac <_APP_CONFIGSERV_ctrl_loop+0x294>)
 8005be4:	f005 f898 	bl	800ad18 <iprintf>
				_LIB_USERDELAY_stop(&gDelay_finish);
 8005be8:	0028      	movs	r0, r5
 8005bea:	f001 fa33 	bl	8007054 <_LIB_USERDELAY_stop>
				Config.reg.finish_ok = 1;
 8005bee:	2204      	movs	r2, #4
 8005bf0:	78e3      	ldrb	r3, [r4, #3]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	70e3      	strb	r3, [r4, #3]
 8005bf6:	e7b0      	b.n	8005b5a <_APP_CONFIGSERV_ctrl_loop+0x42>
	if(1 == Config.reg.state_changed)
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	78e3      	ldrb	r3, [r4, #3]
 8005bfc:	421a      	tst	r2, r3
 8005bfe:	d004      	beq.n	8005c0a <_APP_CONFIGSERV_ctrl_loop+0xf2>
		Config.reg.state_changed = 0;
 8005c00:	4393      	bics	r3, r2
				_APP_RFID_set_start_tagging(0);
 8005c02:	2000      	movs	r0, #0
		Config.reg.state_changed = 0;
 8005c04:	70e3      	strb	r3, [r4, #3]
				_APP_RFID_set_start_tagging(0);
 8005c06:	f000 fd49 	bl	800669c <_APP_RFID_set_start_tagging>
			ret_value = _APP_RFID_get_tagging_result();
 8005c0a:	f000 fd73 	bl	80066f4 <_APP_RFID_get_tagging_result>
			if(_TRUE == ret_value)
 8005c0e:	2801      	cmp	r0, #1
 8005c10:	d100      	bne.n	8005c14 <_APP_CONFIGSERV_ctrl_loop+0xfc>
 8005c12:	e081      	b.n	8005d18 <_APP_CONFIGSERV_ctrl_loop+0x200>
			else if(_FALSE == ret_value)
 8005c14:	2800      	cmp	r0, #0
 8005c16:	d1a0      	bne.n	8005b5a <_APP_CONFIGSERV_ctrl_loop+0x42>
				_LIB_LOGGING_printf("%%%% CONFIGSERV Ready : fail Card Number. go to fault #### \r\n");
 8005c18:	4865      	ldr	r0, [pc, #404]	; (8005db0 <_APP_CONFIGSERV_ctrl_loop+0x298>)
 8005c1a:	f005 f87d 	bl	800ad18 <iprintf>
				Config.reg.ready_cardtagfail = 1;
 8005c1e:	2220      	movs	r2, #32
 8005c20:	78a3      	ldrb	r3, [r4, #2]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	70a3      	strb	r3, [r4, #2]
 8005c26:	e798      	b.n	8005b5a <_APP_CONFIGSERV_ctrl_loop+0x42>
			switch(step)
 8005c28:	4b5d      	ldr	r3, [pc, #372]	; (8005da0 <_APP_CONFIGSERV_ctrl_loop+0x288>)
 8005c2a:	4698      	mov	r8, r3
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d891      	bhi.n	8005b5a <_APP_CONFIGSERV_ctrl_loop+0x42>
 8005c36:	495f      	ldr	r1, [pc, #380]	; (8005db4 <_APP_CONFIGSERV_ctrl_loop+0x29c>)
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	58cb      	ldr	r3, [r1, r3]
 8005c3c:	469f      	mov	pc, r3
				_LIB_USERDELAY_start(&gDelay_fault,DELAY_RENEW_OFF);
 8005c3e:	4d56      	ldr	r5, [pc, #344]	; (8005d98 <_APP_CONFIGSERV_ctrl_loop+0x280>)
		Config.reg.state_changed = 0;
 8005c40:	4393      	bics	r3, r2
				_LIB_USERDELAY_start(&gDelay_fault,DELAY_RENEW_OFF);
 8005c42:	2100      	movs	r1, #0
 8005c44:	0028      	movs	r0, r5
		Config.reg.state_changed = 0;
 8005c46:	70e3      	strb	r3, [r4, #3]
				_LIB_USERDELAY_start(&gDelay_fault,DELAY_RENEW_OFF);
 8005c48:	f001 f9f4 	bl	8007034 <_LIB_USERDELAY_start>
				_LIB_LOGGING_printf("%%%% CONFIGSERV Fault : delay_start : #### \r\n");
 8005c4c:	485a      	ldr	r0, [pc, #360]	; (8005db8 <_APP_CONFIGSERV_ctrl_loop+0x2a0>)
 8005c4e:	f005 f863 	bl	800ad18 <iprintf>
 8005c52:	e78d      	b.n	8005b70 <_APP_CONFIGSERV_ctrl_loop+0x58>
				_LIB_USERDELAY_start(&gDelay_finish,DELAY_RENEW_OFF);
 8005c54:	4d54      	ldr	r5, [pc, #336]	; (8005da8 <_APP_CONFIGSERV_ctrl_loop+0x290>)
		Config.reg.state_changed = 0;
 8005c56:	4393      	bics	r3, r2
				_LIB_USERDELAY_start(&gDelay_finish,DELAY_RENEW_OFF);
 8005c58:	2100      	movs	r1, #0
 8005c5a:	0028      	movs	r0, r5
		Config.reg.state_changed = 0;
 8005c5c:	70e3      	strb	r3, [r4, #3]
				_LIB_USERDELAY_start(&gDelay_finish,DELAY_RENEW_OFF);
 8005c5e:	f001 f9e9 	bl	8007034 <_LIB_USERDELAY_start>
				_LIB_LOGGING_printf("%%%% CONFIGSERV Finish : delay_start : #### \r\n");
 8005c62:	4856      	ldr	r0, [pc, #344]	; (8005dbc <_APP_CONFIGSERV_ctrl_loop+0x2a4>)
 8005c64:	f005 f858 	bl	800ad18 <iprintf>
 8005c68:	e7b6      	b.n	8005bd8 <_APP_CONFIGSERV_ctrl_loop+0xc0>
			switch(step)
 8005c6a:	2517      	movs	r5, #23
 8005c6c:	2700      	movs	r7, #0
 8005c6e:	466e      	mov	r6, sp
						if(true == ee24_read(MEM_ADDR_CARDNUM_INDEX_LSB(i), rxtemp, 1, 100))
 8005c70:	1fe8      	subs	r0, r5, #7
 8005c72:	b283      	uxth	r3, r0
 8005c74:	469a      	mov	sl, r3
 8005c76:	2201      	movs	r2, #1
 8005c78:	2364      	movs	r3, #100	; 0x64
 8005c7a:	0031      	movs	r1, r6
 8005c7c:	0028      	movs	r0, r5
 8005c7e:	46b9      	mov	r9, r7
 8005c80:	3701      	adds	r7, #1
 8005c82:	f001 fd93 	bl	80077ac <ee24_read>
 8005c86:	2800      	cmp	r0, #0
 8005c88:	d002      	beq.n	8005c90 <_APP_CONFIGSERV_ctrl_loop+0x178>
							if(0xFF == rxtemp[0])
 8005c8a:	7833      	ldrb	r3, [r6, #0]
 8005c8c:	2bff      	cmp	r3, #255	; 0xff
 8005c8e:	d063      	beq.n	8005d58 <_APP_CONFIGSERV_ctrl_loop+0x240>
					for(i = 0; i<MAX_CARDNUM_MEMORY ; i++)
 8005c90:	3510      	adds	r5, #16
 8005c92:	b2ad      	uxth	r5, r5
 8005c94:	2f10      	cmp	r7, #16
 8005c96:	d1eb      	bne.n	8005c70 <_APP_CONFIGSERV_ctrl_loop+0x158>
						_LIB_LOGGING_printf("%%%% CONFIGSERV Setting : Step 3 _ Fail : #### \r\n");
 8005c98:	4849      	ldr	r0, [pc, #292]	; (8005dc0 <_APP_CONFIGSERV_ctrl_loop+0x2a8>)
 8005c9a:	f005 f83d 	bl	800ad18 <iprintf>
						step = -1;
 8005c9e:	23ff      	movs	r3, #255	; 0xff
 8005ca0:	4642      	mov	r2, r8
 8005ca2:	7013      	strb	r3, [r2, #0]
 8005ca4:	e759      	b.n	8005b5a <_APP_CONFIGSERV_ctrl_loop+0x42>
					for(i = 0; i<MAX_CARDNUM_MEMORY ; i++)
 8005ca6:	2788      	movs	r7, #136	; 0x88
			switch(step)
 8005ca8:	2510      	movs	r5, #16
 8005caa:	466e      	mov	r6, sp
					for(i = 0; i<MAX_CARDNUM_MEMORY ; i++)
 8005cac:	007f      	lsls	r7, r7, #1
 8005cae:	e003      	b.n	8005cb8 <_APP_CONFIGSERV_ctrl_loop+0x1a0>
 8005cb0:	3510      	adds	r5, #16
 8005cb2:	b2ad      	uxth	r5, r5
 8005cb4:	42bd      	cmp	r5, r7
 8005cb6:	d03b      	beq.n	8005d30 <_APP_CONFIGSERV_ctrl_loop+0x218>
						if(true == ee24_read(MEM_ADDR_CARDNUM_INDEX_MSB(i), rxtemp, 16, 100))
 8005cb8:	2364      	movs	r3, #100	; 0x64
 8005cba:	2210      	movs	r2, #16
 8005cbc:	0031      	movs	r1, r6
 8005cbe:	0028      	movs	r0, r5
 8005cc0:	f001 fd74 	bl	80077ac <ee24_read>
 8005cc4:	2800      	cmp	r0, #0
 8005cc6:	d0f3      	beq.n	8005cb0 <_APP_CONFIGSERV_ctrl_loop+0x198>
							for(j = 0; j<8;j++)
 8005cc8:	2300      	movs	r3, #0
								if(Config.read_card_num[j] != rxtemp[8+j])
 8005cca:	18e1      	adds	r1, r4, r3
 8005ccc:	18f2      	adds	r2, r6, r3
 8005cce:	7a89      	ldrb	r1, [r1, #10]
 8005cd0:	7a12      	ldrb	r2, [r2, #8]
 8005cd2:	4291      	cmp	r1, r2
 8005cd4:	d1ec      	bne.n	8005cb0 <_APP_CONFIGSERV_ctrl_loop+0x198>
							for(j = 0; j<8;j++)
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	2b08      	cmp	r3, #8
 8005cda:	d1f6      	bne.n	8005cca <_APP_CONFIGSERV_ctrl_loop+0x1b2>
								_LIB_LOGGING_printf("%%%% CONFIGSERV Setting : Step 2 _ is reduplication. go to finish #### \r\n");
 8005cdc:	4839      	ldr	r0, [pc, #228]	; (8005dc4 <_APP_CONFIGSERV_ctrl_loop+0x2ac>)
 8005cde:	f005 f81b 	bl	800ad18 <iprintf>
								step = 3;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	4642      	mov	r2, r8
 8005ce6:	7013      	strb	r3, [r2, #0]
					if(step != 3)
 8005ce8:	e737      	b.n	8005b5a <_APP_CONFIGSERV_ctrl_loop+0x42>
					if(0 == Config.reg.setting_fail)
 8005cea:	07d3      	lsls	r3, r2, #31
 8005cec:	d500      	bpl.n	8005cf0 <_APP_CONFIGSERV_ctrl_loop+0x1d8>
 8005cee:	e734      	b.n	8005b5a <_APP_CONFIGSERV_ctrl_loop+0x42>
						Config.reg.setting_fail = 1;
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	78e3      	ldrb	r3, [r4, #3]
						_LIB_LOGGING_printf("%%%% CONFIGSERV Setting : exception _ fault : #### \r\n");
 8005cf4:	4834      	ldr	r0, [pc, #208]	; (8005dc8 <_APP_CONFIGSERV_ctrl_loop+0x2b0>)
						Config.reg.setting_fail = 1;
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	70e3      	strb	r3, [r4, #3]
						_LIB_LOGGING_printf("%%%% CONFIGSERV Setting : exception _ fault : #### \r\n");
 8005cfa:	f005 f80d 	bl	800ad18 <iprintf>
 8005cfe:	e72c      	b.n	8005b5a <_APP_CONFIGSERV_ctrl_loop+0x42>
					if(0 == Config.reg.setting_ok)
 8005d00:	78a3      	ldrb	r3, [r4, #2]
 8005d02:	2b7f      	cmp	r3, #127	; 0x7f
 8005d04:	d900      	bls.n	8005d08 <_APP_CONFIGSERV_ctrl_loop+0x1f0>
 8005d06:	e728      	b.n	8005b5a <_APP_CONFIGSERV_ctrl_loop+0x42>
						Config.reg.setting_ok = 1;
 8005d08:	2280      	movs	r2, #128	; 0x80
 8005d0a:	4252      	negs	r2, r2
 8005d0c:	4313      	orrs	r3, r2
						_LIB_LOGGING_printf("%%%% CONFIGSERV Setting : Step 4 _ finish : #### \r\n");
 8005d0e:	482f      	ldr	r0, [pc, #188]	; (8005dcc <_APP_CONFIGSERV_ctrl_loop+0x2b4>)
						Config.reg.setting_ok = 1;
 8005d10:	70a3      	strb	r3, [r4, #2]
						_LIB_LOGGING_printf("%%%% CONFIGSERV Setting : Step 4 _ finish : #### \r\n");
 8005d12:	f005 f801 	bl	800ad18 <iprintf>
 8005d16:	e720      	b.n	8005b5a <_APP_CONFIGSERV_ctrl_loop+0x42>
				_APP_RFID_get_card_number(Config.read_card_num);
 8005d18:	0020      	movs	r0, r4
 8005d1a:	300a      	adds	r0, #10
 8005d1c:	f000 fcfc 	bl	8006718 <_APP_RFID_get_card_number>
				_LIB_LOGGING_printf("%%%% CONFIGSERV Ready : Read Card Number #### \r\n");
 8005d20:	482b      	ldr	r0, [pc, #172]	; (8005dd0 <_APP_CONFIGSERV_ctrl_loop+0x2b8>)
 8005d22:	f004 fff9 	bl	800ad18 <iprintf>
				Config.reg.ready_cardtag = 1;
 8005d26:	2210      	movs	r2, #16
 8005d28:	78a3      	ldrb	r3, [r4, #2]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	70a3      	strb	r3, [r4, #2]
 8005d2e:	e714      	b.n	8005b5a <_APP_CONFIGSERV_ctrl_loop+0x42>
					if(step != 3)
 8005d30:	4643      	mov	r3, r8
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	b25b      	sxtb	r3, r3
 8005d36:	2b03      	cmp	r3, #3
 8005d38:	d100      	bne.n	8005d3c <_APP_CONFIGSERV_ctrl_loop+0x224>
 8005d3a:	e70e      	b.n	8005b5a <_APP_CONFIGSERV_ctrl_loop+0x42>
							_LIB_LOGGING_printf("%%%% CONFIGSERV Setting : Step 2 _ is new. #### \r\n");
 8005d3c:	4825      	ldr	r0, [pc, #148]	; (8005dd4 <_APP_CONFIGSERV_ctrl_loop+0x2bc>)
 8005d3e:	f004 ffeb 	bl	800ad18 <iprintf>
							step = 2;
 8005d42:	2302      	movs	r3, #2
 8005d44:	4642      	mov	r2, r8
 8005d46:	7013      	strb	r3, [r2, #0]
 8005d48:	e707      	b.n	8005b5a <_APP_CONFIGSERV_ctrl_loop+0x42>
						_LIB_LOGGING_printf("%%%% CONFIGSERV Setting : Step 1 _ Fail : %d #### \r\n",i);
 8005d4a:	4823      	ldr	r0, [pc, #140]	; (8005dd8 <_APP_CONFIGSERV_ctrl_loop+0x2c0>)
 8005d4c:	f004 ffe4 	bl	800ad18 <iprintf>
						step = -1;
 8005d50:	23ff      	movs	r3, #255	; 0xff
 8005d52:	4642      	mov	r2, r8
 8005d54:	7013      	strb	r3, [r2, #0]
 8005d56:	e700      	b.n	8005b5a <_APP_CONFIGSERV_ctrl_loop+0x42>
								txtemp[0] = 0x00;
 8005d58:	2300      	movs	r3, #0
								txtemp[4] = 0x00;
 8005d5a:	a908      	add	r1, sp, #32
 8005d5c:	808b      	strh	r3, [r1, #4]
								txtemp[6] = 0x00;
 8005d5e:	718b      	strb	r3, [r1, #6]
								txtemp[0] = 0x00;
 8005d60:	9308      	str	r3, [sp, #32]
								txtemp[8] = Config.read_card_num[0];
 8005d62:	8963      	ldrh	r3, [r4, #10]
								ee24_write(MEM_ADDR_CARDNUM_INDEX_MSB(i), txtemp, 16, 100);
 8005d64:	2210      	movs	r2, #16
								txtemp[8] = Config.read_card_num[0];
 8005d66:	810b      	strh	r3, [r1, #8]
								txtemp[10] = Config.read_card_num[2];
 8005d68:	89a3      	ldrh	r3, [r4, #12]
								ee24_write(MEM_ADDR_CARDNUM_INDEX_MSB(i), txtemp, 16, 100);
 8005d6a:	4650      	mov	r0, sl
								txtemp[10] = Config.read_card_num[2];
 8005d6c:	814b      	strh	r3, [r1, #10]
								txtemp[12] = Config.read_card_num[4];
 8005d6e:	89e3      	ldrh	r3, [r4, #14]
								txtemp[7] = (i+1);
 8005d70:	71cf      	strb	r7, [r1, #7]
								txtemp[12] = Config.read_card_num[4];
 8005d72:	818b      	strh	r3, [r1, #12]
								txtemp[14] = Config.read_card_num[6];
 8005d74:	8a23      	ldrh	r3, [r4, #16]
 8005d76:	81cb      	strh	r3, [r1, #14]
								ee24_write(MEM_ADDR_CARDNUM_INDEX_MSB(i), txtemp, 16, 100);
 8005d78:	2364      	movs	r3, #100	; 0x64
 8005d7a:	f001 fd0b 	bl	8007794 <ee24_write>
						_LIB_LOGGING_printf("%%%% CONFIGSERV Setting : Step 3 _ CARDNUM_save ok : %d : #### \r\n", i);
 8005d7e:	4649      	mov	r1, r9
 8005d80:	4816      	ldr	r0, [pc, #88]	; (8005ddc <_APP_CONFIGSERV_ctrl_loop+0x2c4>)
 8005d82:	f004 ffc9 	bl	800ad18 <iprintf>
						step = 3;
 8005d86:	2303      	movs	r3, #3
 8005d88:	4642      	mov	r2, r8
 8005d8a:	7013      	strb	r3, [r2, #0]
 8005d8c:	e6e5      	b.n	8005b5a <_APP_CONFIGSERV_ctrl_loop+0x42>
 8005d8e:	46c0      	nop			; (mov r8, r8)
 8005d90:	20000320 	.word	0x20000320
 8005d94:	0800d75c 	.word	0x0800d75c
 8005d98:	20000354 	.word	0x20000354
 8005d9c:	0800d6b0 	.word	0x0800d6b0
 8005da0:	2000036c 	.word	0x2000036c
 8005da4:	0800d4d8 	.word	0x0800d4d8
 8005da8:	20000360 	.word	0x20000360
 8005dac:	0800d654 	.word	0x0800d654
 8005db0:	0800d498 	.word	0x0800d498
 8005db4:	0800d774 	.word	0x0800d774
 8005db8:	0800d680 	.word	0x0800d680
 8005dbc:	0800d624 	.word	0x0800d624
 8005dc0:	0800d728 	.word	0x0800d728
 8005dc4:	0800d6dc 	.word	0x0800d6dc
 8005dc8:	0800d5ec 	.word	0x0800d5ec
 8005dcc:	0800d5b8 	.word	0x0800d5b8
 8005dd0:	0800d464 	.word	0x0800d464
 8005dd4:	0800d540 	.word	0x0800d540
 8005dd8:	0800d508 	.word	0x0800d508
 8005ddc:	0800d574 	.word	0x0800d574

08005de0 <_APP_CONFIGSERV_display_loop>:

void _APP_CONFIGSERV_display_loop()
{
	switch(Config.state)
 8005de0:	4b0e      	ldr	r3, [pc, #56]	; (8005e1c <_APP_CONFIGSERV_display_loop+0x3c>)
{
 8005de2:	b510      	push	{r4, lr}
	switch(Config.state)
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	2b03      	cmp	r3, #3
 8005de8:	d00f      	beq.n	8005e0a <_APP_CONFIGSERV_display_loop+0x2a>
 8005dea:	d907      	bls.n	8005dfc <_APP_CONFIGSERV_display_loop+0x1c>
 8005dec:	2b04      	cmp	r3, #4
 8005dee:	d010      	beq.n	8005e12 <_APP_CONFIGSERV_display_loop+0x32>
 8005df0:	2b05      	cmp	r3, #5
 8005df2:	d102      	bne.n	8005dfa <_APP_CONFIGSERV_display_loop+0x1a>
		case C_Finish :
			_MW_INDILED_sled_ctl(GREEN);
		break;

		case C_Fault :
			_MW_INDILED_sled_ctl(RED);
 8005df4:	2001      	movs	r0, #1
 8005df6:	f001 ff01 	bl	8007bfc <_MW_INDILED_sled_ctl>

		default :

		break;
	}
}
 8005dfa:	bd10      	pop	{r4, pc}
	switch(Config.state)
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d8fb      	bhi.n	8005dfa <_APP_CONFIGSERV_display_loop+0x1a>
			_MW_INDILED_sled_ctl(YELLOW);
 8005e02:	2004      	movs	r0, #4
 8005e04:	f001 fefa 	bl	8007bfc <_MW_INDILED_sled_ctl>
		break;
 8005e08:	e7f7      	b.n	8005dfa <_APP_CONFIGSERV_display_loop+0x1a>
			_MW_INDILED_sled_ctl(BLUE);
 8005e0a:	2003      	movs	r0, #3
 8005e0c:	f001 fef6 	bl	8007bfc <_MW_INDILED_sled_ctl>
		break;
 8005e10:	e7f3      	b.n	8005dfa <_APP_CONFIGSERV_display_loop+0x1a>
			_MW_INDILED_sled_ctl(GREEN);
 8005e12:	2002      	movs	r0, #2
 8005e14:	f001 fef2 	bl	8007bfc <_MW_INDILED_sled_ctl>
		break;
 8005e18:	e7ef      	b.n	8005dfa <_APP_CONFIGSERV_display_loop+0x1a>
 8005e1a:	46c0      	nop			; (mov r8, r8)
 8005e1c:	20000320 	.word	0x20000320

08005e20 <_APP_CONFIGSERV_process>:
	_APP_CONFIGSERV_state_machine();
	_APP_CONFIGSERV_ctrl_loop();
}

void _APP_CONFIGSERV_process()
{
 8005e20:	b510      	push	{r4, lr}
	_LIB_USERDELAY_start(&gDelay_configserv_periodic_loop_time, DELAY_RENEW_OFF);
 8005e22:	4c0e      	ldr	r4, [pc, #56]	; (8005e5c <_APP_CONFIGSERV_process+0x3c>)
 8005e24:	2100      	movs	r1, #0
 8005e26:	0020      	movs	r0, r4
 8005e28:	f001 f904 	bl	8007034 <_LIB_USERDELAY_start>

	if(0 == Config.reg.enable)
 8005e2c:	4b0c      	ldr	r3, [pc, #48]	; (8005e60 <_APP_CONFIGSERV_process+0x40>)
 8005e2e:	789b      	ldrb	r3, [r3, #2]
 8005e30:	07db      	lsls	r3, r3, #31
 8005e32:	d400      	bmi.n	8005e36 <_APP_CONFIGSERV_process+0x16>

		_APP_CONFIGSERV_display_loop();

	  	_LIB_USERDELAY_start(&gDelay_configserv_periodic_loop_time, DELAY_RENEW_ON);
    }
}
 8005e34:	bd10      	pop	{r4, pc}
    if(_LIB_USERDELAY_isfired(&gDelay_configserv_periodic_loop_time))
 8005e36:	0020      	movs	r0, r4
 8005e38:	f001 f910 	bl	800705c <_LIB_USERDELAY_isfired>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	d0f9      	beq.n	8005e34 <_APP_CONFIGSERV_process+0x14>
	_APP_CONFIGSERV_init();
 8005e40:	f7ff fd8e 	bl	8005960 <_APP_CONFIGSERV_init>
	_APP_CONFIGSERV_state_machine();
 8005e44:	f7ff fdf8 	bl	8005a38 <_APP_CONFIGSERV_state_machine>
	_APP_CONFIGSERV_ctrl_loop();
 8005e48:	f7ff fe66 	bl	8005b18 <_APP_CONFIGSERV_ctrl_loop>
		_APP_CONFIGSERV_display_loop();
 8005e4c:	f7ff ffc8 	bl	8005de0 <_APP_CONFIGSERV_display_loop>
	  	_LIB_USERDELAY_start(&gDelay_configserv_periodic_loop_time, DELAY_RENEW_ON);
 8005e50:	2101      	movs	r1, #1
 8005e52:	0020      	movs	r0, r4
 8005e54:	f001 f8ee 	bl	8007034 <_LIB_USERDELAY_start>
 8005e58:	e7ec      	b.n	8005e34 <_APP_CONFIGSERV_process+0x14>
 8005e5a:	46c0      	nop			; (mov r8, r8)
 8005e5c:	20000348 	.word	0x20000348
 8005e60:	20000320 	.word	0x20000320

08005e64 <_APP_CHARGSERV_check_Irms_loop>:
#if ((_Calc_IRMS_FUNC_VER_) == 2)

uint32_t delta_t_total = 0;

void _APP_CHARGSERV_check_Irms_loop()
{
 8005e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e66:	464e      	mov	r6, r9
 8005e68:	46de      	mov	lr, fp
 8005e6a:	4657      	mov	r7, sl
 8005e6c:	4645      	mov	r5, r8
 8005e6e:	b5e0      	push	{r5, r6, r7, lr}
	static uint8_t step = 0;

	uint16_t temp = gADCData[ADC_AC_A_INDEX_];
 8005e70:	4b45      	ldr	r3, [pc, #276]	; (8005f88 <_APP_CHARGSERV_check_Irms_loop+0x124>)
 8005e72:	889c      	ldrh	r4, [r3, #4]

	instant_current_final = instant_current * instant_current;



	switch(step)
 8005e74:	4b45      	ldr	r3, [pc, #276]	; (8005f8c <_APP_CHARGSERV_check_Irms_loop+0x128>)
	uint16_t temp = gADCData[ADC_AC_A_INDEX_];
 8005e76:	b2a4      	uxth	r4, r4
	switch(step)
 8005e78:	4699      	mov	r9, r3
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d06c      	beq.n	8005f5a <_APP_CHARGSERV_check_Irms_loop+0xf6>
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d13a      	bne.n	8005efa <_APP_CHARGSERV_check_Irms_loop+0x96>
			//delta_t_count = 0;


			step = 1;
		case 1:
			t_curr = _LIB_USERDLEAY_gettick();
 8005e84:	f001 f8c6 	bl	8007014 <_LIB_USERDLEAY_gettick>
			delta_t = calc_delta_t_100us(t_bak, t_curr);
 8005e88:	4b41      	ldr	r3, [pc, #260]	; (8005f90 <_APP_CHARGSERV_check_Irms_loop+0x12c>)
			t_curr = _LIB_USERDLEAY_gettick();
 8005e8a:	4683      	mov	fp, r0
			delta_t = calc_delta_t_100us(t_bak, t_curr);
 8005e8c:	469a      	mov	sl, r3
		return (0xFFFFFFFF - prev + 1 + t);
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	1ac3      	subs	r3, r0, r3
	irms_adc_value = (double)temp;
 8005e92:	0020      	movs	r0, r4
		return (0xFFFFFFFF - prev + 1 + t);
 8005e94:	4698      	mov	r8, r3
	irms_adc_value = (double)temp;
 8005e96:	f7fc fe23 	bl	8002ae0 <__aeabi_ui2d>
	instant_current = INSTANT_CURRENT_CONSTANT * irms_adc_value_final;
 8005e9a:	2280      	movs	r2, #128	; 0x80
 8005e9c:	4b3d      	ldr	r3, [pc, #244]	; (8005f94 <_APP_CHARGSERV_check_Irms_loop+0x130>)
 8005e9e:	0612      	lsls	r2, r2, #24
 8005ea0:	f7fb ff9c 	bl	8001ddc <__aeabi_dmul>
 8005ea4:	0004      	movs	r4, r0

			integral_instant_current = integral_instant_current + (instant_current_final * (double)delta_t);
 8005ea6:	4640      	mov	r0, r8
	instant_current = INSTANT_CURRENT_CONSTANT * irms_adc_value_final;
 8005ea8:	000d      	movs	r5, r1
			integral_instant_current = integral_instant_current + (instant_current_final * (double)delta_t);
 8005eaa:	f7fc fe19 	bl	8002ae0 <__aeabi_ui2d>
	instant_current_final = instant_current * instant_current;
 8005eae:	0022      	movs	r2, r4
			integral_instant_current = integral_instant_current + (instant_current_final * (double)delta_t);
 8005eb0:	0006      	movs	r6, r0
 8005eb2:	000f      	movs	r7, r1
	instant_current_final = instant_current * instant_current;
 8005eb4:	002b      	movs	r3, r5
 8005eb6:	0020      	movs	r0, r4
 8005eb8:	0029      	movs	r1, r5
 8005eba:	f7fb ff8f 	bl	8001ddc <__aeabi_dmul>
 8005ebe:	0002      	movs	r2, r0
 8005ec0:	000b      	movs	r3, r1
			integral_instant_current = integral_instant_current + (instant_current_final * (double)delta_t);
 8005ec2:	0030      	movs	r0, r6
 8005ec4:	0039      	movs	r1, r7
 8005ec6:	f7fb ff89 	bl	8001ddc <__aeabi_dmul>
 8005eca:	4e33      	ldr	r6, [pc, #204]	; (8005f98 <_APP_CHARGSERV_check_Irms_loop+0x134>)
 8005ecc:	6832      	ldr	r2, [r6, #0]
 8005ece:	6873      	ldr	r3, [r6, #4]
 8005ed0:	f7fb f814 	bl	8000efc <__aeabi_dadd>
 8005ed4:	0004      	movs	r4, r0
 8005ed6:	000d      	movs	r5, r1
			delta_t_total = delta_t_total + delta_t;
 8005ed8:	4f30      	ldr	r7, [pc, #192]	; (8005f9c <_APP_CHARGSERV_check_Irms_loop+0x138>)
			delta_t_count++;
 8005eda:	4a31      	ldr	r2, [pc, #196]	; (8005fa0 <_APP_CHARGSERV_check_Irms_loop+0x13c>)
			delta_t_total = delta_t_total + delta_t;
 8005edc:	683b      	ldr	r3, [r7, #0]
			integral_instant_current = integral_instant_current + (instant_current_final * (double)delta_t);
 8005ede:	6034      	str	r4, [r6, #0]
 8005ee0:	6075      	str	r5, [r6, #4]
			delta_t_total = delta_t_total + delta_t;
 8005ee2:	4443      	add	r3, r8
 8005ee4:	0018      	movs	r0, r3
 8005ee6:	603b      	str	r3, [r7, #0]
			delta_t_count++;
 8005ee8:	7813      	ldrb	r3, [r2, #0]
 8005eea:	3301      	adds	r3, #1
 8005eec:	b2db      	uxtb	r3, r3

			if(16 <= delta_t_count)
 8005eee:	2b0f      	cmp	r3, #15
 8005ef0:	d809      	bhi.n	8005f06 <_APP_CHARGSERV_check_Irms_loop+0xa2>
				}

				integral_instant_current = 0;
				delta_t_total = 0;

				step = 0;
 8005ef2:	7013      	strb	r3, [r2, #0]
			}

			t_bak = t_curr;
 8005ef4:	4653      	mov	r3, sl
 8005ef6:	465a      	mov	r2, fp
 8005ef8:	601a      	str	r2, [r3, #0]
		default:

			break;
	}

}
 8005efa:	bcf0      	pop	{r4, r5, r6, r7}
 8005efc:	46bb      	mov	fp, r7
 8005efe:	46b2      	mov	sl, r6
 8005f00:	46a9      	mov	r9, r5
 8005f02:	46a0      	mov	r8, r4
 8005f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				delta_t_count = 0;
 8005f06:	2300      	movs	r3, #0
 8005f08:	7013      	strb	r3, [r2, #0]
 8005f0a:	4698      	mov	r8, r3
				per_t_total_intergral_current = integral_instant_current / ((double)delta_t_total);
 8005f0c:	f7fc fde8 	bl	8002ae0 <__aeabi_ui2d>
 8005f10:	0002      	movs	r2, r0
 8005f12:	000b      	movs	r3, r1
 8005f14:	0020      	movs	r0, r4
 8005f16:	0029      	movs	r1, r5
 8005f18:	f7fb fb5a 	bl	80015d0 <__aeabi_ddiv>
				I_rms = sqrt(per_t_total_intergral_current);
 8005f1c:	f005 ff16 	bl	800bd4c <sqrt>
				I_rms_U32 = (uint32_t)(I_rms * 1000);
 8005f20:	2200      	movs	r2, #0
 8005f22:	4b20      	ldr	r3, [pc, #128]	; (8005fa4 <_APP_CHARGSERV_check_Irms_loop+0x140>)
 8005f24:	f7fb ff5a 	bl	8001ddc <__aeabi_dmul>
 8005f28:	f7fa f9da 	bl	80002e0 <__aeabi_d2uiz>
 8005f2c:	0001      	movs	r1, r0
				I_rms_U32_LPF = _LIB_LPF_calc(&Irms_calc, I_rms_U32);
 8005f2e:	481e      	ldr	r0, [pc, #120]	; (8005fa8 <_APP_CHARGSERV_check_Irms_loop+0x144>)
 8005f30:	f000 ffaa 	bl	8006e88 <_LIB_LPF_calc>
 8005f34:	0004      	movs	r4, r0
				_APP_CHARGSERV_set_current_rms_A(I_rms_U32_LPF);
 8005f36:	f7ff f869 	bl	800500c <_APP_CHARGSERV_set_current_rms_A>
				if(dtemp > 1000)
 8005f3a:	21fa      	movs	r1, #250	; 0xfa
 8005f3c:	4a1b      	ldr	r2, [pc, #108]	; (8005fac <_APP_CHARGSERV_check_Irms_loop+0x148>)
 8005f3e:	0089      	lsls	r1, r1, #2
 8005f40:	8813      	ldrh	r3, [r2, #0]
 8005f42:	428b      	cmp	r3, r1
 8005f44:	d80d      	bhi.n	8005f62 <_APP_CHARGSERV_check_Irms_loop+0xfe>
					dtemp++;
 8005f46:	3301      	adds	r3, #1
 8005f48:	8013      	strh	r3, [r2, #0]
				integral_instant_current = 0;
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	6032      	str	r2, [r6, #0]
 8005f50:	6073      	str	r3, [r6, #4]
				delta_t_total = 0;
 8005f52:	2300      	movs	r3, #0
				step = 0;
 8005f54:	464a      	mov	r2, r9
				delta_t_total = 0;
 8005f56:	603b      	str	r3, [r7, #0]
				step = 0;
 8005f58:	e7cb      	b.n	8005ef2 <_APP_CHARGSERV_check_Irms_loop+0x8e>
			step = 1;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	464a      	mov	r2, r9
 8005f5e:	7013      	strb	r3, [r2, #0]
 8005f60:	e790      	b.n	8005e84 <_APP_CHARGSERV_check_Irms_loop+0x20>
					dtemp = 0;
 8005f62:	4643      	mov	r3, r8
					printf("p:%ld\r\n",(uint32_t)integral_instant_current);
 8005f64:	6830      	ldr	r0, [r6, #0]
 8005f66:	6871      	ldr	r1, [r6, #4]
					dtemp = 0;
 8005f68:	8013      	strh	r3, [r2, #0]
					printf("p:%ld\r\n",(uint32_t)integral_instant_current);
 8005f6a:	f7fa f9b9 	bl	80002e0 <__aeabi_d2uiz>
 8005f6e:	0001      	movs	r1, r0
 8005f70:	480f      	ldr	r0, [pc, #60]	; (8005fb0 <_APP_CHARGSERV_check_Irms_loop+0x14c>)
 8005f72:	f004 fed1 	bl	800ad18 <iprintf>
					printf("t:%ld\r\n",(uint32_t)delta_t_total);
 8005f76:	6839      	ldr	r1, [r7, #0]
 8005f78:	480e      	ldr	r0, [pc, #56]	; (8005fb4 <_APP_CHARGSERV_check_Irms_loop+0x150>)
 8005f7a:	f004 fecd 	bl	800ad18 <iprintf>
					printf("I_RMS(x1000):%ld\r\n",I_rms_U32_LPF);
 8005f7e:	0021      	movs	r1, r4
 8005f80:	480d      	ldr	r0, [pc, #52]	; (8005fb8 <_APP_CHARGSERV_check_Irms_loop+0x154>)
 8005f82:	f004 fec9 	bl	800ad18 <iprintf>
 8005f86:	e7e0      	b.n	8005f4a <_APP_CHARGSERV_check_Irms_loop+0xe6>
 8005f88:	20000a64 	.word	0x20000a64
 8005f8c:	20000858 	.word	0x20000858
 8005f90:	2000085c 	.word	0x2000085c
 8005f94:	3fa8c7e2 	.word	0x3fa8c7e2
 8005f98:	20000850 	.word	0x20000850
 8005f9c:	2000083c 	.word	0x2000083c
 8005fa0:	2000083a 	.word	0x2000083a
 8005fa4:	408f4000 	.word	0x408f4000
 8005fa8:	20000370 	.word	0x20000370
 8005fac:	20000840 	.word	0x20000840
 8005fb0:	0800d788 	.word	0x0800d788
 8005fb4:	0800d790 	.word	0x0800d790
 8005fb8:	0800d798 	.word	0x0800d798

08005fbc <_APP_CHARGSERV_check_Vrms_loop>:
 *
 */

#if 1
void _APP_CHARGSERV_check_Vrms_loop()
{
 8005fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fbe:	46c6      	mov	lr, r8
	double vrms_adc_input_voltage = (((vrms_adc_value / 4096.0F) * (3.3F)) + (1.28F));
#endif

	double vrms_voltage = ((vrms_adc_input_voltage * 10000000.0F) / 1091.0F);

	adc_temp[adc_temp_index++] = (uint32_t)vrms_voltage;
 8005fc0:	4e2a      	ldr	r6, [pc, #168]	; (800606c <_APP_CHARGSERV_check_Vrms_loop+0xb0>)
	uint16_t temp = gADCData[ADC_AC_V_INDEX_];
 8005fc2:	4f2b      	ldr	r7, [pc, #172]	; (8006070 <_APP_CHARGSERV_check_Vrms_loop+0xb4>)
	adc_temp[adc_temp_index++] = (uint32_t)vrms_voltage;
 8005fc4:	8833      	ldrh	r3, [r6, #0]
	uint16_t temp = gADCData[ADC_AC_V_INDEX_];
 8005fc6:	8838      	ldrh	r0, [r7, #0]
	adc_temp[adc_temp_index++] = (uint32_t)vrms_voltage;
 8005fc8:	1c5d      	adds	r5, r3, #1
 8005fca:	b2ad      	uxth	r5, r5
{
 8005fcc:	b500      	push	{lr}
	adc_temp[adc_temp_index++] = (uint32_t)vrms_voltage;
 8005fce:	009b      	lsls	r3, r3, #2
	uint16_t temp = gADCData[ADC_AC_V_INDEX_];
 8005fd0:	b280      	uxth	r0, r0
	adc_temp[adc_temp_index++] = (uint32_t)vrms_voltage;
 8005fd2:	8035      	strh	r5, [r6, #0]
 8005fd4:	4698      	mov	r8, r3
	double vrms_adc_value = (double)temp;
 8005fd6:	f7fc fd83 	bl	8002ae0 <__aeabi_ui2d>
	double vrms_adc_input_voltage = (((vrms_adc_value / 4096.0F) * (3.3F)) + (1.28F));
 8005fda:	2200      	movs	r2, #0
 8005fdc:	4b25      	ldr	r3, [pc, #148]	; (8006074 <_APP_CHARGSERV_check_Vrms_loop+0xb8>)
 8005fde:	f7fb fefd 	bl	8001ddc <__aeabi_dmul>
 8005fe2:	22c0      	movs	r2, #192	; 0xc0
 8005fe4:	4b24      	ldr	r3, [pc, #144]	; (8006078 <_APP_CHARGSERV_check_Vrms_loop+0xbc>)
 8005fe6:	05d2      	lsls	r2, r2, #23
 8005fe8:	f7fb fef8 	bl	8001ddc <__aeabi_dmul>
 8005fec:	2280      	movs	r2, #128	; 0x80
 8005fee:	4b23      	ldr	r3, [pc, #140]	; (800607c <_APP_CHARGSERV_check_Vrms_loop+0xc0>)
 8005ff0:	05d2      	lsls	r2, r2, #23
 8005ff2:	f7fa ff83 	bl	8000efc <__aeabi_dadd>
	double vrms_voltage = ((vrms_adc_input_voltage * 10000000.0F) / 1091.0F);
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	4b21      	ldr	r3, [pc, #132]	; (8006080 <_APP_CHARGSERV_check_Vrms_loop+0xc4>)
 8005ffa:	f7fb feef 	bl	8001ddc <__aeabi_dmul>
 8005ffe:	4b21      	ldr	r3, [pc, #132]	; (8006084 <_APP_CHARGSERV_check_Vrms_loop+0xc8>)
 8006000:	2200      	movs	r2, #0
 8006002:	f7fb fae5 	bl	80015d0 <__aeabi_ddiv>
	adc_temp[adc_temp_index++] = (uint32_t)vrms_voltage;
 8006006:	f7fa f96b 	bl	80002e0 <__aeabi_d2uiz>
 800600a:	4643      	mov	r3, r8
 800600c:	4c1e      	ldr	r4, [pc, #120]	; (8006088 <_APP_CHARGSERV_check_Vrms_loop+0xcc>)
 800600e:	50e0      	str	r0, [r4, r3]
	if(adc_temp_index >= 300)	adc_temp_index = 0;
 8006010:	2396      	movs	r3, #150	; 0x96
 8006012:	005b      	lsls	r3, r3, #1
 8006014:	429d      	cmp	r5, r3
 8006016:	d301      	bcc.n	800601c <_APP_CHARGSERV_check_Vrms_loop+0x60>
 8006018:	2300      	movs	r3, #0
 800601a:	8033      	strh	r3, [r6, #0]


	for(int i = 0; i<300; i++)
 800601c:	2396      	movs	r3, #150	; 0x96
	uint32_t adc_temp_upper = 0;
 800601e:	2100      	movs	r1, #0
 8006020:	00db      	lsls	r3, r3, #3
 8006022:	18e2      	adds	r2, r4, r3
	{
		if(adc_temp[i] > adc_temp_upper)	adc_temp_upper = adc_temp[i];
 8006024:	6823      	ldr	r3, [r4, #0]
 8006026:	4299      	cmp	r1, r3
 8006028:	d200      	bcs.n	800602c <_APP_CHARGSERV_check_Vrms_loop+0x70>
 800602a:	0019      	movs	r1, r3
	for(int i = 0; i<300; i++)
 800602c:	3404      	adds	r4, #4
 800602e:	4294      	cmp	r4, r2
 8006030:	d1f8      	bne.n	8006024 <_APP_CHARGSERV_check_Vrms_loop+0x68>

#if	((_VRMS_IRMS_CALC_LPF_FILTER_) == 0)
	Charger.current_V_rms = adc_temp_upper;
#else

	adc_temp_lpf = _LIB_LPF_calc(&Vrms_calc, adc_temp_upper);
 8006032:	4816      	ldr	r0, [pc, #88]	; (800608c <_APP_CHARGSERV_check_Vrms_loop+0xd0>)
 8006034:	f000 ff28 	bl	8006e88 <_LIB_LPF_calc>
 8006038:	0004      	movs	r4, r0

	_APP_CHARGSERV_set_voltage_rms_V(adc_temp_lpf);
 800603a:	f7fe ffe1 	bl	8005000 <_APP_CHARGSERV_set_voltage_rms_V>
#endif

#if 1
	dtemp++;
 800603e:	4a14      	ldr	r2, [pc, #80]	; (8006090 <_APP_CHARGSERV_check_Vrms_loop+0xd4>)

	if(dtemp > 5000)
 8006040:	4914      	ldr	r1, [pc, #80]	; (8006094 <_APP_CHARGSERV_check_Vrms_loop+0xd8>)
	dtemp++;
 8006042:	8813      	ldrh	r3, [r2, #0]
 8006044:	3301      	adds	r3, #1
 8006046:	b29b      	uxth	r3, r3
	if(dtemp > 5000)
 8006048:	428b      	cmp	r3, r1
 800604a:	d803      	bhi.n	8006054 <_APP_CHARGSERV_check_Vrms_loop+0x98>
	dtemp++;
 800604c:	8013      	strh	r3, [r2, #0]
		printf("VRMS : %ld \r\n", adc_temp_lpf);
		printf("zct : %d \r\n", gADCData[ADC_ZCT_INDEX_]);
	}
#endif

}
 800604e:	bc80      	pop	{r7}
 8006050:	46b8      	mov	r8, r7
 8006052:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dtemp = 0;
 8006054:	2300      	movs	r3, #0
		printf("VRMS : %ld \r\n", adc_temp_lpf);
 8006056:	0021      	movs	r1, r4
 8006058:	480f      	ldr	r0, [pc, #60]	; (8006098 <_APP_CHARGSERV_check_Vrms_loop+0xdc>)
		dtemp = 0;
 800605a:	8013      	strh	r3, [r2, #0]
		printf("VRMS : %ld \r\n", adc_temp_lpf);
 800605c:	f004 fe5c 	bl	800ad18 <iprintf>
		printf("zct : %d \r\n", gADCData[ADC_ZCT_INDEX_]);
 8006060:	8879      	ldrh	r1, [r7, #2]
 8006062:	480e      	ldr	r0, [pc, #56]	; (800609c <_APP_CHARGSERV_check_Vrms_loop+0xe0>)
 8006064:	b289      	uxth	r1, r1
 8006066:	f004 fe57 	bl	800ad18 <iprintf>
}
 800606a:	e7f0      	b.n	800604e <_APP_CHARGSERV_check_Vrms_loop+0x92>
 800606c:	20000838 	.word	0x20000838
 8006070:	20000a64 	.word	0x20000a64
 8006074:	3f300000 	.word	0x3f300000
 8006078:	400a6666 	.word	0x400a6666
 800607c:	3ff47ae1 	.word	0x3ff47ae1
 8006080:	416312d0 	.word	0x416312d0
 8006084:	40910c00 	.word	0x40910c00
 8006088:	20000388 	.word	0x20000388
 800608c:	2000037c 	.word	0x2000037c
 8006090:	20000842 	.word	0x20000842
 8006094:	00001388 	.word	0x00001388
 8006098:	0800d7ac 	.word	0x0800d7ac
 800609c:	0800d7bc 	.word	0x0800d7bc

080060a0 <_APP_METERING_startup>:
#endif

void _APP_METERING_startup()
{
#if ((_VRMS_IRMS_CALC_LPF_FILTER_) == 1)
	_LIB_LPF_init(&Vrms_calc, _LPF_TIMEINTERVAL_VOL_, _LPF_TAU_VOL_);
 80060a0:	22c8      	movs	r2, #200	; 0xc8
{
 80060a2:	b510      	push	{r4, lr}
	_LIB_LPF_init(&Vrms_calc, _LPF_TIMEINTERVAL_VOL_, _LPF_TAU_VOL_);
 80060a4:	2102      	movs	r1, #2
 80060a6:	0092      	lsls	r2, r2, #2
 80060a8:	4806      	ldr	r0, [pc, #24]	; (80060c4 <_APP_METERING_startup+0x24>)
 80060aa:	f000 fee5 	bl	8006e78 <_LIB_LPF_init>
	_LIB_LPF_init(&Irms_calc, _LPF_TIMEINTERVAL_CUR_, _LPF_TAU_CUR_);
 80060ae:	22c8      	movs	r2, #200	; 0xc8
 80060b0:	2101      	movs	r1, #1
 80060b2:	4805      	ldr	r0, [pc, #20]	; (80060c8 <_APP_METERING_startup+0x28>)
 80060b4:	f000 fee0 	bl	8006e78 <_LIB_LPF_init>
#endif
#if	((_IRMS_INPUT_LPF_FILTER_) == 1)
	_LIB_LPF_init(&Irms_input, _IRMS_INPUT_LPF_TIMEINTERVAL_, _IRMS_INPUT_LPF_TAU_);
#endif

	_LIB_USERDELAY_set(&gDelay_metering_periodic_loop_time,1);
 80060b8:	2101      	movs	r1, #1
 80060ba:	4804      	ldr	r0, [pc, #16]	; (80060cc <_APP_METERING_startup+0x2c>)
 80060bc:	f000 ffb0 	bl	8007020 <_LIB_USERDELAY_set>
}
 80060c0:	bd10      	pop	{r4, pc}
 80060c2:	46c0      	nop			; (mov r8, r8)
 80060c4:	2000037c 	.word	0x2000037c
 80060c8:	20000370 	.word	0x20000370
 80060cc:	20000844 	.word	0x20000844

080060d0 <_APP_METERING_process>:

void _APP_METERING_process()
{
 80060d0:	b510      	push	{r4, lr}
	static uint8_t vrms_step = 0;

	_LIB_USERDELAY_start(&gDelay_metering_periodic_loop_time, DELAY_RENEW_OFF);
 80060d2:	4c0e      	ldr	r4, [pc, #56]	; (800610c <_APP_METERING_process+0x3c>)
 80060d4:	2100      	movs	r1, #0
 80060d6:	0020      	movs	r0, r4
 80060d8:	f000 ffac 	bl	8007034 <_LIB_USERDELAY_start>

    if(_LIB_USERDELAY_isfired(&gDelay_metering_periodic_loop_time))
 80060dc:	0020      	movs	r0, r4
 80060de:	f000 ffbd 	bl	800705c <_LIB_USERDELAY_isfired>
 80060e2:	2800      	cmp	r0, #0
 80060e4:	d100      	bne.n	80060e8 <_APP_METERING_process+0x18>
    		vrms_step++;
    	}

	  	_LIB_USERDELAY_start(&gDelay_metering_periodic_loop_time, DELAY_RENEW_ON);
    }
}
 80060e6:	bd10      	pop	{r4, pc}
    	_APP_CHARGSERV_check_Irms_loop();
 80060e8:	f7ff febc 	bl	8005e64 <_APP_CHARGSERV_check_Irms_loop>
    	if(vrms_step >= 5)
 80060ec:	4a08      	ldr	r2, [pc, #32]	; (8006110 <_APP_METERING_process+0x40>)
 80060ee:	7813      	ldrb	r3, [r2, #0]
 80060f0:	2b04      	cmp	r3, #4
 80060f2:	d806      	bhi.n	8006102 <_APP_METERING_process+0x32>
    		vrms_step++;
 80060f4:	3301      	adds	r3, #1
 80060f6:	7013      	strb	r3, [r2, #0]
	  	_LIB_USERDELAY_start(&gDelay_metering_periodic_loop_time, DELAY_RENEW_ON);
 80060f8:	2101      	movs	r1, #1
 80060fa:	0020      	movs	r0, r4
 80060fc:	f000 ff9a 	bl	8007034 <_LIB_USERDELAY_start>
}
 8006100:	e7f1      	b.n	80060e6 <_APP_METERING_process+0x16>
    		vrms_step = 0;
 8006102:	2300      	movs	r3, #0
 8006104:	7013      	strb	r3, [r2, #0]
    		_APP_CHARGSERV_check_Vrms_loop();
 8006106:	f7ff ff59 	bl	8005fbc <_APP_CHARGSERV_check_Vrms_loop>
 800610a:	e7f5      	b.n	80060f8 <_APP_METERING_process+0x28>
 800610c:	20000844 	.word	0x20000844
 8006110:	20000860 	.word	0x20000860

08006114 <_system_go_to_process_delay>:
	}
}

void _system_go_to_process_delay()
{
	_LIB_USERDELAY_set(&gDelay_go_to_process, 500);
 8006114:	21fa      	movs	r1, #250	; 0xfa
{
 8006116:	b510      	push	{r4, lr}
	_LIB_USERDELAY_set(&gDelay_go_to_process, 500);
 8006118:	4c0a      	ldr	r4, [pc, #40]	; (8006144 <_system_go_to_process_delay+0x30>)
 800611a:	0049      	lsls	r1, r1, #1
 800611c:	0020      	movs	r0, r4
 800611e:	f000 ff7f 	bl	8007020 <_LIB_USERDELAY_set>

	_LIB_USERDELAY_start(&gDelay_go_to_process, DELAY_RENEW_OFF);
 8006122:	2100      	movs	r1, #0
 8006124:	0020      	movs	r0, r4
 8006126:	f000 ff85 	bl	8007034 <_LIB_USERDELAY_start>

	while(0 == _LIB_USERDELAY_isfired(&gDelay_go_to_process));
 800612a:	0020      	movs	r0, r4
 800612c:	f000 ff96 	bl	800705c <_LIB_USERDELAY_isfired>
 8006130:	2800      	cmp	r0, #0
 8006132:	d0fa      	beq.n	800612a <_system_go_to_process_delay+0x16>

	_LIB_USERDELAY_stop(&gDelay_go_to_process);
 8006134:	0020      	movs	r0, r4
 8006136:	f000 ff8d 	bl	8007054 <_LIB_USERDELAY_stop>

	_LIB_LOGGING_printf("go to process...\r\n");
 800613a:	4803      	ldr	r0, [pc, #12]	; (8006148 <_system_go_to_process_delay+0x34>)
 800613c:	f004 fe78 	bl	800ae30 <puts>
}
 8006140:	bd10      	pop	{r4, pc}
 8006142:	46c0      	nop			; (mov r8, r8)
 8006144:	20000864 	.word	0x20000864
 8006148:	0800d7c8 	.word	0x0800d7c8

0800614c <acevsesystem>:
{
 800614c:	b510      	push	{r4, lr}
	_LIB_LOGGING_printf("|-------- AC EVSE NP-----------|\r\n");
 800614e:	481b      	ldr	r0, [pc, #108]	; (80061bc <acevsesystem+0x70>)
 8006150:	f004 fe6e 	bl	800ae30 <puts>
	_LIB_LOGGING_printf("|-------- 7_11kW ----------|\r\n");
 8006154:	481a      	ldr	r0, [pc, #104]	; (80061c0 <acevsesystem+0x74>)
 8006156:	f004 fe6b 	bl	800ae30 <puts>
	_LIB_LOGGING_printf("|-------- EGTRONIC------------|\r\n");
 800615a:	481a      	ldr	r0, [pc, #104]	; (80061c4 <acevsesystem+0x78>)
 800615c:	f004 fe68 	bl	800ae30 <puts>
	_LIB_LOGGING_printf("|_FW_VERSION_ : %d ----------|\r\n",_FW_VERSION_);
 8006160:	2105      	movs	r1, #5
 8006162:	4819      	ldr	r0, [pc, #100]	; (80061c8 <acevsesystem+0x7c>)
 8006164:	f004 fdd8 	bl	800ad18 <iprintf>
	_LIB_LOGGING_print_date_time("|--- Compile :");
 8006168:	4b18      	ldr	r3, [pc, #96]	; (80061cc <acevsesystem+0x80>)
 800616a:	4a19      	ldr	r2, [pc, #100]	; (80061d0 <acevsesystem+0x84>)
 800616c:	4919      	ldr	r1, [pc, #100]	; (80061d4 <acevsesystem+0x88>)
 800616e:	481a      	ldr	r0, [pc, #104]	; (80061d8 <acevsesystem+0x8c>)
 8006170:	f004 fdd2 	bl	800ad18 <iprintf>
	_LIB_LOGGING_printf("|-LPF_FILTER_ENABLE----------|\r\n");
 8006174:	4819      	ldr	r0, [pc, #100]	; (80061dc <acevsesystem+0x90>)
 8006176:	f004 fe5b 	bl	800ae30 <puts>
	_MW_GPIO_init();
 800617a:	f001 fb4b 	bl	8007814 <_MW_GPIO_init>
	_MW_IT_init();
 800617e:	f001 fd83 	bl	8007c88 <_MW_IT_init>
	_MW_CP_init();
 8006182:	f000 ff7b 	bl	800707c <_MW_CP_init>
	_MW_PWM_init();
 8006186:	f001 ff17 	bl	8007fb8 <_MW_PWM_init>
	_MW_INDILED_init();
 800618a:	f001 fd77 	bl	8007c7c <_MW_INDILED_init>
	_APP_SYSTEMCTL_startup();
 800618e:	f000 fdc9 	bl	8006d24 <_APP_SYSTEMCTL_startup>
	_APP_METERING_startup();
 8006192:	f7ff ff85 	bl	80060a0 <_APP_METERING_startup>
	_APP_CHARGSERV_startup();
 8006196:	f7ff fa11 	bl	80055bc <_APP_CHARGSERV_startup>
	_APP_CONFIGSERV_startup();
 800619a:	f7ff fbbb 	bl	8005914 <_APP_CONFIGSERV_startup>
	_APP_RFID_startup();
 800619e:	f000 fb0f 	bl	80067c0 <_APP_RFID_startup>
	_system_go_to_process_delay();
 80061a2:	f7ff ffb7 	bl	8006114 <_system_go_to_process_delay>
		_APP_SYSTEMCTL_process();
 80061a6:	f000 fe4d 	bl	8006e44 <_APP_SYSTEMCTL_process>
		_APP_METERING_process();
 80061aa:	f7ff ff91 	bl	80060d0 <_APP_METERING_process>
		_APP_CHARGSERV_process();
 80061ae:	f7ff fb53 	bl	8005858 <_APP_CHARGSERV_process>
		_APP_CONFIGSERV_process();
 80061b2:	f7ff fe35 	bl	8005e20 <_APP_CONFIGSERV_process>
		_APP_RFID_comm_process();
 80061b6:	f000 fb25 	bl	8006804 <_APP_RFID_comm_process>
	while(1)
 80061ba:	e7f4      	b.n	80061a6 <acevsesystem+0x5a>
 80061bc:	0800d7dc 	.word	0x0800d7dc
 80061c0:	0800d800 	.word	0x0800d800
 80061c4:	0800d820 	.word	0x0800d820
 80061c8:	0800d844 	.word	0x0800d844
 80061cc:	0800d868 	.word	0x0800d868
 80061d0:	0800d874 	.word	0x0800d874
 80061d4:	0800d880 	.word	0x0800d880
 80061d8:	0800d890 	.word	0x0800d890
 80061dc:	0800d8a0 	.word	0x0800d8a0

080061e0 <rfid_frame_search>:
    }
    return wCRCWord;
}

void rfid_frame_search()
{
 80061e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061e2:	46ce      	mov	lr, r9
 80061e4:	4647      	mov	r7, r8
 80061e6:	b580      	push	{r7, lr}
	uint8_t uch, ucl, bh, bl;
	uint16_t mclen, crc_data = 0;
	uint8_t crc_calc[30];
	uint16_t temp_pointer;

	mclen = _LIB_U8QUEUE_comLen(&rfid_queue);
 80061e8:	4c25      	ldr	r4, [pc, #148]	; (8006280 <rfid_frame_search+0xa0>)
{
 80061ea:	b089      	sub	sp, #36	; 0x24
	mclen = _LIB_U8QUEUE_comLen(&rfid_queue);
 80061ec:	0020      	movs	r0, r4
 80061ee:	f000 feb3 	bl	8006f58 <_LIB_U8QUEUE_comLen>
 80061f2:	0006      	movs	r6, r0

	if(mclen < 8) return;
 80061f4:	2807      	cmp	r0, #7
 80061f6:	d804      	bhi.n	8006202 <rfid_frame_search+0x22>
		//printf("bh:0x%02x\r\n",bh);
		//printf("uch:0x%02x\r\n",uch);
		//printf("bl:0x%02x\r\n",bl);
		//printf("ucl:0x%02x\r\n",ucl);
	}
}
 80061f8:	b009      	add	sp, #36	; 0x24
 80061fa:	bcc0      	pop	{r6, r7}
 80061fc:	46b9      	mov	r9, r7
 80061fe:	46b0      	mov	r8, r6
 8006200:	bdf0      	pop	{r4, r5, r6, r7, pc}
	temp_pointer = rfid_queue.action_pointer;
 8006202:	8923      	ldrh	r3, [r4, #8]
	_LIB_U8QUEUE_inc_pointer(&rfid_queue); //STX
 8006204:	0020      	movs	r0, r4
	temp_pointer = rfid_queue.action_pointer;
 8006206:	4698      	mov	r8, r3
	_LIB_U8QUEUE_inc_pointer(&rfid_queue); //STX
 8006208:	f000 fee2 	bl	8006fd0 <_LIB_U8QUEUE_inc_pointer>
	for (uint8_t i=0; i < mclen-4; i++){
 800620c:	1f33      	subs	r3, r6, #4
 800620e:	4699      	mov	r9, r3
 8006210:	2500      	movs	r5, #0
 8006212:	2700      	movs	r7, #0
		crc_calc[i] = _LIB_U8QUEUE_get_byte(&rfid_queue);
 8006214:	0020      	movs	r0, r4
 8006216:	f000 feb1 	bl	8006f7c <_LIB_U8QUEUE_get_byte>
 800621a:	466b      	mov	r3, sp
	for (uint8_t i=0; i < mclen-4; i++){
 800621c:	3501      	adds	r5, #1
 800621e:	b2ed      	uxtb	r5, r5
		crc_calc[i] = _LIB_U8QUEUE_get_byte(&rfid_queue);
 8006220:	55d8      	strb	r0, [r3, r7]
	for (uint8_t i=0; i < mclen-4; i++){
 8006222:	002f      	movs	r7, r5
 8006224:	454d      	cmp	r5, r9
 8006226:	dbf5      	blt.n	8006214 <rfid_frame_search+0x34>
	bh = _LIB_U8QUEUE_get_byte(&rfid_queue);
 8006228:	0020      	movs	r0, r4
 800622a:	f000 fea7 	bl	8006f7c <_LIB_U8QUEUE_get_byte>
 800622e:	0005      	movs	r5, r0
	bl = _LIB_U8QUEUE_get_byte(&rfid_queue);
 8006230:	0020      	movs	r0, r4
 8006232:	f000 fea3 	bl	8006f7c <_LIB_U8QUEUE_get_byte>
 8006236:	4684      	mov	ip, r0
	crc_data = buypass_crc16(crc_calc, mclen-4);
 8006238:	b2f0      	uxtb	r0, r6
    while (length--)
 800623a:	1f42      	subs	r2, r0, #5
 800623c:	b2d2      	uxtb	r2, r2
 800623e:	2804      	cmp	r0, #4
 8006240:	d01b      	beq.n	800627a <rfid_frame_search+0x9a>
 8006242:	4669      	mov	r1, sp
    uint16_t wCRCWord = 0x0000;
 8006244:	2300      	movs	r3, #0
 8006246:	480f      	ldr	r0, [pc, #60]	; (8006284 <rfid_frame_search+0xa4>)
    	nTemp = *nData++ ^ (wCRCWord>>8);
 8006248:	780f      	ldrb	r7, [r1, #0]
    	wCRCWord = wCRCWord << 8;
 800624a:	021e      	lsls	r6, r3, #8
    	nTemp = *nData++ ^ (wCRCWord>>8);
 800624c:	0a1b      	lsrs	r3, r3, #8
    	wCRCWord ^= CRC16_BUYPASS_TABLE[nTemp];
 800624e:	407b      	eors	r3, r7
 8006250:	005b      	lsls	r3, r3, #1
 8006252:	5ac3      	ldrh	r3, [r0, r3]
    while (length--)
 8006254:	3a01      	subs	r2, #1
    	wCRCWord = wCRCWord << 8;
 8006256:	b2b6      	uxth	r6, r6
    while (length--)
 8006258:	b2d2      	uxtb	r2, r2
    	wCRCWord ^= CRC16_BUYPASS_TABLE[nTemp];
 800625a:	4073      	eors	r3, r6
    while (length--)
 800625c:	3101      	adds	r1, #1
 800625e:	2aff      	cmp	r2, #255	; 0xff
 8006260:	d1f2      	bne.n	8006248 <rfid_frame_search+0x68>
 8006262:	0a1a      	lsrs	r2, r3, #8
 8006264:	b2db      	uxtb	r3, r3
	rfid_queue.action_pointer = temp_pointer;
 8006266:	4641      	mov	r1, r8
 8006268:	8121      	strh	r1, [r4, #8]
	if((bh == uch) && (bl == ucl))
 800626a:	4295      	cmp	r5, r2
 800626c:	d1c4      	bne.n	80061f8 <rfid_frame_search+0x18>
 800626e:	459c      	cmp	ip, r3
 8006270:	d1c2      	bne.n	80061f8 <rfid_frame_search+0x18>
		rfid_app.found_frame = 1;
 8006272:	2201      	movs	r2, #1
 8006274:	4b04      	ldr	r3, [pc, #16]	; (8006288 <rfid_frame_search+0xa8>)
 8006276:	709a      	strb	r2, [r3, #2]
 8006278:	e7be      	b.n	80061f8 <rfid_frame_search+0x18>
    while (length--)
 800627a:	2300      	movs	r3, #0
 800627c:	2200      	movs	r2, #0
 800627e:	e7f2      	b.n	8006266 <rfid_frame_search+0x86>
 8006280:	20000050 	.word	0x20000050
 8006284:	0800da5c 	.word	0x0800da5c
 8006288:	20000008 	.word	0x20000008

0800628c <rfid_read_card_id>:

void rfid_read_card_id()
{
 800628c:	b570      	push	{r4, r5, r6, lr}
	uint16_t ln;

	ln = _LIB_U8QUEUE_get_word(&rfid_queue);
 800628e:	4d16      	ldr	r5, [pc, #88]	; (80062e8 <rfid_read_card_id+0x5c>)
 8006290:	0028      	movs	r0, r5
 8006292:	f000 fe7f 	bl	8006f94 <_LIB_U8QUEUE_get_word>
	_LIB_U8QUEUE_inc_pointer(&rfid_queue); // Type
 8006296:	0028      	movs	r0, r5
 8006298:	f000 fe9a 	bl	8006fd0 <_LIB_U8QUEUE_inc_pointer>
	_LIB_U8QUEUE_inc_pointer(&rfid_queue); // Reserve_#01
 800629c:	0028      	movs	r0, r5
 800629e:	f000 fe97 	bl	8006fd0 <_LIB_U8QUEUE_inc_pointer>
	_LIB_U8QUEUE_inc_pointer(&rfid_queue); // Reserve_#02
 80062a2:	0028      	movs	r0, r5
 80062a4:	f000 fe94 	bl	8006fd0 <_LIB_U8QUEUE_inc_pointer>
	_LIB_U8QUEUE_inc_pointer(&rfid_queue); // Reserve_#03
 80062a8:	0028      	movs	r0, r5
 80062aa:	f000 fe91 	bl	8006fd0 <_LIB_U8QUEUE_inc_pointer>
	_LIB_U8QUEUE_inc_pointer(&rfid_queue); // Reserve_#04
 80062ae:	0028      	movs	r0, r5
 80062b0:	f000 fe8e 	bl	8006fd0 <_LIB_U8QUEUE_inc_pointer>

	//Number of Card numbers is 8 bytes.
	for (uint8_t i = RFID_CARD_ID_01; i <= RFID_CARD_ID_04; i++){
 80062b4:	4c0d      	ldr	r4, [pc, #52]	; (80062ec <rfid_read_card_id+0x60>)
 80062b6:	0026      	movs	r6, r4
 80062b8:	3608      	adds	r6, #8
		rfid_app.rfid_rx_buf[i] = _LIB_U8QUEUE_get_word(&rfid_queue);
 80062ba:	0028      	movs	r0, r5
 80062bc:	f000 fe6a 	bl	8006f94 <_LIB_U8QUEUE_get_word>
 80062c0:	3402      	adds	r4, #2
 80062c2:	8120      	strh	r0, [r4, #8]
	for (uint8_t i = RFID_CARD_ID_01; i <= RFID_CARD_ID_04; i++){
 80062c4:	42b4      	cmp	r4, r6
 80062c6:	d1f8      	bne.n	80062ba <rfid_read_card_id+0x2e>
	}

	_LIB_U8QUEUE_inc_pointer(&rfid_queue); // Reserve_#05
 80062c8:	0028      	movs	r0, r5
 80062ca:	f000 fe81 	bl	8006fd0 <_LIB_U8QUEUE_inc_pointer>
	_LIB_U8QUEUE_inc_pointer(&rfid_queue); // Reserve_#06
 80062ce:	0028      	movs	r0, r5
 80062d0:	f000 fe7e 	bl	8006fd0 <_LIB_U8QUEUE_inc_pointer>
	_LIB_U8QUEUE_inc_pointer(&rfid_queue); // CRC Hi
 80062d4:	0028      	movs	r0, r5
 80062d6:	f000 fe7b 	bl	8006fd0 <_LIB_U8QUEUE_inc_pointer>
	_LIB_U8QUEUE_inc_pointer(&rfid_queue); // CRC Low
 80062da:	0028      	movs	r0, r5
 80062dc:	f000 fe78 	bl	8006fd0 <_LIB_U8QUEUE_inc_pointer>
	_LIB_U8QUEUE_inc_pointer(&rfid_queue); // ETX
 80062e0:	0028      	movs	r0, r5
 80062e2:	f000 fe75 	bl	8006fd0 <_LIB_U8QUEUE_inc_pointer>
}
 80062e6:	bd70      	pop	{r4, r5, r6, pc}
 80062e8:	20000050 	.word	0x20000050
 80062ec:	20000008 	.word	0x20000008

080062f0 <rfid_reader_terminate>:

void rfid_reader_terminate()
{
 80062f0:	b510      	push	{r4, lr}
	uint16_t ln;
	ln = _LIB_U8QUEUE_get_word(&rfid_queue);
 80062f2:	4c0d      	ldr	r4, [pc, #52]	; (8006328 <rfid_reader_terminate+0x38>)
 80062f4:	0020      	movs	r0, r4
 80062f6:	f000 fe4d 	bl	8006f94 <_LIB_U8QUEUE_get_word>
	if(RFID_TERMINATE == _LIB_U8QUEUE_get_byte(&rfid_queue))
 80062fa:	0020      	movs	r0, r4
 80062fc:	f000 fe3e 	bl	8006f7c <_LIB_U8QUEUE_get_byte>
 8006300:	28e3      	cmp	r0, #227	; 0xe3
 8006302:	d106      	bne.n	8006312 <rfid_reader_terminate+0x22>
	{
		rfid_app.reg.tag_terminate = 1;
 8006304:	223d      	movs	r2, #61	; 0x3d
 8006306:	2380      	movs	r3, #128	; 0x80
 8006308:	4908      	ldr	r1, [pc, #32]	; (800632c <rfid_reader_terminate+0x3c>)
 800630a:	425b      	negs	r3, r3
 800630c:	5c88      	ldrb	r0, [r1, r2]
 800630e:	4303      	orrs	r3, r0
 8006310:	548b      	strb	r3, [r1, r2]
	else
	{
		//Todo
		//Fault
	}
	_LIB_U8QUEUE_inc_pointer(&rfid_queue); // CRC Hi
 8006312:	0020      	movs	r0, r4
 8006314:	f000 fe5c 	bl	8006fd0 <_LIB_U8QUEUE_inc_pointer>
	_LIB_U8QUEUE_inc_pointer(&rfid_queue); // CRC Low
 8006318:	0020      	movs	r0, r4
 800631a:	f000 fe59 	bl	8006fd0 <_LIB_U8QUEUE_inc_pointer>
	_LIB_U8QUEUE_inc_pointer(&rfid_queue); // ETX
 800631e:	0020      	movs	r0, r4
 8006320:	f000 fe56 	bl	8006fd0 <_LIB_U8QUEUE_inc_pointer>
}
 8006324:	bd10      	pop	{r4, pc}
 8006326:	46c0      	nop			; (mov r8, r8)
 8006328:	20000050 	.word	0x20000050
 800632c:	20000008 	.word	0x20000008

08006330 <rfid_reader_version>:

void rfid_reader_version()
{
 8006330:	b570      	push	{r4, r5, r6, lr}
	uint8_t ln;

	ln = _LIB_U8QUEUE_get_word(&rfid_queue);
 8006332:	4c13      	ldr	r4, [pc, #76]	; (8006380 <rfid_reader_version+0x50>)
 8006334:	0020      	movs	r0, r4
 8006336:	f000 fe2d 	bl	8006f94 <_LIB_U8QUEUE_get_word>

	_LIB_U8QUEUE_inc_pointer(&rfid_queue); // ACK
 800633a:	0020      	movs	r0, r4
 800633c:	f000 fe48 	bl	8006fd0 <_LIB_U8QUEUE_inc_pointer>

	for (uint8_t i = RFID_H_VERSION; i <= RFID_L_VERSION; i++){
		rfid_app.rfid_rx_buf[i] = _LIB_U8QUEUE_get_word(&rfid_queue);
 8006340:	0020      	movs	r0, r4
 8006342:	f000 fe27 	bl	8006f94 <_LIB_U8QUEUE_get_word>
 8006346:	4d0f      	ldr	r5, [pc, #60]	; (8006384 <rfid_reader_version+0x54>)
 8006348:	80e8      	strh	r0, [r5, #6]
 800634a:	0020      	movs	r0, r4
 800634c:	f000 fe22 	bl	8006f94 <_LIB_U8QUEUE_get_word>
 8006350:	8128      	strh	r0, [r5, #8]
	}

	_LIB_U8QUEUE_inc_pointer(&rfid_queue); // Reserve_#01
 8006352:	0020      	movs	r0, r4
 8006354:	f000 fe3c 	bl	8006fd0 <_LIB_U8QUEUE_inc_pointer>
	_LIB_U8QUEUE_inc_pointer(&rfid_queue); // Reserve_#02
 8006358:	0020      	movs	r0, r4
 800635a:	f000 fe39 	bl	8006fd0 <_LIB_U8QUEUE_inc_pointer>
	_LIB_U8QUEUE_inc_pointer(&rfid_queue); // Reserve_#03
 800635e:	0020      	movs	r0, r4
 8006360:	f000 fe36 	bl	8006fd0 <_LIB_U8QUEUE_inc_pointer>
	_LIB_U8QUEUE_inc_pointer(&rfid_queue); // Reserve_#04
 8006364:	0020      	movs	r0, r4
 8006366:	f000 fe33 	bl	8006fd0 <_LIB_U8QUEUE_inc_pointer>

	_LIB_U8QUEUE_inc_pointer(&rfid_queue); // CRC Hi
 800636a:	0020      	movs	r0, r4
 800636c:	f000 fe30 	bl	8006fd0 <_LIB_U8QUEUE_inc_pointer>
	_LIB_U8QUEUE_inc_pointer(&rfid_queue); // CRC Low
 8006370:	0020      	movs	r0, r4
 8006372:	f000 fe2d 	bl	8006fd0 <_LIB_U8QUEUE_inc_pointer>
	_LIB_U8QUEUE_inc_pointer(&rfid_queue); // ETX
 8006376:	0020      	movs	r0, r4
 8006378:	f000 fe2a 	bl	8006fd0 <_LIB_U8QUEUE_inc_pointer>
}
 800637c:	bd70      	pop	{r4, r5, r6, pc}
 800637e:	46c0      	nop			; (mov r8, r8)
 8006380:	20000050 	.word	0x20000050
 8006384:	20000008 	.word	0x20000008

08006388 <rfid_reader_status>:

void rfid_reader_status()
{
 8006388:	b510      	push	{r4, lr}
	uint8_t ln;

	ln = _LIB_U8QUEUE_get_word(&rfid_queue);
 800638a:	4c09      	ldr	r4, [pc, #36]	; (80063b0 <rfid_reader_status+0x28>)
 800638c:	0020      	movs	r0, r4
 800638e:	f000 fe01 	bl	8006f94 <_LIB_U8QUEUE_get_word>
	rfid_app.rfid_rx_buf[RFID_STATUS] = _LIB_U8QUEUE_get_word(&rfid_queue);
 8006392:	0020      	movs	r0, r4
 8006394:	f000 fdfe 	bl	8006f94 <_LIB_U8QUEUE_get_word>
 8006398:	4b06      	ldr	r3, [pc, #24]	; (80063b4 <rfid_reader_status+0x2c>)
 800639a:	8098      	strh	r0, [r3, #4]

	_LIB_U8QUEUE_inc_pointer(&rfid_queue); // CRC Hi
 800639c:	0020      	movs	r0, r4
 800639e:	f000 fe17 	bl	8006fd0 <_LIB_U8QUEUE_inc_pointer>
	_LIB_U8QUEUE_inc_pointer(&rfid_queue); // CRC Low
 80063a2:	0020      	movs	r0, r4
 80063a4:	f000 fe14 	bl	8006fd0 <_LIB_U8QUEUE_inc_pointer>
	_LIB_U8QUEUE_inc_pointer(&rfid_queue); // ETX
 80063a8:	0020      	movs	r0, r4
 80063aa:	f000 fe11 	bl	8006fd0 <_LIB_U8QUEUE_inc_pointer>
}
 80063ae:	bd10      	pop	{r4, pc}
 80063b0:	20000050 	.word	0x20000050
 80063b4:	20000008 	.word	0x20000008

080063b8 <_APP_RFID_push_ringbuffer>:



void _APP_RFID_push_ringbuffer(uint8_t comdt)
{
 80063b8:	b570      	push	{r4, r5, r6, lr}
	if(rfid_queue.blank_check > 50)	{
 80063ba:	4c09      	ldr	r4, [pc, #36]	; (80063e0 <_APP_RFID_push_ringbuffer+0x28>)
{
 80063bc:	0005      	movs	r5, r0
	if(rfid_queue.blank_check > 50)	{
 80063be:	8963      	ldrh	r3, [r4, #10]
 80063c0:	2b32      	cmp	r3, #50	; 0x32
 80063c2:	d806      	bhi.n	80063d2 <_APP_RFID_push_ringbuffer+0x1a>
		_LIB_U8QUEUE_comFlush(&rfid_queue);
		printf("rfid_comFlush\r\n");
	}
	rfid_queue.blank_check = 0;
 80063c4:	2300      	movs	r3, #0

	_LIB_U8QUEUE_push_ring(&rfid_queue, comdt);
 80063c6:	0029      	movs	r1, r5
 80063c8:	0020      	movs	r0, r4
	rfid_queue.blank_check = 0;
 80063ca:	8163      	strh	r3, [r4, #10]
	_LIB_U8QUEUE_push_ring(&rfid_queue, comdt);
 80063cc:	f000 fe0a 	bl	8006fe4 <_LIB_U8QUEUE_push_ring>
	//rfid_frame_search();
}
 80063d0:	bd70      	pop	{r4, r5, r6, pc}
		_LIB_U8QUEUE_comFlush(&rfid_queue);
 80063d2:	0020      	movs	r0, r4
 80063d4:	f000 fdba 	bl	8006f4c <_LIB_U8QUEUE_comFlush>
		printf("rfid_comFlush\r\n");
 80063d8:	4802      	ldr	r0, [pc, #8]	; (80063e4 <_APP_RFID_push_ringbuffer+0x2c>)
 80063da:	f004 fd29 	bl	800ae30 <puts>
 80063de:	e7f1      	b.n	80063c4 <_APP_RFID_push_ringbuffer+0xc>
 80063e0:	20000050 	.word	0x20000050
 80063e4:	0800d8c0 	.word	0x0800d8c0

080063e8 <_APP_RFID_req>:
{
	uint16_t crc_data = 0;

	rfid_app.rfid_tx_cnt = 0;

	rfid_app.rfid_tx_buf[rfid_app.rfid_tx_cnt++] = RFID_STX;
 80063e8:	2381      	movs	r3, #129	; 0x81
{
 80063ea:	b570      	push	{r4, r5, r6, lr}
	rfid_app.rfid_tx_buf[rfid_app.rfid_tx_cnt++] = RFID_STX;
 80063ec:	4c14      	ldr	r4, [pc, #80]	; (8006440 <_APP_RFID_req+0x58>)
 80063ee:	005b      	lsls	r3, r3, #1
 80063f0:	8263      	strh	r3, [r4, #18]
	rfid_app.rfid_tx_buf[rfid_app.rfid_tx_cnt++] = RFID_SEQ_REQ;
	rfid_app.rfid_tx_buf[rfid_app.rfid_tx_cnt++] = RFID_SIDX_H;
 80063f2:	4b14      	ldr	r3, [pc, #80]	; (8006444 <_APP_RFID_req+0x5c>)
	rfid_app.rfid_tx_buf[rfid_app.rfid_tx_cnt++] = RFID_SIDX_L;
	rfid_app.rfid_tx_buf[rfid_app.rfid_tx_cnt++] = RFID_RIDX_H;
	rfid_app.rfid_tx_buf[rfid_app.rfid_tx_cnt++] = RFID_RIDX_L;
	rfid_app.rfid_tx_buf[rfid_app.rfid_tx_cnt++] = cmd;
	rfid_app.rfid_tx_buf[rfid_app.rfid_tx_cnt++] = 0x00;
	rfid_app.rfid_tx_buf[rfid_app.rfid_tx_cnt++] = 0x00;
 80063f4:	2209      	movs	r2, #9
 80063f6:	0021      	movs	r1, r4
    while (length--)
 80063f8:	0025      	movs	r5, r4
	rfid_app.rfid_tx_buf[rfid_app.rfid_tx_cnt++] = RFID_SIDX_H;
 80063fa:	6163      	str	r3, [r4, #20]
	rfid_app.rfid_tx_buf[rfid_app.rfid_tx_cnt++] = 0x00;
 80063fc:	2300      	movs	r3, #0
	rfid_app.rfid_tx_buf[rfid_app.rfid_tx_cnt++] = 0x00;
 80063fe:	8762      	strh	r2, [r4, #58]	; 0x3a
 8006400:	4e11      	ldr	r6, [pc, #68]	; (8006448 <_APP_RFID_req+0x60>)
 8006402:	4a12      	ldr	r2, [pc, #72]	; (800644c <_APP_RFID_req+0x64>)
	rfid_app.rfid_tx_buf[rfid_app.rfid_tx_cnt++] = cmd;
 8006404:	7620      	strb	r0, [r4, #24]
	rfid_app.rfid_tx_buf[rfid_app.rfid_tx_cnt++] = 0x00;
 8006406:	7663      	strb	r3, [r4, #25]
	rfid_app.rfid_tx_buf[rfid_app.rfid_tx_cnt++] = 0x00;
 8006408:	76a3      	strb	r3, [r4, #26]
 800640a:	3113      	adds	r1, #19
    while (length--)
 800640c:	351b      	adds	r5, #27
 800640e:	e004      	b.n	800641a <_APP_RFID_req+0x32>
 8006410:	7808      	ldrb	r0, [r1, #0]
 8006412:	0a1a      	lsrs	r2, r3, #8
 8006414:	4042      	eors	r2, r0
 8006416:	0052      	lsls	r2, r2, #1
 8006418:	5b92      	ldrh	r2, [r2, r6]
    	wCRCWord = wCRCWord << 8;
 800641a:	021b      	lsls	r3, r3, #8
 800641c:	b29b      	uxth	r3, r3
    	nTemp = *nData++ ^ (wCRCWord>>8);
 800641e:	3101      	adds	r1, #1
    	wCRCWord ^= CRC16_BUYPASS_TABLE[nTemp];
 8006420:	4053      	eors	r3, r2
    while (length--)
 8006422:	42a9      	cmp	r1, r5
 8006424:	d1f4      	bne.n	8006410 <_APP_RFID_req+0x28>

	crc_data = buypass_crc16(&rfid_app.rfid_tx_buf[1], rfid_app.rfid_tx_cnt-1);
	rfid_app.rfid_tx_buf[rfid_app.rfid_tx_cnt++] = crc_data >> 8;
 8006426:	0a1a      	lsrs	r2, r3, #8
	rfid_app.rfid_tx_buf[rfid_app.rfid_tx_cnt++] = crc_data;
 8006428:	7723      	strb	r3, [r4, #28]
	_MW_UART_tx01(data, cnt);
 800642a:	0020      	movs	r0, r4

	rfid_app.rfid_tx_buf[rfid_app.rfid_tx_cnt++] = RFID_ETX;
 800642c:	230c      	movs	r3, #12
	_MW_UART_tx01(data, cnt);
 800642e:	210c      	movs	r1, #12
	rfid_app.rfid_tx_buf[rfid_app.rfid_tx_cnt++] = RFID_ETX;
 8006430:	8763      	strh	r3, [r4, #58]	; 0x3a
	_MW_UART_tx01(data, cnt);
 8006432:	3012      	adds	r0, #18
	rfid_app.rfid_tx_buf[rfid_app.rfid_tx_cnt++] = RFID_ETX;
 8006434:	3b09      	subs	r3, #9
	rfid_app.rfid_tx_buf[rfid_app.rfid_tx_cnt++] = crc_data >> 8;
 8006436:	76e2      	strb	r2, [r4, #27]
	rfid_app.rfid_tx_buf[rfid_app.rfid_tx_cnt++] = RFID_ETX;
 8006438:	7763      	strb	r3, [r4, #29]
	_MW_UART_tx01(data, cnt);
 800643a:	f001 fe03 	bl	8008044 <_MW_UART_tx01>

	rfid_comPut(rfid_app.rfid_tx_buf, rfid_app.rfid_tx_cnt);
}
 800643e:	bd70      	pop	{r4, r5, r6, pc}
 8006440:	20000008 	.word	0x20000008
 8006444:	010e010b 	.word	0x010e010b
 8006448:	0800da5c 	.word	0x0800da5c
 800644c:	00008005 	.word	0x00008005

08006450 <rfid_main_processing>:
	return _TRUE;
}

eRFID_State rfid_get_current_state()
{
	return rfid_app.state;
 8006450:	233c      	movs	r3, #60	; 0x3c
}


void rfid_main_processing()
{
 8006452:	b570      	push	{r4, r5, r6, lr}
	uint8_t cmd;
	eRFID_State state = rfid_get_current_state();

	 //STX
	if(RFID_STX != _LIB_U8QUEUE_get_byte(&rfid_queue)){
 8006454:	4c36      	ldr	r4, [pc, #216]	; (8006530 <rfid_main_processing+0xe0>)
	return rfid_app.state;
 8006456:	4d37      	ldr	r5, [pc, #220]	; (8006534 <rfid_main_processing+0xe4>)
{
 8006458:	b082      	sub	sp, #8
	if(RFID_STX != _LIB_U8QUEUE_get_byte(&rfid_queue)){
 800645a:	0020      	movs	r0, r4
	return rfid_app.state;
 800645c:	5cee      	ldrb	r6, [r5, r3]
	if(RFID_STX != _LIB_U8QUEUE_get_byte(&rfid_queue)){
 800645e:	f000 fd8d 	bl	8006f7c <_LIB_U8QUEUE_get_byte>
 8006462:	2802      	cmp	r0, #2
 8006464:	d104      	bne.n	8006470 <rfid_main_processing+0x20>
		_LIB_U8QUEUE_comFlush(&rfid_queue);
		return;
	}
	if(RFID_SEQ_RESP != _LIB_U8QUEUE_get_byte(&rfid_queue)){
 8006466:	0020      	movs	r0, r4
 8006468:	f000 fd88 	bl	8006f7c <_LIB_U8QUEUE_get_byte>
 800646c:	2802      	cmp	r0, #2
 800646e:	d004      	beq.n	800647a <rfid_main_processing+0x2a>
			break;
		case 0xeb:
			rfid_read_card_id();
			break;
		default:
			_LIB_U8QUEUE_comFlush(&rfid_queue);
 8006470:	0020      	movs	r0, r4
 8006472:	f000 fd6b 	bl	8006f4c <_LIB_U8QUEUE_comFlush>
			return;
	}
}
 8006476:	b002      	add	sp, #8
 8006478:	bd70      	pop	{r4, r5, r6, pc}
	if(RFID_RIDX_H != _LIB_U8QUEUE_get_byte(&rfid_queue)){
 800647a:	0020      	movs	r0, r4
 800647c:	f000 fd7e 	bl	8006f7c <_LIB_U8QUEUE_get_byte>
 8006480:	280e      	cmp	r0, #14
 8006482:	d1f5      	bne.n	8006470 <rfid_main_processing+0x20>
	if(RFID_RIDX_L != _LIB_U8QUEUE_get_byte(&rfid_queue)){
 8006484:	0020      	movs	r0, r4
 8006486:	f000 fd79 	bl	8006f7c <_LIB_U8QUEUE_get_byte>
 800648a:	2801      	cmp	r0, #1
 800648c:	d1f0      	bne.n	8006470 <rfid_main_processing+0x20>
	if(RFID_SIDX_H != _LIB_U8QUEUE_get_byte(&rfid_queue)){
 800648e:	0020      	movs	r0, r4
 8006490:	f000 fd74 	bl	8006f7c <_LIB_U8QUEUE_get_byte>
 8006494:	280b      	cmp	r0, #11
 8006496:	d1eb      	bne.n	8006470 <rfid_main_processing+0x20>
	if(RFID_SIDX_L != _LIB_U8QUEUE_get_byte(&rfid_queue)){
 8006498:	0020      	movs	r0, r4
 800649a:	f000 fd6f 	bl	8006f7c <_LIB_U8QUEUE_get_byte>
 800649e:	2801      	cmp	r0, #1
 80064a0:	d1e6      	bne.n	8006470 <rfid_main_processing+0x20>
	cmd = _LIB_U8QUEUE_get_byte(&rfid_queue);
 80064a2:	0020      	movs	r0, r4
 80064a4:	f000 fd6a 	bl	8006f7c <_LIB_U8QUEUE_get_byte>
	switch(cmd){
 80064a8:	302a      	adds	r0, #42	; 0x2a
 80064aa:	b2c3      	uxtb	r3, r0
 80064ac:	2b15      	cmp	r3, #21
 80064ae:	d8df      	bhi.n	8006470 <rfid_main_processing+0x20>
 80064b0:	4a21      	ldr	r2, [pc, #132]	; (8006538 <rfid_main_processing+0xe8>)
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	58d3      	ldr	r3, [r2, r3]
 80064b6:	469f      	mov	pc, r3
			rfid_read_card_id();
 80064b8:	f7ff fee8 	bl	800628c <rfid_read_card_id>
			break;
 80064bc:	e7db      	b.n	8006476 <rfid_main_processing+0x26>
			rfid_read_card_id();
 80064be:	f7ff fee5 	bl	800628c <rfid_read_card_id>
			_LIB_LOGGING_printf("CARD ID : %04x %04x %04x %04x \r\n",
 80064c2:	8a28      	ldrh	r0, [r5, #16]
 80064c4:	89eb      	ldrh	r3, [r5, #14]
 80064c6:	89aa      	ldrh	r2, [r5, #12]
 80064c8:	8969      	ldrh	r1, [r5, #10]
 80064ca:	9000      	str	r0, [sp, #0]
 80064cc:	481b      	ldr	r0, [pc, #108]	; (800653c <rfid_main_processing+0xec>)
 80064ce:	f004 fc23 	bl	800ad18 <iprintf>
			if(state == RFID_Start)
 80064d2:	2e03      	cmp	r6, #3
 80064d4:	d1cf      	bne.n	8006476 <rfid_main_processing+0x26>
	if((rfid_app.rfid_rx_buf[RFID_CARD_ID_01] == 0x00)
 80064d6:	896a      	ldrh	r2, [r5, #10]
			&&  (rfid_app.rfid_rx_buf[RFID_CARD_ID_04] == 0x00)){
 80064d8:	8a2b      	ldrh	r3, [r5, #16]
 80064da:	0011      	movs	r1, r2
 80064dc:	4319      	orrs	r1, r3
 80064de:	d01e      	beq.n	800651e <rfid_main_processing+0xce>
			card_num[cnt++] = rfid_app.rfid_rx_buf[i];
 80064e0:	87ea      	strh	r2, [r5, #62]	; 0x3e
 80064e2:	2240      	movs	r2, #64	; 0x40
 80064e4:	89a9      	ldrh	r1, [r5, #12]
 80064e6:	52a9      	strh	r1, [r5, r2]
 80064e8:	89e9      	ldrh	r1, [r5, #14]
 80064ea:	3202      	adds	r2, #2
 80064ec:	52a9      	strh	r1, [r5, r2]
 80064ee:	3202      	adds	r2, #2
					rfid_app.reg.tag_ok = 1;
 80064f0:	213d      	movs	r1, #61	; 0x3d
			card_num[cnt++] = rfid_app.rfid_rx_buf[i];
 80064f2:	52ab      	strh	r3, [r5, r2]
			rfid_app.rfid_rx_buf[i] = 0;
 80064f4:	2300      	movs	r3, #0
 80064f6:	816b      	strh	r3, [r5, #10]
 80064f8:	60eb      	str	r3, [r5, #12]
 80064fa:	822b      	strh	r3, [r5, #16]
					rfid_app.reg.tag_ok = 1;
 80064fc:	5c6b      	ldrb	r3, [r5, r1]
 80064fe:	3a38      	subs	r2, #56	; 0x38
 8006500:	4393      	bics	r3, r2
 8006502:	001a      	movs	r2, r3
 8006504:	2304      	movs	r3, #4
 8006506:	4313      	orrs	r3, r2
 8006508:	546b      	strb	r3, [r5, r1]
 800650a:	e7b4      	b.n	8006476 <rfid_main_processing+0x26>
			rfid_reader_status();
 800650c:	f7ff ff3c 	bl	8006388 <rfid_reader_status>
			break;
 8006510:	e7b1      	b.n	8006476 <rfid_main_processing+0x26>
			rfid_reader_version();
 8006512:	f7ff ff0d 	bl	8006330 <rfid_reader_version>
			break;
 8006516:	e7ae      	b.n	8006476 <rfid_main_processing+0x26>
			rfid_reader_terminate();
 8006518:	f7ff feea 	bl	80062f0 <rfid_reader_terminate>
			break;
 800651c:	e7ab      	b.n	8006476 <rfid_main_processing+0x26>
					rfid_app.reg.tag_ok = 0;
 800651e:	213d      	movs	r1, #61	; 0x3d
 8006520:	220c      	movs	r2, #12
 8006522:	5c6b      	ldrb	r3, [r5, r1]
 8006524:	4393      	bics	r3, r2
 8006526:	001a      	movs	r2, r3
 8006528:	2308      	movs	r3, #8
 800652a:	4313      	orrs	r3, r2
 800652c:	546b      	strb	r3, [r5, r1]
 800652e:	e7a2      	b.n	8006476 <rfid_main_processing+0x26>
 8006530:	20000050 	.word	0x20000050
 8006534:	20000008 	.word	0x20000008
 8006538:	0800d8f4 	.word	0x0800d8f4
 800653c:	0800d8d0 	.word	0x0800d8d0

08006540 <_APP_RFID_located_in_timer>:

void _APP_RFID_located_in_timer()
{
 8006540:	b510      	push	{r4, lr}
	if(rfid_app.found_frame)
 8006542:	4c0c      	ldr	r4, [pc, #48]	; (8006574 <_APP_RFID_located_in_timer+0x34>)
 8006544:	78a3      	ldrb	r3, [r4, #2]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d100      	bne.n	800654c <_APP_RFID_located_in_timer+0xc>
			rfid_app.found_frame = 0;
			rfid_main_processing();
		}
	}
	//if(rfid_queue.blank_check < 0xffff) rfid_queue.blank_check++;
}
 800654a:	bd10      	pop	{r4, pc}
		_LIB_USERDELAY_stop(&gTimeout_rfid_comm_fault);
 800654c:	480a      	ldr	r0, [pc, #40]	; (8006578 <_APP_RFID_located_in_timer+0x38>)
 800654e:	f000 fd81 	bl	8007054 <_LIB_USERDELAY_stop>
		rfid_queue.blank_check = 0;
 8006552:	2200      	movs	r2, #0
 8006554:	4b09      	ldr	r3, [pc, #36]	; (800657c <_APP_RFID_located_in_timer+0x3c>)
 8006556:	815a      	strh	r2, [r3, #10]
		rfid_app.interval_counter++;
 8006558:	8823      	ldrh	r3, [r4, #0]
 800655a:	3301      	adds	r3, #1
 800655c:	b29b      	uxth	r3, r3
		if(rfid_app.interval_counter > RETURN_INTERVAL)
 800655e:	2b01      	cmp	r3, #1
 8006560:	d801      	bhi.n	8006566 <_APP_RFID_located_in_timer+0x26>
		rfid_app.interval_counter++;
 8006562:	8023      	strh	r3, [r4, #0]
 8006564:	e7f1      	b.n	800654a <_APP_RFID_located_in_timer+0xa>
			rfid_app.found_frame = 0;
 8006566:	2300      	movs	r3, #0
			rfid_app.interval_counter = 0;
 8006568:	8022      	strh	r2, [r4, #0]
			rfid_app.found_frame = 0;
 800656a:	70a3      	strb	r3, [r4, #2]
			rfid_main_processing();
 800656c:	f7ff ff70 	bl	8006450 <rfid_main_processing>
}
 8006570:	e7eb      	b.n	800654a <_APP_RFID_located_in_timer+0xa>
 8006572:	46c0      	nop			; (mov r8, r8)
 8006574:	20000008 	.word	0x20000008
 8006578:	20000888 	.word	0x20000888
 800657c:	20000050 	.word	0x20000050

08006580 <_APP_RFID_state_machine>:
	return rfid_app.state;
 8006580:	233c      	movs	r3, #60	; 0x3c


void _APP_RFID_state_machine()
{
 8006582:	b570      	push	{r4, r5, r6, lr}
	return rfid_app.state;
 8006584:	4c39      	ldr	r4, [pc, #228]	; (800666c <_APP_RFID_state_machine+0xec>)
 8006586:	5ce3      	ldrb	r3, [r4, r3]
 8006588:	2b07      	cmp	r3, #7
 800658a:	d80a      	bhi.n	80065a2 <_APP_RFID_state_machine+0x22>
 800658c:	4a38      	ldr	r2, [pc, #224]	; (8006670 <_APP_RFID_state_machine+0xf0>)
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	58d3      	ldr	r3, [r2, r3]
 8006592:	469f      	mov	pc, r3
	eRFID_State state = rfid_get_current_state();

	switch(state)
	{
		case RFID_Init :
			if(1 == rfid_app.reg.init_ok)
 8006594:	233d      	movs	r3, #61	; 0x3d
 8006596:	5ce3      	ldrb	r3, [r4, r3]
 8006598:	07db      	lsls	r3, r3, #31
 800659a:	d502      	bpl.n	80065a2 <_APP_RFID_state_machine+0x22>
	rfid_app.state = cstate;
 800659c:	233c      	movs	r3, #60	; 0x3c
 800659e:	2202      	movs	r2, #2
 80065a0:	54e2      	strb	r2, [r4, r3]
		break;
		default :

		break;
	}
}
 80065a2:	bd70      	pop	{r4, r5, r6, pc}
			if(_LIB_USERDELAY_start(&gDelay_rfid_finish, DELAY_RENEW_OFF))
 80065a4:	4d33      	ldr	r5, [pc, #204]	; (8006674 <_APP_RFID_state_machine+0xf4>)
 80065a6:	2100      	movs	r1, #0
 80065a8:	0028      	movs	r0, r5
 80065aa:	f000 fd43 	bl	8007034 <_LIB_USERDELAY_start>
 80065ae:	2800      	cmp	r0, #0
 80065b0:	d158      	bne.n	8006664 <_APP_RFID_state_machine+0xe4>
			if(_LIB_USERDELAY_isfired(&gDelay_rfid_finish))
 80065b2:	0028      	movs	r0, r5
 80065b4:	f000 fd52 	bl	800705c <_LIB_USERDELAY_isfired>
 80065b8:	2800      	cmp	r0, #0
 80065ba:	d0f2      	beq.n	80065a2 <_APP_RFID_state_machine+0x22>
				_LIB_USERDELAY_stop(&gDelay_rfid_finish);
 80065bc:	0028      	movs	r0, r5
 80065be:	f000 fd49 	bl	8007054 <_LIB_USERDELAY_stop>
				printf("#### rfid_finish_delay_ok ####\r\n");
 80065c2:	482d      	ldr	r0, [pc, #180]	; (8006678 <_APP_RFID_state_machine+0xf8>)
 80065c4:	f004 fc34 	bl	800ae30 <puts>
 80065c8:	e7e8      	b.n	800659c <_APP_RFID_state_machine+0x1c>
			if(1 == rfid_app.reg.tag_start)
 80065ca:	223d      	movs	r2, #61	; 0x3d
 80065cc:	2102      	movs	r1, #2
 80065ce:	5ca3      	ldrb	r3, [r4, r2]
 80065d0:	4219      	tst	r1, r3
 80065d2:	d0e6      	beq.n	80065a2 <_APP_RFID_state_machine+0x22>
				rfid_app.reg.tag_start = 0;
 80065d4:	438b      	bics	r3, r1
				_APP_RFID_req(0xEA);
 80065d6:	20ea      	movs	r0, #234	; 0xea
				rfid_app.reg.tag_start = 0;
 80065d8:	54a3      	strb	r3, [r4, r2]
				_APP_RFID_req(0xEA);
 80065da:	f7ff ff05 	bl	80063e8 <_APP_RFID_req>
	rfid_app.state = cstate;
 80065de:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80065e0:	4a26      	ldr	r2, [pc, #152]	; (800667c <_APP_RFID_state_machine+0xfc>)
				printf("rfid_tagging start\r\n");
 80065e2:	4827      	ldr	r0, [pc, #156]	; (8006680 <_APP_RFID_state_machine+0x100>)
	rfid_app.state = cstate;
 80065e4:	4013      	ands	r3, r2
 80065e6:	2203      	movs	r2, #3
 80065e8:	4313      	orrs	r3, r2
 80065ea:	87a3      	strh	r3, [r4, #60]	; 0x3c
				printf("rfid_tagging start\r\n");
 80065ec:	f004 fc20 	bl	800ae30 <puts>
 80065f0:	e7d7      	b.n	80065a2 <_APP_RFID_state_machine+0x22>
			if(1 == rfid_app.reg.tag_ok)
 80065f2:	233d      	movs	r3, #61	; 0x3d
 80065f4:	5ce3      	ldrb	r3, [r4, r3]
 80065f6:	075a      	lsls	r2, r3, #29
 80065f8:	d42a      	bmi.n	8006650 <_APP_RFID_state_machine+0xd0>
			else if((1 == rfid_app.reg.tag_error) || (1 == rfid_app.reg.tag_timeout))
 80065fa:	2218      	movs	r2, #24
 80065fc:	421a      	tst	r2, r3
 80065fe:	d0d0      	beq.n	80065a2 <_APP_RFID_state_machine+0x22>
	rfid_app.state = cstate;
 8006600:	233c      	movs	r3, #60	; 0x3c
 8006602:	3a13      	subs	r2, #19
 8006604:	54e2      	strb	r2, [r4, r3]
	return _TRUE;
 8006606:	e7cc      	b.n	80065a2 <_APP_RFID_state_machine+0x22>
			if(1 == rfid_app.reg.read_data)
 8006608:	233d      	movs	r3, #61	; 0x3d
 800660a:	5ce3      	ldrb	r3, [r4, r3]
 800660c:	065b      	lsls	r3, r3, #25
 800660e:	d5c8      	bpl.n	80065a2 <_APP_RFID_state_machine+0x22>
	rfid_app.state = cstate;
 8006610:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8006612:	4a1c      	ldr	r2, [pc, #112]	; (8006684 <_APP_RFID_state_machine+0x104>)
 8006614:	4013      	ands	r3, r2
 8006616:	2207      	movs	r2, #7
 8006618:	4313      	orrs	r3, r2
 800661a:	87a3      	strh	r3, [r4, #60]	; 0x3c
	return _TRUE;
 800661c:	e7c1      	b.n	80065a2 <_APP_RFID_state_machine+0x22>
			if((0 == rfid_app.reg.tag_error) || (0 == rfid_app.reg.tag_timeout))
 800661e:	233d      	movs	r3, #61	; 0x3d
 8006620:	5ce2      	ldrb	r2, [r4, r3]
 8006622:	3b25      	subs	r3, #37	; 0x25
 8006624:	4013      	ands	r3, r2
 8006626:	2b18      	cmp	r3, #24
 8006628:	d0bb      	beq.n	80065a2 <_APP_RFID_state_machine+0x22>
	rfid_app.state = cstate;
 800662a:	233c      	movs	r3, #60	; 0x3c
 800662c:	2207      	movs	r2, #7
 800662e:	54e2      	strb	r2, [r4, r3]
	return _TRUE;
 8006630:	e7b7      	b.n	80065a2 <_APP_RFID_state_machine+0x22>
			if(1 == rfid_app.reg.tag_terminate)
 8006632:	233d      	movs	r3, #61	; 0x3d
 8006634:	5ce3      	ldrb	r3, [r4, r3]
 8006636:	2b7f      	cmp	r3, #127	; 0x7f
 8006638:	d9b3      	bls.n	80065a2 <_APP_RFID_state_machine+0x22>
				printf("#### rfid_terminate_ok ####\r\n");
 800663a:	4813      	ldr	r0, [pc, #76]	; (8006688 <_APP_RFID_state_machine+0x108>)
 800663c:	f004 fbf8 	bl	800ae30 <puts>
	rfid_app.state = cstate;
 8006640:	22fe      	movs	r2, #254	; 0xfe
 8006642:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8006644:	01d2      	lsls	r2, r2, #7
 8006646:	4013      	ands	r3, r2
 8006648:	2207      	movs	r2, #7
 800664a:	4313      	orrs	r3, r2
 800664c:	87a3      	strh	r3, [r4, #60]	; 0x3c
	return _TRUE;
 800664e:	e7a8      	b.n	80065a2 <_APP_RFID_state_machine+0x22>
	rfid_app.state = cstate;
 8006650:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8006652:	4a0e      	ldr	r2, [pc, #56]	; (800668c <_APP_RFID_state_machine+0x10c>)
				printf("rfid_tagging\r\n");
 8006654:	480e      	ldr	r0, [pc, #56]	; (8006690 <_APP_RFID_state_machine+0x110>)
	rfid_app.state = cstate;
 8006656:	401a      	ands	r2, r3
 8006658:	4b0e      	ldr	r3, [pc, #56]	; (8006694 <_APP_RFID_state_machine+0x114>)
 800665a:	4313      	orrs	r3, r2
 800665c:	87a3      	strh	r3, [r4, #60]	; 0x3c
				printf("rfid_tagging\r\n");
 800665e:	f004 fbe7 	bl	800ae30 <puts>
 8006662:	e79e      	b.n	80065a2 <_APP_RFID_state_machine+0x22>
				printf("#### rfid_finish_delay_start ####\r\n");
 8006664:	480c      	ldr	r0, [pc, #48]	; (8006698 <_APP_RFID_state_machine+0x118>)
 8006666:	f004 fbe3 	bl	800ae30 <puts>
 800666a:	e7a2      	b.n	80065b2 <_APP_RFID_state_machine+0x32>
 800666c:	20000008 	.word	0x20000008
 8006670:	0800d9d4 	.word	0x0800d9d4
 8006674:	2000087c 	.word	0x2000087c
 8006678:	0800d9b4 	.word	0x0800d9b4
 800667c:	fffffb00 	.word	0xfffffb00
 8006680:	0800d94c 	.word	0x0800d94c
 8006684:	ffffbf00 	.word	0xffffbf00
 8006688:	0800d970 	.word	0x0800d970
 800668c:	ffffdb00 	.word	0xffffdb00
 8006690:	0800d960 	.word	0x0800d960
 8006694:	00002004 	.word	0x00002004
 8006698:	0800d990 	.word	0x0800d990

0800669c <_APP_RFID_set_start_tagging>:


void _APP_RFID_set_start_tagging(uint8_t mode)
{
 800669c:	b570      	push	{r4, r5, r6, lr}
	eRFID_State mstate = rfid_get_current_state();

	if(0 == mode)
 800669e:	2800      	cmp	r0, #0
 80066a0:	d015      	beq.n	80066ce <_APP_RFID_set_start_tagging+0x32>
		rfid_app.reg.tag_error = 0;
		rfid_app.reg.tag_timeout = 0;
		rfid_app.reg.tag_start = 1;
		printf("#### rfid_set start #### \r\n");
	}
	else if(1 == mode)
 80066a2:	2801      	cmp	r0, #1
 80066a4:	d000      	beq.n	80066a8 <_APP_RFID_set_start_tagging+0xc>
			rfid_app.reg.tag_start = 0;
			_APP_RFID_req(0xD6);
			rfid_set_state(RFID_Terminate);
		}
	}
}
 80066a6:	bd70      	pop	{r4, r5, r6, pc}
	return rfid_app.state;
 80066a8:	253c      	movs	r5, #60	; 0x3c
 80066aa:	4c0f      	ldr	r4, [pc, #60]	; (80066e8 <_APP_RFID_set_start_tagging+0x4c>)
		if(RFID_Start == mstate)
 80066ac:	5d63      	ldrb	r3, [r4, r5]
 80066ae:	2b03      	cmp	r3, #3
 80066b0:	d1f9      	bne.n	80066a6 <_APP_RFID_set_start_tagging+0xa>
			printf("#### rfid_terminate start #### \r\n");
 80066b2:	480e      	ldr	r0, [pc, #56]	; (80066ec <_APP_RFID_set_start_tagging+0x50>)
 80066b4:	f004 fbbc 	bl	800ae30 <puts>
			rfid_app.reg.tag_start = 0;
 80066b8:	223d      	movs	r2, #61	; 0x3d
 80066ba:	2102      	movs	r1, #2
 80066bc:	5ca3      	ldrb	r3, [r4, r2]
			_APP_RFID_req(0xD6);
 80066be:	20d6      	movs	r0, #214	; 0xd6
			rfid_app.reg.tag_start = 0;
 80066c0:	438b      	bics	r3, r1
 80066c2:	54a3      	strb	r3, [r4, r2]
			_APP_RFID_req(0xD6);
 80066c4:	f7ff fe90 	bl	80063e8 <_APP_RFID_req>
	rfid_app.state = cstate;
 80066c8:	2306      	movs	r3, #6
 80066ca:	5563      	strb	r3, [r4, r5]
}
 80066cc:	e7eb      	b.n	80066a6 <_APP_RFID_set_start_tagging+0xa>
		rfid_app.reg.tag_start = 1;
 80066ce:	223d      	movs	r2, #61	; 0x3d
 80066d0:	4905      	ldr	r1, [pc, #20]	; (80066e8 <_APP_RFID_set_start_tagging+0x4c>)
 80066d2:	301a      	adds	r0, #26
 80066d4:	5c8b      	ldrb	r3, [r1, r2]
 80066d6:	4383      	bics	r3, r0
 80066d8:	2002      	movs	r0, #2
 80066da:	4303      	orrs	r3, r0
 80066dc:	548b      	strb	r3, [r1, r2]
		printf("#### rfid_set start #### \r\n");
 80066de:	4804      	ldr	r0, [pc, #16]	; (80066f0 <_APP_RFID_set_start_tagging+0x54>)
 80066e0:	f004 fba6 	bl	800ae30 <puts>
 80066e4:	e7df      	b.n	80066a6 <_APP_RFID_set_start_tagging+0xa>
 80066e6:	46c0      	nop			; (mov r8, r8)
 80066e8:	20000008 	.word	0x20000008
 80066ec:	0800da10 	.word	0x0800da10
 80066f0:	0800d9f4 	.word	0x0800d9f4

080066f4 <_APP_RFID_get_tagging_result>:

uint8_t _APP_RFID_get_tagging_result()
{
	uint8_t ret_value = _CONTINUE;

	if(1 == rfid_app.reg.data_standby)
 80066f4:	233d      	movs	r3, #61	; 0x3d
 80066f6:	4a07      	ldr	r2, [pc, #28]	; (8006714 <_APP_RFID_get_tagging_result+0x20>)
 80066f8:	5cd3      	ldrb	r3, [r2, r3]
 80066fa:	2220      	movs	r2, #32
 80066fc:	0010      	movs	r0, r2
 80066fe:	4018      	ands	r0, r3
 8006700:	421a      	tst	r2, r3
 8006702:	d103      	bne.n	800670c <_APP_RFID_get_tagging_result+0x18>
	{
		ret_value = _TRUE;
	}
	else if((1 == rfid_app.reg.tag_error) || (1 == rfid_app.reg.tag_timeout))
 8006704:	3a08      	subs	r2, #8
 8006706:	421a      	tst	r2, r3
 8006708:	d002      	beq.n	8006710 <_APP_RFID_get_tagging_result+0x1c>
	{
		ret_value = _FALSE;
	}

	return ret_value;
}
 800670a:	4770      	bx	lr
		ret_value = _TRUE;
 800670c:	2001      	movs	r0, #1
 800670e:	e7fc      	b.n	800670a <_APP_RFID_get_tagging_result+0x16>
	uint8_t ret_value = _CONTINUE;
 8006710:	2002      	movs	r0, #2
 8006712:	e7fa      	b.n	800670a <_APP_RFID_get_tagging_result+0x16>
 8006714:	20000008 	.word	0x20000008

08006718 <_APP_RFID_get_card_number>:
	rfid_app.reg.data_standby = 0;
	rfid_app.reg.read_data = 1;
}
#else
void _APP_RFID_get_card_number(uint8_t * cardnum)
{
 8006718:	b570      	push	{r4, r5, r6, lr}
	//220517 PES : Todo
	//get card number function

	cardnum[0] = _LIB_BITOP_ext_u16_to_u8one(rfid_app.cardnum[0], _FILED_MSB_);
 800671a:	4d23      	ldr	r5, [pc, #140]	; (80067a8 <_APP_RFID_get_card_number+0x90>)
{
 800671c:	b086      	sub	sp, #24
 800671e:	0004      	movs	r4, r0
	cardnum[0] = _LIB_BITOP_ext_u16_to_u8one(rfid_app.cardnum[0], _FILED_MSB_);
 8006720:	2101      	movs	r1, #1
 8006722:	8fe8      	ldrh	r0, [r5, #62]	; 0x3e
 8006724:	f000 fbc2 	bl	8006eac <_LIB_BITOP_ext_u16_to_u8one>
 8006728:	7020      	strb	r0, [r4, #0]
	cardnum[1] = _LIB_BITOP_ext_u16_to_u8one(rfid_app.cardnum[0], _FILED_LSB_);
 800672a:	2100      	movs	r1, #0
 800672c:	8fe8      	ldrh	r0, [r5, #62]	; 0x3e
 800672e:	f000 fbbd 	bl	8006eac <_LIB_BITOP_ext_u16_to_u8one>
	cardnum[2] = _LIB_BITOP_ext_u16_to_u8one(rfid_app.cardnum[1], _FILED_MSB_);
 8006732:	2640      	movs	r6, #64	; 0x40
	cardnum[1] = _LIB_BITOP_ext_u16_to_u8one(rfid_app.cardnum[0], _FILED_LSB_);
 8006734:	7060      	strb	r0, [r4, #1]
	cardnum[2] = _LIB_BITOP_ext_u16_to_u8one(rfid_app.cardnum[1], _FILED_MSB_);
 8006736:	5ba8      	ldrh	r0, [r5, r6]
 8006738:	2101      	movs	r1, #1
 800673a:	f000 fbb7 	bl	8006eac <_LIB_BITOP_ext_u16_to_u8one>
 800673e:	70a0      	strb	r0, [r4, #2]
	cardnum[3] = _LIB_BITOP_ext_u16_to_u8one(rfid_app.cardnum[1], _FILED_LSB_);
 8006740:	5ba8      	ldrh	r0, [r5, r6]
 8006742:	2100      	movs	r1, #0
 8006744:	f000 fbb2 	bl	8006eac <_LIB_BITOP_ext_u16_to_u8one>
	cardnum[4] = _LIB_BITOP_ext_u16_to_u8one(rfid_app.cardnum[2], _FILED_MSB_);
 8006748:	3602      	adds	r6, #2
	cardnum[3] = _LIB_BITOP_ext_u16_to_u8one(rfid_app.cardnum[1], _FILED_LSB_);
 800674a:	70e0      	strb	r0, [r4, #3]
	cardnum[4] = _LIB_BITOP_ext_u16_to_u8one(rfid_app.cardnum[2], _FILED_MSB_);
 800674c:	5ba8      	ldrh	r0, [r5, r6]
 800674e:	2101      	movs	r1, #1
 8006750:	f000 fbac 	bl	8006eac <_LIB_BITOP_ext_u16_to_u8one>
 8006754:	7120      	strb	r0, [r4, #4]
	cardnum[5] = _LIB_BITOP_ext_u16_to_u8one(rfid_app.cardnum[2], _FILED_LSB_);
 8006756:	5ba8      	ldrh	r0, [r5, r6]
 8006758:	2100      	movs	r1, #0
 800675a:	f000 fba7 	bl	8006eac <_LIB_BITOP_ext_u16_to_u8one>
	cardnum[6] = _LIB_BITOP_ext_u16_to_u8one(rfid_app.cardnum[3], _FILED_MSB_);
 800675e:	3602      	adds	r6, #2
	cardnum[5] = _LIB_BITOP_ext_u16_to_u8one(rfid_app.cardnum[2], _FILED_LSB_);
 8006760:	7160      	strb	r0, [r4, #5]
	cardnum[6] = _LIB_BITOP_ext_u16_to_u8one(rfid_app.cardnum[3], _FILED_MSB_);
 8006762:	2101      	movs	r1, #1
 8006764:	5ba8      	ldrh	r0, [r5, r6]
 8006766:	f000 fba1 	bl	8006eac <_LIB_BITOP_ext_u16_to_u8one>
 800676a:	71a0      	strb	r0, [r4, #6]
	cardnum[7] = _LIB_BITOP_ext_u16_to_u8one(rfid_app.cardnum[3], _FILED_LSB_);
 800676c:	2100      	movs	r1, #0
 800676e:	5ba8      	ldrh	r0, [r5, r6]
 8006770:	f000 fb9c 	bl	8006eac <_LIB_BITOP_ext_u16_to_u8one>
 8006774:	71e0      	strb	r0, [r4, #7]

	printf("%02x%02x %02x%02x %02x%02x %02x%02x \r\n",
 8006776:	9004      	str	r0, [sp, #16]
 8006778:	79a0      	ldrb	r0, [r4, #6]
 800677a:	78a3      	ldrb	r3, [r4, #2]
 800677c:	9003      	str	r0, [sp, #12]
 800677e:	7960      	ldrb	r0, [r4, #5]
 8006780:	7862      	ldrb	r2, [r4, #1]
 8006782:	9002      	str	r0, [sp, #8]
 8006784:	7920      	ldrb	r0, [r4, #4]
 8006786:	7821      	ldrb	r1, [r4, #0]
 8006788:	9001      	str	r0, [sp, #4]
 800678a:	78e0      	ldrb	r0, [r4, #3]
 800678c:	9000      	str	r0, [sp, #0]
 800678e:	4807      	ldr	r0, [pc, #28]	; (80067ac <_APP_RFID_get_card_number+0x94>)
 8006790:	f004 fac2 	bl	800ad18 <iprintf>
			cardnum[4],
			cardnum[5],
			cardnum[6],
			cardnum[7]);

	rfid_app.reg.data_standby = 0;
 8006794:	223d      	movs	r2, #61	; 0x3d
 8006796:	2160      	movs	r1, #96	; 0x60
 8006798:	5cab      	ldrb	r3, [r5, r2]
 800679a:	438b      	bics	r3, r1
 800679c:	2140      	movs	r1, #64	; 0x40
 800679e:	430b      	orrs	r3, r1
 80067a0:	54ab      	strb	r3, [r5, r2]
	rfid_app.reg.read_data = 1;
}
 80067a2:	b006      	add	sp, #24
 80067a4:	bd70      	pop	{r4, r5, r6, pc}
 80067a6:	46c0      	nop			; (mov r8, r8)
 80067a8:	20000008 	.word	0x20000008
 80067ac:	0800da34 	.word	0x0800da34

080067b0 <_APP_RFID_is_init_ok>:

uint8_t _APP_RFID_is_init_ok()
{
	uint8_t ret_value = _FALSE;

	if(1 == rfid_app.reg.init_ok)
 80067b0:	233d      	movs	r3, #61	; 0x3d
	{
		ret_value = _TRUE;
	}

	return ret_value;
 80067b2:	2001      	movs	r0, #1
	if(1 == rfid_app.reg.init_ok)
 80067b4:	4a01      	ldr	r2, [pc, #4]	; (80067bc <_APP_RFID_is_init_ok+0xc>)
 80067b6:	5cd3      	ldrb	r3, [r2, r3]
	return ret_value;
 80067b8:	4018      	ands	r0, r3
}
 80067ba:	4770      	bx	lr
 80067bc:	20000008 	.word	0x20000008

080067c0 <_APP_RFID_startup>:
	rfid_app.state = cstate;
 80067c0:	2202      	movs	r2, #2

	//_APP_RFID_check_status_loop();
}

void _APP_RFID_startup()
{
 80067c2:	b510      	push	{r4, lr}
	rfid_app.state = cstate;
 80067c4:	490a      	ldr	r1, [pc, #40]	; (80067f0 <_APP_RFID_startup+0x30>)
 80067c6:	32ff      	adds	r2, #255	; 0xff
 80067c8:	8f8b      	ldrh	r3, [r1, #60]	; 0x3c
	//rfid_write_reg_bit(RFIDAPP_REG_MSG_TX_ENABLE, _ON);
	rfid_set_state(RFID_Init);

	rfid_app.reg.init_ok = 1;
	_LIB_USERDELAY_set(&gDelay_rfid_comm_periodic_loop_time,100);
 80067ca:	480a      	ldr	r0, [pc, #40]	; (80067f4 <_APP_RFID_startup+0x34>)
	rfid_app.state = cstate;
 80067cc:	0a5b      	lsrs	r3, r3, #9
 80067ce:	025b      	lsls	r3, r3, #9
 80067d0:	4313      	orrs	r3, r2
 80067d2:	878b      	strh	r3, [r1, #60]	; 0x3c
	_LIB_USERDELAY_set(&gDelay_rfid_comm_periodic_loop_time,100);
 80067d4:	2164      	movs	r1, #100	; 0x64
 80067d6:	f000 fc23 	bl	8007020 <_LIB_USERDELAY_set>
	_LIB_USERDELAY_set(&gTimeout_rfid_comm_fault, 20000);
 80067da:	4907      	ldr	r1, [pc, #28]	; (80067f8 <_APP_RFID_startup+0x38>)
 80067dc:	4807      	ldr	r0, [pc, #28]	; (80067fc <_APP_RFID_startup+0x3c>)
 80067de:	f000 fc1f 	bl	8007020 <_LIB_USERDELAY_set>
	_LIB_USERDELAY_set(&gDelay_rfid_finish,2000);
 80067e2:	21fa      	movs	r1, #250	; 0xfa
 80067e4:	4806      	ldr	r0, [pc, #24]	; (8006800 <_APP_RFID_startup+0x40>)
 80067e6:	00c9      	lsls	r1, r1, #3
 80067e8:	f000 fc1a 	bl	8007020 <_LIB_USERDELAY_set>
}
 80067ec:	bd10      	pop	{r4, pc}
 80067ee:	46c0      	nop			; (mov r8, r8)
 80067f0:	20000008 	.word	0x20000008
 80067f4:	20000870 	.word	0x20000870
 80067f8:	00004e20 	.word	0x00004e20
 80067fc:	20000888 	.word	0x20000888
 8006800:	2000087c 	.word	0x2000087c

08006804 <_APP_RFID_comm_process>:
{
	//Todo : init function - check version packet data is not empty??
}

void _APP_RFID_comm_process()
{
 8006804:	b510      	push	{r4, lr}
	_LIB_USERDELAY_start(&gDelay_rfid_comm_periodic_loop_time, DELAY_RENEW_OFF);
 8006806:	4c0b      	ldr	r4, [pc, #44]	; (8006834 <_APP_RFID_comm_process+0x30>)
 8006808:	2100      	movs	r1, #0
 800680a:	0020      	movs	r0, r4
 800680c:	f000 fc12 	bl	8007034 <_LIB_USERDELAY_start>

    if(_LIB_USERDELAY_isfired(&gDelay_rfid_comm_periodic_loop_time))
 8006810:	0020      	movs	r0, r4
 8006812:	f000 fc23 	bl	800705c <_LIB_USERDELAY_isfired>
 8006816:	2800      	cmp	r0, #0
 8006818:	d100      	bne.n	800681c <_APP_RFID_comm_process+0x18>

    	_APP_RFID_set_event();

	  	_LIB_USERDELAY_start(&gDelay_rfid_comm_periodic_loop_time, DELAY_RENEW_ON);
    }
}
 800681a:	bd10      	pop	{r4, pc}
	rfid_frame_search();
 800681c:	f7ff fce0 	bl	80061e0 <rfid_frame_search>
	_APP_RFID_located_in_timer();
 8006820:	f7ff fe8e 	bl	8006540 <_APP_RFID_located_in_timer>
	_APP_RFID_state_machine();
 8006824:	f7ff feac 	bl	8006580 <_APP_RFID_state_machine>
	  	_LIB_USERDELAY_start(&gDelay_rfid_comm_periodic_loop_time, DELAY_RENEW_ON);
 8006828:	2101      	movs	r1, #1
 800682a:	0020      	movs	r0, r4
 800682c:	f000 fc02 	bl	8007034 <_LIB_USERDELAY_start>
}
 8006830:	e7f3      	b.n	800681a <_APP_RFID_comm_process+0x16>
 8006832:	46c0      	nop			; (mov r8, r8)
 8006834:	20000870 	.word	0x20000870

08006838 <_APP_SYSTEMCTL_framesearch>:
    }
    return wCRCWord;
}

void _APP_SYSTEMCTL_framesearch()
{
 8006838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800683a:	46de      	mov	lr, fp
 800683c:	464e      	mov	r6, r9
 800683e:	4645      	mov	r5, r8
 8006840:	4657      	mov	r7, sl
 8006842:	b5e0      	push	{r5, r6, r7, lr}
	uint8_t temp_func = 0;
	uint8_t temp_cmd = 0;
	uint8_t temp_length = 0;
	//static uint8_t frame_index_cnt;

	mclen =  _LIB_U8QUEUE_comLen(&config_queue);
 8006844:	4b4c      	ldr	r3, [pc, #304]	; (8006978 <_APP_SYSTEMCTL_framesearch+0x140>)
{
 8006846:	b09f      	sub	sp, #124	; 0x7c
	mclen =  _LIB_U8QUEUE_comLen(&config_queue);
 8006848:	0018      	movs	r0, r3
 800684a:	4698      	mov	r8, r3
 800684c:	f000 fb84 	bl	8006f58 <_LIB_U8QUEUE_comLen>

	if((config_app.found_frame == 1) || (mclen < 4))
 8006850:	4b4a      	ldr	r3, [pc, #296]	; (800697c <_APP_SYSTEMCTL_framesearch+0x144>)
	mclen =  _LIB_U8QUEUE_comLen(&config_queue);
 8006852:	0004      	movs	r4, r0
	if((config_app.found_frame == 1) || (mclen < 4))
 8006854:	4699      	mov	r9, r3
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d001      	beq.n	8006860 <_APP_SYSTEMCTL_framesearch+0x28>
 800685c:	2803      	cmp	r0, #3
 800685e:	d806      	bhi.n	800686e <_APP_SYSTEMCTL_framesearch+0x36>
	}
	else
	{
		return;
	}
}
 8006860:	b01f      	add	sp, #124	; 0x7c
 8006862:	bcf0      	pop	{r4, r5, r6, r7}
 8006864:	46bb      	mov	fp, r7
 8006866:	46b2      	mov	sl, r6
 8006868:	46a9      	mov	r9, r5
 800686a:	46a0      	mov	r8, r4
 800686c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bsave_pointer = config_queue.action_pointer;
 800686e:	4643      	mov	r3, r8
 8006870:	891b      	ldrh	r3, [r3, #8]
	temp_cmd = _LIB_U8QUEUE_get_byte(&config_queue);//UI_COMM_mb_get_byte_rtu(); // CMD
 8006872:	4640      	mov	r0, r8
	bsave_pointer = config_queue.action_pointer;
 8006874:	9300      	str	r3, [sp, #0]
	temp_cmd = _LIB_U8QUEUE_get_byte(&config_queue);//UI_COMM_mb_get_byte_rtu(); // CMD
 8006876:	f000 fb81 	bl	8006f7c <_LIB_U8QUEUE_get_byte>
 800687a:	0006      	movs	r6, r0
	if(temp_cmd == CONFIG_WRITE_COMMAND)
 800687c:	2885      	cmp	r0, #133	; 0x85
 800687e:	d05c      	beq.n	800693a <_APP_SYSTEMCTL_framesearch+0x102>
	else if(temp_cmd == CONFIG_READ_COMMAND)
 8006880:	2895      	cmp	r0, #149	; 0x95
 8006882:	d1ed      	bne.n	8006860 <_APP_SYSTEMCTL_framesearch+0x28>
		temp_func = _LIB_U8QUEUE_get_byte(&config_queue);
 8006884:	4640      	mov	r0, r8
 8006886:	f000 fb79 	bl	8006f7c <_LIB_U8QUEUE_get_byte>
 800688a:	2302      	movs	r3, #2
 800688c:	469b      	mov	fp, r3
 800688e:	3302      	adds	r3, #2
 8006890:	9303      	str	r3, [sp, #12]
	uint8_t temp_length = 0;
 8006892:	2300      	movs	r3, #0
		temp_func = _LIB_U8QUEUE_get_byte(&config_queue);
 8006894:	2501      	movs	r5, #1
 8006896:	9001      	str	r0, [sp, #4]
	uint8_t temp_length = 0;
 8006898:	9302      	str	r3, [sp, #8]
	for (i = 0; i < callen - 2; i++)
 800689a:	2300      	movs	r3, #0
 800689c:	469a      	mov	sl, r3
 800689e:	002b      	movs	r3, r5
	uint8_t temp_length = 0;
 80068a0:	2401      	movs	r4, #1
 80068a2:	4655      	mov	r5, sl
			else if(i == 1)	crc_calc[i] = temp_func;
 80068a4:	af05      	add	r7, sp, #20
 80068a6:	469a      	mov	sl, r3
 80068a8:	e006      	b.n	80068b8 <_APP_SYSTEMCTL_framesearch+0x80>
		else if(temp_cmd == CONFIG_READ_COMMAND)
 80068aa:	2e95      	cmp	r6, #149	; 0x95
 80068ac:	d014      	beq.n	80068d8 <_APP_SYSTEMCTL_framesearch+0xa0>
	for (i = 0; i < callen - 2; i++)
 80068ae:	0025      	movs	r5, r4
 80068b0:	455c      	cmp	r4, fp
 80068b2:	da1a      	bge.n	80068ea <_APP_SYSTEMCTL_framesearch+0xb2>
 80068b4:	3401      	adds	r4, #1
 80068b6:	b2a4      	uxth	r4, r4
		if(temp_cmd == CONFIG_WRITE_COMMAND)
 80068b8:	2e85      	cmp	r6, #133	; 0x85
 80068ba:	d1f6      	bne.n	80068aa <_APP_SYSTEMCTL_framesearch+0x72>
			if(i == 0)		crc_calc[i] = temp_cmd;
 80068bc:	1e63      	subs	r3, r4, #1
 80068be:	b29b      	uxth	r3, r3
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d006      	beq.n	80068d2 <_APP_SYSTEMCTL_framesearch+0x9a>
			else if(i == 1)	crc_calc[i] = temp_func;
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d00d      	beq.n	80068e4 <_APP_SYSTEMCTL_framesearch+0xac>
			else if(i == 2) crc_calc[i] = temp_length;
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d146      	bne.n	800695a <_APP_SYSTEMCTL_framesearch+0x122>
 80068cc:	9b02      	ldr	r3, [sp, #8]
 80068ce:	70bb      	strb	r3, [r7, #2]
 80068d0:	e7ed      	b.n	80068ae <_APP_SYSTEMCTL_framesearch+0x76>
	for (i = 0; i < callen - 2; i++)
 80068d2:	0025      	movs	r5, r4
			if(i == 0)		crc_calc[i] = temp_cmd;
 80068d4:	703e      	strb	r6, [r7, #0]
	for (i = 0; i < callen - 2; i++)
 80068d6:	e7ed      	b.n	80068b4 <_APP_SYSTEMCTL_framesearch+0x7c>
			if(i == 0)		crc_calc[i] = temp_cmd;
 80068d8:	1e63      	subs	r3, r4, #1
 80068da:	b29b      	uxth	r3, r3
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d0f8      	beq.n	80068d2 <_APP_SYSTEMCTL_framesearch+0x9a>
			else if(i == 1)	crc_calc[i] = temp_func;
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d1e4      	bne.n	80068ae <_APP_SYSTEMCTL_framesearch+0x76>
 80068e4:	9b01      	ldr	r3, [sp, #4]
 80068e6:	707b      	strb	r3, [r7, #1]
 80068e8:	e7e1      	b.n	80068ae <_APP_SYSTEMCTL_framesearch+0x76>
	bl = _LIB_U8QUEUE_get_byte(&config_queue);//UI_COMM_mb_get_byte_rtu();
 80068ea:	4640      	mov	r0, r8
 80068ec:	f000 fb46 	bl	8006f7c <_LIB_U8QUEUE_get_byte>
 80068f0:	0004      	movs	r4, r0
	bh = _LIB_U8QUEUE_get_byte(&config_queue);//UI_COMM_mb_get_byte_rtu();
 80068f2:	4640      	mov	r0, r8
 80068f4:	f000 fb42 	bl	8006f7c <_LIB_U8QUEUE_get_byte>
    while (length--){
 80068f8:	9b03      	ldr	r3, [sp, #12]
 80068fa:	4655      	mov	r5, sl
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d038      	beq.n	8006972 <_APP_SYSTEMCTL_framesearch+0x13a>
    uint16_t wCRCWord = 0xFFFF;
 8006900:	4b1f      	ldr	r3, [pc, #124]	; (8006980 <_APP_SYSTEMCTL_framesearch+0x148>)
 8006902:	4e20      	ldr	r6, [pc, #128]	; (8006984 <_APP_SYSTEMCTL_framesearch+0x14c>)
 8006904:	0019      	movs	r1, r3
 8006906:	aa05      	add	r2, sp, #20
      nTemp = *nData++ ^ wCRCWord;
 8006908:	7813      	ldrb	r3, [r2, #0]
      wCRCWord >>= 8;
 800690a:	0a0f      	lsrs	r7, r1, #8
      nTemp = *nData++ ^ wCRCWord;
 800690c:	404b      	eors	r3, r1
      wCRCWord ^= wCRCTable[nTemp];
 800690e:	b2db      	uxtb	r3, r3
 8006910:	005b      	lsls	r3, r3, #1
 8006912:	5af1      	ldrh	r1, [r6, r3]
    while (length--){
 8006914:	3d01      	subs	r5, #1
 8006916:	b2ed      	uxtb	r5, r5
      wCRCWord ^= wCRCTable[nTemp];
 8006918:	4079      	eors	r1, r7
    while (length--){
 800691a:	3201      	adds	r2, #1
 800691c:	2dff      	cmp	r5, #255	; 0xff
 800691e:	d1f3      	bne.n	8006908 <_APP_SYSTEMCTL_framesearch+0xd0>
 8006920:	b2ca      	uxtb	r2, r1
 8006922:	0a0b      	lsrs	r3, r1, #8
	if(((bh == uch) && (bl == ucl)))
 8006924:	4298      	cmp	r0, r3
 8006926:	d19b      	bne.n	8006860 <_APP_SYSTEMCTL_framesearch+0x28>
 8006928:	4294      	cmp	r4, r2
 800692a:	d199      	bne.n	8006860 <_APP_SYSTEMCTL_framesearch+0x28>
		config_queue.action_pointer = bsave_pointer; //Restore Pointer
 800692c:	4643      	mov	r3, r8
 800692e:	9a00      	ldr	r2, [sp, #0]
 8006930:	811a      	strh	r2, [r3, #8]
		config_app.found_frame = 1;
 8006932:	2301      	movs	r3, #1
 8006934:	464a      	mov	r2, r9
 8006936:	7013      	strb	r3, [r2, #0]
 8006938:	e792      	b.n	8006860 <_APP_SYSTEMCTL_framesearch+0x28>
		temp_func = _LIB_U8QUEUE_get_byte(&config_queue);
 800693a:	4640      	mov	r0, r8
 800693c:	f000 fb1e 	bl	8006f7c <_LIB_U8QUEUE_get_byte>
 8006940:	9001      	str	r0, [sp, #4]
		temp_length = _LIB_U8QUEUE_get_byte(&config_queue);
 8006942:	4640      	mov	r0, r8
 8006944:	f000 fb1a 	bl	8006f7c <_LIB_U8QUEUE_get_byte>
		callen = 5 + temp_length;
 8006948:	1d42      	adds	r2, r0, #5
 800694a:	b293      	uxth	r3, r2
		temp_length = _LIB_U8QUEUE_get_byte(&config_queue);
 800694c:	9002      	str	r0, [sp, #8]
	if(callen > mclen)
 800694e:	429c      	cmp	r4, r3
 8006950:	d208      	bcs.n	8006964 <_APP_SYSTEMCTL_framesearch+0x12c>
		config_queue.action_pointer = bsave_pointer; //Restore Pointer
 8006952:	4643      	mov	r3, r8
 8006954:	9a00      	ldr	r2, [sp, #0]
 8006956:	811a      	strh	r2, [r3, #8]
		return;
 8006958:	e782      	b.n	8006860 <_APP_SYSTEMCTL_framesearch+0x28>
			else			crc_calc[i] = _LIB_U8QUEUE_get_byte(&config_queue);//UI_COMM_mb_get_byte_rtu();
 800695a:	4640      	mov	r0, r8
 800695c:	f000 fb0e 	bl	8006f7c <_LIB_U8QUEUE_get_byte>
 8006960:	5578      	strb	r0, [r7, r5]
 8006962:	e7a4      	b.n	80068ae <_APP_SYSTEMCTL_framesearch+0x76>
 8006964:	b2d2      	uxtb	r2, r2
 8006966:	3b02      	subs	r3, #2
 8006968:	1c85      	adds	r5, r0, #2
 800696a:	469b      	mov	fp, r3
 800696c:	9203      	str	r2, [sp, #12]
 800696e:	b2ed      	uxtb	r5, r5
 8006970:	e793      	b.n	800689a <_APP_SYSTEMCTL_framesearch+0x62>
    while (length--){
 8006972:	23ff      	movs	r3, #255	; 0xff
 8006974:	22ff      	movs	r2, #255	; 0xff
 8006976:	e7d5      	b.n	8006924 <_APP_SYSTEMCTL_framesearch+0xec>
 8006978:	2000005c 	.word	0x2000005c
 800697c:	200008c8 	.word	0x200008c8
 8006980:	0000ffff 	.word	0x0000ffff
 8006984:	0800dd4c 	.word	0x0800dd4c

08006988 <_APP_SYSTEMCTL_req>:

void _APP_SYSTEMCTL_req(uint8_t cmd, uint8_t func, uint8_t len, uint8_t *data)
{
 8006988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t set_cmd = cmd;
	uint8_t set_func = func;
	uint8_t set_len = len;
	uint8_t i;

	config_app.tx_cnt = 0; //cnt init
 800698a:	2500      	movs	r5, #0
 800698c:	4c28      	ldr	r4, [pc, #160]	; (8006a30 <_APP_SYSTEMCTL_req+0xa8>)
 800698e:	8565      	strh	r5, [r4, #42]	; 0x2a


	if(set_cmd == CONFIG_WRITE_COMMAND)
 8006990:	2885      	cmp	r0, #133	; 0x85
 8006992:	d03c      	beq.n	8006a0e <_APP_SYSTEMCTL_req+0x86>
		config_app.tx_buf[config_app.tx_cnt++] = set_cmd;
		config_app.tx_buf[config_app.tx_cnt++] = set_func;
		config_app.tx_buf[config_app.tx_cnt++] = 'O';
		config_app.tx_buf[config_app.tx_cnt++] = 'K';
	}
	else if(set_cmd == CONFIG_READ_COMMAND)
 8006994:	2895      	cmp	r0, #149	; 0x95
 8006996:	d005      	beq.n	80069a4 <_APP_SYSTEMCTL_req+0x1c>
 8006998:	0020      	movs	r0, r4
 800699a:	2100      	movs	r1, #0
 800699c:	3015      	adds	r0, #21
	_MW_UART_tx02(data, cnt);
 800699e:	f001 fb5d 	bl	800805c <_MW_UART_tx02>
		config_app.tx_buf[config_app.tx_cnt++] = crc_data;
		config_app.tx_buf[config_app.tx_cnt++] = crc_data >> 8;
	}

	config_comPut(config_app.tx_buf, config_app.tx_cnt);
}
 80069a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		config_app.tx_buf[config_app.tx_cnt++] = set_func;
 80069a4:	75a1      	strb	r1, [r4, #22]
		config_app.tx_buf[config_app.tx_cnt++] = set_len;
 80069a6:	2103      	movs	r1, #3
		config_app.tx_buf[config_app.tx_cnt++] = set_cmd;
 80069a8:	7560      	strb	r0, [r4, #21]
		config_app.tx_buf[config_app.tx_cnt++] = set_len;
 80069aa:	8561      	strh	r1, [r4, #42]	; 0x2a
 80069ac:	75e2      	strb	r2, [r4, #23]
		for(i=0;i<set_len;i++)
 80069ae:	2a00      	cmp	r2, #0
 80069b0:	d039      	beq.n	8006a26 <_APP_SYSTEMCTL_req+0x9e>
			config_app.tx_buf[config_app.tx_cnt++] = data[i];
 80069b2:	0025      	movs	r5, r4
		for(i=0;i<set_len;i++)
 80069b4:	2100      	movs	r1, #0
			config_app.tx_buf[config_app.tx_cnt++] = data[i];
 80069b6:	3518      	adds	r5, #24
 80069b8:	1d08      	adds	r0, r1, #4
 80069ba:	8560      	strh	r0, [r4, #42]	; 0x2a
 80069bc:	5c58      	ldrb	r0, [r3, r1]
 80069be:	5468      	strb	r0, [r5, r1]
		for(i=0;i<set_len;i++)
 80069c0:	3101      	adds	r1, #1
 80069c2:	b2c8      	uxtb	r0, r1
 80069c4:	4282      	cmp	r2, r0
 80069c6:	d8f7      	bhi.n	80069b8 <_APP_SYSTEMCTL_req+0x30>
 80069c8:	1e56      	subs	r6, r2, #1
    while (length--){
 80069ca:	3202      	adds	r2, #2
 80069cc:	b2d3      	uxtb	r3, r2
 80069ce:	7d62      	ldrb	r2, [r4, #21]
 80069d0:	4918      	ldr	r1, [pc, #96]	; (8006a34 <_APP_SYSTEMCTL_req+0xac>)
 80069d2:	43d2      	mvns	r2, r2
 80069d4:	b2d2      	uxtb	r2, r2
 80069d6:	0052      	lsls	r2, r2, #1
 80069d8:	b2f6      	uxtb	r6, r6
 80069da:	5a52      	ldrh	r2, [r2, r1]
 80069dc:	3604      	adds	r6, #4
 80069de:	4816      	ldr	r0, [pc, #88]	; (8006a38 <_APP_SYSTEMCTL_req+0xb0>)
 80069e0:	4d16      	ldr	r5, [pc, #88]	; (8006a3c <_APP_SYSTEMCTL_req+0xb4>)
 80069e2:	0001      	movs	r1, r0
 80069e4:	4f13      	ldr	r7, [pc, #76]	; (8006a34 <_APP_SYSTEMCTL_req+0xac>)
 80069e6:	e004      	b.n	80069f2 <_APP_SYSTEMCTL_req+0x6a>
 80069e8:	780a      	ldrb	r2, [r1, #0]
 80069ea:	406a      	eors	r2, r5
 80069ec:	b2d2      	uxtb	r2, r2
 80069ee:	0052      	lsls	r2, r2, #1
 80069f0:	5bd2      	ldrh	r2, [r2, r7]
 80069f2:	3b01      	subs	r3, #1
      wCRCWord >>= 8;
 80069f4:	0a2d      	lsrs	r5, r5, #8
    while (length--){
 80069f6:	b2db      	uxtb	r3, r3
      nTemp = *nData++ ^ wCRCWord;
 80069f8:	3101      	adds	r1, #1
      wCRCWord ^= wCRCTable[nTemp];
 80069fa:	4055      	eors	r5, r2
    while (length--){
 80069fc:	2bff      	cmp	r3, #255	; 0xff
 80069fe:	d1f3      	bne.n	80069e8 <_APP_SYSTEMCTL_req+0x60>
		config_app.tx_buf[config_app.tx_cnt++] = crc_data;
 8006a00:	19a3      	adds	r3, r4, r6
 8006a02:	755d      	strb	r5, [r3, #21]
		config_app.tx_buf[config_app.tx_cnt++] = crc_data >> 8;
 8006a04:	1cb1      	adds	r1, r6, #2
 8006a06:	0a2d      	lsrs	r5, r5, #8
 8006a08:	8561      	strh	r1, [r4, #42]	; 0x2a
 8006a0a:	759d      	strb	r5, [r3, #22]
 8006a0c:	e7c7      	b.n	800699e <_APP_SYSTEMCTL_req+0x16>
		config_app.tx_buf[config_app.tx_cnt++] = 'O';
 8006a0e:	234f      	movs	r3, #79	; 0x4f
		config_app.tx_buf[config_app.tx_cnt++] = set_cmd;
 8006a10:	7560      	strb	r0, [r4, #21]
		config_app.tx_buf[config_app.tx_cnt++] = set_func;
 8006a12:	0020      	movs	r0, r4
		config_app.tx_buf[config_app.tx_cnt++] = 'O';
 8006a14:	75e3      	strb	r3, [r4, #23]
		config_app.tx_buf[config_app.tx_cnt++] = 'K';
 8006a16:	3b4b      	subs	r3, #75	; 0x4b
 8006a18:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006a1a:	3347      	adds	r3, #71	; 0x47
		config_app.tx_buf[config_app.tx_cnt++] = set_func;
 8006a1c:	75a1      	strb	r1, [r4, #22]
		config_app.tx_buf[config_app.tx_cnt++] = 'K';
 8006a1e:	7623      	strb	r3, [r4, #24]
 8006a20:	2104      	movs	r1, #4
 8006a22:	3015      	adds	r0, #21
 8006a24:	e7bb      	b.n	800699e <_APP_SYSTEMCTL_req+0x16>
		for(i=0;i<set_len;i++)
 8006a26:	22be      	movs	r2, #190	; 0xbe
		crc_data = config_crc16(&config_app.tx_buf[0], (config_app.tx_cnt));
 8006a28:	2603      	movs	r6, #3
    while (length--){
 8006a2a:	2302      	movs	r3, #2
		for(i=0;i<set_len;i++)
 8006a2c:	0192      	lsls	r2, r2, #6
 8006a2e:	e7d6      	b.n	80069de <_APP_SYSTEMCTL_req+0x56>
 8006a30:	200008c8 	.word	0x200008c8
 8006a34:	0800dd4c 	.word	0x0800dd4c
 8006a38:	200008dd 	.word	0x200008dd
 8006a3c:	0000ffff 	.word	0x0000ffff

08006a40 <_APP_SYSTEMCTL_push_ringbuffer>:
void _APP_SYSTEMCTL_push_ringbuffer(uint8_t comdt)
{
 8006a40:	b510      	push	{r4, lr}
 8006a42:	0001      	movs	r1, r0
	_LIB_U8QUEUE_push_ring(&config_queue, comdt);
 8006a44:	4801      	ldr	r0, [pc, #4]	; (8006a4c <_APP_SYSTEMCTL_push_ringbuffer+0xc>)
 8006a46:	f000 facd 	bl	8006fe4 <_LIB_U8QUEUE_push_ring>
}
 8006a4a:	bd10      	pop	{r4, pc}
 8006a4c:	2000005c 	.word	0x2000005c

08006a50 <config_write_common_command>:

uint8_t config_write_common_command(uint8_t func,uint8_t* temp_data,uint8_t len)
{
 8006a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a52:	46ce      	mov	lr, r9
 8006a54:	4647      	mov	r7, r8
	uint8_t ret_value = _TRUE;

	uint8_t txtemp[30] = {0,};
 8006a56:	2600      	movs	r6, #0
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b091      	sub	sp, #68	; 0x44
 8006a5c:	0004      	movs	r4, r0
 8006a5e:	000f      	movs	r7, r1
 8006a60:	0015      	movs	r5, r2
	uint8_t txtemp[30] = {0,};
 8006a62:	2100      	movs	r1, #0
 8006a64:	221a      	movs	r2, #26
 8006a66:	a801      	add	r0, sp, #4
 8006a68:	9600      	str	r6, [sp, #0]
 8006a6a:	f004 f94c 	bl	800ad06 <memset>
	uint8_t rxtemp[30] = {0,};
 8006a6e:	221a      	movs	r2, #26
 8006a70:	2100      	movs	r1, #0
 8006a72:	a809      	add	r0, sp, #36	; 0x24
 8006a74:	9608      	str	r6, [sp, #32]
 8006a76:	f004 f946 	bl	800ad06 <memset>

	int i = 0;
	int j = 0;

	switch(func)
 8006a7a:	2c01      	cmp	r4, #1
 8006a7c:	d00a      	beq.n	8006a94 <config_write_common_command+0x44>
 8006a7e:	2000      	movs	r0, #0
 8006a80:	2c02      	cmp	r4, #2
 8006a82:	d102      	bne.n	8006a8a <config_write_common_command+0x3a>
					printf("CARDNUM_save ok : %d\r\n", i);
				}
			}
		break;
		case CONFIG_FUNC_DELETE_CARDNUM :
			if(len == 8)
 8006a84:	2d08      	cmp	r5, #8
 8006a86:	d01f      	beq.n	8006ac8 <config_write_common_command+0x78>
	uint8_t ret_value = _TRUE;
 8006a88:	2001      	movs	r0, #1
			ret_value = _FALSE;
		break;
	}

	return ret_value;
}
 8006a8a:	b011      	add	sp, #68	; 0x44
 8006a8c:	bcc0      	pop	{r6, r7}
 8006a8e:	46b9      	mov	r9, r7
 8006a90:	46b0      	mov	r8, r6
 8006a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(len == 8)
 8006a94:	2d08      	cmp	r5, #8
 8006a96:	d1f7      	bne.n	8006a88 <config_write_common_command+0x38>
 8006a98:	2417      	movs	r4, #23
				for(i = 0; i<MAX_CARDNUM_MEMORY ; i++)
 8006a9a:	2500      	movs	r5, #0
 8006a9c:	ae08      	add	r6, sp, #32
					if(true == ee24_read(MEM_ADDR_CARDNUM_INDEX_LSB(i), rxtemp, 1, 100))
 8006a9e:	1fe0      	subs	r0, r4, #7
 8006aa0:	b283      	uxth	r3, r0
 8006aa2:	4698      	mov	r8, r3
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	2364      	movs	r3, #100	; 0x64
 8006aa8:	0031      	movs	r1, r6
 8006aaa:	0020      	movs	r0, r4
 8006aac:	46a9      	mov	r9, r5
 8006aae:	3501      	adds	r5, #1
 8006ab0:	f000 fe7c 	bl	80077ac <ee24_read>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	d002      	beq.n	8006abe <config_write_common_command+0x6e>
						if(0xFF == rxtemp[0])
 8006ab8:	7833      	ldrb	r3, [r6, #0]
 8006aba:	2bff      	cmp	r3, #255	; 0xff
 8006abc:	d030      	beq.n	8006b20 <config_write_common_command+0xd0>
				for(i = 0; i<MAX_CARDNUM_MEMORY ; i++)
 8006abe:	3410      	adds	r4, #16
 8006ac0:	b2a4      	uxth	r4, r4
 8006ac2:	2d10      	cmp	r5, #16
 8006ac4:	d1eb      	bne.n	8006a9e <config_write_common_command+0x4e>
 8006ac6:	e7df      	b.n	8006a88 <config_write_common_command+0x38>
 8006ac8:	2410      	movs	r4, #16
				for(i = 0; i<MAX_CARDNUM_MEMORY ; i++)
 8006aca:	2500      	movs	r5, #0
 8006acc:	ae08      	add	r6, sp, #32
 8006ace:	e003      	b.n	8006ad8 <config_write_common_command+0x88>
 8006ad0:	3410      	adds	r4, #16
 8006ad2:	b2a4      	uxth	r4, r4
 8006ad4:	2d10      	cmp	r5, #16
 8006ad6:	d0d7      	beq.n	8006a88 <config_write_common_command+0x38>
					if(true == ee24_read(MEM_ADDR_CARDNUM_INDEX_MSB(i), rxtemp, 16, 100))
 8006ad8:	2364      	movs	r3, #100	; 0x64
 8006ada:	2210      	movs	r2, #16
 8006adc:	0031      	movs	r1, r6
 8006ade:	0020      	movs	r0, r4
 8006ae0:	46a8      	mov	r8, r5
 8006ae2:	3501      	adds	r5, #1
 8006ae4:	f000 fe62 	bl	80077ac <ee24_read>
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	d0f1      	beq.n	8006ad0 <config_write_common_command+0x80>
						for(j = 0; j<8;j++)
 8006aec:	2300      	movs	r3, #0
							if(temp_data[j] != rxtemp[8+j])
 8006aee:	18f2      	adds	r2, r6, r3
 8006af0:	5cf9      	ldrb	r1, [r7, r3]
 8006af2:	7a12      	ldrb	r2, [r2, #8]
 8006af4:	4291      	cmp	r1, r2
 8006af6:	d1eb      	bne.n	8006ad0 <config_write_common_command+0x80>
						for(j = 0; j<8;j++)
 8006af8:	3301      	adds	r3, #1
 8006afa:	2b08      	cmp	r3, #8
 8006afc:	d1f7      	bne.n	8006aee <config_write_common_command+0x9e>
							txtemp[0] = 0xFF;
 8006afe:	2301      	movs	r3, #1
 8006b00:	425b      	negs	r3, r3
							ee24_write(MEM_ADDR_CARDNUM_INDEX_MSB(i), txtemp, 16, 100);
 8006b02:	4669      	mov	r1, sp
							txtemp[0] = 0xFF;
 8006b04:	9300      	str	r3, [sp, #0]
							txtemp[4] = 0xFF;
 8006b06:	9301      	str	r3, [sp, #4]
							txtemp[8] = 0xFF;
 8006b08:	9302      	str	r3, [sp, #8]
							txtemp[12] = 0xFF;
 8006b0a:	9303      	str	r3, [sp, #12]
							ee24_write(MEM_ADDR_CARDNUM_INDEX_MSB(i), txtemp, 16, 100);
 8006b0c:	2210      	movs	r2, #16
 8006b0e:	0020      	movs	r0, r4
 8006b10:	3365      	adds	r3, #101	; 0x65
 8006b12:	f000 fe3f 	bl	8007794 <ee24_write>
					printf("CARDNUM_delete ok : %d\r\n", i);
 8006b16:	4641      	mov	r1, r8
 8006b18:	4824      	ldr	r0, [pc, #144]	; (8006bac <config_write_common_command+0x15c>)
 8006b1a:	f004 f8fd 	bl	800ad18 <iprintf>
 8006b1e:	e7b3      	b.n	8006a88 <config_write_common_command+0x38>
							txtemp[4] = 0x00;
 8006b20:	466a      	mov	r2, sp
							txtemp[0] = 0x00;
 8006b22:	2300      	movs	r3, #0
							txtemp[4] = 0x00;
 8006b24:	8093      	strh	r3, [r2, #4]
							txtemp[6] = 0x00;
 8006b26:	7193      	strb	r3, [r2, #6]
							txtemp[0] = 0x00;
 8006b28:	9300      	str	r3, [sp, #0]
							txtemp[8] = temp_data[0];
 8006b2a:	783b      	ldrb	r3, [r7, #0]
							ee24_write(MEM_ADDR_CARDNUM_INDEX_MSB(i), txtemp, 16, 100);
 8006b2c:	4669      	mov	r1, sp
							txtemp[8] = temp_data[0];
 8006b2e:	7213      	strb	r3, [r2, #8]
							txtemp[9] = temp_data[1];
 8006b30:	787b      	ldrb	r3, [r7, #1]
							txtemp[7] = (i+1);
 8006b32:	71d5      	strb	r5, [r2, #7]
							txtemp[9] = temp_data[1];
 8006b34:	7253      	strb	r3, [r2, #9]
							txtemp[10] = temp_data[2];
 8006b36:	78bb      	ldrb	r3, [r7, #2]
							ee24_write(MEM_ADDR_CARDNUM_INDEX_MSB(i), txtemp, 16, 100);
 8006b38:	4640      	mov	r0, r8
							txtemp[10] = temp_data[2];
 8006b3a:	7293      	strb	r3, [r2, #10]
							txtemp[11] = temp_data[3];
 8006b3c:	78fb      	ldrb	r3, [r7, #3]
 8006b3e:	72d3      	strb	r3, [r2, #11]
							txtemp[12] = temp_data[4];
 8006b40:	793b      	ldrb	r3, [r7, #4]
 8006b42:	7313      	strb	r3, [r2, #12]
							txtemp[13] = temp_data[5];
 8006b44:	797b      	ldrb	r3, [r7, #5]
 8006b46:	7353      	strb	r3, [r2, #13]
							txtemp[14] = temp_data[6];
 8006b48:	79bb      	ldrb	r3, [r7, #6]
 8006b4a:	7393      	strb	r3, [r2, #14]
							txtemp[15] = temp_data[7];
 8006b4c:	79fb      	ldrb	r3, [r7, #7]
 8006b4e:	73d3      	strb	r3, [r2, #15]
							ee24_write(MEM_ADDR_CARDNUM_INDEX_MSB(i), txtemp, 16, 100);
 8006b50:	2364      	movs	r3, #100	; 0x64
 8006b52:	2210      	movs	r2, #16
 8006b54:	f000 fe1e 	bl	8007794 <ee24_write>
							config_app.usecardnum[i][0] = txtemp[8];
 8006b58:	464a      	mov	r2, r9
 8006b5a:	4669      	mov	r1, sp
 8006b5c:	4b14      	ldr	r3, [pc, #80]	; (8006bb0 <config_write_common_command+0x160>)
 8006b5e:	3205      	adds	r2, #5
 8006b60:	7a09      	ldrb	r1, [r1, #8]
 8006b62:	00d2      	lsls	r2, r2, #3
 8006b64:	189a      	adds	r2, r3, r2
 8006b66:	7111      	strb	r1, [r2, #4]
							config_app.usecardnum[i][1] = txtemp[9];
 8006b68:	464a      	mov	r2, r9
 8006b6a:	00d2      	lsls	r2, r2, #3
 8006b6c:	189b      	adds	r3, r3, r2
 8006b6e:	4669      	mov	r1, sp
 8006b70:	001a      	movs	r2, r3
 8006b72:	7a49      	ldrb	r1, [r1, #9]
 8006b74:	322d      	adds	r2, #45	; 0x2d
 8006b76:	7011      	strb	r1, [r2, #0]
							config_app.usecardnum[i][2] = txtemp[10];
 8006b78:	4669      	mov	r1, sp
 8006b7a:	7a89      	ldrb	r1, [r1, #10]
							config_app.usecardnum[i][7] = txtemp[15];
 8006b7c:	3333      	adds	r3, #51	; 0x33
							config_app.usecardnum[i][2] = txtemp[10];
 8006b7e:	7051      	strb	r1, [r2, #1]
							config_app.usecardnum[i][3] = txtemp[11];
 8006b80:	4669      	mov	r1, sp
 8006b82:	7ac9      	ldrb	r1, [r1, #11]
					printf("CARDNUM_save ok : %d\r\n", i);
 8006b84:	480b      	ldr	r0, [pc, #44]	; (8006bb4 <config_write_common_command+0x164>)
							config_app.usecardnum[i][3] = txtemp[11];
 8006b86:	7091      	strb	r1, [r2, #2]
							config_app.usecardnum[i][4] = txtemp[12];
 8006b88:	4669      	mov	r1, sp
 8006b8a:	7b09      	ldrb	r1, [r1, #12]
 8006b8c:	70d1      	strb	r1, [r2, #3]
							config_app.usecardnum[i][5] = txtemp[13];
 8006b8e:	4669      	mov	r1, sp
 8006b90:	7b49      	ldrb	r1, [r1, #13]
 8006b92:	7111      	strb	r1, [r2, #4]
							config_app.usecardnum[i][6] = txtemp[14];
 8006b94:	4669      	mov	r1, sp
 8006b96:	7b89      	ldrb	r1, [r1, #14]
 8006b98:	7151      	strb	r1, [r2, #5]
							config_app.usecardnum[i][7] = txtemp[15];
 8006b9a:	466a      	mov	r2, sp
 8006b9c:	7bd2      	ldrb	r2, [r2, #15]
					printf("CARDNUM_save ok : %d\r\n", i);
 8006b9e:	4649      	mov	r1, r9
							config_app.usecardnum[i][7] = txtemp[15];
 8006ba0:	701a      	strb	r2, [r3, #0]
					printf("CARDNUM_save ok : %d\r\n", i);
 8006ba2:	f004 f8b9 	bl	800ad18 <iprintf>
	uint8_t ret_value = _TRUE;
 8006ba6:	2001      	movs	r0, #1
 8006ba8:	e76f      	b.n	8006a8a <config_write_common_command+0x3a>
 8006baa:	46c0      	nop			; (mov r8, r8)
 8006bac:	0800dc74 	.word	0x0800dc74
 8006bb0:	200008c8 	.word	0x200008c8
 8006bb4:	0800dc5c 	.word	0x0800dc5c

08006bb8 <config_write_command_parser>:

	return 0;
}

void config_write_command_parser()
{
 8006bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bba:	46c6      	mov	lr, r8
	uint8_t func = 0x00, ln = 0x00;
	uint8_t temp_data[50] = {'\0',};
 8006bbc:	2300      	movs	r3, #0
{
 8006bbe:	b500      	push	{lr}
 8006bc0:	b08e      	sub	sp, #56	; 0x38
	uint8_t temp_data[50] = {'\0',};
 8006bc2:	222e      	movs	r2, #46	; 0x2e
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	a802      	add	r0, sp, #8
 8006bc8:	9301      	str	r3, [sp, #4]
 8006bca:	f004 f89c 	bl	800ad06 <memset>
	uint8_t i;
	uint8_t ret_value = _FALSE;

	func = _LIB_U8QUEUE_get_byte(&config_queue);
 8006bce:	4f19      	ldr	r7, [pc, #100]	; (8006c34 <config_write_command_parser+0x7c>)
 8006bd0:	0038      	movs	r0, r7
 8006bd2:	f000 f9d3 	bl	8006f7c <_LIB_U8QUEUE_get_byte>
 8006bd6:	4680      	mov	r8, r0
	ln = _LIB_U8QUEUE_get_byte(&config_queue);
 8006bd8:	0038      	movs	r0, r7
 8006bda:	f000 f9cf 	bl	8006f7c <_LIB_U8QUEUE_get_byte>
 8006bde:	1e06      	subs	r6, r0, #0

	for (i = 0; i < ln; i++)
 8006be0:	d00a      	beq.n	8006bf8 <config_write_command_parser+0x40>
 8006be2:	2400      	movs	r4, #0
 8006be4:	ad01      	add	r5, sp, #4
	{
		temp_data[i] = _LIB_U8QUEUE_get_byte(&config_queue);
 8006be6:	0038      	movs	r0, r7
 8006be8:	f000 f9c8 	bl	8006f7c <_LIB_U8QUEUE_get_byte>
	for (i = 0; i < ln; i++)
 8006bec:	3401      	adds	r4, #1
 8006bee:	b2e4      	uxtb	r4, r4
		temp_data[i] = _LIB_U8QUEUE_get_byte(&config_queue);
 8006bf0:	7028      	strb	r0, [r5, #0]
	for (i = 0; i < ln; i++)
 8006bf2:	3501      	adds	r5, #1
 8006bf4:	42a6      	cmp	r6, r4
 8006bf6:	d1f6      	bne.n	8006be6 <config_write_command_parser+0x2e>
	}

	if((CONFIG_FUNC_COMMON_BASE <= func) && (func <= CONFIG_FUNC_COMMON_END))
 8006bf8:	4643      	mov	r3, r8
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d903      	bls.n	8006c06 <config_write_command_parser+0x4e>
		if(_TRUE == ret_value)
		{
			_APP_SYSTEMCTL_req(CONFIG_WRITE_COMMAND, func, 0, NULL);
		}
	}
}
 8006bfe:	b00e      	add	sp, #56	; 0x38
 8006c00:	bc80      	pop	{r7}
 8006c02:	46b8      	mov	r8, r7
 8006c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret_value = config_write_common_command(func,temp_data,ln);
 8006c06:	0032      	movs	r2, r6
 8006c08:	4640      	mov	r0, r8
 8006c0a:	a901      	add	r1, sp, #4
 8006c0c:	f7ff ff20 	bl	8006a50 <config_write_common_command>
		if(_TRUE == ret_value)
 8006c10:	2801      	cmp	r0, #1
 8006c12:	d1f4      	bne.n	8006bfe <config_write_command_parser+0x46>
		config_app.tx_buf[config_app.tx_cnt++] = set_cmd;
 8006c14:	2385      	movs	r3, #133	; 0x85
 8006c16:	4808      	ldr	r0, [pc, #32]	; (8006c38 <config_write_command_parser+0x80>)
	_MW_UART_tx02(data, cnt);
 8006c18:	2104      	movs	r1, #4
		config_app.tx_buf[config_app.tx_cnt++] = set_cmd;
 8006c1a:	7543      	strb	r3, [r0, #21]
		config_app.tx_buf[config_app.tx_cnt++] = set_func;
 8006c1c:	4643      	mov	r3, r8
 8006c1e:	7583      	strb	r3, [r0, #22]
		config_app.tx_buf[config_app.tx_cnt++] = 'O';
 8006c20:	234f      	movs	r3, #79	; 0x4f
 8006c22:	75c3      	strb	r3, [r0, #23]
		config_app.tx_buf[config_app.tx_cnt++] = 'K';
 8006c24:	3b4b      	subs	r3, #75	; 0x4b
 8006c26:	8543      	strh	r3, [r0, #42]	; 0x2a
 8006c28:	3347      	adds	r3, #71	; 0x47
 8006c2a:	7603      	strb	r3, [r0, #24]
	_MW_UART_tx02(data, cnt);
 8006c2c:	3015      	adds	r0, #21
 8006c2e:	f001 fa15 	bl	800805c <_MW_UART_tx02>
}
 8006c32:	e7e4      	b.n	8006bfe <config_write_command_parser+0x46>
 8006c34:	2000005c 	.word	0x2000005c
 8006c38:	200008c8 	.word	0x200008c8

08006c3c <config_read_command_parser>:
}

void config_read_command_parser()
{
	uint8_t func = 0x00;
	uint8_t temp_data[50] = {'\0', };
 8006c3c:	2300      	movs	r3, #0
{
 8006c3e:	b500      	push	{lr}
 8006c40:	b08f      	sub	sp, #60	; 0x3c
	uint8_t temp_data[50] = {'\0', };
 8006c42:	222e      	movs	r2, #46	; 0x2e
 8006c44:	2100      	movs	r1, #0
 8006c46:	a802      	add	r0, sp, #8
 8006c48:	9301      	str	r3, [sp, #4]
 8006c4a:	f004 f85c 	bl	800ad06 <memset>
	uint8_t temp_len = 0;
	uint8_t ret_value = _FALSE;

	func = _LIB_U8QUEUE_get_byte(&config_queue);
 8006c4e:	4807      	ldr	r0, [pc, #28]	; (8006c6c <config_read_command_parser+0x30>)
 8006c50:	f000 f994 	bl	8006f7c <_LIB_U8QUEUE_get_byte>
	switch(func)
 8006c54:	2800      	cmp	r0, #0
 8006c56:	d001      	beq.n	8006c5c <config_read_command_parser+0x20>
		if(_TRUE == ret_value)
		{
			_APP_SYSTEMCTL_req(CONFIG_READ_COMMAND, func, temp_len, temp_data);
		}
	}
}
 8006c58:	b00f      	add	sp, #60	; 0x3c
 8006c5a:	bd00      	pop	{pc}
			_APP_SYSTEMCTL_req(CONFIG_READ_COMMAND, func, temp_len, temp_data);
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	2100      	movs	r1, #0
 8006c60:	ab01      	add	r3, sp, #4
 8006c62:	3095      	adds	r0, #149	; 0x95
 8006c64:	f7ff fe90 	bl	8006988 <_APP_SYSTEMCTL_req>
}
 8006c68:	e7f6      	b.n	8006c58 <config_read_command_parser+0x1c>
 8006c6a:	46c0      	nop			; (mov r8, r8)
 8006c6c:	2000005c 	.word	0x2000005c

08006c70 <config_main_processing>:

void config_main_processing()
{
 8006c70:	b510      	push	{r4, lr}
	uint8_t cmd = 0x00, uch = 0xff, ucl = 0xff;

	cmd = _LIB_U8QUEUE_get_byte(&config_queue);
 8006c72:	4c0c      	ldr	r4, [pc, #48]	; (8006ca4 <config_main_processing+0x34>)
 8006c74:	0020      	movs	r0, r4
 8006c76:	f000 f981 	bl	8006f7c <_LIB_U8QUEUE_get_byte>

	switch(cmd)
 8006c7a:	2885      	cmp	r0, #133	; 0x85
 8006c7c:	d005      	beq.n	8006c8a <config_main_processing+0x1a>
 8006c7e:	2895      	cmp	r0, #149	; 0x95
 8006c80:	d00c      	beq.n	8006c9c <config_main_processing+0x2c>
		break;
		case CONFIG_READ_COMMAND:
			config_read_command_parser();
		break;
		default:
			_LIB_U8QUEUE_comFlush(&config_queue);
 8006c82:	0020      	movs	r0, r4
 8006c84:	f000 f962 	bl	8006f4c <_LIB_U8QUEUE_comFlush>
		return;
	}

	ucl = _LIB_U8QUEUE_get_byte(&config_queue);
	uch = _LIB_U8QUEUE_get_byte(&config_queue);
}
 8006c88:	bd10      	pop	{r4, pc}
			config_write_command_parser();
 8006c8a:	f7ff ff95 	bl	8006bb8 <config_write_command_parser>
	ucl = _LIB_U8QUEUE_get_byte(&config_queue);
 8006c8e:	0020      	movs	r0, r4
 8006c90:	f000 f974 	bl	8006f7c <_LIB_U8QUEUE_get_byte>
	uch = _LIB_U8QUEUE_get_byte(&config_queue);
 8006c94:	0020      	movs	r0, r4
 8006c96:	f000 f971 	bl	8006f7c <_LIB_U8QUEUE_get_byte>
 8006c9a:	e7f5      	b.n	8006c88 <config_main_processing+0x18>
			config_read_command_parser();
 8006c9c:	f7ff ffce 	bl	8006c3c <config_read_command_parser>
		break;
 8006ca0:	e7f5      	b.n	8006c8e <config_main_processing+0x1e>
 8006ca2:	46c0      	nop			; (mov r8, r8)
 8006ca4:	2000005c 	.word	0x2000005c

08006ca8 <check_temp_loop>:

void check_temp_loop()
{
 8006ca8:	b510      	push	{r4, lr}
	int16_t temp_value = 0;
	static uint8_t over_temp_flag = _FALSE;


	if(_TRUE == _MW_NTC_loop())
 8006caa:	f001 f967 	bl	8007f7c <_MW_NTC_loop>
 8006cae:	2801      	cmp	r0, #1
 8006cb0:	d000      	beq.n	8006cb4 <check_temp_loop+0xc>
#else
			_APP_CHARGSERV_over_temperature_fault_reset();
#endif
		}
	}
}
 8006cb2:	bd10      	pop	{r4, pc}
		temp_value = _MW_NTC_get_temp();
 8006cb4:	f001 f912 	bl	8007edc <_MW_NTC_get_temp>
		if((temp_value >= OVER_TEMP_THRESHOLD) && (over_temp_flag == _FALSE))
 8006cb8:	284a      	cmp	r0, #74	; 0x4a
 8006cba:	ddfa      	ble.n	8006cb2 <check_temp_loop+0xa>
			_APP_CHARGSERV_over_temperature_fault_set();
 8006cbc:	f7fe fbd0 	bl	8005460 <_APP_CHARGSERV_over_temperature_fault_set>
}
 8006cc0:	e7f7      	b.n	8006cb2 <check_temp_loop+0xa>
 8006cc2:	46c0      	nop			; (mov r8, r8)

08006cc4 <_APP_SYSTEMCTL_check_cardnum>:

/*
 *
 */
uint8_t _APP_SYSTEMCTL_check_cardnum(uint8_t* cardnumbuf)
{
 8006cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cc6:	46c6      	mov	lr, r8
 8006cc8:	4680      	mov	r8, r0
	uint8_t ret_value = _FALSE;
	int i = 0;
	int j = 0;
	uint8_t rxtemp[30] = {0,};
 8006cca:	2300      	movs	r3, #0
 8006ccc:	4646      	mov	r6, r8

	for(i=0;i<MAX_CARDNUM_MEMORY;i++)
 8006cce:	278c      	movs	r7, #140	; 0x8c
{
 8006cd0:	b500      	push	{lr}
 8006cd2:	b088      	sub	sp, #32
	uint8_t rxtemp[30] = {0,};
 8006cd4:	221a      	movs	r2, #26
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	a801      	add	r0, sp, #4
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	2418      	movs	r4, #24
 8006cde:	f004 f812 	bl	800ad06 <memset>
	for(i=0;i<MAX_CARDNUM_MEMORY;i++)
 8006ce2:	3608      	adds	r6, #8
 8006ce4:	007f      	lsls	r7, r7, #1
 8006ce6:	e003      	b.n	8006cf0 <_APP_SYSTEMCTL_check_cardnum+0x2c>
 8006ce8:	3410      	adds	r4, #16
 8006cea:	b2a4      	uxth	r4, r4
 8006cec:	42bc      	cmp	r4, r7
 8006cee:	d016      	beq.n	8006d1e <_APP_SYSTEMCTL_check_cardnum+0x5a>
	{
		if(true == ee24_read(MEM_ADDR_CARDNUM_VALUE_MSB(i), rxtemp, 8, 100))
 8006cf0:	2364      	movs	r3, #100	; 0x64
 8006cf2:	2208      	movs	r2, #8
 8006cf4:	4669      	mov	r1, sp
 8006cf6:	0020      	movs	r0, r4
 8006cf8:	f000 fd58 	bl	80077ac <ee24_read>
 8006cfc:	2800      	cmp	r0, #0
 8006cfe:	d0f3      	beq.n	8006ce8 <_APP_SYSTEMCTL_check_cardnum+0x24>
 8006d00:	4643      	mov	r3, r8
 8006d02:	466a      	mov	r2, sp
		{
			for(j=0;j<8;j++)
			{
				if(cardnumbuf[j] != rxtemp[j])
 8006d04:	781d      	ldrb	r5, [r3, #0]
 8006d06:	7811      	ldrb	r1, [r2, #0]
 8006d08:	428d      	cmp	r5, r1
 8006d0a:	d1ed      	bne.n	8006ce8 <_APP_SYSTEMCTL_check_cardnum+0x24>
			for(j=0;j<8;j++)
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	3201      	adds	r2, #1
 8006d10:	429e      	cmp	r6, r3
 8006d12:	d1f7      	bne.n	8006d04 <_APP_SYSTEMCTL_check_cardnum+0x40>
				}
			}

			if(8==j)
			{
				ret_value = _TRUE;
 8006d14:	2001      	movs	r0, #1
			}
		}
	}

	return ret_value;
}
 8006d16:	b008      	add	sp, #32
 8006d18:	bc80      	pop	{r7}
 8006d1a:	46b8      	mov	r8, r7
 8006d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t ret_value = _FALSE;
 8006d1e:	2000      	movs	r0, #0
 8006d20:	e7f9      	b.n	8006d16 <_APP_SYSTEMCTL_check_cardnum+0x52>
 8006d22:	46c0      	nop			; (mov r8, r8)

08006d24 <_APP_SYSTEMCTL_startup>:

void _APP_SYSTEMCTL_startup()
{
 8006d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d26:	46de      	mov	lr, fp
 8006d28:	4657      	mov	r7, sl
 8006d2a:	464e      	mov	r6, r9
 8006d2c:	4645      	mov	r5, r8
	int i = 0;
	int j = 0;
	uint8_t rxtemp[30] = {0,};
 8006d2e:	2300      	movs	r3, #0
{
 8006d30:	b5e0      	push	{r5, r6, r7, lr}
 8006d32:	b08f      	sub	sp, #60	; 0x3c
	uint8_t rxtemp[30] = {0,};
 8006d34:	221a      	movs	r2, #26
 8006d36:	2100      	movs	r1, #0
 8006d38:	a807      	add	r0, sp, #28
 8006d3a:	9306      	str	r3, [sp, #24]
 8006d3c:	f003 ffe3 	bl	800ad06 <memset>

	/*
	 * MEM_SECTOR_COMMON_CONFIG
	 */

	printf("------------------------------------------------\r\n");
 8006d40:	4b32      	ldr	r3, [pc, #200]	; (8006e0c <_APP_SYSTEMCTL_startup+0xe8>)
 8006d42:	2510      	movs	r5, #16
 8006d44:	0018      	movs	r0, r3
 8006d46:	469b      	mov	fp, r3
 8006d48:	f004 f872 	bl	800ae30 <puts>
				config_app.usecardnum[i][6] = rxtemp[14];
				config_app.usecardnum[i][7] = rxtemp[15];
			}
			else
			{
				printf("                                                    \r\n");
 8006d4c:	4b30      	ldr	r3, [pc, #192]	; (8006e10 <_APP_SYSTEMCTL_startup+0xec>)
	for(i=0;i<MAX_CARDNUM_MEMORY;i++)
 8006d4e:	2700      	movs	r7, #0
				printf("                                                    \r\n");
 8006d50:	4699      	mov	r9, r3
				config_app.usecardnum[i][0] = 0xFF;
 8006d52:	23ff      	movs	r3, #255	; 0xff
 8006d54:	4698      	mov	r8, r3
				printf("--%d -- %02x%02x %02x%02x %02x%02x %02x%02x --\r\n",
 8006d56:	4b2f      	ldr	r3, [pc, #188]	; (8006e14 <_APP_SYSTEMCTL_startup+0xf0>)
 8006d58:	4c2f      	ldr	r4, [pc, #188]	; (8006e18 <_APP_SYSTEMCTL_startup+0xf4>)
 8006d5a:	469a      	mov	sl, r3
 8006d5c:	ae06      	add	r6, sp, #24
 8006d5e:	e010      	b.n	8006d82 <_APP_SYSTEMCTL_startup+0x5e>
				printf("                                                    \r\n");
 8006d60:	4648      	mov	r0, r9
 8006d62:	f004 f865 	bl	800ae30 <puts>
				config_app.usecardnum[i][0] = 0xFF;
 8006d66:	4643      	mov	r3, r8
 8006d68:	7023      	strb	r3, [r4, #0]
				config_app.usecardnum[i][1] = 0xFF;
 8006d6a:	7063      	strb	r3, [r4, #1]
				config_app.usecardnum[i][2] = 0xFF;
 8006d6c:	70a3      	strb	r3, [r4, #2]
				config_app.usecardnum[i][3] = 0xFF;
 8006d6e:	70e3      	strb	r3, [r4, #3]
				config_app.usecardnum[i][4] = 0xFF;
 8006d70:	7123      	strb	r3, [r4, #4]
				config_app.usecardnum[i][5] = 0xFF;
 8006d72:	7163      	strb	r3, [r4, #5]
				config_app.usecardnum[i][6] = 0xFF;
 8006d74:	71a3      	strb	r3, [r4, #6]
				config_app.usecardnum[i][7] = 0xFF;
 8006d76:	71e3      	strb	r3, [r4, #7]
	for(i=0;i<MAX_CARDNUM_MEMORY;i++)
 8006d78:	3510      	adds	r5, #16
 8006d7a:	b2ad      	uxth	r5, r5
 8006d7c:	3408      	adds	r4, #8
 8006d7e:	2f10      	cmp	r7, #16
 8006d80:	d032      	beq.n	8006de8 <_APP_SYSTEMCTL_startup+0xc4>
		if(true == ee24_read(MEM_ADDR_CARDNUM_INDEX_MSB(i), rxtemp, 16, 100))
 8006d82:	2364      	movs	r3, #100	; 0x64
 8006d84:	2210      	movs	r2, #16
 8006d86:	0031      	movs	r1, r6
 8006d88:	0028      	movs	r0, r5
 8006d8a:	3701      	adds	r7, #1
 8006d8c:	f000 fd0e 	bl	80077ac <ee24_read>
 8006d90:	2800      	cmp	r0, #0
 8006d92:	d0f1      	beq.n	8006d78 <_APP_SYSTEMCTL_startup+0x54>
			if((i+1) == rxtemp[7])
 8006d94:	79f3      	ldrb	r3, [r6, #7]
 8006d96:	429f      	cmp	r7, r3
 8006d98:	d1e2      	bne.n	8006d60 <_APP_SYSTEMCTL_startup+0x3c>
				printf("--%d -- %02x%02x %02x%02x %02x%02x %02x%02x --\r\n",
 8006d9a:	7bf1      	ldrb	r1, [r6, #15]
 8006d9c:	7a73      	ldrb	r3, [r6, #9]
 8006d9e:	7a32      	ldrb	r2, [r6, #8]
 8006da0:	9105      	str	r1, [sp, #20]
 8006da2:	7bb1      	ldrb	r1, [r6, #14]
 8006da4:	4650      	mov	r0, sl
 8006da6:	9104      	str	r1, [sp, #16]
 8006da8:	7b71      	ldrb	r1, [r6, #13]
 8006daa:	3510      	adds	r5, #16
 8006dac:	9103      	str	r1, [sp, #12]
 8006dae:	7b31      	ldrb	r1, [r6, #12]
 8006db0:	b2ad      	uxth	r5, r5
 8006db2:	9102      	str	r1, [sp, #8]
 8006db4:	7af1      	ldrb	r1, [r6, #11]
 8006db6:	9101      	str	r1, [sp, #4]
 8006db8:	7ab1      	ldrb	r1, [r6, #10]
 8006dba:	9100      	str	r1, [sp, #0]
 8006dbc:	0039      	movs	r1, r7
 8006dbe:	f003 ffab 	bl	800ad18 <iprintf>
				config_app.usecardnum[i][0] = rxtemp[8];
 8006dc2:	7a33      	ldrb	r3, [r6, #8]
 8006dc4:	7023      	strb	r3, [r4, #0]
				config_app.usecardnum[i][1] = rxtemp[9];
 8006dc6:	7a73      	ldrb	r3, [r6, #9]
 8006dc8:	7063      	strb	r3, [r4, #1]
				config_app.usecardnum[i][2] = rxtemp[10];
 8006dca:	7ab3      	ldrb	r3, [r6, #10]
 8006dcc:	70a3      	strb	r3, [r4, #2]
				config_app.usecardnum[i][3] = rxtemp[11];
 8006dce:	7af3      	ldrb	r3, [r6, #11]
 8006dd0:	70e3      	strb	r3, [r4, #3]
				config_app.usecardnum[i][4] = rxtemp[12];
 8006dd2:	7b33      	ldrb	r3, [r6, #12]
 8006dd4:	7123      	strb	r3, [r4, #4]
				config_app.usecardnum[i][5] = rxtemp[13];
 8006dd6:	7b73      	ldrb	r3, [r6, #13]
 8006dd8:	7163      	strb	r3, [r4, #5]
				config_app.usecardnum[i][6] = rxtemp[14];
 8006dda:	7bb3      	ldrb	r3, [r6, #14]
 8006ddc:	71a3      	strb	r3, [r4, #6]
				config_app.usecardnum[i][7] = rxtemp[15];
 8006dde:	7bf3      	ldrb	r3, [r6, #15]
 8006de0:	71e3      	strb	r3, [r4, #7]
	for(i=0;i<MAX_CARDNUM_MEMORY;i++)
 8006de2:	3408      	adds	r4, #8
 8006de4:	2f10      	cmp	r7, #16
 8006de6:	d1cc      	bne.n	8006d82 <_APP_SYSTEMCTL_startup+0x5e>
			}
		}
	}

	printf("------------------------------------------------\r\n");
 8006de8:	4658      	mov	r0, fp
 8006dea:	f004 f821 	bl	800ae30 <puts>

#if ((_CERTIFICATION_MODE_)==_CERTIFICATION_KC_EVSE_)
	_LIB_LOGGING_printf("CERTIFICATION : KC_EVSE \r\n");
#elif((_CERTIFICATION_MODE_)==_CERTIFICATION_TYPE_EVSE_)
	_LIB_LOGGING_printf("CERTIFICATION : TYPE_EVSE \r\n");
 8006dee:	480b      	ldr	r0, [pc, #44]	; (8006e1c <_APP_SYSTEMCTL_startup+0xf8>)
 8006df0:	f004 f81e 	bl	800ae30 <puts>
#endif




	_LIB_USERDELAY_set(&gDelay_systemctl_comm_periodic_loop_time,5);
 8006df4:	2105      	movs	r1, #5
 8006df6:	480a      	ldr	r0, [pc, #40]	; (8006e20 <_APP_SYSTEMCTL_startup+0xfc>)
 8006df8:	f000 f912 	bl	8007020 <_LIB_USERDELAY_set>
}
 8006dfc:	b00f      	add	sp, #60	; 0x3c
 8006dfe:	bcf0      	pop	{r4, r5, r6, r7}
 8006e00:	46bb      	mov	fp, r7
 8006e02:	46b2      	mov	sl, r6
 8006e04:	46a9      	mov	r9, r5
 8006e06:	46a0      	mov	r8, r4
 8006e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e0a:	46c0      	nop			; (mov r8, r8)
 8006e0c:	0800dc90 	.word	0x0800dc90
 8006e10:	0800dcf8 	.word	0x0800dcf8
 8006e14:	0800dcc4 	.word	0x0800dcc4
 8006e18:	200008f4 	.word	0x200008f4
 8006e1c:	0800dd30 	.word	0x0800dd30
 8006e20:	200009dc 	.word	0x200009dc

08006e24 <_APP_SYSTEMCTL_main>:

void _APP_SYSTEMCTL_main()
{
 8006e24:	b510      	push	{r4, lr}
	_APP_SYSTEMCTL_framesearch();
 8006e26:	f7ff fd07 	bl	8006838 <_APP_SYSTEMCTL_framesearch>
	if(config_app.found_frame)
 8006e2a:	4c05      	ldr	r4, [pc, #20]	; (8006e40 <_APP_SYSTEMCTL_main+0x1c>)
 8006e2c:	7823      	ldrb	r3, [r4, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d100      	bne.n	8006e34 <_APP_SYSTEMCTL_main+0x10>
	_APP_SYSTEMCTL_located_in_timer();

	_APP_SYSTEMCTL_memory_loop();
}
 8006e32:	bd10      	pop	{r4, pc}
		config_main_processing();
 8006e34:	f7ff ff1c 	bl	8006c70 <config_main_processing>
		config_app.found_frame = 0;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	7023      	strb	r3, [r4, #0]
}
 8006e3c:	e7f9      	b.n	8006e32 <_APP_SYSTEMCTL_main+0xe>
 8006e3e:	46c0      	nop			; (mov r8, r8)
 8006e40:	200008c8 	.word	0x200008c8

08006e44 <_APP_SYSTEMCTL_process>:
}

//uint16_t zctadc = 0;

void _APP_SYSTEMCTL_process()
{
 8006e44:	b510      	push	{r4, lr}
	_LIB_USERDELAY_start(&gDelay_systemctl_comm_periodic_loop_time, DELAY_RENEW_OFF);
 8006e46:	4c0b      	ldr	r4, [pc, #44]	; (8006e74 <_APP_SYSTEMCTL_process+0x30>)
 8006e48:	2100      	movs	r1, #0
 8006e4a:	0020      	movs	r0, r4
 8006e4c:	f000 f8f2 	bl	8007034 <_LIB_USERDELAY_start>

    if(_LIB_USERDELAY_isfired(&gDelay_systemctl_comm_periodic_loop_time))
 8006e50:	0020      	movs	r0, r4
 8006e52:	f000 f903 	bl	800705c <_LIB_USERDELAY_isfired>
 8006e56:	2800      	cmp	r0, #0
 8006e58:	d100      	bne.n	8006e5c <_APP_SYSTEMCTL_process+0x18>

    	//HAL_IWDG_Refresh(&hiwdg);

	  	_LIB_USERDELAY_start(&gDelay_systemctl_comm_periodic_loop_time, DELAY_RENEW_ON);
    }
}
 8006e5a:	bd10      	pop	{r4, pc}
		_MW_GPIO_update();
 8006e5c:	f000 fec8 	bl	8007bf0 <_MW_GPIO_update>
		check_temp_loop();
 8006e60:	f7ff ff22 	bl	8006ca8 <check_temp_loop>
    	_APP_SYSTEMCTL_main();
 8006e64:	f7ff ffde 	bl	8006e24 <_APP_SYSTEMCTL_main>
	  	_LIB_USERDELAY_start(&gDelay_systemctl_comm_periodic_loop_time, DELAY_RENEW_ON);
 8006e68:	2101      	movs	r1, #1
 8006e6a:	0020      	movs	r0, r4
 8006e6c:	f000 f8e2 	bl	8007034 <_LIB_USERDELAY_start>
}
 8006e70:	e7f3      	b.n	8006e5a <_APP_SYSTEMCTL_process+0x16>
 8006e72:	46c0      	nop			; (mov r8, r8)
 8006e74:	200009dc 	.word	0x200009dc

08006e78 <_LIB_LPF_init>:
{
	uint8_t ret_value = 0;

	p_lpf->timeinterval = timeinterval;
	p_lpf->tau = tau;
	p_lpf->value_bak = 0;
 8006e78:	2300      	movs	r3, #0
	p_lpf->timeinterval = timeinterval;
 8006e7a:	8001      	strh	r1, [r0, #0]
	p_lpf->tau = tau;
 8006e7c:	8042      	strh	r2, [r0, #2]
	p_lpf->value_bak = 0;
 8006e7e:	6043      	str	r3, [r0, #4]
	p_lpf->value = 0;
 8006e80:	6083      	str	r3, [r0, #8]
	{
		ret_value = 1;
	}

	return ret_value;
}
 8006e82:	2001      	movs	r0, #1
 8006e84:	4770      	bx	lr
 8006e86:	46c0      	nop			; (mov r8, r8)

08006e88 <_LIB_LPF_calc>:
uint32_t _LIB_LPF_calc(s_LIB_LPF* p_lpf, uint32_t input_value)
{
 8006e88:	b510      	push	{r4, lr}
 8006e8a:	0004      	movs	r4, r0
	uint32_t output_value = 0;

	if(0 == p_lpf->value_bak)
 8006e8c:	6863      	ldr	r3, [r4, #4]
{
 8006e8e:	0008      	movs	r0, r1
	if(0 == p_lpf->value_bak)
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d007      	beq.n	8006ea4 <_LIB_LPF_calc+0x1c>
	{
		p_lpf->value = input_value;
	}
	else
	{
		p_lpf->value = ((p_lpf->tau * p_lpf->value_bak) + (p_lpf->timeinterval * input_value)) / (p_lpf->tau + p_lpf->timeinterval);
 8006e94:	8861      	ldrh	r1, [r4, #2]
 8006e96:	8822      	ldrh	r2, [r4, #0]
 8006e98:	434b      	muls	r3, r1
 8006e9a:	4350      	muls	r0, r2
 8006e9c:	1889      	adds	r1, r1, r2
 8006e9e:	1818      	adds	r0, r3, r0
 8006ea0:	f7f9 f93c 	bl	800011c <__udivsi3>
	p_lpf->value_bak = p_lpf->value;

	output_value = p_lpf->value;

	return output_value;
}
 8006ea4:	60a0      	str	r0, [r4, #8]
	p_lpf->value_bak = p_lpf->value;
 8006ea6:	6060      	str	r0, [r4, #4]
}
 8006ea8:	bd10      	pop	{r4, pc}
 8006eaa:	46c0      	nop			; (mov r8, r8)

08006eac <_LIB_BITOP_ext_u16_to_u8one>:
#include <_lib_bitop.h>

uint8_t _LIB_BITOP_ext_u16_to_u8one(uint16_t var, uint16_t offset)
{
	uint16_t data;
	data = ((var >> (offset * 8)) & 0xff);
 8006eac:	00c9      	lsls	r1, r1, #3
 8006eae:	4108      	asrs	r0, r1
	return (uint8_t)data;
 8006eb0:	b2c0      	uxtb	r0, r0
}
 8006eb2:	4770      	bx	lr

08006eb4 <_LIB_DEBOUNCECHECK_init>:
#include <_lib_debouncecheck.h>

void _LIB_DEBOUNCECHECK_init(uint8_t* dbuf, uint16_t dbuflength)
{
	int i = 0;
	for(i=0 ; i<dbuflength ; i++)
 8006eb4:	2900      	cmp	r1, #0
 8006eb6:	d005      	beq.n	8006ec4 <_LIB_DEBOUNCECHECK_init+0x10>
 8006eb8:	2300      	movs	r3, #0
	{
		dbuf[i] = 0;
 8006eba:	2200      	movs	r2, #0
 8006ebc:	54c2      	strb	r2, [r0, r3]
	for(i=0 ; i<dbuflength ; i++)
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	428b      	cmp	r3, r1
 8006ec2:	dbfb      	blt.n	8006ebc <_LIB_DEBOUNCECHECK_init+0x8>
	}
}
 8006ec4:	4770      	bx	lr
 8006ec6:	46c0      	nop			; (mov r8, r8)

08006ec8 <_LIB_DEBOUNCECHECK_push>:

void _LIB_DEBOUNCECHECK_push(uint8_t* dbuf, int pdata)
{
	dbuf[0] = pdata;
 8006ec8:	7001      	strb	r1, [r0, #0]
}
 8006eca:	4770      	bx	lr

08006ecc <_LIB_DEBOUNCECHECK_shift>:

void _LIB_DEBOUNCECHECK_shift(uint8_t* dbuf, uint16_t dbuflength)
{
 8006ecc:	b530      	push	{r4, r5, lr}
	int i = 0;
	for(i=(dbuflength-2) ; i>0 ; i--)
 8006ece:	2902      	cmp	r1, #2
 8006ed0:	d909      	bls.n	8006ee6 <_LIB_DEBOUNCECHECK_shift+0x1a>
 8006ed2:	1ecb      	subs	r3, r1, #3
 8006ed4:	18c3      	adds	r3, r0, r3
 8006ed6:	1c4d      	adds	r5, r1, #1
	{
		dbuf[i] = dbuf[i - 1];
 8006ed8:	781c      	ldrb	r4, [r3, #0]
 8006eda:	1a5a      	subs	r2, r3, r1
 8006edc:	5554      	strb	r4, [r2, r5]
	for(i=(dbuflength-2) ; i>0 ; i--)
 8006ede:	001a      	movs	r2, r3
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	4290      	cmp	r0, r2
 8006ee4:	d1f8      	bne.n	8006ed8 <_LIB_DEBOUNCECHECK_shift+0xc>
	}
}
 8006ee6:	bd30      	pop	{r4, r5, pc}

08006ee8 <_LIB_DEBOUNCECHECK_compare>:

uint8_t _LIB_DEBOUNCECHECK_compare(uint8_t* dbuf, uint16_t dbuflength, uint8_t value)
{
	int i = 0;
	for(i=(dbuflength-2) ; i>0 ; i--)
 8006ee8:	1e8b      	subs	r3, r1, #2
{
 8006eea:	b570      	push	{r4, r5, r6, lr}
	for(i=(dbuflength-2) ; i>0 ; i--)
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	dd11      	ble.n	8006f14 <_LIB_DEBOUNCECHECK_compare+0x2c>
 8006ef0:	18c3      	adds	r3, r0, r3
	{
		switch(value)
		{
			case 0 :
				if(dbuf[i] != dbuf[i - 1])
 8006ef2:	1e4e      	subs	r6, r1, #1
 8006ef4:	e007      	b.n	8006f06 <_LIB_DEBOUNCECHECK_compare+0x1e>
 8006ef6:	1a5c      	subs	r4, r3, r1
 8006ef8:	781d      	ldrb	r5, [r3, #0]
 8006efa:	5da4      	ldrb	r4, [r4, r6]
 8006efc:	42a5      	cmp	r5, r4
 8006efe:	d107      	bne.n	8006f10 <_LIB_DEBOUNCECHECK_compare+0x28>
	for(i=(dbuflength-2) ; i>0 ; i--)
 8006f00:	3b01      	subs	r3, #1
 8006f02:	4298      	cmp	r0, r3
 8006f04:	d006      	beq.n	8006f14 <_LIB_DEBOUNCECHECK_compare+0x2c>
		switch(value)
 8006f06:	2a00      	cmp	r2, #0
 8006f08:	d0f5      	beq.n	8006ef6 <_LIB_DEBOUNCECHECK_compare+0xe>
				{
					return 0;
				}
			break;
			default :
				if(dbuf[i] != value)
 8006f0a:	781c      	ldrb	r4, [r3, #0]
 8006f0c:	4294      	cmp	r4, r2
 8006f0e:	d0f7      	beq.n	8006f00 <_LIB_DEBOUNCECHECK_compare+0x18>
					return 0;
 8006f10:	2000      	movs	r0, #0
 8006f12:	e005      	b.n	8006f20 <_LIB_DEBOUNCECHECK_compare+0x38>
				}
			break;
		}
	}

	dbuf[dbuflength-1] = dbuf[dbuflength-2];
 8006f14:	1840      	adds	r0, r0, r1
 8006f16:	1e83      	subs	r3, r0, #2
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	3801      	subs	r0, #1
 8006f1c:	7003      	strb	r3, [r0, #0]

	return 1;
 8006f1e:	2001      	movs	r0, #1
}
 8006f20:	bd70      	pop	{r4, r5, r6, pc}
 8006f22:	46c0      	nop			; (mov r8, r8)

08006f24 <_write>:
  * 			The function prototype is in syscalls.c
  *
  * @retval     None
  */
int _write(int file, char *ptr, int len)
{
 8006f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f26:	000c      	movs	r4, r1
 8006f28:	1e17      	subs	r7, r2, #0

#if ((__DEBUG_PRINTF__) == (_DEBUG__NON_))
	return len;
#endif

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f2a:	dd0a      	ble.n	8006f42 <_write+0x1e>
 8006f2c:	4d06      	ldr	r5, [pc, #24]	; (8006f48 <_write+0x24>)
 8006f2e:	188e      	adds	r6, r1, r2
#if ((__DEBUG_PRINTF__) == (_DEBUG__ITM_))
		ITM_SendChar((*ptr++));
#elif ((__DEBUG_PRINTF__) == (_DEBUG__UART_))
		/* Write a function that transmits 1 byte using the corresponding Uart channel. */
		//HAL_UART_Transmit(&huart1, (uint8_t *)(ptr++), 1, 5);
		HAL_UART_Transmit(&huart2, (uint8_t *)(ptr++), 1, 5);
 8006f30:	0021      	movs	r1, r4
 8006f32:	2305      	movs	r3, #5
 8006f34:	3401      	adds	r4, #1
 8006f36:	2201      	movs	r2, #1
 8006f38:	0028      	movs	r0, r5
 8006f3a:	f003 fd43 	bl	800a9c4 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f3e:	42a6      	cmp	r6, r4
 8006f40:	d1f6      	bne.n	8006f30 <_write+0xc>
#endif
	}

	return len;
}
 8006f42:	0038      	movs	r0, r7
 8006f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f46:	46c0      	nop			; (mov r8, r8)
 8006f48:	20000cd0 	.word	0x20000cd0

08006f4c <_LIB_U8QUEUE_comFlush>:
#include <_lib_u8queue.h>

void _LIB_U8QUEUE_comFlush(s__LIB_QUEUE* s_queue)
{
	//s_queue->action_pointer = RING_BUFFER_MAX;
	s_queue->action_pointer = s_queue->ring_buffer_size;
 8006f4c:	8883      	ldrh	r3, [r0, #4]
 8006f4e:	8103      	strh	r3, [r0, #8]
	s_queue->save_pointer = 0;
 8006f50:	2300      	movs	r3, #0
 8006f52:	80c3      	strh	r3, [r0, #6]
}
 8006f54:	4770      	bx	lr
 8006f56:	46c0      	nop			; (mov r8, r8)

08006f58 <_LIB_U8QUEUE_comLen>:

uint16_t _LIB_U8QUEUE_comLen(s__LIB_QUEUE* s_queue)
{
	uint16_t i;
	if(s_queue->save_pointer > (s_queue->action_pointer + 1)){
 8006f58:	8901      	ldrh	r1, [r0, #8]
 8006f5a:	88c3      	ldrh	r3, [r0, #6]
{
 8006f5c:	0002      	movs	r2, r0
	if(s_queue->save_pointer > (s_queue->action_pointer + 1)){
 8006f5e:	1c48      	adds	r0, r1, #1
 8006f60:	4283      	cmp	r3, r0
 8006f62:	dd03      	ble.n	8006f6c <_LIB_U8QUEUE_comLen+0x14>
		i = s_queue->save_pointer - s_queue->action_pointer - 1;
 8006f64:	3b01      	subs	r3, #1
 8006f66:	1a58      	subs	r0, r3, r1
 8006f68:	b280      	uxth	r0, r0
	}
	else{
		i = 0;
	}
	return i;
}
 8006f6a:	4770      	bx	lr
		i = 0;
 8006f6c:	2000      	movs	r0, #0
	else if(s_queue->save_pointer < (s_queue->action_pointer+1)){
 8006f6e:	428b      	cmp	r3, r1
 8006f70:	d8fb      	bhi.n	8006f6a <_LIB_U8QUEUE_comLen+0x12>
		i = s_queue->ring_buffer_size - s_queue->action_pointer + s_queue->save_pointer;
 8006f72:	8890      	ldrh	r0, [r2, #4]
 8006f74:	1818      	adds	r0, r3, r0
 8006f76:	1a40      	subs	r0, r0, r1
 8006f78:	b280      	uxth	r0, r0
 8006f7a:	e7f6      	b.n	8006f6a <_LIB_U8QUEUE_comLen+0x12>

08006f7c <_LIB_U8QUEUE_get_byte>:

uint8_t read_ringbuffer(s__LIB_QUEUE* s_queue)
{
	s_queue->action_pointer++;
 8006f7c:	8903      	ldrh	r3, [r0, #8]
	if(s_queue->action_pointer > s_queue->ring_buffer_size)	{
 8006f7e:	8882      	ldrh	r2, [r0, #4]
	s_queue->action_pointer++;
 8006f80:	3301      	adds	r3, #1
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	8103      	strh	r3, [r0, #8]
	if(s_queue->action_pointer > s_queue->ring_buffer_size)	{
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d201      	bcs.n	8006f8e <_LIB_U8QUEUE_get_byte+0x12>
		s_queue->action_pointer = 0;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	8103      	strh	r3, [r0, #8]
	}
	return (s_queue->ring_buffer[s_queue->action_pointer]);
 8006f8e:	6802      	ldr	r2, [r0, #0]
}

uint8_t _LIB_U8QUEUE_get_byte(s__LIB_QUEUE* s_queue)
{
	return read_ringbuffer(s_queue);
 8006f90:	5cd0      	ldrb	r0, [r2, r3]
}
 8006f92:	4770      	bx	lr

08006f94 <_LIB_U8QUEUE_get_word>:

uint16_t _LIB_U8QUEUE_get_word(s__LIB_QUEUE* s_queue)
{
 8006f94:	b510      	push	{r4, lr}
	s_queue->action_pointer++;
 8006f96:	8902      	ldrh	r2, [r0, #8]
	if(s_queue->action_pointer > s_queue->ring_buffer_size)	{
 8006f98:	8884      	ldrh	r4, [r0, #4]
	s_queue->action_pointer++;
 8006f9a:	1c53      	adds	r3, r2, #1
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	8103      	strh	r3, [r0, #8]
	if(s_queue->action_pointer > s_queue->ring_buffer_size)	{
 8006fa0:	42a3      	cmp	r3, r4
 8006fa2:	d80b      	bhi.n	8006fbc <_LIB_U8QUEUE_get_word+0x28>
	return (s_queue->ring_buffer[s_queue->action_pointer]);
 8006fa4:	6801      	ldr	r1, [r0, #0]
 8006fa6:	3202      	adds	r2, #2
 8006fa8:	b292      	uxth	r2, r2
 8006faa:	5ccb      	ldrb	r3, [r1, r3]
	if(s_queue->action_pointer > s_queue->ring_buffer_size)	{
 8006fac:	4294      	cmp	r4, r2
 8006fae:	d30c      	bcc.n	8006fca <_LIB_U8QUEUE_get_word+0x36>
	s_queue->action_pointer++;
 8006fb0:	8102      	strh	r2, [r0, #8]
 8006fb2:	1889      	adds	r1, r1, r2
	uint16_t temp = 0;

	wh = read_ringbuffer(s_queue);
	wl = read_ringbuffer(s_queue);

	temp = ((wh << 8) & 0xFF00) | (wl & 0x00FF);
 8006fb4:	7808      	ldrb	r0, [r1, #0]
 8006fb6:	021b      	lsls	r3, r3, #8

	return temp;
 8006fb8:	4318      	orrs	r0, r3
}
 8006fba:	bd10      	pop	{r4, pc}
		s_queue->action_pointer = 0;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	2201      	movs	r2, #1
	return (s_queue->ring_buffer[s_queue->action_pointer]);
 8006fc0:	6801      	ldr	r1, [r0, #0]
		s_queue->action_pointer = 0;
 8006fc2:	8103      	strh	r3, [r0, #8]
	return (s_queue->ring_buffer[s_queue->action_pointer]);
 8006fc4:	5ccb      	ldrb	r3, [r1, r3]
	if(s_queue->action_pointer > s_queue->ring_buffer_size)	{
 8006fc6:	4294      	cmp	r4, r2
 8006fc8:	d2f2      	bcs.n	8006fb0 <_LIB_U8QUEUE_get_word+0x1c>
		s_queue->action_pointer = 0;
 8006fca:	2200      	movs	r2, #0
 8006fcc:	8102      	strh	r2, [r0, #8]
 8006fce:	e7f1      	b.n	8006fb4 <_LIB_U8QUEUE_get_word+0x20>

08006fd0 <_LIB_U8QUEUE_inc_pointer>:
	s_queue->action_pointer++;
 8006fd0:	8903      	ldrh	r3, [r0, #8]
	if(s_queue->action_pointer > s_queue->ring_buffer_size)	{
 8006fd2:	8882      	ldrh	r2, [r0, #4]
	s_queue->action_pointer++;
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	8103      	strh	r3, [r0, #8]
	if(s_queue->action_pointer > s_queue->ring_buffer_size)	{
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d201      	bcs.n	8006fe2 <_LIB_U8QUEUE_inc_pointer+0x12>
		s_queue->action_pointer = 0;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	8103      	strh	r3, [r0, #8]

void _LIB_U8QUEUE_inc_pointer(s__LIB_QUEUE* s_queue)
{
	read_ringbuffer(s_queue);
}
 8006fe2:	4770      	bx	lr

08006fe4 <_LIB_U8QUEUE_push_ring>:
		_LIB_U8QUEUE_comFlush(s_queue);
	}
	s_queue->blank_check = 0;
#endif

	if(s_queue->save_pointer != s_queue->action_pointer){
 8006fe4:	88c3      	ldrh	r3, [r0, #6]
 8006fe6:	8902      	ldrh	r2, [r0, #8]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d00a      	beq.n	8007002 <_LIB_U8QUEUE_push_ring+0x1e>
		s_queue->ring_buffer[s_queue->save_pointer] = comdt;
 8006fec:	6802      	ldr	r2, [r0, #0]
 8006fee:	54d1      	strb	r1, [r2, r3]
		s_queue->save_pointer++;
 8006ff0:	88c3      	ldrh	r3, [r0, #6]
		if(s_queue->save_pointer > s_queue->ring_buffer_size){
 8006ff2:	8882      	ldrh	r2, [r0, #4]
		s_queue->save_pointer++;
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	80c3      	strh	r3, [r0, #6]
		if(s_queue->save_pointer > s_queue->ring_buffer_size){
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d201      	bcs.n	8007002 <_LIB_U8QUEUE_push_ring+0x1e>
			s_queue->save_pointer = 0;
 8006ffe:	2300      	movs	r3, #0
 8007000:	80c3      	strh	r3, [r0, #6]
		}
	}
}
 8007002:	4770      	bx	lr

08007004 <_LIB_USERDELAY_tickcount>:
static volatile uint32_t gUserDelayTick = 0;


void _LIB_USERDELAY_tickcount(void)
{
	gUserDelayTick++;
 8007004:	4a02      	ldr	r2, [pc, #8]	; (8007010 <_LIB_USERDELAY_tickcount+0xc>)
 8007006:	6813      	ldr	r3, [r2, #0]
 8007008:	3301      	adds	r3, #1
 800700a:	6013      	str	r3, [r2, #0]
}
 800700c:	4770      	bx	lr
 800700e:	46c0      	nop			; (mov r8, r8)
 8007010:	200009e8 	.word	0x200009e8

08007014 <_LIB_USERDLEAY_gettick>:

uint32_t _LIB_USERDLEAY_gettick(void)
{
	return gUserDelayTick;
 8007014:	4b01      	ldr	r3, [pc, #4]	; (800701c <_LIB_USERDLEAY_gettick+0x8>)
 8007016:	6818      	ldr	r0, [r3, #0]
}
 8007018:	4770      	bx	lr
 800701a:	46c0      	nop			; (mov r8, r8)
 800701c:	200009e8 	.word	0x200009e8

08007020 <_LIB_USERDELAY_set>:

void _LIB_USERDELAY_set(gUserDelay *Delay, unsigned long delayvalue)
{
	unsigned long delay_to_tick = delayvalue * GUSERDELAY_PERIOD;
 8007020:	008b      	lsls	r3, r1, #2
 8007022:	1859      	adds	r1, r3, r1
 8007024:	0049      	lsls	r1, r1, #1

	if(delay_to_tick == 0)
	{
		Delay->nDelay = 0;
 8007026:	6081      	str	r1, [r0, #8]
	if(delay_to_tick == 0)
 8007028:	d002      	beq.n	8007030 <_LIB_USERDELAY_set+0x10>
	{
		Delay->nDelay = delay_to_tick;
		//printf("delay : %ld\r\n", delay_to_tick);
	}

	Delay->state = DELAY_INACTIVE;
 800702a:	2300      	movs	r3, #0
	Delay->uStartTick = delay_to_tick;
 800702c:	6041      	str	r1, [r0, #4]
	Delay->state = DELAY_INACTIVE;
 800702e:	7003      	strb	r3, [r0, #0]
}
 8007030:	4770      	bx	lr
 8007032:	46c0      	nop			; (mov r8, r8)

08007034 <_LIB_USERDELAY_start>:

unsigned int _LIB_USERDELAY_start(gUserDelay *Delay, tUSERDELAYRENEWSTAT Renew)
{
	if(Renew == DELAY_RENEW_OFF)
 8007034:	2900      	cmp	r1, #0
 8007036:	d102      	bne.n	800703e <_LIB_USERDELAY_start+0xa>
	{
		if(Delay->state == DELAY_ACTIVE)		return 0;
 8007038:	7803      	ldrb	r3, [r0, #0]
 800703a:	2b01      	cmp	r3, #1
 800703c:	d006      	beq.n	800704c <_LIB_USERDELAY_start+0x18>
	}

	Delay->state = DELAY_ACTIVE;
 800703e:	2301      	movs	r3, #1
 8007040:	7003      	strb	r3, [r0, #0]
	Delay->uStartTick = gUserDelayTick;
 8007042:	4b03      	ldr	r3, [pc, #12]	; (8007050 <_LIB_USERDELAY_start+0x1c>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	6043      	str	r3, [r0, #4]
	//printf("StartTick = %ld\r\n", gUserDelayTick);
	return 1;
 8007048:	2001      	movs	r0, #1
}
 800704a:	4770      	bx	lr
		if(Delay->state == DELAY_ACTIVE)		return 0;
 800704c:	2000      	movs	r0, #0
 800704e:	e7fc      	b.n	800704a <_LIB_USERDELAY_start+0x16>
 8007050:	200009e8 	.word	0x200009e8

08007054 <_LIB_USERDELAY_stop>:

void _LIB_USERDELAY_stop(gUserDelay *Delay)
{
	Delay->state = DELAY_INACTIVE;
 8007054:	2300      	movs	r3, #0
 8007056:	7003      	strb	r3, [r0, #0]
}
 8007058:	4770      	bx	lr
 800705a:	46c0      	nop			; (mov r8, r8)

0800705c <_LIB_USERDELAY_isfired>:
	}
}

unsigned int _LIB_USERDELAY_isfired(gUserDelay *Delay)
{
	if(Delay->state == DELAY_INACTIVE)
 800705c:	7803      	ldrb	r3, [r0, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d008      	beq.n	8007074 <_LIB_USERDELAY_isfired+0x18>
	uCurrentTick = gUserDelayTick;
 8007062:	4b05      	ldr	r3, [pc, #20]	; (8007078 <_LIB_USERDELAY_isfired+0x1c>)
		return (0xFFFFFFFF - nStartTime + 1 + uCurrentTick);
 8007064:	6842      	ldr	r2, [r0, #4]
	uCurrentTick = gUserDelayTick;
 8007066:	681b      	ldr	r3, [r3, #0]
		return (0xFFFFFFFF - nStartTime + 1 + uCurrentTick);
 8007068:	1a9b      	subs	r3, r3, r2
	{
		return 0;
	}
	if(CheckDelayValue(Delay->uStartTick) >= Delay->nDelay)
 800706a:	6882      	ldr	r2, [r0, #8]
 800706c:	2000      	movs	r0, #0
 800706e:	4293      	cmp	r3, r2
 8007070:	4140      	adcs	r0, r0
	}
	else
	{
		return 0;
	}
}
 8007072:	4770      	bx	lr
		return 0;
 8007074:	2000      	movs	r0, #0
 8007076:	e7fc      	b.n	8007072 <_LIB_USERDELAY_isfired+0x16>
 8007078:	200009e8 	.word	0x200009e8

0800707c <_MW_CP_init>:
 */
//__IO uint16_t gADCData[MAX_ADC_CH] = {0,};
__IO uint16_t gADCData[MAX_ADC_CH] = {0,};

void _MW_CP_init()
{
 800707c:	b570      	push	{r4, r5, r6, lr}
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_2);
 800707e:	4c20      	ldr	r4, [pc, #128]	; (8007100 <_MW_CP_init+0x84>)
 8007080:	2104      	movs	r1, #4
 8007082:	0020      	movs	r0, r4
 8007084:	f002 fd8a 	bl	8009b9c <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_3);
 8007088:	2108      	movs	r1, #8
 800708a:	0020      	movs	r0, r4
 800708c:	f002 fd86 	bl	8009b9c <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_4);
 8007090:	210c      	movs	r1, #12
 8007092:	0020      	movs	r0, r4
 8007094:	f002 fd82 	bl	8009b9c <HAL_TIM_OC_Start_IT>

	HAL_ADCEx_Calibration_Start(&hadc);
 8007098:	4c1a      	ldr	r4, [pc, #104]	; (8007104 <_MW_CP_init+0x88>)
	HAL_ADC_Start_DMA(&hadc, (uint32_t*)gADCData, MAX_ADC_CH);

	_MW_CP_set_pwm_duty(100);
	//CP.PWM_DutyBK = _MW_CP_get_pwm_duty();

	CP.State = default0;
 800709a:	2500      	movs	r5, #0
	HAL_ADCEx_Calibration_Start(&hadc);
 800709c:	0020      	movs	r0, r4
 800709e:	f001 fa65 	bl	800856c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc, (uint32_t*)gADCData, MAX_ADC_CH);
 80070a2:	2205      	movs	r2, #5
 80070a4:	0020      	movs	r0, r4
 80070a6:	4918      	ldr	r1, [pc, #96]	; (8007108 <_MW_CP_init+0x8c>)
 80070a8:	f001 f942 	bl	8008330 <HAL_ADC_Start_DMA>
	if((persent < 0) || (persent > 100))
	{
		return _FALSE;
	}

	CP.PWM_Duty = persent;
 80070ac:	4c17      	ldr	r4, [pc, #92]	; (800710c <_MW_CP_init+0x90>)
 80070ae:	2200      	movs	r2, #0
	_LIB_DEBOUNCECHECK_init(CP.DebounceCheckBuf, CP_ADC_DEBOUNCECHECKBUF_LENGTH);
 80070b0:	0020      	movs	r0, r4
	CP.PWM_Duty = persent;
 80070b2:	4b17      	ldr	r3, [pc, #92]	; (8007110 <_MW_CP_init+0x94>)
	_LIB_DEBOUNCECHECK_init(CP.DebounceCheckBuf, CP_ADC_DEBOUNCECHECKBUF_LENGTH);
 80070b4:	2103      	movs	r1, #3
 80070b6:	3011      	adds	r0, #17
	CP.PWM_Duty = persent;
 80070b8:	6022      	str	r2, [r4, #0]
 80070ba:	6063      	str	r3, [r4, #4]
	CP.State = default0;
 80070bc:	7425      	strb	r5, [r4, #16]
	_LIB_DEBOUNCECHECK_init(CP.DebounceCheckBuf, CP_ADC_DEBOUNCECHECKBUF_LENGTH);
 80070be:	f7ff fef9 	bl	8006eb4 <_LIB_DEBOUNCECHECK_init>
	CP.H.complete_ADC = 0;
 80070c2:	2320      	movs	r3, #32
	CP.L.ave_Volt = 0;
 80070c4:	2200      	movs	r2, #0
	CP.H.complete_ADC = 0;
 80070c6:	54e5      	strb	r5, [r4, r3]
	CP.L.ave_Volt = 0;
 80070c8:	2300      	movs	r3, #0
 80070ca:	6622      	str	r2, [r4, #96]	; 0x60
 80070cc:	6663      	str	r3, [r4, #100]	; 0x64
	CP.L.sum_Volt = 0;
 80070ce:	65a2      	str	r2, [r4, #88]	; 0x58
 80070d0:	65e3      	str	r3, [r4, #92]	; 0x5c
	CP.L.val_Volt = 0;
 80070d2:	6522      	str	r2, [r4, #80]	; 0x50
 80070d4:	6563      	str	r3, [r4, #84]	; 0x54
	CP.H.val_Volt = 0;
 80070d6:	62a2      	str	r2, [r4, #40]	; 0x28
 80070d8:	62e3      	str	r3, [r4, #44]	; 0x2c
	CP.H.sum_Volt = 0;
 80070da:	6322      	str	r2, [r4, #48]	; 0x30
 80070dc:	6363      	str	r3, [r4, #52]	; 0x34
	CP.H.ave_Volt = 0;
 80070de:	63a2      	str	r2, [r4, #56]	; 0x38
 80070e0:	63e3      	str	r3, [r4, #60]	; 0x3c
	CP.L.complete_ADC = 0;
 80070e2:	2348      	movs	r3, #72	; 0x48
 80070e4:	54e5      	strb	r5, [r4, r3]
    CP.State_bk = CP.State;
 80070e6:	7c22      	ldrb	r2, [r4, #16]
	CP.H.val_ADC = 0;
 80070e8:	61a5      	str	r5, [r4, #24]
	CP.H.ave_ADC = 0;
 80070ea:	61e5      	str	r5, [r4, #28]
	CP.L.val_ADC = 0;
 80070ec:	6425      	str	r5, [r4, #64]	; 0x40
	CP.L.ave_ADC = 0;
 80070ee:	6465      	str	r5, [r4, #68]	; 0x44
    CP.State_bk = CP.State;
 80070f0:	3320      	adds	r3, #32
    _LIB_USERDELAY_set(&gDelay_mcctl, MCCTL_DELAY);
 80070f2:	2164      	movs	r1, #100	; 0x64
 80070f4:	4807      	ldr	r0, [pc, #28]	; (8007114 <_MW_CP_init+0x98>)
    CP.State_bk = CP.State;
 80070f6:	54e2      	strb	r2, [r4, r3]
    _LIB_USERDELAY_set(&gDelay_mcctl, MCCTL_DELAY);
 80070f8:	f7ff ff92 	bl	8007020 <_LIB_USERDELAY_set>
}
 80070fc:	bd70      	pop	{r4, r5, r6, pc}
 80070fe:	46c0      	nop			; (mov r8, r8)
 8007100:	20000c04 	.word	0x20000c04
 8007104:	20000b30 	.word	0x20000b30
 8007108:	20000a64 	.word	0x20000a64
 800710c:	200009f0 	.word	0x200009f0
 8007110:	40590000 	.word	0x40590000
 8007114:	20000a70 	.word	0x20000a70

08007118 <_MW_CP_change_duty>:
{
 8007118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800711a:	46c6      	mov	lr, r8
	return _TRUE;
}

double _MW_CP_get_pwm_duty()
{
	return CP.PWM_Duty;
 800711c:	4d14      	ldr	r5, [pc, #80]	; (8007170 <_MW_CP_change_duty+0x58>)
{
 800711e:	4680      	mov	r8, r0
	return CP.PWM_Duty;
 8007120:	682e      	ldr	r6, [r5, #0]
 8007122:	686f      	ldr	r7, [r5, #4]
{
 8007124:	000c      	movs	r4, r1
	if(temp_PWM_Duty != CP.PWM_DutyBK)
 8007126:	68a8      	ldr	r0, [r5, #8]
 8007128:	68e9      	ldr	r1, [r5, #12]
{
 800712a:	b500      	push	{lr}
	if(temp_PWM_Duty != CP.PWM_DutyBK)
 800712c:	0032      	movs	r2, r6
 800712e:	003b      	movs	r3, r7
 8007130:	f7f9 f890 	bl	8000254 <__aeabi_dcmpeq>
 8007134:	2800      	cmp	r0, #0
 8007136:	d004      	beq.n	8007142 <_MW_CP_change_duty+0x2a>
	return _FALSE;
 8007138:	2400      	movs	r4, #0
}
 800713a:	0020      	movs	r0, r4
 800713c:	bc80      	pop	{r7}
 800713e:	46b8      	mov	r8, r7
 8007140:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(0 == _MW_PWM_set_duty(htim, cp_channel, temp_PWM_Duty))
 8007142:	0039      	movs	r1, r7
 8007144:	0030      	movs	r0, r6
 8007146:	f7f9 f8cb 	bl	80002e0 <__aeabi_d2uiz>
 800714a:	0021      	movs	r1, r4
 800714c:	b2c2      	uxtb	r2, r0
 800714e:	4640      	mov	r0, r8
 8007150:	f000 ff3a 	bl	8007fc8 <_MW_PWM_set_duty>
 8007154:	1e04      	subs	r4, r0, #0
 8007156:	d003      	beq.n	8007160 <_MW_CP_change_duty+0x48>
			return _TRUE;
 8007158:	2401      	movs	r4, #1
			CP.PWM_DutyBK = temp_PWM_Duty;
 800715a:	60ae      	str	r6, [r5, #8]
 800715c:	60ef      	str	r7, [r5, #12]
			return _TRUE;
 800715e:	e7ec      	b.n	800713a <_MW_CP_change_duty+0x22>
			_LIB_LOGGING_print_file_line("_MW_PWM_ERROR");
 8007160:	234f      	movs	r3, #79	; 0x4f
 8007162:	4a04      	ldr	r2, [pc, #16]	; (8007174 <_MW_CP_change_duty+0x5c>)
 8007164:	4904      	ldr	r1, [pc, #16]	; (8007178 <_MW_CP_change_duty+0x60>)
 8007166:	4805      	ldr	r0, [pc, #20]	; (800717c <_MW_CP_change_duty+0x64>)
 8007168:	f003 fdd6 	bl	800ad18 <iprintf>
 800716c:	e7e5      	b.n	800713a <_MW_CP_change_duty+0x22>
 800716e:	46c0      	nop			; (mov r8, r8)
 8007170:	200009f0 	.word	0x200009f0
 8007174:	0800df4c 	.word	0x0800df4c
 8007178:	0800df68 	.word	0x0800df68
 800717c:	0800df78 	.word	0x0800df78

08007180 <_MW_CP_set_pwm_duty>:
{
 8007180:	b570      	push	{r4, r5, r6, lr}
	if((persent < 0) || (persent > 100))
 8007182:	2200      	movs	r2, #0
 8007184:	2300      	movs	r3, #0
{
 8007186:	0004      	movs	r4, r0
 8007188:	000d      	movs	r5, r1
	if((persent < 0) || (persent > 100))
 800718a:	f7f9 f869 	bl	8000260 <__aeabi_dcmplt>
 800718e:	2800      	cmp	r0, #0
 8007190:	d10c      	bne.n	80071ac <_MW_CP_set_pwm_duty+0x2c>
 8007192:	2200      	movs	r2, #0
 8007194:	0020      	movs	r0, r4
 8007196:	0029      	movs	r1, r5
 8007198:	4b05      	ldr	r3, [pc, #20]	; (80071b0 <_MW_CP_set_pwm_duty+0x30>)
 800719a:	f7f9 f875 	bl	8000288 <__aeabi_dcmpgt>
 800719e:	2800      	cmp	r0, #0
 80071a0:	d104      	bne.n	80071ac <_MW_CP_set_pwm_duty+0x2c>
	CP.PWM_Duty = persent;
 80071a2:	4b04      	ldr	r3, [pc, #16]	; (80071b4 <_MW_CP_set_pwm_duty+0x34>)
	return _TRUE;
 80071a4:	3001      	adds	r0, #1
	CP.PWM_Duty = persent;
 80071a6:	601c      	str	r4, [r3, #0]
 80071a8:	605d      	str	r5, [r3, #4]
	return _TRUE;
 80071aa:	e000      	b.n	80071ae <_MW_CP_set_pwm_duty+0x2e>
		return _FALSE;
 80071ac:	2000      	movs	r0, #0
}
 80071ae:	bd70      	pop	{r4, r5, r6, pc}
 80071b0:	40590000 	.word	0x40590000
 80071b4:	200009f0 	.word	0x200009f0

080071b8 <_MW_CP_get_h_final_voltage>:
}
double _MW_CP_get_h_final_voltage()
{
	return CP.H.ave_Volt;
 80071b8:	4b01      	ldr	r3, [pc, #4]	; (80071c0 <_MW_CP_get_h_final_voltage+0x8>)
 80071ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80071bc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
}
 80071be:	4770      	bx	lr
 80071c0:	200009f0 	.word	0x200009f0

080071c4 <_MW_CP_get_l_final_voltage>:
double _MW_CP_get_l_final_voltage()
{
	return CP.L.ave_Volt;
 80071c4:	4b01      	ldr	r3, [pc, #4]	; (80071cc <_MW_CP_get_l_final_voltage+0x8>)
 80071c6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80071c8:	6e59      	ldr	r1, [r3, #100]	; 0x64
}
 80071ca:	4770      	bx	lr
 80071cc:	200009f0 	.word	0x200009f0

080071d0 <_MW_CP_cp_relay_ctl>:

uint8_t _MW_CP_cp_relay_ctl(int value)
{
 80071d0:	b510      	push	{r4, lr}
	if(value == _OFF)
 80071d2:	2800      	cmp	r0, #0
 80071d4:	d108      	bne.n	80071e8 <_MW_CP_cp_relay_ctl+0x18>
	{
		if(_MW_GPIO_get_gpo(CP_RY) == _ON)
 80071d6:	3007      	adds	r0, #7
 80071d8:	f000 fcac 	bl	8007b34 <_MW_GPIO_get_gpo>
 80071dc:	0004      	movs	r4, r0
 80071de:	2801      	cmp	r0, #1
 80071e0:	d010      	beq.n	8007204 <_MW_CP_cp_relay_ctl+0x34>
#endif
			return _TRUE;
		}
	}

	return _FALSE;
 80071e2:	2400      	movs	r4, #0
}
 80071e4:	0020      	movs	r0, r4
 80071e6:	bd10      	pop	{r4, pc}
		if(_MW_GPIO_get_gpo(CP_RY) == _OFF)
 80071e8:	2007      	movs	r0, #7
 80071ea:	f000 fca3 	bl	8007b34 <_MW_GPIO_get_gpo>
 80071ee:	2800      	cmp	r0, #0
 80071f0:	d1f7      	bne.n	80071e2 <_MW_CP_cp_relay_ctl+0x12>
			_MW_GPIO_set_gpo(CP_RY, _ON);
 80071f2:	2101      	movs	r1, #1
 80071f4:	3007      	adds	r0, #7
 80071f6:	f000 fc45 	bl	8007a84 <_MW_GPIO_set_gpo>
			_LIB_LOGGING_printf("CP_RELAY : --ON-- \r\n");
 80071fa:	4806      	ldr	r0, [pc, #24]	; (8007214 <_MW_CP_cp_relay_ctl+0x44>)
 80071fc:	f003 fe18 	bl	800ae30 <puts>
			return _TRUE;
 8007200:	2401      	movs	r4, #1
 8007202:	e7ef      	b.n	80071e4 <_MW_CP_cp_relay_ctl+0x14>
			_MW_GPIO_set_gpo(CP_RY, _OFF);
 8007204:	2100      	movs	r1, #0
 8007206:	2007      	movs	r0, #7
 8007208:	f000 fc3c 	bl	8007a84 <_MW_GPIO_set_gpo>
			_LIB_LOGGING_printf("CP_RELAY : --OFF-- \r\n");
 800720c:	4802      	ldr	r0, [pc, #8]	; (8007218 <_MW_CP_cp_relay_ctl+0x48>)
 800720e:	f003 fe0f 	bl	800ae30 <puts>
			return _TRUE;
 8007212:	e7e7      	b.n	80071e4 <_MW_CP_cp_relay_ctl+0x14>
 8007214:	0800dfa4 	.word	0x0800dfa4
 8007218:	0800df8c 	.word	0x0800df8c

0800721c <_MW_CP_mc_relay_clear>:
	return ret_value;
}
#else

uint8_t _MW_CP_mc_relay_clear()
{
 800721c:	b510      	push	{r4, lr}
	uint8_t ret_value = _CONTINUE;

	if(_TRUE == _LIB_USERDELAY_isfired(&gDelay_mcctl))
 800721e:	4c0c      	ldr	r4, [pc, #48]	; (8007250 <_MW_CP_mc_relay_clear+0x34>)
 8007220:	0020      	movs	r0, r4
 8007222:	f7ff ff1b 	bl	800705c <_LIB_USERDELAY_isfired>
	uint8_t ret_value = _CONTINUE;
 8007226:	2302      	movs	r3, #2
	if(_TRUE == _LIB_USERDELAY_isfired(&gDelay_mcctl))
 8007228:	2801      	cmp	r0, #1
 800722a:	d001      	beq.n	8007230 <_MW_CP_mc_relay_clear+0x14>
		_LIB_LOGGING_printf("MC_RELAY : --CONTROL_COMPLETE-- \r\n");
#endif
	}

	return ret_value;
}
 800722c:	0018      	movs	r0, r3
 800722e:	bd10      	pop	{r4, pc}
		_LIB_USERDELAY_stop(&gDelay_mcctl);
 8007230:	0020      	movs	r0, r4
 8007232:	f7ff ff0f 	bl	8007054 <_LIB_USERDELAY_stop>
		_MW_GPIO_set_gpo(MC_TURN_ON, _OFF);
 8007236:	2100      	movs	r1, #0
 8007238:	2005      	movs	r0, #5
 800723a:	f000 fc23 	bl	8007a84 <_MW_GPIO_set_gpo>
		_MW_GPIO_set_gpo(MC_TURN_OFF, _OFF);
 800723e:	2100      	movs	r1, #0
 8007240:	2006      	movs	r0, #6
 8007242:	f000 fc1f 	bl	8007a84 <_MW_GPIO_set_gpo>
		_LIB_LOGGING_printf("MC_RELAY : --CONTROL_COMPLETE-- \r\n");
 8007246:	4803      	ldr	r0, [pc, #12]	; (8007254 <_MW_CP_mc_relay_clear+0x38>)
 8007248:	f003 fdf2 	bl	800ae30 <puts>
		ret_value = _TRUE;
 800724c:	2301      	movs	r3, #1
 800724e:	e7ed      	b.n	800722c <_MW_CP_mc_relay_clear+0x10>
 8007250:	20000a70 	.word	0x20000a70
 8007254:	0800dfb8 	.word	0x0800dfb8

08007258 <_MW_CP_mc_relay_ctl>:

uint8_t _MW_CP_mc_relay_ctl(int value)
{
 8007258:	b570      	push	{r4, r5, r6, lr}
	uint8_t ret_value = _CONTINUE;

	ctl_value = value;

	if(bak_ctl_value != ctl_value)
 800725a:	4d15      	ldr	r5, [pc, #84]	; (80072b0 <_MW_CP_mc_relay_ctl+0x58>)
	ctl_value = value;
 800725c:	4e15      	ldr	r6, [pc, #84]	; (80072b4 <_MW_CP_mc_relay_ctl+0x5c>)
	if(bak_ctl_value != ctl_value)
 800725e:	682b      	ldr	r3, [r5, #0]
{
 8007260:	0004      	movs	r4, r0
	ctl_value = value;
 8007262:	6030      	str	r0, [r6, #0]
	if(bak_ctl_value != ctl_value)
 8007264:	4283      	cmp	r3, r0
 8007266:	d101      	bne.n	800726c <_MW_CP_mc_relay_ctl+0x14>

	//Todo
	// weld check --> compulsion mc on/off squence

	return ret_value;
}
 8007268:	2002      	movs	r0, #2
 800726a:	bd70      	pop	{r4, r5, r6, pc}
		if(_TRUE == _LIB_USERDELAY_start(&gDelay_mcctl, DELAY_RENEW_ON))
 800726c:	2101      	movs	r1, #1
 800726e:	4812      	ldr	r0, [pc, #72]	; (80072b8 <_MW_CP_mc_relay_ctl+0x60>)
 8007270:	f7ff fee0 	bl	8007034 <_LIB_USERDELAY_start>
 8007274:	2801      	cmp	r0, #1
 8007276:	d1f7      	bne.n	8007268 <_MW_CP_mc_relay_ctl+0x10>
				_MW_GPIO_set_gpo(MC_TURN_OFF, _ON);
 8007278:	2101      	movs	r1, #1
			if(value == _OFF)
 800727a:	2c00      	cmp	r4, #0
 800727c:	d10c      	bne.n	8007298 <_MW_CP_mc_relay_ctl+0x40>
				_MW_GPIO_set_gpo(MC_TURN_OFF, _ON);
 800727e:	3005      	adds	r0, #5
 8007280:	f000 fc00 	bl	8007a84 <_MW_GPIO_set_gpo>
				_MW_GPIO_set_gpo(MC_TURN_ON, _OFF);
 8007284:	2100      	movs	r1, #0
 8007286:	2005      	movs	r0, #5
 8007288:	f000 fbfc 	bl	8007a84 <_MW_GPIO_set_gpo>
				_LIB_LOGGING_printf("MC_RELAY : --TURN OFF-- \r\n");
 800728c:	480b      	ldr	r0, [pc, #44]	; (80072bc <_MW_CP_mc_relay_ctl+0x64>)
 800728e:	f003 fdcf 	bl	800ae30 <puts>
			bak_ctl_value = ctl_value;
 8007292:	6833      	ldr	r3, [r6, #0]
 8007294:	602b      	str	r3, [r5, #0]
 8007296:	e7e7      	b.n	8007268 <_MW_CP_mc_relay_ctl+0x10>
				_MW_GPIO_set_gpo(MC_TURN_ON, _ON);
 8007298:	2005      	movs	r0, #5
 800729a:	f000 fbf3 	bl	8007a84 <_MW_GPIO_set_gpo>
				_MW_GPIO_set_gpo(MC_TURN_OFF, _OFF);
 800729e:	2100      	movs	r1, #0
 80072a0:	2006      	movs	r0, #6
 80072a2:	f000 fbef 	bl	8007a84 <_MW_GPIO_set_gpo>
				_LIB_LOGGING_printf("MC_RELAY : --TURN ON-- \r\n");
 80072a6:	4806      	ldr	r0, [pc, #24]	; (80072c0 <_MW_CP_mc_relay_ctl+0x68>)
 80072a8:	f003 fdc2 	bl	800ae30 <puts>
 80072ac:	e7f1      	b.n	8007292 <_MW_CP_mc_relay_ctl+0x3a>
 80072ae:	46c0      	nop			; (mov r8, r8)
 80072b0:	20000068 	.word	0x20000068
 80072b4:	20000a60 	.word	0x20000a60
 80072b8:	20000a70 	.word	0x20000a70
 80072bc:	0800dfdc 	.word	0x0800dfdc
 80072c0:	0800dff8 	.word	0x0800dff8

080072c4 <_MW_CP_mc_relay_off_fast>:
	else
	{
		return _OFF;
	}
#else
	if(ctl_value == _ON)
 80072c4:	4b0b      	ldr	r3, [pc, #44]	; (80072f4 <_MW_CP_mc_relay_off_fast+0x30>)
	return _FALSE;
 80072c6:	2000      	movs	r0, #0
	if(ctl_value == _ON)
 80072c8:	681b      	ldr	r3, [r3, #0]
{
 80072ca:	b510      	push	{r4, lr}
	if(ctl_value == _ON)
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d10f      	bne.n	80072f0 <_MW_CP_mc_relay_off_fast+0x2c>
		GPO_MC_TURN_OFF_ENABLE;
 80072d0:	2090      	movs	r0, #144	; 0x90
 80072d2:	2201      	movs	r2, #1
 80072d4:	2140      	movs	r1, #64	; 0x40
 80072d6:	05c0      	lsls	r0, r0, #23
 80072d8:	f001 fbfa 	bl	8008ad0 <HAL_GPIO_WritePin>
		GPO_MC_TURN_ON_DISABLE;
 80072dc:	2090      	movs	r0, #144	; 0x90
 80072de:	2200      	movs	r2, #0
 80072e0:	2180      	movs	r1, #128	; 0x80
 80072e2:	05c0      	lsls	r0, r0, #23
 80072e4:	f001 fbf4 	bl	8008ad0 <HAL_GPIO_WritePin>
		_LIB_LOGGING_printf("#### fast mc off _ OK #### \r\n");
 80072e8:	4803      	ldr	r0, [pc, #12]	; (80072f8 <_MW_CP_mc_relay_off_fast+0x34>)
 80072ea:	f003 fda1 	bl	800ae30 <puts>
		return _TRUE;
 80072ee:	2001      	movs	r0, #1
}
 80072f0:	bd10      	pop	{r4, pc}
 80072f2:	46c0      	nop			; (mov r8, r8)
 80072f4:	20000a60 	.word	0x20000a60
 80072f8:	0800e014 	.word	0x0800e014

080072fc <_MW_CP_get_mc_relay_state>:
	if(ctl_value == _ON)
 80072fc:	4b03      	ldr	r3, [pc, #12]	; (800730c <_MW_CP_get_mc_relay_state+0x10>)
 80072fe:	6818      	ldr	r0, [r3, #0]
 8007300:	3801      	subs	r0, #1
 8007302:	4243      	negs	r3, r0
 8007304:	4158      	adcs	r0, r3
 8007306:	b2c0      	uxtb	r0, r0
	else
	{
		return _OFF;
	}
#endif
}
 8007308:	4770      	bx	lr
 800730a:	46c0      	nop			; (mov r8, r8)
 800730c:	20000a60 	.word	0x20000a60

08007310 <_MW_CP_get_cp_state>:

CP_StateDef _MW_CP_get_cp_state()
{
	return CP.State;
 8007310:	4b01      	ldr	r3, [pc, #4]	; (8007318 <_MW_CP_get_cp_state+0x8>)
 8007312:	7c18      	ldrb	r0, [r3, #16]
}
 8007314:	4770      	bx	lr
 8007316:	46c0      	nop			; (mov r8, r8)
 8007318:	200009f0 	.word	0x200009f0

0800731c <_MW_CP_cal_ampe_to_duty>:

/* KC 61851-1 Table A.5  */
uint16_t _MW_CP_cal_ampe_to_duty(uint16_t Ampe)
{
 800731c:	b570      	push	{r4, r5, r6, lr}
 800731e:	0004      	movs	r4, r0
 8007320:	2505      	movs	r5, #5
	double temp_Ampe = (double)Ampe;
	double temp_Duty = 5;

	/* 6A ~ 51A */
	if((temp_Ampe > 6) && (temp_Ampe <= 51))
 8007322:	2806      	cmp	r0, #6
 8007324:	d90b      	bls.n	800733e <_MW_CP_cal_ampe_to_duty+0x22>
	double temp_Ampe = (double)Ampe;
 8007326:	f7fb fbdb 	bl	8002ae0 <__aeabi_ui2d>
	if((temp_Ampe > 6) && (temp_Ampe <= 51))
 800732a:	2c33      	cmp	r4, #51	; 0x33
 800732c:	d809      	bhi.n	8007342 <_MW_CP_cal_ampe_to_duty+0x26>
	{
		temp_Duty = temp_Ampe / 0.6F;
 800732e:	2280      	movs	r2, #128	; 0x80
 8007330:	4b0b      	ldr	r3, [pc, #44]	; (8007360 <_MW_CP_cal_ampe_to_duty+0x44>)
 8007332:	05d2      	lsls	r2, r2, #23
 8007334:	f7fa f94c 	bl	80015d0 <__aeabi_ddiv>
 8007338:	f7f8 ffd2 	bl	80002e0 <__aeabi_d2uiz>
 800733c:	b285      	uxth	r5, r0
	{
		temp_Duty = ( temp_Ampe / 2.5F + 64.0F );
	}

	return (uint16_t)temp_Duty;
}
 800733e:	0028      	movs	r0, r5
 8007340:	bd70      	pop	{r4, r5, r6, pc}
	else if((temp_Ampe > 51) && (temp_Ampe <= 80))
 8007342:	2c50      	cmp	r4, #80	; 0x50
 8007344:	d8fb      	bhi.n	800733e <_MW_CP_cal_ampe_to_duty+0x22>
		temp_Duty = ( temp_Ampe / 2.5F + 64.0F );
 8007346:	2200      	movs	r2, #0
 8007348:	4b06      	ldr	r3, [pc, #24]	; (8007364 <_MW_CP_cal_ampe_to_duty+0x48>)
 800734a:	f7fa f941 	bl	80015d0 <__aeabi_ddiv>
 800734e:	2200      	movs	r2, #0
 8007350:	4b05      	ldr	r3, [pc, #20]	; (8007368 <_MW_CP_cal_ampe_to_duty+0x4c>)
 8007352:	f7f9 fdd3 	bl	8000efc <__aeabi_dadd>
 8007356:	f7f8 ffc3 	bl	80002e0 <__aeabi_d2uiz>
 800735a:	b285      	uxth	r5, r0
 800735c:	e7ef      	b.n	800733e <_MW_CP_cal_ampe_to_duty+0x22>
 800735e:	46c0      	nop			; (mov r8, r8)
 8007360:	3fe33333 	.word	0x3fe33333
 8007364:	40040000 	.word	0x40040000
 8007368:	40500000 	.word	0x40500000

0800736c <_MW_CP_print_cp_state>:


uint8_t _MW_CP_print_cp_state()
{
	if(CP.State != CP.State_bk)
 800736c:	2268      	movs	r2, #104	; 0x68
{
 800736e:	b510      	push	{r4, lr}
	if(CP.State != CP.State_bk)
 8007370:	4c25      	ldr	r4, [pc, #148]	; (8007408 <_MW_CP_print_cp_state+0x9c>)
 8007372:	7c23      	ldrb	r3, [r4, #16]
 8007374:	5ca2      	ldrb	r2, [r4, r2]
 8007376:	429a      	cmp	r2, r3
 8007378:	d011      	beq.n	800739e <_MW_CP_print_cp_state+0x32>
	{
		switch(CP.State)
 800737a:	2b0a      	cmp	r3, #10
 800737c:	d80d      	bhi.n	800739a <_MW_CP_print_cp_state+0x2e>
 800737e:	4a23      	ldr	r2, [pc, #140]	; (800740c <_MW_CP_print_cp_state+0xa0>)
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	58d3      	ldr	r3, [r2, r3]
 8007384:	469f      	mov	pc, r3
			case Err_DC :
				printf("@@@@ CP_ADC_State : Err_H : %d / 100 @@@@ \r\n", ((int)_MW_CP_get_h_final_voltage() * 100));
			break;

			case Err_PWML :
				printf("@@@@ CP_ADC_State : Err_L : %d / 100 @@@@ \r\n", ((int)_MW_CP_get_l_final_voltage() * 100));
 8007386:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8007388:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800738a:	f7fb fb43 	bl	8002a14 <__aeabi_d2iz>
 800738e:	2164      	movs	r1, #100	; 0x64
 8007390:	4341      	muls	r1, r0
 8007392:	481f      	ldr	r0, [pc, #124]	; (8007410 <_MW_CP_print_cp_state+0xa4>)
 8007394:	f003 fcc0 	bl	800ad18 <iprintf>
			break;
 8007398:	7c23      	ldrb	r3, [r4, #16]

		}

		CP.State_bk = CP.State;
 800739a:	2268      	movs	r2, #104	; 0x68
 800739c:	54a3      	strb	r3, [r4, r2]
	}

	return _TRUE;
}
 800739e:	2001      	movs	r0, #1
 80073a0:	bd10      	pop	{r4, pc}
				printf("@@@@ CP_ADC_State : Err_H : %d / 100 @@@@ \r\n", ((int)_MW_CP_get_h_final_voltage() * 100));
 80073a2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80073a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80073a6:	f7fb fb35 	bl	8002a14 <__aeabi_d2iz>
 80073aa:	2164      	movs	r1, #100	; 0x64
 80073ac:	4341      	muls	r1, r0
 80073ae:	4819      	ldr	r0, [pc, #100]	; (8007414 <_MW_CP_print_cp_state+0xa8>)
 80073b0:	f003 fcb2 	bl	800ad18 <iprintf>
			break;
 80073b4:	7c23      	ldrb	r3, [r4, #16]
 80073b6:	e7f0      	b.n	800739a <_MW_CP_print_cp_state+0x2e>
				printf("@@@@ CP_ADC_State : default0 @@@@ \r\n");
 80073b8:	4817      	ldr	r0, [pc, #92]	; (8007418 <_MW_CP_print_cp_state+0xac>)
 80073ba:	f003 fd39 	bl	800ae30 <puts>
			break;
 80073be:	7c23      	ldrb	r3, [r4, #16]
 80073c0:	e7eb      	b.n	800739a <_MW_CP_print_cp_state+0x2e>
				printf("@@@@ CP_ADC_State : DC_12V @@@@ \r\n");
 80073c2:	4816      	ldr	r0, [pc, #88]	; (800741c <_MW_CP_print_cp_state+0xb0>)
 80073c4:	f003 fd34 	bl	800ae30 <puts>
			break;
 80073c8:	7c23      	ldrb	r3, [r4, #16]
 80073ca:	e7e6      	b.n	800739a <_MW_CP_print_cp_state+0x2e>
				printf("@@@@ CP_ADC_State : DC_9V @@@@ \r\n");
 80073cc:	4814      	ldr	r0, [pc, #80]	; (8007420 <_MW_CP_print_cp_state+0xb4>)
 80073ce:	f003 fd2f 	bl	800ae30 <puts>
			break;
 80073d2:	7c23      	ldrb	r3, [r4, #16]
 80073d4:	e7e1      	b.n	800739a <_MW_CP_print_cp_state+0x2e>
				printf("@@@@ CP_ADC_State : DC_6V @@@@ \r\n");
 80073d6:	4813      	ldr	r0, [pc, #76]	; (8007424 <_MW_CP_print_cp_state+0xb8>)
 80073d8:	f003 fd2a 	bl	800ae30 <puts>
			break;
 80073dc:	7c23      	ldrb	r3, [r4, #16]
 80073de:	e7dc      	b.n	800739a <_MW_CP_print_cp_state+0x2e>
				printf("@@@@ CP_ADC_State : PWM_12V @@@@ \r\n");
 80073e0:	4811      	ldr	r0, [pc, #68]	; (8007428 <_MW_CP_print_cp_state+0xbc>)
 80073e2:	f003 fd25 	bl	800ae30 <puts>
			break;
 80073e6:	7c23      	ldrb	r3, [r4, #16]
 80073e8:	e7d7      	b.n	800739a <_MW_CP_print_cp_state+0x2e>
				printf("@@@@ CP_ADC_State : PWM_9V @@@@ \r\n");
 80073ea:	4810      	ldr	r0, [pc, #64]	; (800742c <_MW_CP_print_cp_state+0xc0>)
 80073ec:	f003 fd20 	bl	800ae30 <puts>
			break;
 80073f0:	7c23      	ldrb	r3, [r4, #16]
 80073f2:	e7d2      	b.n	800739a <_MW_CP_print_cp_state+0x2e>
				printf("@@@@ CP_ADC_State : PWM_6V @@@@ \r\n");
 80073f4:	480e      	ldr	r0, [pc, #56]	; (8007430 <_MW_CP_print_cp_state+0xc4>)
 80073f6:	f003 fd1b 	bl	800ae30 <puts>
			break;
 80073fa:	7c23      	ldrb	r3, [r4, #16]
 80073fc:	e7cd      	b.n	800739a <_MW_CP_print_cp_state+0x2e>
				printf("@@@@ CP_ADC_State : DC_N12V @@@@ \r\n");
 80073fe:	480d      	ldr	r0, [pc, #52]	; (8007434 <_MW_CP_print_cp_state+0xc8>)
 8007400:	f003 fd16 	bl	800ae30 <puts>
			break;
 8007404:	7c23      	ldrb	r3, [r4, #16]
 8007406:	e7c8      	b.n	800739a <_MW_CP_print_cp_state+0x2e>
 8007408:	200009f0 	.word	0x200009f0
 800740c:	0800e1b4 	.word	0x0800e1b4
 8007410:	0800e184 	.word	0x0800e184
 8007414:	0800e154 	.word	0x0800e154
 8007418:	0800e034 	.word	0x0800e034
 800741c:	0800e058 	.word	0x0800e058
 8007420:	0800e07c 	.word	0x0800e07c
 8007424:	0800e0a0 	.word	0x0800e0a0
 8007428:	0800e0c4 	.word	0x0800e0c4
 800742c:	0800e0e8 	.word	0x0800e0e8
 8007430:	0800e10c 	.word	0x0800e10c
 8007434:	0800e130 	.word	0x0800e130

08007438 <_MW_CP_average_adc>:

uint8_t _MW_CP_average_adc(uint8_t section, uint16_t adcvalue)
{
 8007438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743a:	46ce      	mov	lr, r9
 800743c:	4647      	mov	r7, r8
 800743e:	0004      	movs	r4, r0
 8007440:	b580      	push	{r7, lr}
	switch(section)
 8007442:	2800      	cmp	r0, #0
 8007444:	d02d      	beq.n	80074a2 <_MW_CP_average_adc+0x6a>
 8007446:	2801      	cmp	r0, #1
 8007448:	d126      	bne.n	8007498 <_MW_CP_average_adc+0x60>
			{
				return _FALSE;
			}
		break;
		case CP_SECTION_L:
			CP.L.val_ADC = adcvalue;
 800744a:	2340      	movs	r3, #64	; 0x40

			if(CP.L.complete_ADC == 0)
 800744c:	2748      	movs	r7, #72	; 0x48
			CP.L.val_ADC = adcvalue;
 800744e:	4d25      	ldr	r5, [pc, #148]	; (80074e4 <_MW_CP_average_adc+0xac>)
 8007450:	52e9      	strh	r1, [r5, r3]
			if(CP.L.complete_ADC == 0)
 8007452:	5dee      	ldrb	r6, [r5, r7]
 8007454:	2e00      	cmp	r6, #0
 8007456:	d11f      	bne.n	8007498 <_MW_CP_average_adc+0x60>
			{
				CP.L.sum_ADC += CP.L.val_ADC;
 8007458:	3302      	adds	r3, #2
 800745a:	5ae8      	ldrh	r0, [r5, r3]
 800745c:	4698      	mov	r8, r3
 800745e:	1808      	adds	r0, r1, r0
 8007460:	b280      	uxth	r0, r0
 8007462:	52e8      	strh	r0, [r5, r3]
				CP.L.ave_cnt++;
 8007464:	3304      	adds	r3, #4
 8007466:	4699      	mov	r9, r3
 8007468:	464a      	mov	r2, r9
 800746a:	5aeb      	ldrh	r3, [r5, r3]
 800746c:	3301      	adds	r3, #1
 800746e:	b29b      	uxth	r3, r3
 8007470:	52ab      	strh	r3, [r5, r2]
				if(CP.L.ave_cnt >= CP_ADC_AVE_BUF_LENGTH)
 8007472:	2b07      	cmp	r3, #7
 8007474:	d934      	bls.n	80074e0 <_MW_CP_average_adc+0xa8>
				{
					CP.L.ave_ADC = CP.L.sum_ADC * CP_ADC_AVE_BUF_LENGTH_REVERSE;
 8007476:	f7f9 fcfb 	bl	8000e70 <__aeabi_i2f>
 800747a:	21f8      	movs	r1, #248	; 0xf8
 800747c:	0589      	lsls	r1, r1, #22
 800747e:	f7f9 f9f5 	bl	800086c <__aeabi_fmul>
 8007482:	f7f8 ff15 	bl	80002b0 <__aeabi_f2uiz>
 8007486:	2344      	movs	r3, #68	; 0x44
 8007488:	52e8      	strh	r0, [r5, r3]

					CP.L.sum_ADC = 0;
 800748a:	4643      	mov	r3, r8
 800748c:	52ee      	strh	r6, [r5, r3]
					CP.L.ave_cnt = 0;
 800748e:	464b      	mov	r3, r9

					CP.L.complete_ADC = 1;
					return _TRUE;
 8007490:	2001      	movs	r0, #1
					CP.L.ave_cnt = 0;
 8007492:	52ee      	strh	r6, [r5, r3]
					CP.L.complete_ADC = 1;
 8007494:	55ec      	strb	r4, [r5, r7]
					return _TRUE;
 8007496:	e000      	b.n	800749a <_MW_CP_average_adc+0x62>
				return _FALSE;
 8007498:	2000      	movs	r0, #0
		break;
		default :
			return _FALSE;
		break;
	}
}
 800749a:	bcc0      	pop	{r6, r7}
 800749c:	46b9      	mov	r9, r7
 800749e:	46b0      	mov	r8, r6
 80074a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(CP.H.complete_ADC == 0)
 80074a2:	2620      	movs	r6, #32
			CP.H.val_ADC = adcvalue;
 80074a4:	4c0f      	ldr	r4, [pc, #60]	; (80074e4 <_MW_CP_average_adc+0xac>)
 80074a6:	8321      	strh	r1, [r4, #24]
			if(CP.H.complete_ADC == 0)
 80074a8:	5da5      	ldrb	r5, [r4, r6]
 80074aa:	2d00      	cmp	r5, #0
 80074ac:	d1f4      	bne.n	8007498 <_MW_CP_average_adc+0x60>
				CP.H.sum_ADC += CP.H.val_ADC;
 80074ae:	8b60      	ldrh	r0, [r4, #26]
				CP.H.ave_cnt++;
 80074b0:	8be3      	ldrh	r3, [r4, #30]
				CP.H.sum_ADC += CP.H.val_ADC;
 80074b2:	1808      	adds	r0, r1, r0
				CP.H.ave_cnt++;
 80074b4:	3301      	adds	r3, #1
				CP.H.sum_ADC += CP.H.val_ADC;
 80074b6:	b280      	uxth	r0, r0
				CP.H.ave_cnt++;
 80074b8:	b29b      	uxth	r3, r3
				CP.H.sum_ADC += CP.H.val_ADC;
 80074ba:	8360      	strh	r0, [r4, #26]
				CP.H.ave_cnt++;
 80074bc:	83e3      	strh	r3, [r4, #30]
				if(CP.H.ave_cnt >= CP_ADC_AVE_BUF_LENGTH)
 80074be:	2b07      	cmp	r3, #7
 80074c0:	d90e      	bls.n	80074e0 <_MW_CP_average_adc+0xa8>
					CP.H.ave_ADC = CP.H.sum_ADC * CP_ADC_AVE_BUF_LENGTH_REVERSE;
 80074c2:	f7f9 fcd5 	bl	8000e70 <__aeabi_i2f>
 80074c6:	21f8      	movs	r1, #248	; 0xf8
 80074c8:	0589      	lsls	r1, r1, #22
 80074ca:	f7f9 f9cf 	bl	800086c <__aeabi_fmul>
 80074ce:	f7f8 feef 	bl	80002b0 <__aeabi_f2uiz>
					CP.H.complete_ADC = 1;
 80074d2:	2301      	movs	r3, #1
					CP.H.ave_ADC = CP.H.sum_ADC * CP_ADC_AVE_BUF_LENGTH_REVERSE;
 80074d4:	83a0      	strh	r0, [r4, #28]
					CP.H.sum_ADC = 0;
 80074d6:	8365      	strh	r5, [r4, #26]
					return _TRUE;
 80074d8:	2001      	movs	r0, #1
					CP.H.ave_cnt = 0;
 80074da:	83e5      	strh	r5, [r4, #30]
					CP.H.complete_ADC = 1;
 80074dc:	55a3      	strb	r3, [r4, r6]
					return _TRUE;
 80074de:	e7dc      	b.n	800749a <_MW_CP_average_adc+0x62>
					return _CONTINUE;
 80074e0:	2002      	movs	r0, #2
 80074e2:	e7da      	b.n	800749a <_MW_CP_average_adc+0x62>
 80074e4:	200009f0 	.word	0x200009f0

080074e8 <_MW_CP_calculate_adc>:
uint8_t CP_is_complete_ADC(uint8_t section)
{
	switch(section)
	{
		case CP_SECTION_H:
			if(CP.H.complete_ADC == 1)
 80074e8:	2320      	movs	r3, #32
	}
	return _CONTINUE;
}
#else
uint8_t _MW_CP_calculate_adc()
{
 80074ea:	b570      	push	{r4, r5, r6, lr}
			if(CP.H.complete_ADC == 1)
 80074ec:	4c27      	ldr	r4, [pc, #156]	; (800758c <_MW_CP_calculate_adc+0xa4>)
 80074ee:	5ce5      	ldrb	r5, [r4, r3]
 80074f0:	2d01      	cmp	r5, #1
 80074f2:	d000      	beq.n	80074f6 <_MW_CP_calculate_adc+0xe>
				return _CONTINUE;
 80074f4:	2502      	movs	r5, #2
			if(CP.L.complete_ADC == 1)
 80074f6:	2648      	movs	r6, #72	; 0x48
 80074f8:	5da3      	ldrb	r3, [r4, r6]
	if(_MW_GPIO_get_gpo(CP_RY) == _ON)
 80074fa:	2007      	movs	r0, #7
			if(CP.L.complete_ADC == 1)
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d01b      	beq.n	8007538 <_MW_CP_calculate_adc+0x50>
	if(_MW_GPIO_get_gpo(CP_RY) == _ON)
 8007500:	f000 fb18 	bl	8007b34 <_MW_GPIO_get_gpo>
 8007504:	2801      	cmp	r0, #1
 8007506:	d014      	beq.n	8007532 <_MW_CP_calculate_adc+0x4a>
			return _TRUE;
		}
	}
	else
	{
		_LIB_DEBOUNCECHECK_init(CP.DebounceCheckBuf, CP_ADC_DEBOUNCECHECKBUF_LENGTH);
 8007508:	0020      	movs	r0, r4
 800750a:	2103      	movs	r1, #3
 800750c:	3011      	adds	r0, #17
 800750e:	f7ff fcd1 	bl	8006eb4 <_LIB_DEBOUNCECHECK_init>

		CP.State = default0;
 8007512:	2300      	movs	r3, #0

		CP.H.val_Volt = 0;
 8007514:	2200      	movs	r2, #0
		CP.State = default0;
 8007516:	7423      	strb	r3, [r4, #16]
		CP.H.val_Volt = 0;
 8007518:	2300      	movs	r3, #0
 800751a:	62a2      	str	r2, [r4, #40]	; 0x28
 800751c:	62e3      	str	r3, [r4, #44]	; 0x2c
		CP.L.val_Volt = 0;
 800751e:	6522      	str	r2, [r4, #80]	; 0x50
 8007520:	6563      	str	r3, [r4, #84]	; 0x54
		CP.H.sum_Volt = 0;
 8007522:	6322      	str	r2, [r4, #48]	; 0x30
 8007524:	6363      	str	r3, [r4, #52]	; 0x34
		CP.L.sum_Volt = 0;
 8007526:	65a2      	str	r2, [r4, #88]	; 0x58
 8007528:	65e3      	str	r3, [r4, #92]	; 0x5c
		CP.H.ave_Volt = 0;
 800752a:	63a2      	str	r2, [r4, #56]	; 0x38
 800752c:	63e3      	str	r3, [r4, #60]	; 0x3c
		CP.L.ave_Volt = 0;
 800752e:	6622      	str	r2, [r4, #96]	; 0x60
 8007530:	6663      	str	r3, [r4, #100]	; 0x64
	}
	return _CONTINUE;
 8007532:	2502      	movs	r5, #2
}
 8007534:	0028      	movs	r0, r5
 8007536:	bd70      	pop	{r4, r5, r6, pc}
	if(_MW_GPIO_get_gpo(CP_RY) == _ON)
 8007538:	f000 fafc 	bl	8007b34 <_MW_GPIO_get_gpo>
 800753c:	2801      	cmp	r0, #1
 800753e:	d1e3      	bne.n	8007508 <_MW_CP_calculate_adc+0x20>
		if((_TRUE == cp_section_h_complete_adc) && (_TRUE == cp_section_l_complete_adc))
 8007540:	2d01      	cmp	r5, #1
 8007542:	d1f6      	bne.n	8007532 <_MW_CP_calculate_adc+0x4a>
			temp_CP_H_cal = temp_CP_H_ave - CP_INPUT_LEVEL_CENTER_ADC_VALUE;
 8007544:	4b12      	ldr	r3, [pc, #72]	; (8007590 <_MW_CP_calculate_adc+0xa8>)
			temp_CP_H_ave = (int32_t)CP.H.ave_ADC;
 8007546:	8ba0      	ldrh	r0, [r4, #28]
			temp_CP_H_cal = temp_CP_H_ave - CP_INPUT_LEVEL_CENTER_ADC_VALUE;
 8007548:	469c      	mov	ip, r3
 800754a:	4460      	add	r0, ip
			CP.H.val_Volt = CP_ADC_Resolution * ((double)temp_CP_H_cal);
 800754c:	f7fb fa98 	bl	8002a80 <__aeabi_i2d>
 8007550:	22e0      	movs	r2, #224	; 0xe0
 8007552:	4b10      	ldr	r3, [pc, #64]	; (8007594 <_MW_CP_calculate_adc+0xac>)
 8007554:	0612      	lsls	r2, r2, #24
 8007556:	f7fa fc41 	bl	8001ddc <__aeabi_dmul>
			temp_CP_L_ave = (int32_t)CP.L.ave_ADC;
 800755a:	2344      	movs	r3, #68	; 0x44
			CP.H.val_Volt = CP_ADC_Resolution * ((double)temp_CP_H_cal);
 800755c:	62a0      	str	r0, [r4, #40]	; 0x28
 800755e:	62e1      	str	r1, [r4, #44]	; 0x2c
			CP.H.ave_Volt = CP.H.val_Volt;
 8007560:	63a0      	str	r0, [r4, #56]	; 0x38
 8007562:	63e1      	str	r1, [r4, #60]	; 0x3c
			temp_CP_L_ave = (int32_t)CP.L.ave_ADC;
 8007564:	5ae0      	ldrh	r0, [r4, r3]
			temp_CP_L_cal = temp_CP_L_ave - CP_INPUT_LEVEL_CENTER_ADC_VALUE;
 8007566:	4b0a      	ldr	r3, [pc, #40]	; (8007590 <_MW_CP_calculate_adc+0xa8>)
 8007568:	469c      	mov	ip, r3
 800756a:	4460      	add	r0, ip
			CP.L.val_Volt = CP_ADC_Resolution * ((double)temp_CP_L_cal);
 800756c:	f7fb fa88 	bl	8002a80 <__aeabi_i2d>
 8007570:	22e0      	movs	r2, #224	; 0xe0
 8007572:	4b08      	ldr	r3, [pc, #32]	; (8007594 <_MW_CP_calculate_adc+0xac>)
 8007574:	0612      	lsls	r2, r2, #24
 8007576:	f7fa fc31 	bl	8001ddc <__aeabi_dmul>
			CP.H.complete_ADC = 0;
 800757a:	2300      	movs	r3, #0
 800757c:	2220      	movs	r2, #32
			CP.L.val_Volt = CP_ADC_Resolution * ((double)temp_CP_L_cal);
 800757e:	6520      	str	r0, [r4, #80]	; 0x50
 8007580:	6561      	str	r1, [r4, #84]	; 0x54
			CP.L.ave_Volt = CP.L.val_Volt;
 8007582:	6620      	str	r0, [r4, #96]	; 0x60
 8007584:	6661      	str	r1, [r4, #100]	; 0x64
			CP.H.complete_ADC = 0;
 8007586:	54a3      	strb	r3, [r4, r2]
			CP.L.complete_ADC = 0;
 8007588:	55a3      	strb	r3, [r4, r6]
			return _TRUE;
 800758a:	e7d3      	b.n	8007534 <_MW_CP_calculate_adc+0x4c>
 800758c:	200009f0 	.word	0x200009f0
 8007590:	fffff7c2 	.word	0xfffff7c2
 8007594:	3f813404 	.word	0x3f813404

08007598 <_MW_CP_calculate_state>:
#endif
#endif

uint8_t _MW_CP_calculate_state()
{
 8007598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800759a:	46ce      	mov	lr, r9
 800759c:	4647      	mov	r7, r8
	return CP.PWM_Duty;
 800759e:	4b43      	ldr	r3, [pc, #268]	; (80076ac <_MW_CP_calculate_state+0x114>)
{
 80075a0:	b580      	push	{r7, lr}
	return CP.PWM_Duty;
 80075a2:	681c      	ldr	r4, [r3, #0]
 80075a4:	685d      	ldr	r5, [r3, #4]
	return CP.H.ave_Volt;
 80075a6:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 80075a8:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
	return CP.PWM_Duty;
 80075aa:	4698      	mov	r8, r3
#if 0
	double temp_l_final_volt = _MW_CP_get_l_final_voltage();
#endif
#endif

	_LIB_DEBOUNCECHECK_shift(CP.DebounceCheckBuf, CP_ADC_DEBOUNCECHECKBUF_LENGTH);
 80075ac:	2311      	movs	r3, #17
 80075ae:	4443      	add	r3, r8
 80075b0:	0018      	movs	r0, r3
 80075b2:	2103      	movs	r1, #3
 80075b4:	4699      	mov	r9, r3
 80075b6:	f7ff fc89 	bl	8006ecc <_LIB_DEBOUNCECHECK_shift>

	if(temp_pwm_duty > 0)
 80075ba:	2200      	movs	r2, #0
 80075bc:	2300      	movs	r3, #0
 80075be:	0020      	movs	r0, r4
 80075c0:	0029      	movs	r1, r5
 80075c2:	f7f8 fe61 	bl	8000288 <__aeabi_dcmpgt>
 80075c6:	2800      	cmp	r0, #0
 80075c8:	d013      	beq.n	80075f2 <_MW_CP_calculate_state+0x5a>
	{
		if(temp_h_final_volt >= CP_P12V_MINIMUM)
 80075ca:	2200      	movs	r2, #0
 80075cc:	0030      	movs	r0, r6
 80075ce:	0039      	movs	r1, r7
 80075d0:	4b37      	ldr	r3, [pc, #220]	; (80076b0 <_MW_CP_calculate_state+0x118>)
 80075d2:	f7f8 fe63 	bl	800029c <__aeabi_dcmpge>
		{
			if(temp_pwm_duty != 100)	_LIB_DEBOUNCECHECK_push(CP.DebounceCheckBuf, PWM_12V);
 80075d6:	2200      	movs	r2, #0
		if(temp_h_final_volt >= CP_P12V_MINIMUM)
 80075d8:	2800      	cmp	r0, #0
 80075da:	d019      	beq.n	8007610 <_MW_CP_calculate_state+0x78>
			if(temp_pwm_duty != 100)	_LIB_DEBOUNCECHECK_push(CP.DebounceCheckBuf, PWM_12V);
 80075dc:	0020      	movs	r0, r4
 80075de:	0029      	movs	r1, r5
 80075e0:	4b34      	ldr	r3, [pc, #208]	; (80076b4 <_MW_CP_calculate_state+0x11c>)
 80075e2:	f7f8 fe37 	bl	8000254 <__aeabi_dcmpeq>
 80075e6:	2800      	cmp	r0, #0
 80075e8:	d126      	bne.n	8007638 <_MW_CP_calculate_state+0xa0>
 80075ea:	2104      	movs	r1, #4
 80075ec:	4648      	mov	r0, r9
 80075ee:	f7ff fc6b 	bl	8006ec8 <_LIB_DEBOUNCECHECK_push>
#endif
#endif

	}

	if(_TRUE == _LIB_DEBOUNCECHECK_compare(CP.DebounceCheckBuf, CP_ADC_DEBOUNCECHECKBUF_LENGTH, 0))
 80075f2:	4640      	mov	r0, r8
 80075f4:	2200      	movs	r2, #0
 80075f6:	2103      	movs	r1, #3
 80075f8:	3011      	adds	r0, #17
 80075fa:	f7ff fc75 	bl	8006ee8 <_LIB_DEBOUNCECHECK_compare>
 80075fe:	0004      	movs	r4, r0
 8007600:	2801      	cmp	r0, #1
 8007602:	d032      	beq.n	800766a <_MW_CP_calculate_state+0xd2>
		_MW_CP_print_cp_state();
#endif
		return _TRUE;
	}

	return _CONTINUE;
 8007604:	2402      	movs	r4, #2
}
 8007606:	0020      	movs	r0, r4
 8007608:	bcc0      	pop	{r6, r7}
 800760a:	46b9      	mov	r9, r7
 800760c:	46b0      	mov	r8, r6
 800760e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		else if(temp_h_final_volt >= CP_P9V_MINIMUM)
 8007610:	0030      	movs	r0, r6
 8007612:	0039      	movs	r1, r7
 8007614:	4b28      	ldr	r3, [pc, #160]	; (80076b8 <_MW_CP_calculate_state+0x120>)
 8007616:	f7f8 fe41 	bl	800029c <__aeabi_dcmpge>
			if(temp_pwm_duty != 100)	_LIB_DEBOUNCECHECK_push(CP.DebounceCheckBuf, PWM_9V);
 800761a:	2200      	movs	r2, #0
		else if(temp_h_final_volt >= CP_P9V_MINIMUM)
 800761c:	2800      	cmp	r0, #0
 800761e:	d010      	beq.n	8007642 <_MW_CP_calculate_state+0xaa>
			if(temp_pwm_duty != 100)	_LIB_DEBOUNCECHECK_push(CP.DebounceCheckBuf, PWM_9V);
 8007620:	0020      	movs	r0, r4
 8007622:	0029      	movs	r1, r5
 8007624:	4b23      	ldr	r3, [pc, #140]	; (80076b4 <_MW_CP_calculate_state+0x11c>)
 8007626:	f7f8 fe15 	bl	8000254 <__aeabi_dcmpeq>
 800762a:	2800      	cmp	r0, #0
 800762c:	d12f      	bne.n	800768e <_MW_CP_calculate_state+0xf6>
 800762e:	2105      	movs	r1, #5
 8007630:	4648      	mov	r0, r9
 8007632:	f7ff fc49 	bl	8006ec8 <_LIB_DEBOUNCECHECK_push>
 8007636:	e7dc      	b.n	80075f2 <_MW_CP_calculate_state+0x5a>
			else						_LIB_DEBOUNCECHECK_push(CP.DebounceCheckBuf, DC_12V);
 8007638:	2101      	movs	r1, #1
 800763a:	4648      	mov	r0, r9
 800763c:	f7ff fc44 	bl	8006ec8 <_LIB_DEBOUNCECHECK_push>
 8007640:	e7d7      	b.n	80075f2 <_MW_CP_calculate_state+0x5a>
		else if(temp_h_final_volt >= CP_P6V_MINIMUM)
 8007642:	4b1e      	ldr	r3, [pc, #120]	; (80076bc <_MW_CP_calculate_state+0x124>)
 8007644:	0030      	movs	r0, r6
 8007646:	0039      	movs	r1, r7
 8007648:	f7f8 fe28 	bl	800029c <__aeabi_dcmpge>
			if(temp_pwm_duty != 100)	_LIB_DEBOUNCECHECK_push(CP.DebounceCheckBuf, PWM_6V);
 800764c:	2200      	movs	r2, #0
 800764e:	4b19      	ldr	r3, [pc, #100]	; (80076b4 <_MW_CP_calculate_state+0x11c>)
		else if(temp_h_final_volt >= CP_P6V_MINIMUM)
 8007650:	2800      	cmp	r0, #0
 8007652:	d011      	beq.n	8007678 <_MW_CP_calculate_state+0xe0>
			if(temp_pwm_duty != 100)	_LIB_DEBOUNCECHECK_push(CP.DebounceCheckBuf, PWM_6V);
 8007654:	0020      	movs	r0, r4
 8007656:	0029      	movs	r1, r5
 8007658:	f7f8 fdfc 	bl	8000254 <__aeabi_dcmpeq>
 800765c:	2800      	cmp	r0, #0
 800765e:	d120      	bne.n	80076a2 <_MW_CP_calculate_state+0x10a>
 8007660:	2106      	movs	r1, #6
 8007662:	4648      	mov	r0, r9
 8007664:	f7ff fc30 	bl	8006ec8 <_LIB_DEBOUNCECHECK_push>
 8007668:	e7c3      	b.n	80075f2 <_MW_CP_calculate_state+0x5a>
		CP.State = CP.DebounceCheckBuf[CP_ADC_VALUE_INDEX];
 800766a:	4643      	mov	r3, r8
 800766c:	4642      	mov	r2, r8
 800766e:	7cdb      	ldrb	r3, [r3, #19]
 8007670:	7413      	strb	r3, [r2, #16]
		_MW_CP_print_cp_state();
 8007672:	f7ff fe7b 	bl	800736c <_MW_CP_print_cp_state>
		return _TRUE;
 8007676:	e7c6      	b.n	8007606 <_MW_CP_calculate_state+0x6e>
			if(temp_pwm_duty != 100)	_LIB_DEBOUNCECHECK_push(CP.DebounceCheckBuf, Err_PWMH);
 8007678:	0020      	movs	r0, r4
 800767a:	0029      	movs	r1, r5
 800767c:	f7f8 fdea 	bl	8000254 <__aeabi_dcmpeq>
 8007680:	2800      	cmp	r0, #0
 8007682:	d109      	bne.n	8007698 <_MW_CP_calculate_state+0x100>
 8007684:	2108      	movs	r1, #8
 8007686:	4648      	mov	r0, r9
 8007688:	f7ff fc1e 	bl	8006ec8 <_LIB_DEBOUNCECHECK_push>
 800768c:	e7b1      	b.n	80075f2 <_MW_CP_calculate_state+0x5a>
			else						_LIB_DEBOUNCECHECK_push(CP.DebounceCheckBuf, DC_9V);
 800768e:	2102      	movs	r1, #2
 8007690:	4648      	mov	r0, r9
 8007692:	f7ff fc19 	bl	8006ec8 <_LIB_DEBOUNCECHECK_push>
 8007696:	e7ac      	b.n	80075f2 <_MW_CP_calculate_state+0x5a>
			else						_LIB_DEBOUNCECHECK_push(CP.DebounceCheckBuf, Err_DC);
 8007698:	210a      	movs	r1, #10
 800769a:	4648      	mov	r0, r9
 800769c:	f7ff fc14 	bl	8006ec8 <_LIB_DEBOUNCECHECK_push>
 80076a0:	e7a7      	b.n	80075f2 <_MW_CP_calculate_state+0x5a>
			else						_LIB_DEBOUNCECHECK_push(CP.DebounceCheckBuf, DC_6V);
 80076a2:	2103      	movs	r1, #3
 80076a4:	4648      	mov	r0, r9
 80076a6:	f7ff fc0f 	bl	8006ec8 <_LIB_DEBOUNCECHECK_push>
 80076aa:	e7a2      	b.n	80075f2 <_MW_CP_calculate_state+0x5a>
 80076ac:	200009f0 	.word	0x200009f0
 80076b0:	40250000 	.word	0x40250000
 80076b4:	40590000 	.word	0x40590000
 80076b8:	401e0000 	.word	0x401e0000
 80076bc:	40120000 	.word	0x40120000

080076c0 <_MW_CP_main>:

void _MW_CP_main()
{
 80076c0:	b510      	push	{r4, lr}
	if(_TRUE == _MW_CP_calculate_adc())
 80076c2:	f7ff ff11 	bl	80074e8 <_MW_CP_calculate_adc>
 80076c6:	2801      	cmp	r0, #1
 80076c8:	d000      	beq.n	80076cc <_MW_CP_main+0xc>
	{
		_MW_CP_calculate_state();
	}
}
 80076ca:	bd10      	pop	{r4, pc}
		_MW_CP_calculate_state();
 80076cc:	f7ff ff64 	bl	8007598 <_MW_CP_calculate_state>
}
 80076d0:	e7fb      	b.n	80076ca <_MW_CP_main+0xa>
 80076d2:	46c0      	nop			; (mov r8, r8)

080076d4 <ee24_write.part.0>:
  else
    return false;
}
#endif
//################################################################################################################
bool ee24_write(uint16_t address, uint8_t *data, size_t len, uint32_t timeout)
 80076d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076d6:	46de      	mov	lr, fp
 80076d8:	4657      	mov	r7, sl
 80076da:	464e      	mov	r6, r9
 80076dc:	4645      	mov	r5, r8
{
  if (ee24_lock == 1)
    return false;
  ee24_lock = 1;
 80076de:	2301      	movs	r3, #1
bool ee24_write(uint16_t address, uint8_t *data, size_t len, uint32_t timeout)
 80076e0:	b5e0      	push	{r5, r6, r7, lr}
 80076e2:	000f      	movs	r7, r1
  uint16_t w;
  //uint32_t startTime = HAL_GetTick();
#if	(_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_RESET);
 80076e4:	2180      	movs	r1, #128	; 0x80
bool ee24_write(uint16_t address, uint8_t *data, size_t len, uint32_t timeout)
 80076e6:	0016      	movs	r6, r2
  ee24_lock = 1;
 80076e8:	4a27      	ldr	r2, [pc, #156]	; (8007788 <ee24_write.part.0+0xb4>)
bool ee24_write(uint16_t address, uint8_t *data, size_t len, uint32_t timeout)
 80076ea:	0005      	movs	r5, r0
  ee24_lock = 1;
 80076ec:	7013      	strb	r3, [r2, #0]
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_RESET);
 80076ee:	4827      	ldr	r0, [pc, #156]	; (800778c <ee24_write.part.0+0xb8>)
 80076f0:	2200      	movs	r2, #0
bool ee24_write(uint16_t address, uint8_t *data, size_t len, uint32_t timeout)
 80076f2:	b085      	sub	sp, #20
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_RESET);
 80076f4:	0049      	lsls	r1, r1, #1
 80076f6:	f001 f9eb 	bl	8008ad0 <HAL_GPIO_WritePin>
 80076fa:	4b25      	ldr	r3, [pc, #148]	; (8007790 <ee24_write.part.0+0xbc>)
 80076fc:	469b      	mov	fp, r3
#endif
  while (1)
  {
    w = _EEPROM_PSIZE - (address  % _EEPROM_PSIZE);
 80076fe:	230f      	movs	r3, #15
 8007700:	469a      	mov	sl, r3
 8007702:	2310      	movs	r3, #16
 8007704:	4699      	mov	r9, r3
    if (w > len)
      w = len;
#if ((_EEPROM_SIZE_KBIT==1) || (_EEPROM_SIZE_KBIT==2))
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, data, w, 100) == HAL_OK)
#elif (_EEPROM_SIZE_KBIT==4)
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0100) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, w, 100) == HAL_OK)
 8007706:	23ff      	movs	r3, #255	; 0xff
 8007708:	4698      	mov	r8, r3
 800770a:	e008      	b.n	800771e <ee24_write.part.0+0x4a>
#else
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_16BIT, data, w, 100) == EVON_TRUE)
#endif
    {
      //ee24_delay(10);
    	ee24_delay(6);
 800770c:	3006      	adds	r0, #6
      len -= w;
      data += w;
      address += w;
 800770e:	192d      	adds	r5, r5, r4
    	ee24_delay(6);
 8007710:	f000 fcf8 	bl	8008104 <HAL_Delay>
      len -= w;
 8007714:	1b36      	subs	r6, r6, r4
      data += w;
 8007716:	193f      	adds	r7, r7, r4
      address += w;
 8007718:	b2ad      	uxth	r5, r5
      if (len == 0)
 800771a:	2e00      	cmp	r6, #0
 800771c:	d029      	beq.n	8007772 <ee24_write.part.0+0x9e>
    w = _EEPROM_PSIZE - (address  % _EEPROM_PSIZE);
 800771e:	4654      	mov	r4, sl
 8007720:	464b      	mov	r3, r9
 8007722:	402c      	ands	r4, r5
 8007724:	1b1c      	subs	r4, r3, r4
 8007726:	b2a4      	uxth	r4, r4
    if (w > len)
 8007728:	42b4      	cmp	r4, r6
 800772a:	d900      	bls.n	800772e <ee24_write.part.0+0x5a>
      w = len;
 800772c:	b2b4      	uxth	r4, r6
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0100) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, w, 100) == HAL_OK)
 800772e:	2102      	movs	r1, #2
 8007730:	11eb      	asrs	r3, r5, #7
 8007732:	4019      	ands	r1, r3
 8007734:	23a0      	movs	r3, #160	; 0xa0
 8007736:	4642      	mov	r2, r8
 8007738:	4319      	orrs	r1, r3
 800773a:	3b3c      	subs	r3, #60	; 0x3c
 800773c:	9302      	str	r3, [sp, #8]
 800773e:	4658      	mov	r0, fp
 8007740:	9401      	str	r4, [sp, #4]
 8007742:	9700      	str	r7, [sp, #0]
 8007744:	3b63      	subs	r3, #99	; 0x63
 8007746:	402a      	ands	r2, r5
 8007748:	f001 fb6e 	bl	8008e28 <HAL_I2C_Mem_Write>
 800774c:	2800      	cmp	r0, #0
 800774e:	d0dd      	beq.n	800770c <ee24_write.part.0+0x38>
      //}
    }
    else
    {
#if (_EEPROM_USE_WP_PIN==1)
    	HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_SET);
 8007750:	2180      	movs	r1, #128	; 0x80
 8007752:	2201      	movs	r2, #1
 8007754:	480d      	ldr	r0, [pc, #52]	; (800778c <ee24_write.part.0+0xb8>)
 8007756:	0049      	lsls	r1, r1, #1
 8007758:	f001 f9ba 	bl	8008ad0 <HAL_GPIO_WritePin>
#endif
      ee24_lock = 0;
 800775c:	2300      	movs	r3, #0
      return false;
 800775e:	2000      	movs	r0, #0
      ee24_lock = 0;
 8007760:	4a09      	ldr	r2, [pc, #36]	; (8007788 <ee24_write.part.0+0xb4>)
 8007762:	7013      	strb	r3, [r2, #0]
    }
  }
}
 8007764:	b005      	add	sp, #20
 8007766:	bcf0      	pop	{r4, r5, r6, r7}
 8007768:	46bb      	mov	fp, r7
 800776a:	46b2      	mov	sl, r6
 800776c:	46a9      	mov	r9, r5
 800776e:	46a0      	mov	r8, r4
 8007770:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	  HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_SET);
 8007772:	2180      	movs	r1, #128	; 0x80
 8007774:	4805      	ldr	r0, [pc, #20]	; (800778c <ee24_write.part.0+0xb8>)
 8007776:	2201      	movs	r2, #1
 8007778:	0049      	lsls	r1, r1, #1
 800777a:	f001 f9a9 	bl	8008ad0 <HAL_GPIO_WritePin>
        ee24_lock = 0;
 800777e:	4b02      	ldr	r3, [pc, #8]	; (8007788 <ee24_write.part.0+0xb4>)
        return true;
 8007780:	2001      	movs	r0, #1
        ee24_lock = 0;
 8007782:	701e      	strb	r6, [r3, #0]
        return true;
 8007784:	e7ee      	b.n	8007764 <ee24_write.part.0+0x90>
 8007786:	46c0      	nop			; (mov r8, r8)
 8007788:	20000a7c 	.word	0x20000a7c
 800778c:	48000400 	.word	0x48000400
 8007790:	20000b70 	.word	0x20000b70

08007794 <ee24_write>:
{
 8007794:	b510      	push	{r4, lr}
  if (ee24_lock == 1)
 8007796:	4b04      	ldr	r3, [pc, #16]	; (80077a8 <ee24_write+0x14>)
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d002      	beq.n	80077a4 <ee24_write+0x10>
 800779e:	f7ff ff99 	bl	80076d4 <ee24_write.part.0>
}
 80077a2:	bd10      	pop	{r4, pc}
    return false;
 80077a4:	2000      	movs	r0, #0
 80077a6:	e7fc      	b.n	80077a2 <ee24_write+0xe>
 80077a8:	20000a7c 	.word	0x20000a7c

080077ac <ee24_read>:
//################################################################################################################
bool ee24_read(uint16_t address, uint8_t *data, size_t len, uint32_t timeout)
{
 80077ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ee24_lock == 1)
 80077ae:	4f16      	ldr	r7, [pc, #88]	; (8007808 <ee24_read+0x5c>)
{
 80077b0:	0004      	movs	r4, r0
  if (ee24_lock == 1)
 80077b2:	783b      	ldrb	r3, [r7, #0]
{
 80077b4:	000e      	movs	r6, r1
 80077b6:	0015      	movs	r5, r2
 80077b8:	b085      	sub	sp, #20
  if (ee24_lock == 1)
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d021      	beq.n	8007802 <ee24_read+0x56>
    return false;
  ee24_lock = 1;
#if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_RESET);
 80077be:	2180      	movs	r1, #128	; 0x80
  ee24_lock = 1;
 80077c0:	2301      	movs	r3, #1
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_RESET);
 80077c2:	2200      	movs	r2, #0
 80077c4:	4811      	ldr	r0, [pc, #68]	; (800780c <ee24_read+0x60>)
 80077c6:	0049      	lsls	r1, r1, #1
  ee24_lock = 1;
 80077c8:	703b      	strb	r3, [r7, #0]
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_RESET);
 80077ca:	f001 f981 	bl	8008ad0 <HAL_GPIO_WritePin>
#endif
#if ((_EEPROM_SIZE_KBIT==1) || (_EEPROM_SIZE_KBIT==2))
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
#elif (_EEPROM_SIZE_KBIT == 4)
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0100) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
 80077ce:	22ff      	movs	r2, #255	; 0xff
 80077d0:	2102      	movs	r1, #2
 80077d2:	4022      	ands	r2, r4
 80077d4:	11e4      	asrs	r4, r4, #7
 80077d6:	2364      	movs	r3, #100	; 0x64
 80077d8:	4021      	ands	r1, r4
 80077da:	24a0      	movs	r4, #160	; 0xa0
 80077dc:	b2ad      	uxth	r5, r5
 80077de:	9302      	str	r3, [sp, #8]
 80077e0:	480b      	ldr	r0, [pc, #44]	; (8007810 <ee24_read+0x64>)
 80077e2:	4321      	orrs	r1, r4
 80077e4:	9501      	str	r5, [sp, #4]
 80077e6:	9600      	str	r6, [sp, #0]
 80077e8:	3b63      	subs	r3, #99	; 0x63
 80077ea:	f001 fbfb 	bl	8008fe4 <HAL_I2C_Mem_Read>
 80077ee:	2800      	cmp	r0, #0
 80077f0:	d004      	beq.n	80077fc <ee24_read+0x50>
    ee24_lock = 0;
    return true;
  }
  else
  {
    ee24_lock = 0;
 80077f2:	2300      	movs	r3, #0
    return false;
 80077f4:	2000      	movs	r0, #0
    ee24_lock = 0;
 80077f6:	703b      	strb	r3, [r7, #0]
  }
}
 80077f8:	b005      	add	sp, #20
 80077fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ee24_lock = 0;
 80077fc:	7038      	strb	r0, [r7, #0]
    return true;
 80077fe:	3001      	adds	r0, #1
 8007800:	e7fa      	b.n	80077f8 <ee24_read+0x4c>
    return false;
 8007802:	2000      	movs	r0, #0
 8007804:	e7f8      	b.n	80077f8 <ee24_read+0x4c>
 8007806:	46c0      	nop			; (mov r8, r8)
 8007808:	20000a7c 	.word	0x20000a7c
 800780c:	48000400 	.word	0x48000400
 8007810:	20000b70 	.word	0x20000b70

08007814 <_MW_GPIO_init>:

static uint8_t WELD_DebounceCheckBuf[GPI_DEBOUNCECHECKBUF_LENGTH] = {0, };
static uint8_t EMG_DebounceCheckBuf[GPI_DEBOUNCECHECKBUF_LENGTH] = {0, };

void _MW_GPIO_init()
{
 8007814:	b510      	push	{r4, lr}
	GPO_MC_TURN_ON_DISABLE;
 8007816:	2490      	movs	r4, #144	; 0x90
 8007818:	05e4      	lsls	r4, r4, #23
 800781a:	0020      	movs	r0, r4
 800781c:	2200      	movs	r2, #0
 800781e:	2180      	movs	r1, #128	; 0x80
 8007820:	f001 f956 	bl	8008ad0 <HAL_GPIO_WritePin>
	GPO_MC_TURN_OFF_DISABLE;
 8007824:	0020      	movs	r0, r4
 8007826:	2200      	movs	r2, #0
 8007828:	2140      	movs	r1, #64	; 0x40
 800782a:	f001 f951 	bl	8008ad0 <HAL_GPIO_WritePin>
	GPO_STUS_LED_01_ON;
 800782e:	2180      	movs	r1, #128	; 0x80
 8007830:	2200      	movs	r2, #0
 8007832:	0020      	movs	r0, r4
 8007834:	0149      	lsls	r1, r1, #5
 8007836:	f001 f94b 	bl	8008ad0 <HAL_GPIO_WritePin>
}
 800783a:	bd10      	pop	{r4, pc}

0800783c <update_gpo>:

void update_gpo(){
 800783c:	b510      	push	{r4, lr}
	(_GPIO_out.bit.STUS_LED_01) ? GPO_STUS_LED_01_OFF : GPO_STUS_LED_01_ON;
 800783e:	4c40      	ldr	r4, [pc, #256]	; (8007940 <update_gpo+0x104>)
 8007840:	2201      	movs	r2, #1
 8007842:	7823      	ldrb	r3, [r4, #0]
 8007844:	07db      	lsls	r3, r3, #31
 8007846:	d400      	bmi.n	800784a <update_gpo+0xe>
 8007848:	2200      	movs	r2, #0
 800784a:	2180      	movs	r1, #128	; 0x80
 800784c:	2090      	movs	r0, #144	; 0x90
 800784e:	0149      	lsls	r1, r1, #5
 8007850:	05c0      	lsls	r0, r0, #23
 8007852:	f001 f93d 	bl	8008ad0 <HAL_GPIO_WritePin>
	(_GPIO_out.bit.STUS_LED_02) ? GPO_STUS_LED_02_OFF : GPO_STUS_LED_02_ON;
 8007856:	7823      	ldrb	r3, [r4, #0]
 8007858:	2201      	movs	r2, #1
 800785a:	079b      	lsls	r3, r3, #30
 800785c:	d400      	bmi.n	8007860 <update_gpo+0x24>
 800785e:	2200      	movs	r2, #0
 8007860:	2180      	movs	r1, #128	; 0x80
 8007862:	2090      	movs	r0, #144	; 0x90
 8007864:	0109      	lsls	r1, r1, #4
 8007866:	05c0      	lsls	r0, r0, #23
 8007868:	f001 f932 	bl	8008ad0 <HAL_GPIO_WritePin>
	(_GPIO_out.bit.SLED_R) ? GPO_SLED_R_ON : GPO_SLED_R_OFF;
 800786c:	7823      	ldrb	r3, [r4, #0]
 800786e:	075b      	lsls	r3, r3, #29
 8007870:	d532      	bpl.n	80078d8 <update_gpo+0x9c>
 8007872:	2090      	movs	r0, #144	; 0x90
 8007874:	2201      	movs	r2, #1
 8007876:	2104      	movs	r1, #4
 8007878:	05c0      	lsls	r0, r0, #23
 800787a:	f001 f929 	bl	8008ad0 <HAL_GPIO_WritePin>
	(_GPIO_out.bit.SLED_G) ? GPO_SLED_G_ON : GPO_SLED_G_OFF;
 800787e:	7823      	ldrb	r3, [r4, #0]
 8007880:	071b      	lsls	r3, r3, #28
 8007882:	d532      	bpl.n	80078ea <update_gpo+0xae>
 8007884:	2090      	movs	r0, #144	; 0x90
 8007886:	2201      	movs	r2, #1
 8007888:	2102      	movs	r1, #2
 800788a:	05c0      	lsls	r0, r0, #23
 800788c:	f001 f920 	bl	8008ad0 <HAL_GPIO_WritePin>
	(_GPIO_out.bit.SLED_B) ? GPO_SLED_B_ON : GPO_SLED_B_OFF;
 8007890:	7823      	ldrb	r3, [r4, #0]
 8007892:	06db      	lsls	r3, r3, #27
 8007894:	d532      	bpl.n	80078fc <update_gpo+0xc0>
 8007896:	2090      	movs	r0, #144	; 0x90
 8007898:	2201      	movs	r2, #1
 800789a:	2101      	movs	r1, #1
 800789c:	05c0      	lsls	r0, r0, #23
 800789e:	f001 f917 	bl	8008ad0 <HAL_GPIO_WritePin>
	(_GPIO_out.bit.MC_TURN_ON) ? GPO_MC_TURN_ON_ENABLE : GPO_MC_TURN_ON_DISABLE;
 80078a2:	7823      	ldrb	r3, [r4, #0]
 80078a4:	069b      	lsls	r3, r3, #26
 80078a6:	d532      	bpl.n	800790e <update_gpo+0xd2>
 80078a8:	2090      	movs	r0, #144	; 0x90
 80078aa:	2201      	movs	r2, #1
 80078ac:	2180      	movs	r1, #128	; 0x80
 80078ae:	05c0      	lsls	r0, r0, #23
 80078b0:	f001 f90e 	bl	8008ad0 <HAL_GPIO_WritePin>
	(_GPIO_out.bit.MC_TURN_OFF) ? GPO_MC_TURN_OFF_ENABLE : GPO_MC_TURN_OFF_DISABLE;
 80078b4:	7823      	ldrb	r3, [r4, #0]
 80078b6:	065b      	lsls	r3, r3, #25
 80078b8:	d532      	bpl.n	8007920 <update_gpo+0xe4>
 80078ba:	2090      	movs	r0, #144	; 0x90
 80078bc:	2201      	movs	r2, #1
 80078be:	2140      	movs	r1, #64	; 0x40
 80078c0:	05c0      	lsls	r0, r0, #23
 80078c2:	f001 f905 	bl	8008ad0 <HAL_GPIO_WritePin>
	(_GPIO_out.bit.CP_RY) ? GPO_CP_RY_ON : GPO_CP_RY_OFF;
 80078c6:	7823      	ldrb	r3, [r4, #0]
 80078c8:	2b7f      	cmp	r3, #127	; 0x7f
 80078ca:	d832      	bhi.n	8007932 <update_gpo+0xf6>
 80078cc:	2200      	movs	r2, #0
 80078ce:	2104      	movs	r1, #4
 80078d0:	481c      	ldr	r0, [pc, #112]	; (8007944 <update_gpo+0x108>)
 80078d2:	f001 f8fd 	bl	8008ad0 <HAL_GPIO_WritePin>
}
 80078d6:	bd10      	pop	{r4, pc}
	(_GPIO_out.bit.SLED_R) ? GPO_SLED_R_ON : GPO_SLED_R_OFF;
 80078d8:	2090      	movs	r0, #144	; 0x90
 80078da:	2200      	movs	r2, #0
 80078dc:	2104      	movs	r1, #4
 80078de:	05c0      	lsls	r0, r0, #23
 80078e0:	f001 f8f6 	bl	8008ad0 <HAL_GPIO_WritePin>
	(_GPIO_out.bit.SLED_G) ? GPO_SLED_G_ON : GPO_SLED_G_OFF;
 80078e4:	7823      	ldrb	r3, [r4, #0]
 80078e6:	071b      	lsls	r3, r3, #28
 80078e8:	d4cc      	bmi.n	8007884 <update_gpo+0x48>
 80078ea:	2090      	movs	r0, #144	; 0x90
 80078ec:	2200      	movs	r2, #0
 80078ee:	2102      	movs	r1, #2
 80078f0:	05c0      	lsls	r0, r0, #23
 80078f2:	f001 f8ed 	bl	8008ad0 <HAL_GPIO_WritePin>
	(_GPIO_out.bit.SLED_B) ? GPO_SLED_B_ON : GPO_SLED_B_OFF;
 80078f6:	7823      	ldrb	r3, [r4, #0]
 80078f8:	06db      	lsls	r3, r3, #27
 80078fa:	d4cc      	bmi.n	8007896 <update_gpo+0x5a>
 80078fc:	2090      	movs	r0, #144	; 0x90
 80078fe:	2200      	movs	r2, #0
 8007900:	2101      	movs	r1, #1
 8007902:	05c0      	lsls	r0, r0, #23
 8007904:	f001 f8e4 	bl	8008ad0 <HAL_GPIO_WritePin>
	(_GPIO_out.bit.MC_TURN_ON) ? GPO_MC_TURN_ON_ENABLE : GPO_MC_TURN_ON_DISABLE;
 8007908:	7823      	ldrb	r3, [r4, #0]
 800790a:	069b      	lsls	r3, r3, #26
 800790c:	d4cc      	bmi.n	80078a8 <update_gpo+0x6c>
 800790e:	2090      	movs	r0, #144	; 0x90
 8007910:	2200      	movs	r2, #0
 8007912:	2180      	movs	r1, #128	; 0x80
 8007914:	05c0      	lsls	r0, r0, #23
 8007916:	f001 f8db 	bl	8008ad0 <HAL_GPIO_WritePin>
	(_GPIO_out.bit.MC_TURN_OFF) ? GPO_MC_TURN_OFF_ENABLE : GPO_MC_TURN_OFF_DISABLE;
 800791a:	7823      	ldrb	r3, [r4, #0]
 800791c:	065b      	lsls	r3, r3, #25
 800791e:	d4cc      	bmi.n	80078ba <update_gpo+0x7e>
 8007920:	2090      	movs	r0, #144	; 0x90
 8007922:	2200      	movs	r2, #0
 8007924:	2140      	movs	r1, #64	; 0x40
 8007926:	05c0      	lsls	r0, r0, #23
 8007928:	f001 f8d2 	bl	8008ad0 <HAL_GPIO_WritePin>
	(_GPIO_out.bit.CP_RY) ? GPO_CP_RY_ON : GPO_CP_RY_OFF;
 800792c:	7823      	ldrb	r3, [r4, #0]
 800792e:	2b7f      	cmp	r3, #127	; 0x7f
 8007930:	d9cc      	bls.n	80078cc <update_gpo+0x90>
 8007932:	2201      	movs	r2, #1
 8007934:	2104      	movs	r1, #4
 8007936:	4803      	ldr	r0, [pc, #12]	; (8007944 <update_gpo+0x108>)
 8007938:	f001 f8ca 	bl	8008ad0 <HAL_GPIO_WritePin>
 800793c:	e7cb      	b.n	80078d6 <update_gpo+0x9a>
 800793e:	46c0      	nop			; (mov r8, r8)
 8007940:	20000a8c 	.word	0x20000a8c
 8007944:	48000400 	.word	0x48000400

08007948 <update_gpi>:

void update_gpi(){

	_GPIO_in.bit.SET_SW_01 = ~(GPI_SET_SW_01_IN);
 8007948:	2180      	movs	r1, #128	; 0x80
void update_gpi(){
 800794a:	b570      	push	{r4, r5, r6, lr}
	_GPIO_in.bit.SET_SW_01 = ~(GPI_SET_SW_01_IN);
 800794c:	2501      	movs	r5, #1
 800794e:	0149      	lsls	r1, r1, #5
 8007950:	4842      	ldr	r0, [pc, #264]	; (8007a5c <update_gpi+0x114>)
 8007952:	f001 f8b7 	bl	8008ac4 <HAL_GPIO_ReadPin>
 8007956:	002a      	movs	r2, r5
	_GPIO_in.bit.SET_SW_02 = ~(GPI_SET_SW_02_IN);
 8007958:	2180      	movs	r1, #128	; 0x80
	_GPIO_in.bit.SET_SW_01 = ~(GPI_SET_SW_01_IN);
 800795a:	4c41      	ldr	r4, [pc, #260]	; (8007a60 <update_gpi+0x118>)
 800795c:	4382      	bics	r2, r0
 800795e:	7823      	ldrb	r3, [r4, #0]
	_GPIO_in.bit.SET_SW_02 = ~(GPI_SET_SW_02_IN);
 8007960:	0189      	lsls	r1, r1, #6
	_GPIO_in.bit.SET_SW_01 = ~(GPI_SET_SW_01_IN);
 8007962:	43ab      	bics	r3, r5
 8007964:	4313      	orrs	r3, r2
	_GPIO_in.bit.SET_SW_02 = ~(GPI_SET_SW_02_IN);
 8007966:	483d      	ldr	r0, [pc, #244]	; (8007a5c <update_gpi+0x114>)
	_GPIO_in.bit.SET_SW_01 = ~(GPI_SET_SW_01_IN);
 8007968:	7023      	strb	r3, [r4, #0]
	_GPIO_in.bit.SET_SW_02 = ~(GPI_SET_SW_02_IN);
 800796a:	f001 f8ab 	bl	8008ac4 <HAL_GPIO_ReadPin>
 800796e:	2102      	movs	r1, #2
 8007970:	7823      	ldrb	r3, [r4, #0]
 8007972:	002a      	movs	r2, r5
 8007974:	438b      	bics	r3, r1
	_GPIO_in.bit.SET_SW_03 = ~(GPI_SET_SW_03_IN);
 8007976:	2180      	movs	r1, #128	; 0x80
	_GPIO_in.bit.SET_SW_02 = ~(GPI_SET_SW_02_IN);
 8007978:	4382      	bics	r2, r0
 800797a:	0052      	lsls	r2, r2, #1
 800797c:	4313      	orrs	r3, r2
	_GPIO_in.bit.SET_SW_03 = ~(GPI_SET_SW_03_IN);
 800797e:	01c9      	lsls	r1, r1, #7
 8007980:	4836      	ldr	r0, [pc, #216]	; (8007a5c <update_gpi+0x114>)
	_GPIO_in.bit.SET_SW_02 = ~(GPI_SET_SW_02_IN);
 8007982:	7023      	strb	r3, [r4, #0]
	_GPIO_in.bit.SET_SW_03 = ~(GPI_SET_SW_03_IN);
 8007984:	f001 f89e 	bl	8008ac4 <HAL_GPIO_ReadPin>
 8007988:	2104      	movs	r1, #4
 800798a:	7823      	ldrb	r3, [r4, #0]
 800798c:	002a      	movs	r2, r5
 800798e:	438b      	bics	r3, r1
	_GPIO_in.bit.SET_SW_04 = ~(GPI_SET_SW_04_IN);
 8007990:	2180      	movs	r1, #128	; 0x80
	_GPIO_in.bit.SET_SW_03 = ~(GPI_SET_SW_03_IN);
 8007992:	4382      	bics	r2, r0
 8007994:	0092      	lsls	r2, r2, #2
 8007996:	4313      	orrs	r3, r2
	_GPIO_in.bit.SET_SW_04 = ~(GPI_SET_SW_04_IN);
 8007998:	0209      	lsls	r1, r1, #8
 800799a:	4830      	ldr	r0, [pc, #192]	; (8007a5c <update_gpi+0x114>)
	_GPIO_in.bit.SET_SW_03 = ~(GPI_SET_SW_03_IN);
 800799c:	7023      	strb	r3, [r4, #0]
	_GPIO_in.bit.SET_SW_04 = ~(GPI_SET_SW_04_IN);
 800799e:	f001 f891 	bl	8008ac4 <HAL_GPIO_ReadPin>
 80079a2:	2208      	movs	r2, #8
 80079a4:	7823      	ldrb	r3, [r4, #0]
 80079a6:	4385      	bics	r5, r0
 80079a8:	4393      	bics	r3, r2
 80079aa:	00ed      	lsls	r5, r5, #3
 80079ac:	431d      	orrs	r5, r3
 80079ae:	7025      	strb	r5, [r4, #0]

	_LIB_DEBOUNCECHECK_shift(WELD_DebounceCheckBuf, GPI_DEBOUNCECHECKBUF_LENGTH);
 80079b0:	4d2c      	ldr	r5, [pc, #176]	; (8007a64 <update_gpi+0x11c>)
 80079b2:	2104      	movs	r1, #4
 80079b4:	0028      	movs	r0, r5
 80079b6:	f7ff fa89 	bl	8006ecc <_LIB_DEBOUNCECHECK_shift>
	_LIB_DEBOUNCECHECK_push(WELD_DebounceCheckBuf, (GPI_WELD_IN));
 80079ba:	2180      	movs	r1, #128	; 0x80
 80079bc:	482a      	ldr	r0, [pc, #168]	; (8007a68 <update_gpi+0x120>)
 80079be:	01c9      	lsls	r1, r1, #7
 80079c0:	f001 f880 	bl	8008ac4 <HAL_GPIO_ReadPin>
 80079c4:	0001      	movs	r1, r0
 80079c6:	0028      	movs	r0, r5
 80079c8:	f7ff fa7e 	bl	8006ec8 <_LIB_DEBOUNCECHECK_push>

	if(_LIB_DEBOUNCECHECK_compare(WELD_DebounceCheckBuf, GPI_DEBOUNCECHECKBUF_LENGTH , 1))
 80079cc:	2201      	movs	r2, #1
 80079ce:	2104      	movs	r1, #4
 80079d0:	0028      	movs	r0, r5
 80079d2:	f7ff fa89 	bl	8006ee8 <_LIB_DEBOUNCECHECK_compare>
 80079d6:	2800      	cmp	r0, #0
 80079d8:	d025      	beq.n	8007a26 <update_gpi+0xde>
	{
		if(_GPIO_in.bit.WELD == 0)
 80079da:	7823      	ldrb	r3, [r4, #0]
 80079dc:	06db      	lsls	r3, r3, #27
 80079de:	d52d      	bpl.n	8007a3c <update_gpi+0xf4>
			_GPIO_in.bit.WELD = 0;
		}
	}

#if 1
	_LIB_DEBOUNCECHECK_shift(EMG_DebounceCheckBuf, GPI_DEBOUNCECHECKBUF_LENGTH);
 80079e0:	4d22      	ldr	r5, [pc, #136]	; (8007a6c <update_gpi+0x124>)
 80079e2:	2104      	movs	r1, #4
 80079e4:	0028      	movs	r0, r5
 80079e6:	f7ff fa71 	bl	8006ecc <_LIB_DEBOUNCECHECK_shift>
	_LIB_DEBOUNCECHECK_push(EMG_DebounceCheckBuf, (GPI_EMG_IN));
 80079ea:	2180      	movs	r1, #128	; 0x80
 80079ec:	4820      	ldr	r0, [pc, #128]	; (8007a70 <update_gpi+0x128>)
 80079ee:	f001 f869 	bl	8008ac4 <HAL_GPIO_ReadPin>
 80079f2:	0001      	movs	r1, r0
 80079f4:	0028      	movs	r0, r5
 80079f6:	f7ff fa67 	bl	8006ec8 <_LIB_DEBOUNCECHECK_push>

	if(_LIB_DEBOUNCECHECK_compare(EMG_DebounceCheckBuf, GPI_DEBOUNCECHECKBUF_LENGTH , 1))
 80079fa:	2201      	movs	r2, #1
 80079fc:	2104      	movs	r1, #4
 80079fe:	0028      	movs	r0, r5
 8007a00:	f7ff fa72 	bl	8006ee8 <_LIB_DEBOUNCECHECK_compare>
 8007a04:	2800      	cmp	r0, #0
 8007a06:	d003      	beq.n	8007a10 <update_gpi+0xc8>
	{
		if(_GPIO_in.bit.EMG == 0)
 8007a08:	7823      	ldrb	r3, [r4, #0]
 8007a0a:	069b      	lsls	r3, r3, #26
 8007a0c:	d51e      	bpl.n	8007a4c <update_gpi+0x104>
			_GPIO_in.bit.EMG = 0;
		}
	}
#endif

}
 8007a0e:	bd70      	pop	{r4, r5, r6, pc}
		if(_GPIO_in.bit.EMG == 1)
 8007a10:	2520      	movs	r5, #32
 8007a12:	7823      	ldrb	r3, [r4, #0]
 8007a14:	421d      	tst	r5, r3
 8007a16:	d0fa      	beq.n	8007a0e <update_gpi+0xc6>
			_LIB_LOGGING_printf("EMG ON\r\n");
 8007a18:	4816      	ldr	r0, [pc, #88]	; (8007a74 <update_gpi+0x12c>)
 8007a1a:	f003 fa09 	bl	800ae30 <puts>
			_GPIO_in.bit.EMG = 0;
 8007a1e:	7823      	ldrb	r3, [r4, #0]
 8007a20:	43ab      	bics	r3, r5
 8007a22:	7023      	strb	r3, [r4, #0]
}
 8007a24:	e7f3      	b.n	8007a0e <update_gpi+0xc6>
		if(_GPIO_in.bit.WELD == 1)
 8007a26:	2510      	movs	r5, #16
 8007a28:	7823      	ldrb	r3, [r4, #0]
 8007a2a:	421d      	tst	r5, r3
 8007a2c:	d0d8      	beq.n	80079e0 <update_gpi+0x98>
			_LIB_LOGGING_printf("WELD OFF\r\n");
 8007a2e:	4812      	ldr	r0, [pc, #72]	; (8007a78 <update_gpi+0x130>)
 8007a30:	f003 f9fe 	bl	800ae30 <puts>
			_GPIO_in.bit.WELD = 0;
 8007a34:	7823      	ldrb	r3, [r4, #0]
 8007a36:	43ab      	bics	r3, r5
 8007a38:	7023      	strb	r3, [r4, #0]
 8007a3a:	e7d1      	b.n	80079e0 <update_gpi+0x98>
			_LIB_LOGGING_printf("WELD ON\r\n");
 8007a3c:	480f      	ldr	r0, [pc, #60]	; (8007a7c <update_gpi+0x134>)
 8007a3e:	f003 f9f7 	bl	800ae30 <puts>
			_GPIO_in.bit.WELD = 1;
 8007a42:	2210      	movs	r2, #16
 8007a44:	7823      	ldrb	r3, [r4, #0]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	7023      	strb	r3, [r4, #0]
 8007a4a:	e7c9      	b.n	80079e0 <update_gpi+0x98>
			_LIB_LOGGING_printf("EMG OFF\r\n");
 8007a4c:	480c      	ldr	r0, [pc, #48]	; (8007a80 <update_gpi+0x138>)
 8007a4e:	f003 f9ef 	bl	800ae30 <puts>
			_GPIO_in.bit.EMG = 1;
 8007a52:	2220      	movs	r2, #32
 8007a54:	7823      	ldrb	r3, [r4, #0]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	7023      	strb	r3, [r4, #0]
 8007a5a:	e7d8      	b.n	8007a0e <update_gpi+0xc6>
 8007a5c:	48000400 	.word	0x48000400
 8007a60:	20000a88 	.word	0x20000a88
 8007a64:	20000a84 	.word	0x20000a84
 8007a68:	48000800 	.word	0x48000800
 8007a6c:	20000a80 	.word	0x20000a80
 8007a70:	48001400 	.word	0x48001400
 8007a74:	0800e204 	.word	0x0800e204
 8007a78:	0800e1ec 	.word	0x0800e1ec
 8007a7c:	0800e1e0 	.word	0x0800e1e0
 8007a80:	0800e1f8 	.word	0x0800e1f8

08007a84 <_MW_GPIO_set_gpo>:

uint8_t _MW_GPIO_set_gpo(uint8_t gpo_num, uint8_t stus){
 8007a84:	b510      	push	{r4, lr}
 8007a86:	2807      	cmp	r0, #7
 8007a88:	d84e      	bhi.n	8007b28 <_MW_GPIO_set_gpo+0xa4>
 8007a8a:	4a28      	ldr	r2, [pc, #160]	; (8007b2c <_MW_GPIO_set_gpo+0xa8>)
 8007a8c:	0083      	lsls	r3, r0, #2
 8007a8e:	58d3      	ldr	r3, [r2, r3]
			return 1;
		case MC_TURN_OFF:
			_GPIO_out.bit.MC_TURN_OFF = stus;
			return 1;
		case CP_RY:
			_GPIO_out.bit.CP_RY = stus;
 8007a90:	4a27      	ldr	r2, [pc, #156]	; (8007b30 <_MW_GPIO_set_gpo+0xac>)
 8007a92:	469f      	mov	pc, r3
			_GPIO_out.bit.MC_TURN_OFF = stus;
 8007a94:	2301      	movs	r3, #1
 8007a96:	2040      	movs	r0, #64	; 0x40
 8007a98:	400b      	ands	r3, r1
 8007a9a:	7811      	ldrb	r1, [r2, #0]
 8007a9c:	019b      	lsls	r3, r3, #6
 8007a9e:	4381      	bics	r1, r0
 8007aa0:	4319      	orrs	r1, r3
 8007aa2:	7011      	strb	r1, [r2, #0]
			return 1;
 8007aa4:	383f      	subs	r0, #63	; 0x3f
			return 1;
		default:
			return 0;
	}
}
 8007aa6:	bd10      	pop	{r4, pc}
			_GPIO_out.bit.CP_RY = stus;
 8007aa8:	237f      	movs	r3, #127	; 0x7f
 8007aaa:	7810      	ldrb	r0, [r2, #0]
 8007aac:	01c9      	lsls	r1, r1, #7
 8007aae:	4003      	ands	r3, r0
 8007ab0:	4319      	orrs	r1, r3
			return 1;
 8007ab2:	2001      	movs	r0, #1
			_GPIO_out.bit.CP_RY = stus;
 8007ab4:	7011      	strb	r1, [r2, #0]
			return 1;
 8007ab6:	e7f6      	b.n	8007aa6 <_MW_GPIO_set_gpo+0x22>
			_GPIO_out.bit.STUS_LED_01 = stus;
 8007ab8:	2001      	movs	r0, #1
 8007aba:	7813      	ldrb	r3, [r2, #0]
 8007abc:	4001      	ands	r1, r0
 8007abe:	4383      	bics	r3, r0
 8007ac0:	4319      	orrs	r1, r3
 8007ac2:	7011      	strb	r1, [r2, #0]
			return 1;
 8007ac4:	e7ef      	b.n	8007aa6 <_MW_GPIO_set_gpo+0x22>
			_GPIO_out.bit.STUS_LED_02 = stus;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	2402      	movs	r4, #2
 8007aca:	400b      	ands	r3, r1
 8007acc:	7811      	ldrb	r1, [r2, #0]
 8007ace:	005b      	lsls	r3, r3, #1
 8007ad0:	43a1      	bics	r1, r4
 8007ad2:	4319      	orrs	r1, r3
 8007ad4:	7011      	strb	r1, [r2, #0]
			return 1;
 8007ad6:	e7e6      	b.n	8007aa6 <_MW_GPIO_set_gpo+0x22>
			_GPIO_out.bit.SLED_R = stus;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	2004      	movs	r0, #4
 8007adc:	400b      	ands	r3, r1
 8007ade:	7811      	ldrb	r1, [r2, #0]
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4381      	bics	r1, r0
 8007ae4:	4319      	orrs	r1, r3
 8007ae6:	7011      	strb	r1, [r2, #0]
			return 1;
 8007ae8:	3803      	subs	r0, #3
 8007aea:	e7dc      	b.n	8007aa6 <_MW_GPIO_set_gpo+0x22>
			_GPIO_out.bit.SLED_G = stus;
 8007aec:	2301      	movs	r3, #1
 8007aee:	2008      	movs	r0, #8
 8007af0:	400b      	ands	r3, r1
 8007af2:	7811      	ldrb	r1, [r2, #0]
 8007af4:	00db      	lsls	r3, r3, #3
 8007af6:	4381      	bics	r1, r0
 8007af8:	4319      	orrs	r1, r3
 8007afa:	7011      	strb	r1, [r2, #0]
			return 1;
 8007afc:	3807      	subs	r0, #7
 8007afe:	e7d2      	b.n	8007aa6 <_MW_GPIO_set_gpo+0x22>
			_GPIO_out.bit.SLED_B = stus;
 8007b00:	2301      	movs	r3, #1
 8007b02:	2010      	movs	r0, #16
 8007b04:	400b      	ands	r3, r1
 8007b06:	7811      	ldrb	r1, [r2, #0]
 8007b08:	011b      	lsls	r3, r3, #4
 8007b0a:	4381      	bics	r1, r0
 8007b0c:	4319      	orrs	r1, r3
 8007b0e:	7011      	strb	r1, [r2, #0]
			return 1;
 8007b10:	380f      	subs	r0, #15
 8007b12:	e7c8      	b.n	8007aa6 <_MW_GPIO_set_gpo+0x22>
			_GPIO_out.bit.MC_TURN_ON = stus;
 8007b14:	2301      	movs	r3, #1
 8007b16:	2020      	movs	r0, #32
 8007b18:	400b      	ands	r3, r1
 8007b1a:	7811      	ldrb	r1, [r2, #0]
 8007b1c:	015b      	lsls	r3, r3, #5
 8007b1e:	4381      	bics	r1, r0
 8007b20:	4319      	orrs	r1, r3
 8007b22:	7011      	strb	r1, [r2, #0]
			return 1;
 8007b24:	381f      	subs	r0, #31
 8007b26:	e7be      	b.n	8007aa6 <_MW_GPIO_set_gpo+0x22>
			return 1;
 8007b28:	2000      	movs	r0, #0
 8007b2a:	e7bc      	b.n	8007aa6 <_MW_GPIO_set_gpo+0x22>
 8007b2c:	0800e20c 	.word	0x0800e20c
 8007b30:	20000a8c 	.word	0x20000a8c

08007b34 <_MW_GPIO_get_gpo>:

uint8_t _MW_GPIO_get_gpo(uint8_t gpo_num)
{
	switch(gpo_num){
 8007b34:	2807      	cmp	r0, #7
 8007b36:	d82a      	bhi.n	8007b8e <_MW_GPIO_get_gpo+0x5a>
 8007b38:	4b16      	ldr	r3, [pc, #88]	; (8007b94 <_MW_GPIO_get_gpo+0x60>)
 8007b3a:	0080      	lsls	r0, r0, #2
 8007b3c:	581b      	ldr	r3, [r3, r0]
 8007b3e:	469f      	mov	pc, r3
		case SLED_B:
			return _GPIO_out.bit.SLED_B;
		case MC_TURN_ON:
			return _GPIO_out.bit.MC_TURN_ON;
		case MC_TURN_OFF:
			return _GPIO_out.bit.MC_TURN_OFF;
 8007b40:	4b15      	ldr	r3, [pc, #84]	; (8007b98 <_MW_GPIO_get_gpo+0x64>)
 8007b42:	7818      	ldrb	r0, [r3, #0]
 8007b44:	0640      	lsls	r0, r0, #25
 8007b46:	0fc0      	lsrs	r0, r0, #31
		case CP_RY:
			return _GPIO_out.bit.CP_RY;
		default:
			return 2;
	}
}
 8007b48:	4770      	bx	lr
			return _GPIO_out.bit.CP_RY;
 8007b4a:	4b13      	ldr	r3, [pc, #76]	; (8007b98 <_MW_GPIO_get_gpo+0x64>)
 8007b4c:	7818      	ldrb	r0, [r3, #0]
 8007b4e:	09c0      	lsrs	r0, r0, #7
 8007b50:	e7fa      	b.n	8007b48 <_MW_GPIO_get_gpo+0x14>
			return _GPIO_out.bit.STUS_LED_01;
 8007b52:	4b11      	ldr	r3, [pc, #68]	; (8007b98 <_MW_GPIO_get_gpo+0x64>)
 8007b54:	7818      	ldrb	r0, [r3, #0]
 8007b56:	07c0      	lsls	r0, r0, #31
 8007b58:	0fc0      	lsrs	r0, r0, #31
 8007b5a:	e7f5      	b.n	8007b48 <_MW_GPIO_get_gpo+0x14>
			return _GPIO_out.bit.STUS_LED_02;
 8007b5c:	4b0e      	ldr	r3, [pc, #56]	; (8007b98 <_MW_GPIO_get_gpo+0x64>)
 8007b5e:	7818      	ldrb	r0, [r3, #0]
 8007b60:	0780      	lsls	r0, r0, #30
 8007b62:	0fc0      	lsrs	r0, r0, #31
 8007b64:	e7f0      	b.n	8007b48 <_MW_GPIO_get_gpo+0x14>
			return _GPIO_out.bit.SLED_R;
 8007b66:	4b0c      	ldr	r3, [pc, #48]	; (8007b98 <_MW_GPIO_get_gpo+0x64>)
 8007b68:	7818      	ldrb	r0, [r3, #0]
 8007b6a:	0740      	lsls	r0, r0, #29
 8007b6c:	0fc0      	lsrs	r0, r0, #31
 8007b6e:	e7eb      	b.n	8007b48 <_MW_GPIO_get_gpo+0x14>
			return _GPIO_out.bit.SLED_G;
 8007b70:	4b09      	ldr	r3, [pc, #36]	; (8007b98 <_MW_GPIO_get_gpo+0x64>)
 8007b72:	7818      	ldrb	r0, [r3, #0]
 8007b74:	0700      	lsls	r0, r0, #28
 8007b76:	0fc0      	lsrs	r0, r0, #31
 8007b78:	e7e6      	b.n	8007b48 <_MW_GPIO_get_gpo+0x14>
			return _GPIO_out.bit.SLED_B;
 8007b7a:	4b07      	ldr	r3, [pc, #28]	; (8007b98 <_MW_GPIO_get_gpo+0x64>)
 8007b7c:	7818      	ldrb	r0, [r3, #0]
 8007b7e:	06c0      	lsls	r0, r0, #27
 8007b80:	0fc0      	lsrs	r0, r0, #31
 8007b82:	e7e1      	b.n	8007b48 <_MW_GPIO_get_gpo+0x14>
			return _GPIO_out.bit.MC_TURN_ON;
 8007b84:	4b04      	ldr	r3, [pc, #16]	; (8007b98 <_MW_GPIO_get_gpo+0x64>)
 8007b86:	7818      	ldrb	r0, [r3, #0]
 8007b88:	0680      	lsls	r0, r0, #26
 8007b8a:	0fc0      	lsrs	r0, r0, #31
 8007b8c:	e7dc      	b.n	8007b48 <_MW_GPIO_get_gpo+0x14>
{
 8007b8e:	2002      	movs	r0, #2
 8007b90:	e7da      	b.n	8007b48 <_MW_GPIO_get_gpo+0x14>
 8007b92:	46c0      	nop			; (mov r8, r8)
 8007b94:	0800e22c 	.word	0x0800e22c
 8007b98:	20000a8c 	.word	0x20000a8c

08007b9c <_MW_GPIO_get_gpi>:

uint8_t _MW_GPIO_get_gpi(uint8_t gpi_num){
	switch(gpi_num){
 8007b9c:	2805      	cmp	r0, #5
 8007b9e:	d821      	bhi.n	8007be4 <_MW_GPIO_get_gpi+0x48>
 8007ba0:	4b11      	ldr	r3, [pc, #68]	; (8007be8 <_MW_GPIO_get_gpi+0x4c>)
 8007ba2:	0080      	lsls	r0, r0, #2
 8007ba4:	581b      	ldr	r3, [r3, r0]
 8007ba6:	469f      	mov	pc, r3
		case SET_SW_03:
			return _GPIO_in.bit.SET_SW_03;
		case SET_SW_04:
			return _GPIO_in.bit.SET_SW_04;
		case WELD:
			return _GPIO_in.bit.WELD;
 8007ba8:	4b10      	ldr	r3, [pc, #64]	; (8007bec <_MW_GPIO_get_gpi+0x50>)
 8007baa:	7818      	ldrb	r0, [r3, #0]
 8007bac:	06c0      	lsls	r0, r0, #27
 8007bae:	0fc0      	lsrs	r0, r0, #31
		case EMG:
			return _GPIO_in.bit.EMG;
		default:
			return 2;
	}
}
 8007bb0:	4770      	bx	lr
			return _GPIO_in.bit.EMG;
 8007bb2:	4b0e      	ldr	r3, [pc, #56]	; (8007bec <_MW_GPIO_get_gpi+0x50>)
 8007bb4:	7818      	ldrb	r0, [r3, #0]
 8007bb6:	0680      	lsls	r0, r0, #26
 8007bb8:	0fc0      	lsrs	r0, r0, #31
 8007bba:	e7f9      	b.n	8007bb0 <_MW_GPIO_get_gpi+0x14>
			return _GPIO_in.bit.SET_SW_01;
 8007bbc:	4b0b      	ldr	r3, [pc, #44]	; (8007bec <_MW_GPIO_get_gpi+0x50>)
 8007bbe:	7818      	ldrb	r0, [r3, #0]
 8007bc0:	07c0      	lsls	r0, r0, #31
 8007bc2:	0fc0      	lsrs	r0, r0, #31
 8007bc4:	e7f4      	b.n	8007bb0 <_MW_GPIO_get_gpi+0x14>
			return _GPIO_in.bit.SET_SW_02;
 8007bc6:	4b09      	ldr	r3, [pc, #36]	; (8007bec <_MW_GPIO_get_gpi+0x50>)
 8007bc8:	7818      	ldrb	r0, [r3, #0]
 8007bca:	0780      	lsls	r0, r0, #30
 8007bcc:	0fc0      	lsrs	r0, r0, #31
 8007bce:	e7ef      	b.n	8007bb0 <_MW_GPIO_get_gpi+0x14>
			return _GPIO_in.bit.SET_SW_03;
 8007bd0:	4b06      	ldr	r3, [pc, #24]	; (8007bec <_MW_GPIO_get_gpi+0x50>)
 8007bd2:	7818      	ldrb	r0, [r3, #0]
 8007bd4:	0740      	lsls	r0, r0, #29
 8007bd6:	0fc0      	lsrs	r0, r0, #31
 8007bd8:	e7ea      	b.n	8007bb0 <_MW_GPIO_get_gpi+0x14>
			return _GPIO_in.bit.SET_SW_04;
 8007bda:	4b04      	ldr	r3, [pc, #16]	; (8007bec <_MW_GPIO_get_gpi+0x50>)
 8007bdc:	7818      	ldrb	r0, [r3, #0]
 8007bde:	0700      	lsls	r0, r0, #28
 8007be0:	0fc0      	lsrs	r0, r0, #31
 8007be2:	e7e5      	b.n	8007bb0 <_MW_GPIO_get_gpi+0x14>
uint8_t _MW_GPIO_get_gpi(uint8_t gpi_num){
 8007be4:	2002      	movs	r0, #2
 8007be6:	e7e3      	b.n	8007bb0 <_MW_GPIO_get_gpi+0x14>
 8007be8:	0800e24c 	.word	0x0800e24c
 8007bec:	20000a88 	.word	0x20000a88

08007bf0 <_MW_GPIO_update>:

void _MW_GPIO_update(){
 8007bf0:	b510      	push	{r4, lr}
	update_gpo();
 8007bf2:	f7ff fe23 	bl	800783c <update_gpo>
	update_gpi();
 8007bf6:	f7ff fea7 	bl	8007948 <update_gpi>
}
 8007bfa:	bd10      	pop	{r4, pc}

08007bfc <_MW_INDILED_sled_ctl>:
	//_MW_INDILED_bdled_ctl(BLACK);
	_MW_INDILED_sled_ctl(BLACK);
}

uint8_t _MW_INDILED_sled_ctl(e__INDI_LED_COLOR color)
{
 8007bfc:	b510      	push	{r4, lr}
 8007bfe:	2807      	cmp	r0, #7
 8007c00:	d838      	bhi.n	8007c74 <_MW_INDILED_sled_ctl+0x78>
 8007c02:	4b1d      	ldr	r3, [pc, #116]	; (8007c78 <_MW_INDILED_sled_ctl+0x7c>)
 8007c04:	0080      	lsls	r0, r0, #2
 8007c06:	581b      	ldr	r3, [r3, r0]
 8007c08:	469f      	mov	pc, r3
			_MW_GPIO_set_gpo(SLED_G, _OFF);
			_MW_GPIO_set_gpo(SLED_B, _ON);
		break;

		case WHITE :
			_MW_GPIO_set_gpo(SLED_R, _ON);
 8007c0a:	2101      	movs	r1, #1
 8007c0c:	2002      	movs	r0, #2
 8007c0e:	f7ff ff39 	bl	8007a84 <_MW_GPIO_set_gpo>
			_MW_GPIO_set_gpo(SLED_G, _ON);
 8007c12:	2101      	movs	r1, #1
 8007c14:	2003      	movs	r0, #3
 8007c16:	f7ff ff35 	bl	8007a84 <_MW_GPIO_set_gpo>
			_MW_GPIO_set_gpo(SLED_B, _ON);
 8007c1a:	2101      	movs	r1, #1
 8007c1c:	2004      	movs	r0, #4
 8007c1e:	f7ff ff31 	bl	8007a84 <_MW_GPIO_set_gpo>
			_MW_GPIO_set_gpo(SLED_B, _OFF);
		break;
	}

	return _TRUE;
}
 8007c22:	2001      	movs	r0, #1
 8007c24:	bd10      	pop	{r4, pc}
			_MW_GPIO_set_gpo(SLED_R, _ON);
 8007c26:	2101      	movs	r1, #1
			_MW_GPIO_set_gpo(SLED_R, _OFF);
 8007c28:	2002      	movs	r0, #2
 8007c2a:	f7ff ff2b 	bl	8007a84 <_MW_GPIO_set_gpo>
			_MW_GPIO_set_gpo(SLED_G, _OFF);
 8007c2e:	2100      	movs	r1, #0
 8007c30:	2003      	movs	r0, #3
 8007c32:	f7ff ff27 	bl	8007a84 <_MW_GPIO_set_gpo>
			_MW_GPIO_set_gpo(SLED_B, _OFF);
 8007c36:	2100      	movs	r1, #0
 8007c38:	2004      	movs	r0, #4
 8007c3a:	f7ff ff23 	bl	8007a84 <_MW_GPIO_set_gpo>
		break;
 8007c3e:	e7f0      	b.n	8007c22 <_MW_INDILED_sled_ctl+0x26>
			_MW_GPIO_set_gpo(SLED_R, _OFF);
 8007c40:	2100      	movs	r1, #0
 8007c42:	2002      	movs	r0, #2
 8007c44:	f7ff ff1e 	bl	8007a84 <_MW_GPIO_set_gpo>
			_MW_GPIO_set_gpo(SLED_G, _ON);
 8007c48:	2101      	movs	r1, #1
 8007c4a:	e7f1      	b.n	8007c30 <_MW_INDILED_sled_ctl+0x34>
			_MW_GPIO_set_gpo(SLED_R, _OFF);
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	2002      	movs	r0, #2
 8007c50:	f7ff ff18 	bl	8007a84 <_MW_GPIO_set_gpo>
			_MW_GPIO_set_gpo(SLED_G, _OFF);
 8007c54:	2100      	movs	r1, #0
 8007c56:	e7dd      	b.n	8007c14 <_MW_INDILED_sled_ctl+0x18>
			_MW_GPIO_set_gpo(SLED_R, _ON);
 8007c58:	2101      	movs	r1, #1
 8007c5a:	2002      	movs	r0, #2
 8007c5c:	f7ff ff12 	bl	8007a84 <_MW_GPIO_set_gpo>
			_MW_GPIO_set_gpo(SLED_G, _ON);
 8007c60:	2101      	movs	r1, #1
 8007c62:	e7e5      	b.n	8007c30 <_MW_INDILED_sled_ctl+0x34>
			_MW_GPIO_set_gpo(SLED_R, _OFF);
 8007c64:	2100      	movs	r1, #0
 8007c66:	e7d1      	b.n	8007c0c <_MW_INDILED_sled_ctl+0x10>
			_MW_GPIO_set_gpo(SLED_R, _ON);
 8007c68:	2101      	movs	r1, #1
 8007c6a:	2002      	movs	r0, #2
 8007c6c:	f7ff ff0a 	bl	8007a84 <_MW_GPIO_set_gpo>
			_MW_GPIO_set_gpo(SLED_G, _OFF);
 8007c70:	2100      	movs	r1, #0
 8007c72:	e7cf      	b.n	8007c14 <_MW_INDILED_sled_ctl+0x18>
			_MW_GPIO_set_gpo(SLED_R, _OFF);
 8007c74:	2100      	movs	r1, #0
 8007c76:	e7d7      	b.n	8007c28 <_MW_INDILED_sled_ctl+0x2c>
 8007c78:	0800e264 	.word	0x0800e264

08007c7c <_MW_INDILED_init>:
{
 8007c7c:	b510      	push	{r4, lr}
	_MW_INDILED_sled_ctl(BLACK);
 8007c7e:	2000      	movs	r0, #0
 8007c80:	f7ff ffbc 	bl	8007bfc <_MW_INDILED_sled_ctl>
}
 8007c84:	bd10      	pop	{r4, pc}
 8007c86:	46c0      	nop			; (mov r8, r8)

08007c88 <_MW_IT_init>:
#define _LEAKAGE_LPF_TIMEINTERVAL_ (2)
#define _LEAKAGE_LPF_TAU_ (190)
#endif

void _MW_IT_init()
{
 8007c88:	b510      	push	{r4, lr}
	HAL_UART_Receive_IT(&huart1, &_it_rx01, 1);
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	4908      	ldr	r1, [pc, #32]	; (8007cb0 <_MW_IT_init+0x28>)
 8007c8e:	4809      	ldr	r0, [pc, #36]	; (8007cb4 <_MW_IT_init+0x2c>)
 8007c90:	f002 ffd4 	bl	800ac3c <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, &_it_rx02, 1);
 8007c94:	2201      	movs	r2, #1
 8007c96:	4908      	ldr	r1, [pc, #32]	; (8007cb8 <_MW_IT_init+0x30>)
 8007c98:	4808      	ldr	r0, [pc, #32]	; (8007cbc <_MW_IT_init+0x34>)
 8007c9a:	f002 ffcf 	bl	800ac3c <HAL_UART_Receive_IT>

	HAL_TIM_Base_Start_IT(&htim3);
 8007c9e:	4808      	ldr	r0, [pc, #32]	; (8007cc0 <_MW_IT_init+0x38>)
 8007ca0:	f001 ff4e 	bl	8009b40 <HAL_TIM_Base_Start_IT>

#if ((_LEAKAGE_CALC_LPF_FILTER_) == 1)
	_LIB_LPF_init(&leakage_calc, _LEAKAGE_LPF_TIMEINTERVAL_, _LEAKAGE_LPF_TAU_);
 8007ca4:	22be      	movs	r2, #190	; 0xbe
 8007ca6:	2102      	movs	r1, #2
 8007ca8:	4806      	ldr	r0, [pc, #24]	; (8007cc4 <_MW_IT_init+0x3c>)
 8007caa:	f7ff f8e5 	bl	8006e78 <_LIB_LPF_init>
#endif
}
 8007cae:	bd10      	pop	{r4, pc}
 8007cb0:	20000a8e 	.word	0x20000a8e
 8007cb4:	20000c4c 	.word	0x20000c4c
 8007cb8:	20000a8f 	.word	0x20000a8f
 8007cbc:	20000cd0 	.word	0x20000cd0
 8007cc0:	20000bbc 	.word	0x20000bbc
 8007cc4:	20000a94 	.word	0x20000a94

08007cc8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance == USART1){
 8007cc8:	6803      	ldr	r3, [r0, #0]
 8007cca:	4a10      	ldr	r2, [pc, #64]	; (8007d0c <HAL_UART_RxCpltCallback+0x44>)
{
 8007ccc:	b570      	push	{r4, r5, r6, lr}
 8007cce:	0004      	movs	r4, r0
	if(huart->Instance == USART1){
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d003      	beq.n	8007cdc <HAL_UART_RxCpltCallback+0x14>
		//printf("0x%02x\r\n",_it_rx04);
		//HAL_UART_Transmit(&huart2, &_it_rx01, 1, 3000);
		_APP_RFID_push_ringbuffer(_it_rx01);
	}

	if(huart->Instance == USART2){
 8007cd4:	4a0e      	ldr	r2, [pc, #56]	; (8007d10 <HAL_UART_RxCpltCallback+0x48>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d00d      	beq.n	8007cf6 <HAL_UART_RxCpltCallback+0x2e>
		HAL_UART_Receive_IT(&huart2, &_it_rx02, 1);
		_APP_SYSTEMCTL_push_ringbuffer(_it_rx02);
	}
}
 8007cda:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_Receive_IT(&huart1, &_it_rx01, 1);
 8007cdc:	4d0d      	ldr	r5, [pc, #52]	; (8007d14 <HAL_UART_RxCpltCallback+0x4c>)
 8007cde:	2201      	movs	r2, #1
 8007ce0:	0029      	movs	r1, r5
 8007ce2:	480d      	ldr	r0, [pc, #52]	; (8007d18 <HAL_UART_RxCpltCallback+0x50>)
 8007ce4:	f002 ffaa 	bl	800ac3c <HAL_UART_Receive_IT>
		_APP_RFID_push_ringbuffer(_it_rx01);
 8007ce8:	7828      	ldrb	r0, [r5, #0]
 8007cea:	f7fe fb65 	bl	80063b8 <_APP_RFID_push_ringbuffer>
 8007cee:	6823      	ldr	r3, [r4, #0]
	if(huart->Instance == USART2){
 8007cf0:	4a07      	ldr	r2, [pc, #28]	; (8007d10 <HAL_UART_RxCpltCallback+0x48>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d1f1      	bne.n	8007cda <HAL_UART_RxCpltCallback+0x12>
		HAL_UART_Receive_IT(&huart2, &_it_rx02, 1);
 8007cf6:	4c09      	ldr	r4, [pc, #36]	; (8007d1c <HAL_UART_RxCpltCallback+0x54>)
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	0021      	movs	r1, r4
 8007cfc:	4808      	ldr	r0, [pc, #32]	; (8007d20 <HAL_UART_RxCpltCallback+0x58>)
 8007cfe:	f002 ff9d 	bl	800ac3c <HAL_UART_Receive_IT>
		_APP_SYSTEMCTL_push_ringbuffer(_it_rx02);
 8007d02:	7820      	ldrb	r0, [r4, #0]
 8007d04:	f7fe fe9c 	bl	8006a40 <_APP_SYSTEMCTL_push_ringbuffer>
}
 8007d08:	e7e7      	b.n	8007cda <HAL_UART_RxCpltCallback+0x12>
 8007d0a:	46c0      	nop			; (mov r8, r8)
 8007d0c:	40013800 	.word	0x40013800
 8007d10:	40004400 	.word	0x40004400
 8007d14:	20000a8e 	.word	0x20000a8e
 8007d18:	20000c4c 	.word	0x20000c4c
 8007d1c:	20000a8f 	.word	0x20000a8f
 8007d20:	20000cd0 	.word	0x20000cd0

08007d24 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	static uint16_t temp_count = 0;

	if(htim == &htim3)
 8007d24:	4b0f      	ldr	r3, [pc, #60]	; (8007d64 <HAL_TIM_PeriodElapsedCallback+0x40>)
{
 8007d26:	b510      	push	{r4, lr}
	if(htim == &htim3)
 8007d28:	4283      	cmp	r3, r0
 8007d2a:	d000      	beq.n	8007d2e <HAL_TIM_PeriodElapsedCallback+0xa>
				_MW_GPIO_set_gpo(STUS_LED_02, 1);
			}
		}

	}
}
 8007d2c:	bd10      	pop	{r4, pc}
		_LIB_USERDELAY_tickcount();
 8007d2e:	f7ff f969 	bl	8007004 <_LIB_USERDELAY_tickcount>
		temp_count++;
 8007d32:	4a0d      	ldr	r2, [pc, #52]	; (8007d68 <HAL_TIM_PeriodElapsedCallback+0x44>)
		if(temp_count > 10000)
 8007d34:	490d      	ldr	r1, [pc, #52]	; (8007d6c <HAL_TIM_PeriodElapsedCallback+0x48>)
		temp_count++;
 8007d36:	8813      	ldrh	r3, [r2, #0]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	b29b      	uxth	r3, r3
		if(temp_count > 10000)
 8007d3c:	428b      	cmp	r3, r1
 8007d3e:	d801      	bhi.n	8007d44 <HAL_TIM_PeriodElapsedCallback+0x20>
		temp_count++;
 8007d40:	8013      	strh	r3, [r2, #0]
 8007d42:	e7f3      	b.n	8007d2c <HAL_TIM_PeriodElapsedCallback+0x8>
			temp_count = 0;
 8007d44:	2300      	movs	r3, #0
			if(_MW_GPIO_get_gpo(STUS_LED_02) == 1)
 8007d46:	2001      	movs	r0, #1
			temp_count = 0;
 8007d48:	8013      	strh	r3, [r2, #0]
			if(_MW_GPIO_get_gpo(STUS_LED_02) == 1)
 8007d4a:	f7ff fef3 	bl	8007b34 <_MW_GPIO_get_gpo>
 8007d4e:	2801      	cmp	r0, #1
 8007d50:	d004      	beq.n	8007d5c <HAL_TIM_PeriodElapsedCallback+0x38>
				_MW_GPIO_set_gpo(STUS_LED_02, 1);
 8007d52:	2101      	movs	r1, #1
 8007d54:	2001      	movs	r0, #1
 8007d56:	f7ff fe95 	bl	8007a84 <_MW_GPIO_set_gpo>
}
 8007d5a:	e7e7      	b.n	8007d2c <HAL_TIM_PeriodElapsedCallback+0x8>
				_MW_GPIO_set_gpo(STUS_LED_02, 0);
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	f7ff fe91 	bl	8007a84 <_MW_GPIO_set_gpo>
 8007d62:	e7e3      	b.n	8007d2c <HAL_TIM_PeriodElapsedCallback+0x8>
 8007d64:	20000bbc 	.word	0x20000bbc
 8007d68:	20000ac2 	.word	0x20000ac2
 8007d6c:	00002710 	.word	0x00002710

08007d70 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
	uint32_t bCh;

	if(htim == &htim1)
 8007d70:	4b05      	ldr	r3, [pc, #20]	; (8007d88 <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
{
 8007d72:	b510      	push	{r4, lr}
	if(htim == &htim1)
 8007d74:	4298      	cmp	r0, r3
 8007d76:	d000      	beq.n	8007d7a <HAL_TIM_PWM_PulseFinishedCallback+0xa>
			bCh = TIM_CHANNEL_1;

			_MW_CP_change_duty(htim, bCh);
		}
	}
}
 8007d78:	bd10      	pop	{r4, pc}
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8007d7a:	7f03      	ldrb	r3, [r0, #28]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d1fb      	bne.n	8007d78 <HAL_TIM_PWM_PulseFinishedCallback+0x8>
			_MW_CP_change_duty(htim, bCh);
 8007d80:	2100      	movs	r1, #0
 8007d82:	f7ff f9c9 	bl	8007118 <_MW_CP_change_duty>
}
 8007d86:	e7f7      	b.n	8007d78 <HAL_TIM_PWM_PulseFinishedCallback+0x8>
 8007d88:	20000c04 	.word	0x20000c04

08007d8c <HAL_TIM_OC_DelayElapsedCallback>:
	uint32_t leakage_lpf = 0;

	static uint8_t print_flag = 0;

#endif
	if(htim == &htim1)
 8007d8c:	4b47      	ldr	r3, [pc, #284]	; (8007eac <HAL_TIM_OC_DelayElapsedCallback+0x120>)
{
 8007d8e:	b570      	push	{r4, r5, r6, lr}
	if(htim == &htim1)
 8007d90:	4298      	cmp	r0, r3
 8007d92:	d000      	beq.n	8007d96 <HAL_TIM_OC_DelayElapsedCallback+0xa>
#endif
			}

		}
	}
}
 8007d94:	bd70      	pop	{r4, r5, r6, pc}
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8007d96:	7f03      	ldrb	r3, [r0, #28]
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d010      	beq.n	8007dbe <HAL_TIM_OC_DelayElapsedCallback+0x32>
		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8007d9c:	2b04      	cmp	r3, #4
 8007d9e:	d015      	beq.n	8007dcc <HAL_TIM_OC_DelayElapsedCallback+0x40>
		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8007da0:	2b08      	cmp	r3, #8
 8007da2:	d1f7      	bne.n	8007d94 <HAL_TIM_OC_DelayElapsedCallback+0x8>
			uint16_t temp = gADCData[ADC_ZCT_INDEX_];
 8007da4:	4b42      	ldr	r3, [pc, #264]	; (8007eb0 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8007da6:	885c      	ldrh	r4, [r3, #2]
 8007da8:	b2a4      	uxth	r4, r4
			if(_ON == _MW_CP_get_mc_relay_state())
 8007daa:	f7ff faa7 	bl	80072fc <_MW_CP_get_mc_relay_state>
 8007dae:	2801      	cmp	r0, #1
 8007db0:	d013      	beq.n	8007dda <HAL_TIM_OC_DelayElapsedCallback+0x4e>
				delay_leakage_current_count = 0;
 8007db2:	2200      	movs	r2, #0
 8007db4:	4b3f      	ldr	r3, [pc, #252]	; (8007eb4 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 8007db6:	801a      	strh	r2, [r3, #0]
				delay_leakage_current_flag = 0;
 8007db8:	4b3f      	ldr	r3, [pc, #252]	; (8007eb8 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8007dba:	701a      	strb	r2, [r3, #0]
			if(1 == delay_leakage_current_flag)
 8007dbc:	e7ea      	b.n	8007d94 <HAL_TIM_OC_DelayElapsedCallback+0x8>
			_MW_CP_average_adc(CP_SECTION_L, gADCData[ADC_CP_INDEX_]);
 8007dbe:	4b3c      	ldr	r3, [pc, #240]	; (8007eb0 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8007dc0:	2001      	movs	r0, #1
 8007dc2:	88d9      	ldrh	r1, [r3, #6]
 8007dc4:	b289      	uxth	r1, r1
 8007dc6:	f7ff fb37 	bl	8007438 <_MW_CP_average_adc>
 8007dca:	e7e3      	b.n	8007d94 <HAL_TIM_OC_DelayElapsedCallback+0x8>
			_MW_CP_average_adc(CP_SECTION_H, gADCData[ADC_CP_INDEX_]);
 8007dcc:	4b38      	ldr	r3, [pc, #224]	; (8007eb0 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8007dce:	2000      	movs	r0, #0
 8007dd0:	88d9      	ldrh	r1, [r3, #6]
 8007dd2:	b289      	uxth	r1, r1
 8007dd4:	f7ff fb30 	bl	8007438 <_MW_CP_average_adc>
 8007dd8:	e7dc      	b.n	8007d94 <HAL_TIM_OC_DelayElapsedCallback+0x8>
				if((CHARGSERV_LEAKAGE_DETECT_DELAY <= delay_leakage_current_count) && (0 == delay_leakage_current_flag))
 8007dda:	4a36      	ldr	r2, [pc, #216]	; (8007eb4 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 8007ddc:	8813      	ldrh	r3, [r2, #0]
 8007dde:	2b63      	cmp	r3, #99	; 0x63
 8007de0:	d93c      	bls.n	8007e5c <HAL_TIM_OC_DelayElapsedCallback+0xd0>
 8007de2:	4d35      	ldr	r5, [pc, #212]	; (8007eb8 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8007de4:	7829      	ldrb	r1, [r5, #0]
 8007de6:	2900      	cmp	r1, #0
 8007de8:	d043      	beq.n	8007e72 <HAL_TIM_OC_DelayElapsedCallback+0xe6>
					delay_leakage_current_count++;
 8007dea:	3301      	adds	r3, #1
 8007dec:	8013      	strh	r3, [r2, #0]
			if(1 == delay_leakage_current_flag)
 8007dee:	2901      	cmp	r1, #1
 8007df0:	d1d0      	bne.n	8007d94 <HAL_TIM_OC_DelayElapsedCallback+0x8>
				leakage_temp[leakage_temp_index++] = temp;
 8007df2:	4832      	ldr	r0, [pc, #200]	; (8007ebc <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8007df4:	4b32      	ldr	r3, [pc, #200]	; (8007ec0 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8007df6:	7801      	ldrb	r1, [r0, #0]
 8007df8:	1c4a      	adds	r2, r1, #1
 8007dfa:	b2d2      	uxtb	r2, r2
 8007dfc:	0049      	lsls	r1, r1, #1
 8007dfe:	7002      	strb	r2, [r0, #0]
 8007e00:	52cc      	strh	r4, [r1, r3]
				if(leakage_temp_index >= 16)	leakage_temp_index = 0;
 8007e02:	2a0f      	cmp	r2, #15
 8007e04:	d901      	bls.n	8007e0a <HAL_TIM_OC_DelayElapsedCallback+0x7e>
 8007e06:	2200      	movs	r2, #0
 8007e08:	7002      	strb	r2, [r0, #0]
				for(int i = 0; i<16; i++)
 8007e0a:	0018      	movs	r0, r3
	uint16_t leakage_temp_upper = 0;
 8007e0c:	2400      	movs	r4, #0
 8007e0e:	3020      	adds	r0, #32
					if(leakage_temp[i] > leakage_temp_upper)	leakage_temp_upper = leakage_temp[i];
 8007e10:	881a      	ldrh	r2, [r3, #0]
 8007e12:	1c11      	adds	r1, r2, #0
 8007e14:	42a2      	cmp	r2, r4
 8007e16:	d200      	bcs.n	8007e1a <HAL_TIM_OC_DelayElapsedCallback+0x8e>
 8007e18:	1c21      	adds	r1, r4, #0
 8007e1a:	3302      	adds	r3, #2
 8007e1c:	b28c      	uxth	r4, r1
				for(int i = 0; i<16; i++)
 8007e1e:	4298      	cmp	r0, r3
 8007e20:	d1f6      	bne.n	8007e10 <HAL_TIM_OC_DelayElapsedCallback+0x84>
				if((0 == print_flag) && (leakage_temp_upper > CHARGSERV_LEAKAGE_AMPE_TO_ADC))
 8007e22:	4a28      	ldr	r2, [pc, #160]	; (8007ec4 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8007e24:	7813      	ldrb	r3, [r2, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d11b      	bne.n	8007e62 <HAL_TIM_OC_DelayElapsedCallback+0xd6>
 8007e2a:	4b27      	ldr	r3, [pc, #156]	; (8007ec8 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8007e2c:	429c      	cmp	r4, r3
 8007e2e:	d834      	bhi.n	8007e9a <HAL_TIM_OC_DelayElapsedCallback+0x10e>
				leakage_lpf = _LIB_LPF_calc(&leakage_calc, (uint32_t)leakage_temp_upper);
 8007e30:	0021      	movs	r1, r4
 8007e32:	4826      	ldr	r0, [pc, #152]	; (8007ecc <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8007e34:	f7ff f828 	bl	8006e88 <_LIB_LPF_calc>
				if((leakage_lpf > CHARGSERV_LEAKAGE_AMPE_TO_ADC) && (_OFF == _APP_CHARGSERV_is_leakage_fault_set()))
 8007e38:	4b23      	ldr	r3, [pc, #140]	; (8007ec8 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
				leakage_lpf = _LIB_LPF_calc(&leakage_calc, (uint32_t)leakage_temp_upper);
 8007e3a:	0004      	movs	r4, r0
				if((leakage_lpf > CHARGSERV_LEAKAGE_AMPE_TO_ADC) && (_OFF == _APP_CHARGSERV_is_leakage_fault_set()))
 8007e3c:	4298      	cmp	r0, r3
 8007e3e:	d9a9      	bls.n	8007d94 <HAL_TIM_OC_DelayElapsedCallback+0x8>
 8007e40:	f7fd fb28 	bl	8005494 <_APP_CHARGSERV_is_leakage_fault_set>
 8007e44:	2800      	cmp	r0, #0
 8007e46:	d1a5      	bne.n	8007d94 <HAL_TIM_OC_DelayElapsedCallback+0x8>
					_LIB_LOGGING_printf("#### CHARGSERV : leakage_fault_set  time: %ld #### \r\n",_LIB_USERDLEAY_gettick());
 8007e48:	f7ff f8e4 	bl	8007014 <_LIB_USERDLEAY_gettick>
 8007e4c:	0001      	movs	r1, r0
 8007e4e:	4820      	ldr	r0, [pc, #128]	; (8007ed0 <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 8007e50:	f002 ff62 	bl	800ad18 <iprintf>
					_APP_CHARGSERV_leakage_fault_set(leakage_lpf);
 8007e54:	b2a0      	uxth	r0, r4
 8007e56:	f7fd fb25 	bl	80054a4 <_APP_CHARGSERV_leakage_fault_set>
}
 8007e5a:	e79b      	b.n	8007d94 <HAL_TIM_OC_DelayElapsedCallback+0x8>
 8007e5c:	4916      	ldr	r1, [pc, #88]	; (8007eb8 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8007e5e:	7809      	ldrb	r1, [r1, #0]
 8007e60:	e7c3      	b.n	8007dea <HAL_TIM_OC_DelayElapsedCallback+0x5e>
				else if((1 == print_flag) && (leakage_temp_upper <= CHARGSERV_LEAKAGE_AMPE_TO_ADC))
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d1e4      	bne.n	8007e30 <HAL_TIM_OC_DelayElapsedCallback+0xa4>
 8007e66:	4b18      	ldr	r3, [pc, #96]	; (8007ec8 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8007e68:	429c      	cmp	r4, r3
 8007e6a:	d8e1      	bhi.n	8007e30 <HAL_TIM_OC_DelayElapsedCallback+0xa4>
					print_flag = 0;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	7013      	strb	r3, [r2, #0]
 8007e70:	e7de      	b.n	8007e30 <HAL_TIM_OC_DelayElapsedCallback+0xa4>
					delay_leakage_current_count = 0;
 8007e72:	8011      	strh	r1, [r2, #0]
					delay_leakage_current_flag = 1;
 8007e74:	7028      	strb	r0, [r5, #0]
					_LIB_LPF_init(&leakage_calc, _LEAKAGE_LPF_TIMEINTERVAL_, _LEAKAGE_LPF_TAU_);
 8007e76:	22be      	movs	r2, #190	; 0xbe
 8007e78:	3102      	adds	r1, #2
 8007e7a:	4814      	ldr	r0, [pc, #80]	; (8007ecc <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8007e7c:	f7fe fffc 	bl	8006e78 <_LIB_LPF_init>
					memset(leakage_temp,0,sizeof(leakage_temp));
 8007e80:	2100      	movs	r1, #0
 8007e82:	2220      	movs	r2, #32
 8007e84:	480e      	ldr	r0, [pc, #56]	; (8007ec0 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8007e86:	f002 ff3e 	bl	800ad06 <memset>
					leakage_temp_index = 0;
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	4b0b      	ldr	r3, [pc, #44]	; (8007ebc <HAL_TIM_OC_DelayElapsedCallback+0x130>)
					_LIB_LOGGING_printf("#### CHARGSERV : leakage_LPF_init #### \r\n");
 8007e8e:	4811      	ldr	r0, [pc, #68]	; (8007ed4 <HAL_TIM_OC_DelayElapsedCallback+0x148>)
					leakage_temp_index = 0;
 8007e90:	701a      	strb	r2, [r3, #0]
					_LIB_LOGGING_printf("#### CHARGSERV : leakage_LPF_init #### \r\n");
 8007e92:	f002 ffcd 	bl	800ae30 <puts>
 8007e96:	7829      	ldrb	r1, [r5, #0]
 8007e98:	e7a9      	b.n	8007dee <HAL_TIM_OC_DelayElapsedCallback+0x62>
					print_flag = 1;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	7013      	strb	r3, [r2, #0]
					_LIB_LOGGING_printf("#### CHARGSERV : leakage_temp_upper  time: %ld #### \r\n",_LIB_USERDLEAY_gettick());
 8007e9e:	f7ff f8b9 	bl	8007014 <_LIB_USERDLEAY_gettick>
 8007ea2:	0001      	movs	r1, r0
 8007ea4:	480c      	ldr	r0, [pc, #48]	; (8007ed8 <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 8007ea6:	f002 ff37 	bl	800ad18 <iprintf>
 8007eaa:	e7c1      	b.n	8007e30 <HAL_TIM_OC_DelayElapsedCallback+0xa4>
 8007eac:	20000c04 	.word	0x20000c04
 8007eb0:	20000a64 	.word	0x20000a64
 8007eb4:	20000a90 	.word	0x20000a90
 8007eb8:	20000a92 	.word	0x20000a92
 8007ebc:	20000ac0 	.word	0x20000ac0
 8007ec0:	20000aa0 	.word	0x20000aa0
 8007ec4:	20000ac1 	.word	0x20000ac1
 8007ec8:	000006fe 	.word	0x000006fe
 8007ecc:	20000a94 	.word	0x20000a94
 8007ed0:	0800e2e8 	.word	0x0800e2e8
 8007ed4:	0800e284 	.word	0x0800e284
 8007ed8:	0800e2b0 	.word	0x0800e2b0

08007edc <_MW_NTC_get_temp>:

	return _CONTINUE;
}
int16_t _MW_NTC_get_temp()
{
	return NTC_Temp;
 8007edc:	4b01      	ldr	r3, [pc, #4]	; (8007ee4 <_MW_NTC_get_temp+0x8>)
 8007ede:	2000      	movs	r0, #0
 8007ee0:	5e18      	ldrsh	r0, [r3, r0]
}
 8007ee2:	4770      	bx	lr
 8007ee4:	20000ac8 	.word	0x20000ac8

08007ee8 <_MW_NTC_cal_temp>:
uint8_t _MW_NTC_cal_temp()
{
 8007ee8:	b570      	push	{r4, r5, r6, lr}
 8007eea:	4d1c      	ldr	r5, [pc, #112]	; (8007f5c <_MW_NTC_cal_temp+0x74>)
 8007eec:	2400      	movs	r4, #0
 8007eee:	002e      	movs	r6, r5
 8007ef0:	3614      	adds	r6, #20

	ADCvalue = 0;

	for (int i = 0; i < NTC_TEMP_ADC_LENGTH; i++)
	{
		ADCvalue += NTC_Temp_ADC[i];
 8007ef2:	8828      	ldrh	r0, [r5, #0]
 8007ef4:	f7f8 ffbc 	bl	8000e70 <__aeabi_i2f>
 8007ef8:	1c01      	adds	r1, r0, #0
 8007efa:	1c20      	adds	r0, r4, #0
 8007efc:	f7f8 fa0e 	bl	800031c <__aeabi_fadd>
 8007f00:	3502      	adds	r5, #2
 8007f02:	1c04      	adds	r4, r0, #0
	for (int i = 0; i < NTC_TEMP_ADC_LENGTH; i++)
 8007f04:	42b5      	cmp	r5, r6
 8007f06:	d1f4      	bne.n	8007ef2 <_MW_NTC_cal_temp+0xa>
	}

	ADCvalue = ADCvalue / NTC_TEMP_ADC_LENGTH;
 8007f08:	4915      	ldr	r1, [pc, #84]	; (8007f60 <_MW_NTC_cal_temp+0x78>)
 8007f0a:	f7f8 fba3 	bl	8000654 <__aeabi_fdiv>


	ADC_mV = (ADCvalue / 4096.0F) * 3.35F * 1000.0F;
 8007f0e:	21e6      	movs	r1, #230	; 0xe6
	ADCvalue = ADCvalue / NTC_TEMP_ADC_LENGTH;
 8007f10:	4b14      	ldr	r3, [pc, #80]	; (8007f64 <_MW_NTC_cal_temp+0x7c>)
	ADC_mV = (ADCvalue / 4096.0F) * 3.35F * 1000.0F;
 8007f12:	0589      	lsls	r1, r1, #22
	ADCvalue = ADCvalue / NTC_TEMP_ADC_LENGTH;
 8007f14:	6018      	str	r0, [r3, #0]
	ADC_mV = (ADCvalue / 4096.0F) * 3.35F * 1000.0F;
 8007f16:	f7f8 fca9 	bl	800086c <__aeabi_fmul>
 8007f1a:	4913      	ldr	r1, [pc, #76]	; (8007f68 <_MW_NTC_cal_temp+0x80>)
 8007f1c:	f7f8 fca6 	bl	800086c <__aeabi_fmul>
 8007f20:	4912      	ldr	r1, [pc, #72]	; (8007f6c <_MW_NTC_cal_temp+0x84>)
 8007f22:	f7f8 fca3 	bl	800086c <__aeabi_fmul>

#if ((__NTC_DEBUG__)==1)
		//_LIB_LOGGING_printf("ADC : %d \r\n",(int)ADC_mV);
#endif

	NTC_Temp = _MW_NTC_cal_ntc(ADC_mV);
 8007f26:	f7f8 f9c3 	bl	80002b0 <__aeabi_f2uiz>
	for (j = 0; j < 17; j++)
 8007f2a:	240a      	movs	r4, #10
 8007f2c:	4d10      	ldr	r5, [pc, #64]	; (8007f70 <_MW_NTC_cal_temp+0x88>)
 8007f2e:	4b11      	ldr	r3, [pc, #68]	; (8007f74 <_MW_NTC_cal_temp+0x8c>)
	NTC_Temp = _MW_NTC_cal_ntc(ADC_mV);
 8007f30:	b280      	uxth	r0, r0
		if (i_temp > Temp_array[(j + 1) * 10 - 1])
 8007f32:	4298      	cmp	r0, r3
 8007f34:	d909      	bls.n	8007f4a <_MW_NTC_cal_temp+0x62>
 8007f36:	0023      	movs	r3, r4
 8007f38:	002a      	movs	r2, r5
 8007f3a:	3b0a      	subs	r3, #10
				if (i_temp > Temp_array[j * 10 + k])
 8007f3c:	8811      	ldrh	r1, [r2, #0]
 8007f3e:	4281      	cmp	r1, r0
 8007f40:	d307      	bcc.n	8007f52 <_MW_NTC_cal_temp+0x6a>
			for (k = 0; k < 10; k++)
 8007f42:	3301      	adds	r3, #1
 8007f44:	3202      	adds	r2, #2
 8007f46:	429c      	cmp	r4, r3
 8007f48:	d1f8      	bne.n	8007f3c <_MW_NTC_cal_temp+0x54>
 8007f4a:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8007f4c:	340a      	adds	r4, #10
 8007f4e:	3514      	adds	r5, #20
 8007f50:	e7ef      	b.n	8007f32 <_MW_NTC_cal_temp+0x4a>
	NTC_Temp = _MW_NTC_cal_ntc(ADC_mV);
 8007f52:	4a09      	ldr	r2, [pc, #36]	; (8007f78 <_MW_NTC_cal_temp+0x90>)
					m_result = (j * 10 + k) - 40;
 8007f54:	3b28      	subs	r3, #40	; 0x28

	return _TRUE;
}
 8007f56:	2001      	movs	r0, #1
	NTC_Temp = _MW_NTC_cal_ntc(ADC_mV);
 8007f58:	8013      	strh	r3, [r2, #0]
}
 8007f5a:	bd70      	pop	{r4, r5, r6, pc}
 8007f5c:	20000acc 	.word	0x20000acc
 8007f60:	41200000 	.word	0x41200000
 8007f64:	20000ac4 	.word	0x20000ac4
 8007f68:	40566666 	.word	0x40566666
 8007f6c:	447a0000 	.word	0x447a0000
 8007f70:	0800e320 	.word	0x0800e320
 8007f74:	00000c1c 	.word	0x00000c1c
 8007f78:	20000ac8 	.word	0x20000ac8

08007f7c <_MW_NTC_loop>:

uint8_t _MW_NTC_loop()
{
 8007f7c:	b510      	push	{r4, lr}
	uint8_t ret_value = _FALSE;

	if(_TRUE == _MW_NTC_store_value(gADCData[ADC_TEMP_INDEX_]))
 8007f7e:	4b0b      	ldr	r3, [pc, #44]	; (8007fac <_MW_NTC_loop+0x30>)
	NTC_Temp_ADC[index] = ADC_value;
 8007f80:	4a0b      	ldr	r2, [pc, #44]	; (8007fb0 <_MW_NTC_loop+0x34>)
	if(_TRUE == _MW_NTC_store_value(gADCData[ADC_TEMP_INDEX_]))
 8007f82:	891c      	ldrh	r4, [r3, #8]
	NTC_Temp_ADC[index] = ADC_value;
 8007f84:	6813      	ldr	r3, [r2, #0]
 8007f86:	480b      	ldr	r0, [pc, #44]	; (8007fb4 <_MW_NTC_loop+0x38>)
 8007f88:	0059      	lsls	r1, r3, #1
	index++;
 8007f8a:	3301      	adds	r3, #1
	NTC_Temp_ADC[index] = ADC_value;
 8007f8c:	5244      	strh	r4, [r0, r1]
	if(index >= NTC_TEMP_ADC_LENGTH)
 8007f8e:	2b09      	cmp	r3, #9
 8007f90:	dc02      	bgt.n	8007f98 <_MW_NTC_loop+0x1c>
	uint8_t ret_value = _FALSE;
 8007f92:	2000      	movs	r0, #0
	index++;
 8007f94:	6013      	str	r3, [r2, #0]

		}
	}

	return ret_value;
}
 8007f96:	bd10      	pop	{r4, pc}
		index = 0;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	6013      	str	r3, [r2, #0]
		if(_TRUE == _MW_NTC_cal_temp())
 8007f9c:	f7ff ffa4 	bl	8007ee8 <_MW_NTC_cal_temp>
 8007fa0:	3801      	subs	r0, #1
 8007fa2:	4243      	negs	r3, r0
 8007fa4:	4158      	adcs	r0, r3
	uint8_t ret_value = _FALSE;
 8007fa6:	b2c0      	uxtb	r0, r0
 8007fa8:	e7f5      	b.n	8007f96 <_MW_NTC_loop+0x1a>
 8007faa:	46c0      	nop			; (mov r8, r8)
 8007fac:	20000a64 	.word	0x20000a64
 8007fb0:	20000ae0 	.word	0x20000ae0
 8007fb4:	20000acc 	.word	0x20000acc

08007fb8 <_MW_PWM_init>:

#include <_mw_pwm.h>
#include <_config.h>

void _MW_PWM_init()
{
 8007fb8:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_1);
 8007fba:	2100      	movs	r1, #0
 8007fbc:	4801      	ldr	r0, [pc, #4]	; (8007fc4 <_MW_PWM_init+0xc>)
 8007fbe:	f001 fed3 	bl	8009d68 <HAL_TIM_PWM_Start_IT>
}
 8007fc2:	bd10      	pop	{r4, pc}
 8007fc4:	20000c04 	.word	0x20000c04

08007fc8 <_MW_PWM_set_duty>:

uint8_t _MW_PWM_set_duty(TIM_HandleTypeDef *htim, uint32_t cp_channel, uint8_t persent)
{
 8007fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fca:	b089      	sub	sp, #36	; 0x24
 8007fcc:	0005      	movs	r5, r0
 8007fce:	000e      	movs	r6, r1
 8007fd0:	0014      	movs	r4, r2
	TIM_OC_InitTypeDef sConfigOC = {0};
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	221c      	movs	r2, #28
 8007fd6:	a801      	add	r0, sp, #4
 8007fd8:	f002 fe95 	bl	800ad06 <memset>
	uint16_t maxvalue = 23999;
	double unitvalue = 239.99;

	if((persent < 0) || (persent > 100))
	{
		return 0;
 8007fdc:	2700      	movs	r7, #0
	if((persent < 0) || (persent > 100))
 8007fde:	2c64      	cmp	r4, #100	; 0x64
 8007fe0:	d902      	bls.n	8007fe8 <_MW_PWM_set_duty+0x20>
    {
  	    Error_Handler();
    }

    return 1;
}
 8007fe2:	0038      	movs	r0, r7
 8007fe4:	b009      	add	sp, #36	; 0x24
 8007fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_TIM_PWM_Stop_IT(htim, cp_channel);
 8007fe8:	0031      	movs	r1, r6
 8007fea:	0028      	movs	r0, r5
 8007fec:	f001 fec0 	bl	8009d70 <HAL_TIM_PWM_Stop_IT>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007ff0:	2360      	movs	r3, #96	; 0x60
	value = (uint16_t)(maxvalue - (uint16_t)(unitvalue * persent));
 8007ff2:	0020      	movs	r0, r4
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007ff4:	9301      	str	r3, [sp, #4]
	value = (uint16_t)(maxvalue - (uint16_t)(unitvalue * persent));
 8007ff6:	f7fa fd43 	bl	8002a80 <__aeabi_i2d>
 8007ffa:	4a0f      	ldr	r2, [pc, #60]	; (8008038 <_MW_PWM_set_duty+0x70>)
 8007ffc:	4b0f      	ldr	r3, [pc, #60]	; (800803c <_MW_PWM_set_duty+0x74>)
 8007ffe:	f7f9 feed 	bl	8001ddc <__aeabi_dmul>
 8008002:	f7f8 f96d 	bl	80002e0 <__aeabi_d2uiz>
 8008006:	4b0e      	ldr	r3, [pc, #56]	; (8008040 <_MW_PWM_set_duty+0x78>)
    if (HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, cp_channel) != HAL_OK)
 8008008:	0032      	movs	r2, r6
	value = (uint16_t)(maxvalue - (uint16_t)(unitvalue * persent));
 800800a:	1a1b      	subs	r3, r3, r0
    sConfigOC.Pulse = value;
 800800c:	b29b      	uxth	r3, r3
    if (HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, cp_channel) != HAL_OK)
 800800e:	0028      	movs	r0, r5
 8008010:	a901      	add	r1, sp, #4
    sConfigOC.Pulse = value;
 8008012:	9302      	str	r3, [sp, #8]
    if (HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, cp_channel) != HAL_OK)
 8008014:	f002 f86e 	bl	800a0f4 <HAL_TIM_PWM_ConfigChannel>
 8008018:	2800      	cmp	r0, #0
 800801a:	d109      	bne.n	8008030 <_MW_PWM_set_duty+0x68>
    if(HAL_TIM_PWM_Start_IT(htim, cp_channel) != HAL_OK)
 800801c:	0031      	movs	r1, r6
 800801e:	0028      	movs	r0, r5
 8008020:	f001 fea2 	bl	8009d68 <HAL_TIM_PWM_Start_IT>
    return 1;
 8008024:	2701      	movs	r7, #1
    if(HAL_TIM_PWM_Start_IT(htim, cp_channel) != HAL_OK)
 8008026:	2800      	cmp	r0, #0
 8008028:	d0db      	beq.n	8007fe2 <_MW_PWM_set_duty+0x1a>
  	    Error_Handler();
 800802a:	f7fb f8c5 	bl	80031b8 <Error_Handler>
 800802e:	e7d8      	b.n	8007fe2 <_MW_PWM_set_duty+0x1a>
	    Error_Handler();
 8008030:	f7fb f8c2 	bl	80031b8 <Error_Handler>
 8008034:	e7f2      	b.n	800801c <_MW_PWM_set_duty+0x54>
 8008036:	46c0      	nop			; (mov r8, r8)
 8008038:	147ae148 	.word	0x147ae148
 800803c:	406dffae 	.word	0x406dffae
 8008040:	00005dbf 	.word	0x00005dbf

08008044 <_MW_UART_tx01>:
 */


#include <_mw_uart.h>

void _MW_UART_tx01(uint8_t* tx_b, size_t tx_cnt){
 8008044:	b510      	push	{r4, lr}
	HAL_UART_Transmit(&huart1, tx_b, tx_cnt, 3000);
 8008046:	b28a      	uxth	r2, r1
 8008048:	4b02      	ldr	r3, [pc, #8]	; (8008054 <_MW_UART_tx01+0x10>)
 800804a:	0001      	movs	r1, r0
 800804c:	4802      	ldr	r0, [pc, #8]	; (8008058 <_MW_UART_tx01+0x14>)
 800804e:	f002 fcb9 	bl	800a9c4 <HAL_UART_Transmit>
}
 8008052:	bd10      	pop	{r4, pc}
 8008054:	00000bb8 	.word	0x00000bb8
 8008058:	20000c4c 	.word	0x20000c4c

0800805c <_MW_UART_tx02>:

void _MW_UART_tx02(uint8_t* tx_b, size_t tx_cnt){
 800805c:	b510      	push	{r4, lr}
	HAL_UART_Transmit(&huart2, tx_b, tx_cnt, 3000);
 800805e:	b28a      	uxth	r2, r1
 8008060:	4b02      	ldr	r3, [pc, #8]	; (800806c <_MW_UART_tx02+0x10>)
 8008062:	0001      	movs	r1, r0
 8008064:	4802      	ldr	r0, [pc, #8]	; (8008070 <_MW_UART_tx02+0x14>)
 8008066:	f002 fcad 	bl	800a9c4 <HAL_UART_Transmit>
}
 800806a:	bd10      	pop	{r4, pc}
 800806c:	00000bb8 	.word	0x00000bb8
 8008070:	20000cd0 	.word	0x20000cd0

08008074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008074:	b510      	push	{r4, lr}
 8008076:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008078:	20fa      	movs	r0, #250	; 0xfa
 800807a:	4b0e      	ldr	r3, [pc, #56]	; (80080b4 <HAL_InitTick+0x40>)
 800807c:	0080      	lsls	r0, r0, #2
 800807e:	7819      	ldrb	r1, [r3, #0]
 8008080:	f7f8 f84c 	bl	800011c <__udivsi3>
 8008084:	4b0c      	ldr	r3, [pc, #48]	; (80080b8 <HAL_InitTick+0x44>)
 8008086:	0001      	movs	r1, r0
 8008088:	6818      	ldr	r0, [r3, #0]
 800808a:	f7f8 f847 	bl	800011c <__udivsi3>
 800808e:	f000 fb05 	bl	800869c <HAL_SYSTICK_Config>
 8008092:	2800      	cmp	r0, #0
 8008094:	d10c      	bne.n	80080b0 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 8008096:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008098:	2c03      	cmp	r4, #3
 800809a:	d900      	bls.n	800809e <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 800809c:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800809e:	3802      	subs	r0, #2
 80080a0:	2200      	movs	r2, #0
 80080a2:	0021      	movs	r1, r4
 80080a4:	f000 fabc 	bl	8008620 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80080a8:	4b04      	ldr	r3, [pc, #16]	; (80080bc <HAL_InitTick+0x48>)
 80080aa:	2000      	movs	r0, #0
 80080ac:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 80080ae:	e7f5      	b.n	800809c <HAL_InitTick+0x28>
    return HAL_ERROR;
 80080b0:	2001      	movs	r0, #1
 80080b2:	e7f3      	b.n	800809c <HAL_InitTick+0x28>
 80080b4:	2000006c 	.word	0x2000006c
 80080b8:	20000000 	.word	0x20000000
 80080bc:	20000070 	.word	0x20000070

080080c0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80080c0:	2110      	movs	r1, #16
 80080c2:	4a06      	ldr	r2, [pc, #24]	; (80080dc <HAL_Init+0x1c>)
{
 80080c4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80080c6:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80080c8:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80080ca:	430b      	orrs	r3, r1
 80080cc:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80080ce:	f7ff ffd1 	bl	8008074 <HAL_InitTick>
  HAL_MspInit();
 80080d2:	f7fb f873 	bl	80031bc <HAL_MspInit>
}
 80080d6:	2000      	movs	r0, #0
 80080d8:	bd10      	pop	{r4, pc}
 80080da:	46c0      	nop			; (mov r8, r8)
 80080dc:	40022000 	.word	0x40022000

080080e0 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80080e0:	4a03      	ldr	r2, [pc, #12]	; (80080f0 <HAL_IncTick+0x10>)
 80080e2:	4b04      	ldr	r3, [pc, #16]	; (80080f4 <HAL_IncTick+0x14>)
 80080e4:	6811      	ldr	r1, [r2, #0]
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	185b      	adds	r3, r3, r1
 80080ea:	6013      	str	r3, [r2, #0]
}
 80080ec:	4770      	bx	lr
 80080ee:	46c0      	nop			; (mov r8, r8)
 80080f0:	20000d54 	.word	0x20000d54
 80080f4:	2000006c 	.word	0x2000006c

080080f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80080f8:	4b01      	ldr	r3, [pc, #4]	; (8008100 <HAL_GetTick+0x8>)
 80080fa:	6818      	ldr	r0, [r3, #0]
}
 80080fc:	4770      	bx	lr
 80080fe:	46c0      	nop			; (mov r8, r8)
 8008100:	20000d54 	.word	0x20000d54

08008104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008104:	b570      	push	{r4, r5, r6, lr}
 8008106:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008108:	f7ff fff6 	bl	80080f8 <HAL_GetTick>
 800810c:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800810e:	1c63      	adds	r3, r4, #1
 8008110:	d002      	beq.n	8008118 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8008112:	4b04      	ldr	r3, [pc, #16]	; (8008124 <HAL_Delay+0x20>)
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8008118:	f7ff ffee 	bl	80080f8 <HAL_GetTick>
 800811c:	1b40      	subs	r0, r0, r5
 800811e:	42a0      	cmp	r0, r4
 8008120:	d3fa      	bcc.n	8008118 <HAL_Delay+0x14>
  {
  }
}
 8008122:	bd70      	pop	{r4, r5, r6, pc}
 8008124:	2000006c 	.word	0x2000006c

08008128 <ADC_Enable>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8008128:	2300      	movs	r3, #0
{
 800812a:	b570      	push	{r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800812c:	6802      	ldr	r2, [r0, #0]
{
 800812e:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8008130:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008132:	6891      	ldr	r1, [r2, #8]
 8008134:	3303      	adds	r3, #3
{
 8008136:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008138:	400b      	ands	r3, r1
 800813a:	2b01      	cmp	r3, #1
 800813c:	d037      	beq.n	80081ae <ADC_Enable+0x86>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800813e:	6891      	ldr	r1, [r2, #8]
 8008140:	4b23      	ldr	r3, [pc, #140]	; (80081d0 <ADC_Enable+0xa8>)
 8008142:	4219      	tst	r1, r3
 8008144:	d129      	bne.n	800819a <ADC_Enable+0x72>
      
      return HAL_ERROR;
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008146:	2101      	movs	r1, #1
 8008148:	6893      	ldr	r3, [r2, #8]
 800814a:	430b      	orrs	r3, r1
 800814c:	6093      	str	r3, [r2, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800814e:	4b21      	ldr	r3, [pc, #132]	; (80081d4 <ADC_Enable+0xac>)
 8008150:	4921      	ldr	r1, [pc, #132]	; (80081d8 <ADC_Enable+0xb0>)
 8008152:	6818      	ldr	r0, [r3, #0]
 8008154:	f7f7 ffe2 	bl	800011c <__udivsi3>
 8008158:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 800815a:	9b01      	ldr	r3, [sp, #4]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d005      	beq.n	800816c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8008160:	9b01      	ldr	r3, [sp, #4]
 8008162:	3b01      	subs	r3, #1
 8008164:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8008166:	9b01      	ldr	r3, [sp, #4]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d1f9      	bne.n	8008160 <ADC_Enable+0x38>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800816c:	f7ff ffc4 	bl	80080f8 <HAL_GetTick>
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8008170:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8008172:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8008174:	681b      	ldr	r3, [r3, #0]
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8008176:	2501      	movs	r5, #1
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8008178:	07db      	lsls	r3, r3, #31
 800817a:	d40b      	bmi.n	8008194 <ADC_Enable+0x6c>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800817c:	f7ff ffbc 	bl	80080f8 <HAL_GetTick>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8008180:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008182:	1b80      	subs	r0, r0, r6
 8008184:	2802      	cmp	r0, #2
 8008186:	d902      	bls.n	800818e <ADC_Enable+0x66>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	4215      	tst	r5, r2
 800818c:	d016      	beq.n	80081bc <ADC_Enable+0x94>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	421d      	tst	r5, r3
 8008192:	d0f3      	beq.n	800817c <ADC_Enable+0x54>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8008194:	2000      	movs	r0, #0
}
 8008196:	b002      	add	sp, #8
 8008198:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800819a:	2210      	movs	r2, #16
 800819c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 800819e:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80081a0:	4313      	orrs	r3, r2
 80081a2:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80081a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80081a6:	3a0f      	subs	r2, #15
 80081a8:	4313      	orrs	r3, r2
 80081aa:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 80081ac:	e7f3      	b.n	8008196 <ADC_Enable+0x6e>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80081ae:	6811      	ldr	r1, [r2, #0]
 80081b0:	420b      	tst	r3, r1
 80081b2:	d1ef      	bne.n	8008194 <ADC_Enable+0x6c>
 80081b4:	68d3      	ldr	r3, [r2, #12]
 80081b6:	041b      	lsls	r3, r3, #16
 80081b8:	d4ec      	bmi.n	8008194 <ADC_Enable+0x6c>
 80081ba:	e7c0      	b.n	800813e <ADC_Enable+0x16>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80081bc:	2210      	movs	r2, #16
 80081be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          return HAL_ERROR;
 80081c0:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80081c2:	4313      	orrs	r3, r2
 80081c4:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80081c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80081c8:	431d      	orrs	r5, r3
 80081ca:	63e5      	str	r5, [r4, #60]	; 0x3c
          return HAL_ERROR;
 80081cc:	e7e3      	b.n	8008196 <ADC_Enable+0x6e>
 80081ce:	46c0      	nop			; (mov r8, r8)
 80081d0:	80000017 	.word	0x80000017
 80081d4:	20000000 	.word	0x20000000
 80081d8:	000f4240 	.word	0x000f4240

080081dc <HAL_ADC_Init>:
{
 80081dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081de:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 80081e0:	d100      	bne.n	80081e4 <HAL_ADC_Init+0x8>
 80081e2:	e085      	b.n	80082f0 <HAL_ADC_Init+0x114>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80081e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d100      	bne.n	80081ec <HAL_ADC_Init+0x10>
 80081ea:	e06b      	b.n	80082c4 <HAL_ADC_Init+0xe8>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80081ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80081ee:	06db      	lsls	r3, r3, #27
 80081f0:	d462      	bmi.n	80082b8 <HAL_ADC_Init+0xdc>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80081f2:	2104      	movs	r1, #4
 80081f4:	000d      	movs	r5, r1
 80081f6:	6823      	ldr	r3, [r4, #0]
 80081f8:	689a      	ldr	r2, [r3, #8]
 80081fa:	4015      	ands	r5, r2
      (tmp_hal_status == HAL_OK)                                &&
 80081fc:	4211      	tst	r1, r2
 80081fe:	d15b      	bne.n	80082b8 <HAL_ADC_Init+0xdc>
    ADC_STATE_CLR_SET(hadc->State,
 8008200:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008202:	4948      	ldr	r1, [pc, #288]	; (8008324 <HAL_ADC_Init+0x148>)
 8008204:	400a      	ands	r2, r1
 8008206:	3106      	adds	r1, #6
 8008208:	31ff      	adds	r1, #255	; 0xff
 800820a:	430a      	orrs	r2, r1
 800820c:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 800820e:	2203      	movs	r2, #3
 8008210:	6899      	ldr	r1, [r3, #8]
 8008212:	400a      	ands	r2, r1
 8008214:	2a01      	cmp	r2, #1
 8008216:	d05b      	beq.n	80082d0 <HAL_ADC_Init+0xf4>
      MODIFY_REG(hadc->Instance->CFGR1,
 8008218:	2118      	movs	r1, #24
 800821a:	68da      	ldr	r2, [r3, #12]
 800821c:	438a      	bics	r2, r1
 800821e:	68a1      	ldr	r1, [r4, #8]
 8008220:	430a      	orrs	r2, r1
 8008222:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8008224:	691a      	ldr	r2, [r3, #16]
 8008226:	6861      	ldr	r1, [r4, #4]
 8008228:	0092      	lsls	r2, r2, #2
 800822a:	0892      	lsrs	r2, r2, #2
 800822c:	430a      	orrs	r2, r1
 800822e:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8008230:	68da      	ldr	r2, [r3, #12]
 8008232:	493d      	ldr	r1, [pc, #244]	; (8008328 <HAL_ADC_Init+0x14c>)
 8008234:	400a      	ands	r2, r1
 8008236:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008238:	7e21      	ldrb	r1, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800823a:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800823c:	0389      	lsls	r1, r1, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800823e:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008240:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8008242:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8008244:	7ea6      	ldrb	r6, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8008246:	3a01      	subs	r2, #1
 8008248:	1e50      	subs	r0, r2, #1
 800824a:	4182      	sbcs	r2, r0
 800824c:	0310      	lsls	r0, r2, #12
 800824e:	68e2      	ldr	r2, [r4, #12]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8008250:	0377      	lsls	r7, r6, #13
 8008252:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8008254:	6922      	ldr	r2, [r4, #16]
 8008256:	4339      	orrs	r1, r7
 8008258:	2a02      	cmp	r2, #2
 800825a:	d100      	bne.n	800825e <HAL_ADC_Init+0x82>
 800825c:	2504      	movs	r5, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800825e:	2224      	movs	r2, #36	; 0x24
 8008260:	5ca2      	ldrb	r2, [r4, r2]
 8008262:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8008264:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008266:	7ee1      	ldrb	r1, [r4, #27]
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8008268:	4302      	orrs	r2, r0
 800826a:	432a      	orrs	r2, r5
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800826c:	2901      	cmp	r1, #1
 800826e:	d04b      	beq.n	8008308 <HAL_ADC_Init+0x12c>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008270:	20c2      	movs	r0, #194	; 0xc2
 8008272:	69e1      	ldr	r1, [r4, #28]
 8008274:	30ff      	adds	r0, #255	; 0xff
 8008276:	4281      	cmp	r1, r0
 8008278:	d002      	beq.n	8008280 <HAL_ADC_Init+0xa4>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800827a:	6a20      	ldr	r0, [r4, #32]
 800827c:	4301      	orrs	r1, r0
 800827e:	430a      	orrs	r2, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8008280:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8008282:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8008284:	4311      	orrs	r1, r2
 8008286:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8008288:	2180      	movs	r1, #128	; 0x80
 800828a:	0549      	lsls	r1, r1, #21
 800828c:	428d      	cmp	r5, r1
 800828e:	d026      	beq.n	80082de <HAL_ADC_Init+0x102>
 8008290:	1e69      	subs	r1, r5, #1
 8008292:	2906      	cmp	r1, #6
 8008294:	d923      	bls.n	80082de <HAL_ADC_Init+0x102>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	4924      	ldr	r1, [pc, #144]	; (800832c <HAL_ADC_Init+0x150>)
 800829a:	400b      	ands	r3, r1
 800829c:	4293      	cmp	r3, r2
 800829e:	d029      	beq.n	80082f4 <HAL_ADC_Init+0x118>
      ADC_STATE_CLR_SET(hadc->State,
 80082a0:	2212      	movs	r2, #18
 80082a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      tmp_hal_status = HAL_ERROR;
 80082a4:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80082a6:	4393      	bics	r3, r2
 80082a8:	3a02      	subs	r2, #2
 80082aa:	4313      	orrs	r3, r2
 80082ac:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80082ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80082b0:	3a0f      	subs	r2, #15
 80082b2:	4313      	orrs	r3, r2
 80082b4:	63e3      	str	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 80082b6:	e004      	b.n	80082c2 <HAL_ADC_Init+0xe6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80082b8:	2210      	movs	r2, #16
    tmp_hal_status = HAL_ERROR;
 80082ba:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80082bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80082be:	4313      	orrs	r3, r2
 80082c0:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80082c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Lock = HAL_UNLOCKED;
 80082c4:	2234      	movs	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 80082c6:	63c3      	str	r3, [r0, #60]	; 0x3c
    hadc->Lock = HAL_UNLOCKED;
 80082c8:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 80082ca:	f7fa fdad 	bl	8002e28 <HAL_ADC_MspInit>
 80082ce:	e78d      	b.n	80081ec <HAL_ADC_Init+0x10>
    if (ADC_IS_ENABLE(hadc) == RESET)
 80082d0:	6819      	ldr	r1, [r3, #0]
 80082d2:	420a      	tst	r2, r1
 80082d4:	d1ac      	bne.n	8008230 <HAL_ADC_Init+0x54>
 80082d6:	68da      	ldr	r2, [r3, #12]
 80082d8:	0412      	lsls	r2, r2, #16
 80082da:	d4a9      	bmi.n	8008230 <HAL_ADC_Init+0x54>
 80082dc:	e79c      	b.n	8008218 <HAL_ADC_Init+0x3c>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80082de:	2107      	movs	r1, #7
 80082e0:	6958      	ldr	r0, [r3, #20]
 80082e2:	4388      	bics	r0, r1
 80082e4:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80082e6:	6958      	ldr	r0, [r3, #20]
 80082e8:	4029      	ands	r1, r5
 80082ea:	4301      	orrs	r1, r0
 80082ec:	6159      	str	r1, [r3, #20]
 80082ee:	e7d2      	b.n	8008296 <HAL_ADC_Init+0xba>
    return HAL_ERROR;
 80082f0:	2001      	movs	r0, #1
 80082f2:	e7e6      	b.n	80082c2 <HAL_ADC_Init+0xe6>
      ADC_CLEAR_ERRORCODE(hadc);
 80082f4:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 80082f6:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80082f8:	63e3      	str	r3, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 80082fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80082fc:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80082fe:	4393      	bics	r3, r2
 8008300:	3a02      	subs	r2, #2
 8008302:	4313      	orrs	r3, r2
 8008304:	63a3      	str	r3, [r4, #56]	; 0x38
 8008306:	e7dc      	b.n	80082c2 <HAL_ADC_Init+0xe6>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8008308:	2e00      	cmp	r6, #0
 800830a:	d103      	bne.n	8008314 <HAL_ADC_Init+0x138>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800830c:	2180      	movs	r1, #128	; 0x80
 800830e:	0249      	lsls	r1, r1, #9
 8008310:	430a      	orrs	r2, r1
 8008312:	e7ad      	b.n	8008270 <HAL_ADC_Init+0x94>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008314:	2520      	movs	r5, #32
 8008316:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008318:	4328      	orrs	r0, r5
 800831a:	63a0      	str	r0, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800831c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800831e:	4301      	orrs	r1, r0
 8008320:	63e1      	str	r1, [r4, #60]	; 0x3c
 8008322:	e7a5      	b.n	8008270 <HAL_ADC_Init+0x94>
 8008324:	fffffefd 	.word	0xfffffefd
 8008328:	fffe0219 	.word	0xfffe0219
 800832c:	833fffe7 	.word	0x833fffe7

08008330 <HAL_ADC_Start_DMA>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8008330:	6803      	ldr	r3, [r0, #0]
{
 8008332:	b570      	push	{r4, r5, r6, lr}
 8008334:	000d      	movs	r5, r1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8008336:	6899      	ldr	r1, [r3, #8]
{
 8008338:	0004      	movs	r4, r0
 800833a:	0016      	movs	r6, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800833c:	074a      	lsls	r2, r1, #29
 800833e:	d436      	bmi.n	80083ae <HAL_ADC_Start_DMA+0x7e>
    __HAL_LOCK(hadc);
 8008340:	2234      	movs	r2, #52	; 0x34
 8008342:	5c81      	ldrb	r1, [r0, r2]
 8008344:	2901      	cmp	r1, #1
 8008346:	d032      	beq.n	80083ae <HAL_ADC_Start_DMA+0x7e>
 8008348:	2101      	movs	r1, #1
 800834a:	5481      	strb	r1, [r0, r2]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800834c:	7e42      	ldrb	r2, [r0, #25]
 800834e:	2a01      	cmp	r2, #1
 8008350:	d004      	beq.n	800835c <HAL_ADC_Start_DMA+0x2c>
      tmp_hal_status = ADC_Enable(hadc);
 8008352:	f7ff fee9 	bl	8008128 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8008356:	2800      	cmp	r0, #0
 8008358:	d128      	bne.n	80083ac <HAL_ADC_Start_DMA+0x7c>
 800835a:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 800835c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800835e:	4915      	ldr	r1, [pc, #84]	; (80083b4 <HAL_ADC_Start_DMA+0x84>)
 8008360:	4011      	ands	r1, r2
 8008362:	2280      	movs	r2, #128	; 0x80
 8008364:	0052      	lsls	r2, r2, #1
 8008366:	430a      	orrs	r2, r1
 8008368:	63a2      	str	r2, [r4, #56]	; 0x38
      __HAL_UNLOCK(hadc);
 800836a:	2134      	movs	r1, #52	; 0x34
      ADC_CLEAR_ERRORCODE(hadc);
 800836c:	2200      	movs	r2, #0
 800836e:	63e2      	str	r2, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 8008370:	5462      	strb	r2, [r4, r1]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008372:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008374:	4a10      	ldr	r2, [pc, #64]	; (80083b8 <HAL_ADC_Start_DMA+0x88>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008376:	3924      	subs	r1, #36	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008378:	6282      	str	r2, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800837a:	4a10      	ldr	r2, [pc, #64]	; (80083bc <HAL_ADC_Start_DMA+0x8c>)
 800837c:	62c2      	str	r2, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800837e:	4a10      	ldr	r2, [pc, #64]	; (80083c0 <HAL_ADC_Start_DMA+0x90>)
 8008380:	6302      	str	r2, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008382:	221c      	movs	r2, #28
 8008384:	601a      	str	r2, [r3, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008386:	685a      	ldr	r2, [r3, #4]
 8008388:	430a      	orrs	r2, r1
 800838a:	605a      	str	r2, [r3, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800838c:	68da      	ldr	r2, [r3, #12]
 800838e:	390f      	subs	r1, #15
 8008390:	430a      	orrs	r2, r1
 8008392:	60da      	str	r2, [r3, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008394:	3340      	adds	r3, #64	; 0x40
 8008396:	0019      	movs	r1, r3
 8008398:	002a      	movs	r2, r5
 800839a:	0033      	movs	r3, r6
 800839c:	f000 f9cc 	bl	8008738 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80083a0:	2104      	movs	r1, #4
 80083a2:	2000      	movs	r0, #0
 80083a4:	6822      	ldr	r2, [r4, #0]
 80083a6:	6893      	ldr	r3, [r2, #8]
 80083a8:	430b      	orrs	r3, r1
 80083aa:	6093      	str	r3, [r2, #8]
}
 80083ac:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = HAL_BUSY;
 80083ae:	2002      	movs	r0, #2
 80083b0:	e7fc      	b.n	80083ac <HAL_ADC_Start_DMA+0x7c>
 80083b2:	46c0      	nop			; (mov r8, r8)
 80083b4:	fffff0fe 	.word	0xfffff0fe
 80083b8:	080083c9 	.word	0x080083c9
 80083bc:	08008441 	.word	0x08008441
 80083c0:	08008451 	.word	0x08008451

080083c4 <HAL_ADC_ConvCpltCallback>:
 80083c4:	4770      	bx	lr
 80083c6:	46c0      	nop			; (mov r8, r8)

080083c8 <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80083c8:	2150      	movs	r1, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80083ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80083cc:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80083ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083d0:	4211      	tst	r1, r2
 80083d2:	d10e      	bne.n	80083f2 <ADC_DMAConvCplt+0x2a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80083d4:	2280      	movs	r2, #128	; 0x80
 80083d6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80083d8:	0092      	lsls	r2, r2, #2
 80083da:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80083dc:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80083de:	639a      	str	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	0109      	lsls	r1, r1, #4
 80083e4:	68d0      	ldr	r0, [r2, #12]
 80083e6:	4208      	tst	r0, r1
 80083e8:	d007      	beq.n	80083fa <ADC_DMAConvCplt+0x32>

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80083ea:	0018      	movs	r0, r3
 80083ec:	f7ff ffea 	bl	80083c4 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80083f0:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80083f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f6:	4798      	blx	r3
}
 80083f8:	e7fa      	b.n	80083f0 <ADC_DMAConvCplt+0x28>
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80083fa:	7e99      	ldrb	r1, [r3, #26]
 80083fc:	2900      	cmp	r1, #0
 80083fe:	d1f4      	bne.n	80083ea <ADC_DMAConvCplt+0x22>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8008400:	6811      	ldr	r1, [r2, #0]
 8008402:	0709      	lsls	r1, r1, #28
 8008404:	d5f1      	bpl.n	80083ea <ADC_DMAConvCplt+0x22>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8008406:	6891      	ldr	r1, [r2, #8]
 8008408:	0749      	lsls	r1, r1, #29
 800840a:	d40b      	bmi.n	8008424 <ADC_DMAConvCplt+0x5c>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800840c:	200c      	movs	r0, #12
 800840e:	6851      	ldr	r1, [r2, #4]
 8008410:	4381      	bics	r1, r0
 8008412:	6051      	str	r1, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8008414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008416:	4908      	ldr	r1, [pc, #32]	; (8008438 <ADC_DMAConvCplt+0x70>)
 8008418:	400a      	ands	r2, r1
 800841a:	3104      	adds	r1, #4
 800841c:	31ff      	adds	r1, #255	; 0xff
 800841e:	430a      	orrs	r2, r1
 8008420:	639a      	str	r2, [r3, #56]	; 0x38
 8008422:	e7e2      	b.n	80083ea <ADC_DMAConvCplt+0x22>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008424:	2120      	movs	r1, #32
 8008426:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008428:	430a      	orrs	r2, r1
 800842a:	639a      	str	r2, [r3, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800842c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800842e:	391f      	subs	r1, #31
 8008430:	430a      	orrs	r2, r1
 8008432:	63da      	str	r2, [r3, #60]	; 0x3c
 8008434:	e7d9      	b.n	80083ea <ADC_DMAConvCplt+0x22>
 8008436:	46c0      	nop			; (mov r8, r8)
 8008438:	fffffefe 	.word	0xfffffefe

0800843c <HAL_ADC_ConvHalfCpltCallback>:
 800843c:	4770      	bx	lr
 800843e:	46c0      	nop			; (mov r8, r8)

08008440 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008440:	b510      	push	{r4, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8008442:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8008444:	f7ff fffa 	bl	800843c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008448:	bd10      	pop	{r4, pc}
 800844a:	46c0      	nop			; (mov r8, r8)

0800844c <HAL_ADC_ErrorCallback>:
 800844c:	4770      	bx	lr
 800844e:	46c0      	nop			; (mov r8, r8)

08008450 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008450:	2240      	movs	r2, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008452:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8008454:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008456:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008458:	4313      	orrs	r3, r2
 800845a:	6383      	str	r3, [r0, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800845c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800845e:	3a3c      	subs	r2, #60	; 0x3c
 8008460:	4313      	orrs	r3, r2
 8008462:	63c3      	str	r3, [r0, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8008464:	f7ff fff2 	bl	800844c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008468:	bd10      	pop	{r4, pc}
 800846a:	46c0      	nop			; (mov r8, r8)

0800846c <HAL_ADC_ConfigChannel>:
{
 800846c:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800846e:	2300      	movs	r3, #0
{
 8008470:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8008472:	2234      	movs	r2, #52	; 0x34
{
 8008474:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8008476:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8008478:	5ca3      	ldrb	r3, [r4, r2]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800847a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  __HAL_LOCK(hadc);
 800847c:	2b01      	cmp	r3, #1
 800847e:	d051      	beq.n	8008524 <HAL_ADC_ConfigChannel+0xb8>
 8008480:	2301      	movs	r3, #1
 8008482:	54a3      	strb	r3, [r4, r2]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8008484:	6822      	ldr	r2, [r4, #0]
 8008486:	6895      	ldr	r5, [r2, #8]
 8008488:	076d      	lsls	r5, r5, #29
 800848a:	d509      	bpl.n	80084a0 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800848c:	2220      	movs	r2, #32
    tmp_hal_status = HAL_ERROR;
 800848e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008490:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008492:	4313      	orrs	r3, r2
 8008494:	63a3      	str	r3, [r4, #56]	; 0x38
  __HAL_UNLOCK(hadc);
 8008496:	2334      	movs	r3, #52	; 0x34
 8008498:	2200      	movs	r2, #0
 800849a:	54e2      	strb	r2, [r4, r3]
}
 800849c:	b002      	add	sp, #8
 800849e:	bd70      	pop	{r4, r5, r6, pc}
    if (sConfig->Rank != ADC_RANK_NONE)
 80084a0:	4d2d      	ldr	r5, [pc, #180]	; (8008558 <HAL_ADC_ConfigChannel+0xec>)
 80084a2:	684e      	ldr	r6, [r1, #4]
 80084a4:	42ae      	cmp	r6, r5
 80084a6:	d028      	beq.n	80084fa <HAL_ADC_ConfigChannel+0x8e>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80084a8:	680d      	ldr	r5, [r1, #0]
 80084aa:	6a96      	ldr	r6, [r2, #40]	; 0x28
 80084ac:	40ab      	lsls	r3, r5
 80084ae:	4333      	orrs	r3, r6
 80084b0:	6293      	str	r3, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80084b2:	2380      	movs	r3, #128	; 0x80
 80084b4:	055b      	lsls	r3, r3, #21
 80084b6:	4298      	cmp	r0, r3
 80084b8:	d00f      	beq.n	80084da <HAL_ADC_ConfigChannel+0x6e>
 80084ba:	3801      	subs	r0, #1
 80084bc:	2806      	cmp	r0, #6
 80084be:	d90c      	bls.n	80084da <HAL_ADC_ConfigChannel+0x6e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80084c0:	2307      	movs	r3, #7
 80084c2:	6888      	ldr	r0, [r1, #8]
 80084c4:	6951      	ldr	r1, [r2, #20]
 80084c6:	4019      	ands	r1, r3
 80084c8:	4288      	cmp	r0, r1
 80084ca:	d006      	beq.n	80084da <HAL_ADC_ConfigChannel+0x6e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80084cc:	6951      	ldr	r1, [r2, #20]
 80084ce:	4399      	bics	r1, r3
 80084d0:	6151      	str	r1, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80084d2:	6951      	ldr	r1, [r2, #20]
 80084d4:	4003      	ands	r3, r0
 80084d6:	430b      	orrs	r3, r1
 80084d8:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80084da:	002b      	movs	r3, r5
 80084dc:	3b10      	subs	r3, #16
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d901      	bls.n	80084e6 <HAL_ADC_ConfigChannel+0x7a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80084e2:	2000      	movs	r0, #0
 80084e4:	e7d7      	b.n	8008496 <HAL_ADC_ConfigChannel+0x2a>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80084e6:	4b1d      	ldr	r3, [pc, #116]	; (800855c <HAL_ADC_ConfigChannel+0xf0>)
 80084e8:	6819      	ldr	r1, [r3, #0]
 80084ea:	2d10      	cmp	r5, #16
 80084ec:	d01c      	beq.n	8008528 <HAL_ADC_ConfigChannel+0xbc>
 80084ee:	2280      	movs	r2, #128	; 0x80
 80084f0:	03d2      	lsls	r2, r2, #15
 80084f2:	430a      	orrs	r2, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80084f4:	2000      	movs	r0, #0
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80084f6:	601a      	str	r2, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80084f8:	e7cd      	b.n	8008496 <HAL_ADC_ConfigChannel+0x2a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80084fa:	6809      	ldr	r1, [r1, #0]
 80084fc:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80084fe:	408b      	lsls	r3, r1
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008500:	3910      	subs	r1, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8008502:	4398      	bics	r0, r3
 8008504:	6290      	str	r0, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008506:	2901      	cmp	r1, #1
 8008508:	d8eb      	bhi.n	80084e2 <HAL_ADC_ConfigChannel+0x76>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800850a:	424b      	negs	r3, r1
 800850c:	414b      	adcs	r3, r1
 800850e:	4259      	negs	r1, r3
 8008510:	4b13      	ldr	r3, [pc, #76]	; (8008560 <HAL_ADC_ConfigChannel+0xf4>)
 8008512:	4a12      	ldr	r2, [pc, #72]	; (800855c <HAL_ADC_ConfigChannel+0xf0>)
 8008514:	469c      	mov	ip, r3
 8008516:	6810      	ldr	r0, [r2, #0]
 8008518:	0589      	lsls	r1, r1, #22
 800851a:	4461      	add	r1, ip
 800851c:	4001      	ands	r1, r0
 800851e:	6011      	str	r1, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008520:	2000      	movs	r0, #0
 8008522:	e7b8      	b.n	8008496 <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 8008524:	2002      	movs	r0, #2
 8008526:	e7b9      	b.n	800849c <HAL_ADC_ConfigChannel+0x30>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8008528:	2280      	movs	r2, #128	; 0x80
 800852a:	0412      	lsls	r2, r2, #16
 800852c:	430a      	orrs	r2, r1
 800852e:	601a      	str	r2, [r3, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008530:	4b0c      	ldr	r3, [pc, #48]	; (8008564 <HAL_ADC_ConfigChannel+0xf8>)
 8008532:	490d      	ldr	r1, [pc, #52]	; (8008568 <HAL_ADC_ConfigChannel+0xfc>)
 8008534:	6818      	ldr	r0, [r3, #0]
 8008536:	f7f7 fdf1 	bl	800011c <__udivsi3>
 800853a:	0083      	lsls	r3, r0, #2
 800853c:	181b      	adds	r3, r3, r0
 800853e:	005b      	lsls	r3, r3, #1
 8008540:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8008542:	9b01      	ldr	r3, [sp, #4]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d0cc      	beq.n	80084e2 <HAL_ADC_ConfigChannel+0x76>
            wait_loop_index--;
 8008548:	9b01      	ldr	r3, [sp, #4]
 800854a:	3b01      	subs	r3, #1
 800854c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800854e:	9b01      	ldr	r3, [sp, #4]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1f9      	bne.n	8008548 <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008554:	2000      	movs	r0, #0
 8008556:	e79e      	b.n	8008496 <HAL_ADC_ConfigChannel+0x2a>
 8008558:	00001001 	.word	0x00001001
 800855c:	40012708 	.word	0x40012708
 8008560:	ffbfffff 	.word	0xffbfffff
 8008564:	20000000 	.word	0x20000000
 8008568:	000f4240 	.word	0x000f4240

0800856c <HAL_ADCEx_Calibration_Start>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800856c:	2334      	movs	r3, #52	; 0x34
{
 800856e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8008570:	5cc2      	ldrb	r2, [r0, r3]
{
 8008572:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8008574:	2a01      	cmp	r2, #1
 8008576:	d04e      	beq.n	8008616 <HAL_ADCEx_Calibration_Start+0xaa>
 8008578:	2201      	movs	r2, #1
 800857a:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800857c:	6803      	ldr	r3, [r0, #0]
 800857e:	3202      	adds	r2, #2
 8008580:	6899      	ldr	r1, [r3, #8]
 8008582:	400a      	ands	r2, r1
 8008584:	2a01      	cmp	r2, #1
 8008586:	d105      	bne.n	8008594 <HAL_ADCEx_Calibration_Start+0x28>
 8008588:	6819      	ldr	r1, [r3, #0]
 800858a:	420a      	tst	r2, r1
 800858c:	d12e      	bne.n	80085ec <HAL_ADCEx_Calibration_Start+0x80>
 800858e:	68da      	ldr	r2, [r3, #12]
 8008590:	0412      	lsls	r2, r2, #16
 8008592:	d42b      	bmi.n	80085ec <HAL_ADCEx_Calibration_Start+0x80>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8008594:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008596:	4921      	ldr	r1, [pc, #132]	; (800861c <HAL_ADCEx_Calibration_Start+0xb0>)
 8008598:	400a      	ands	r2, r1
 800859a:	3106      	adds	r1, #6
 800859c:	31ff      	adds	r1, #255	; 0xff
 800859e:	430a      	orrs	r2, r1
 80085a0:	63a2      	str	r2, [r4, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80085a2:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80085a4:	68da      	ldr	r2, [r3, #12]
 80085a6:	3101      	adds	r1, #1
 80085a8:	438a      	bics	r2, r1
 80085aa:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80085ac:	2280      	movs	r2, #128	; 0x80
 80085ae:	6899      	ldr	r1, [r3, #8]
 80085b0:	0612      	lsls	r2, r2, #24
 80085b2:	430a      	orrs	r2, r1
 80085b4:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80085b6:	f7ff fd9f 	bl	80080f8 <HAL_GetTick>
 80085ba:	0005      	movs	r5, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80085bc:	6823      	ldr	r3, [r4, #0]
 80085be:	689a      	ldr	r2, [r3, #8]
 80085c0:	2a00      	cmp	r2, #0
 80085c2:	da1c      	bge.n	80085fe <HAL_ADCEx_Calibration_Start+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80085c4:	f7ff fd98 	bl	80080f8 <HAL_GetTick>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80085c8:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80085ca:	1b40      	subs	r0, r0, r5
 80085cc:	2802      	cmp	r0, #2
 80085ce:	d9f6      	bls.n	80085be <HAL_ADCEx_Calibration_Start+0x52>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80085d0:	689a      	ldr	r2, [r3, #8]
 80085d2:	2a00      	cmp	r2, #0
 80085d4:	daf3      	bge.n	80085be <HAL_ADCEx_Calibration_Start+0x52>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80085d6:	2212      	movs	r2, #18
 80085d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);

          return HAL_ERROR;
 80085da:	2001      	movs	r0, #1
          ADC_STATE_CLR_SET(hadc->State,
 80085dc:	4393      	bics	r3, r2
 80085de:	3a02      	subs	r2, #2
 80085e0:	4313      	orrs	r3, r2
 80085e2:	63a3      	str	r3, [r4, #56]	; 0x38
          __HAL_UNLOCK(hadc);
 80085e4:	2200      	movs	r2, #0
 80085e6:	2334      	movs	r3, #52	; 0x34
 80085e8:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 80085ea:	e007      	b.n	80085fc <HAL_ADCEx_Calibration_Start+0x90>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80085ec:	2220      	movs	r2, #32
    
    tmp_hal_status = HAL_ERROR;
 80085ee:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80085f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80085f2:	4313      	orrs	r3, r2
 80085f4:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80085f6:	2334      	movs	r3, #52	; 0x34
 80085f8:	2200      	movs	r2, #0
 80085fa:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 80085fc:	bd70      	pop	{r4, r5, r6, pc}
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80085fe:	2203      	movs	r2, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8008600:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8008602:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8008604:	430e      	orrs	r6, r1
 8008606:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8008608:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800860a:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 800860c:	4393      	bics	r3, r2
 800860e:	3a02      	subs	r2, #2
 8008610:	4313      	orrs	r3, r2
 8008612:	63a3      	str	r3, [r4, #56]	; 0x38
 8008614:	e7ef      	b.n	80085f6 <HAL_ADCEx_Calibration_Start+0x8a>
  __HAL_LOCK(hadc);
 8008616:	2002      	movs	r0, #2
 8008618:	e7f0      	b.n	80085fc <HAL_ADCEx_Calibration_Start+0x90>
 800861a:	46c0      	nop			; (mov r8, r8)
 800861c:	fffffefd 	.word	0xfffffefd

08008620 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008620:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8008622:	2800      	cmp	r0, #0
 8008624:	db14      	blt.n	8008650 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008626:	4b15      	ldr	r3, [pc, #84]	; (800867c <HAL_NVIC_SetPriority+0x5c>)
 8008628:	2203      	movs	r2, #3
 800862a:	469c      	mov	ip, r3
 800862c:	23ff      	movs	r3, #255	; 0xff
 800862e:	0884      	lsrs	r4, r0, #2
 8008630:	4010      	ands	r0, r2
 8008632:	001a      	movs	r2, r3
 8008634:	26c0      	movs	r6, #192	; 0xc0
 8008636:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008638:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800863a:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800863c:	400b      	ands	r3, r1
 800863e:	4083      	lsls	r3, r0
 8008640:	00a4      	lsls	r4, r4, #2
 8008642:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008644:	00b6      	lsls	r6, r6, #2
 8008646:	59a5      	ldr	r5, [r4, r6]
 8008648:	4395      	bics	r5, r2
 800864a:	432b      	orrs	r3, r5
 800864c:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800864e:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008650:	4a0b      	ldr	r2, [pc, #44]	; (8008680 <HAL_NVIC_SetPriority+0x60>)
 8008652:	230f      	movs	r3, #15
 8008654:	4694      	mov	ip, r2
 8008656:	2203      	movs	r2, #3
 8008658:	4003      	ands	r3, r0
 800865a:	4010      	ands	r0, r2
 800865c:	32fc      	adds	r2, #252	; 0xfc
 800865e:	0015      	movs	r5, r2
 8008660:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008662:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008664:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008666:	400a      	ands	r2, r1
 8008668:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800866a:	3b08      	subs	r3, #8
 800866c:	089b      	lsrs	r3, r3, #2
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	4463      	add	r3, ip
 8008672:	69dc      	ldr	r4, [r3, #28]
 8008674:	43ac      	bics	r4, r5
 8008676:	4322      	orrs	r2, r4
 8008678:	61da      	str	r2, [r3, #28]
 800867a:	e7e8      	b.n	800864e <HAL_NVIC_SetPriority+0x2e>
 800867c:	e000e100 	.word	0xe000e100
 8008680:	e000ed00 	.word	0xe000ed00

08008684 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008684:	2800      	cmp	r0, #0
 8008686:	db05      	blt.n	8008694 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008688:	231f      	movs	r3, #31
 800868a:	4018      	ands	r0, r3
 800868c:	3b1e      	subs	r3, #30
 800868e:	4083      	lsls	r3, r0
 8008690:	4a01      	ldr	r2, [pc, #4]	; (8008698 <HAL_NVIC_EnableIRQ+0x14>)
 8008692:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8008694:	4770      	bx	lr
 8008696:	46c0      	nop			; (mov r8, r8)
 8008698:	e000e100 	.word	0xe000e100

0800869c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800869c:	2280      	movs	r2, #128	; 0x80
 800869e:	1e43      	subs	r3, r0, #1
 80086a0:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80086a2:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d20e      	bcs.n	80086c6 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80086a8:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80086aa:	4a07      	ldr	r2, [pc, #28]	; (80086c8 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80086ac:	4807      	ldr	r0, [pc, #28]	; (80086cc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80086ae:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80086b0:	6a03      	ldr	r3, [r0, #32]
 80086b2:	0609      	lsls	r1, r1, #24
 80086b4:	021b      	lsls	r3, r3, #8
 80086b6:	0a1b      	lsrs	r3, r3, #8
 80086b8:	430b      	orrs	r3, r1
 80086ba:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80086bc:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80086be:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80086c0:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80086c2:	3307      	adds	r3, #7
 80086c4:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80086c6:	4770      	bx	lr
 80086c8:	e000e010 	.word	0xe000e010
 80086cc:	e000ed00 	.word	0xe000ed00

080086d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80086d0:	b570      	push	{r4, r5, r6, lr}
 80086d2:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80086d4:	d027      	beq.n	8008726 <HAL_DMA_Init+0x56>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80086d6:	2521      	movs	r5, #33	; 0x21
 80086d8:	2302      	movs	r3, #2
 80086da:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80086dc:	6800      	ldr	r0, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80086de:	4a13      	ldr	r2, [pc, #76]	; (800872c <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 80086e0:	6803      	ldr	r3, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80086e2:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80086e4:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 80086e6:	6863      	ldr	r3, [r4, #4]
 80086e8:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80086ea:	68e1      	ldr	r1, [r4, #12]
 80086ec:	430b      	orrs	r3, r1
 80086ee:	6921      	ldr	r1, [r4, #16]
 80086f0:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80086f2:	6961      	ldr	r1, [r4, #20]
 80086f4:	430b      	orrs	r3, r1
 80086f6:	69a1      	ldr	r1, [r4, #24]
 80086f8:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80086fa:	69e1      	ldr	r1, [r4, #28]
 80086fc:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 80086fe:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8008700:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008702:	4b0b      	ldr	r3, [pc, #44]	; (8008730 <HAL_DMA_Init+0x60>)
 8008704:	2114      	movs	r1, #20
 8008706:	469c      	mov	ip, r3
 8008708:	4460      	add	r0, ip
 800870a:	f7f7 fd07 	bl	800011c <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 800870e:	4b09      	ldr	r3, [pc, #36]	; (8008734 <HAL_DMA_Init+0x64>)
  hdma->State = HAL_DMA_STATE_READY;
 8008710:	2201      	movs	r2, #1
  hdma->DmaBaseAddress = DMA1;
 8008712:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008714:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008716:	0080      	lsls	r0, r0, #2
 8008718:	6420      	str	r0, [r4, #64]	; 0x40
  return HAL_OK;
 800871a:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800871c:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 800871e:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8008720:	321f      	adds	r2, #31
 8008722:	54a3      	strb	r3, [r4, r2]
}  
 8008724:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8008726:	2001      	movs	r0, #1
 8008728:	e7fc      	b.n	8008724 <HAL_DMA_Init+0x54>
 800872a:	46c0      	nop			; (mov r8, r8)
 800872c:	ffffc00f 	.word	0xffffc00f
 8008730:	bffdfff8 	.word	0xbffdfff8
 8008734:	40020000 	.word	0x40020000

08008738 <HAL_DMA_Start_IT>:
{
 8008738:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 800873a:	2420      	movs	r4, #32
 800873c:	5d05      	ldrb	r5, [r0, r4]
 800873e:	2d01      	cmp	r5, #1
 8008740:	d037      	beq.n	80087b2 <HAL_DMA_Start_IT+0x7a>
 8008742:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8008744:	2721      	movs	r7, #33	; 0x21
  __HAL_LOCK(hdma);
 8008746:	5505      	strb	r5, [r0, r4]
  if(HAL_DMA_STATE_READY == hdma->State)
 8008748:	5dc5      	ldrb	r5, [r0, r7]
 800874a:	b2ee      	uxtb	r6, r5
 800874c:	2d01      	cmp	r5, #1
 800874e:	d003      	beq.n	8008758 <HAL_DMA_Start_IT+0x20>
    __HAL_UNLOCK(hdma); 
 8008750:	2300      	movs	r3, #0
 8008752:	5503      	strb	r3, [r0, r4]
    status = HAL_BUSY;
 8008754:	2002      	movs	r0, #2
} 
 8008756:	bdf0      	pop	{r4, r5, r6, r7, pc}
  	hdma->State = HAL_DMA_STATE_BUSY;
 8008758:	3c1e      	subs	r4, #30
 800875a:	55c4      	strb	r4, [r0, r7]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800875c:	2400      	movs	r4, #0
 800875e:	6384      	str	r4, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8008760:	6804      	ldr	r4, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8008762:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8008764:	6825      	ldr	r5, [r4, #0]
 8008766:	43b5      	bics	r5, r6
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8008768:	40be      	lsls	r6, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800876a:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800876c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800876e:	606e      	str	r6, [r5, #4]
  hdma->Instance->CNDTR = DataLength;
 8008770:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008772:	6843      	ldr	r3, [r0, #4]
 8008774:	2b10      	cmp	r3, #16
 8008776:	d00e      	beq.n	8008796 <HAL_DMA_Start_IT+0x5e>
    if(NULL != hdma->XferHalfCpltCallback )
 8008778:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = SrcAddress;
 800877a:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 800877c:	60e2      	str	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00e      	beq.n	80087a0 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8008782:	220e      	movs	r2, #14
 8008784:	6823      	ldr	r3, [r4, #0]
 8008786:	4313      	orrs	r3, r2
 8008788:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800878a:	2201      	movs	r2, #1
 800878c:	6823      	ldr	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800878e:	2000      	movs	r0, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8008790:	4313      	orrs	r3, r2
 8008792:	6023      	str	r3, [r4, #0]
 8008794:	e7df      	b.n	8008756 <HAL_DMA_Start_IT+0x1e>
    if(NULL != hdma->XferHalfCpltCallback )
 8008796:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 8008798:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800879a:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1f0      	bne.n	8008782 <HAL_DMA_Start_IT+0x4a>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80087a0:	220a      	movs	r2, #10
 80087a2:	6823      	ldr	r3, [r4, #0]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80087a8:	6823      	ldr	r3, [r4, #0]
 80087aa:	3a06      	subs	r2, #6
 80087ac:	4393      	bics	r3, r2
 80087ae:	6023      	str	r3, [r4, #0]
 80087b0:	e7eb      	b.n	800878a <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 80087b2:	2002      	movs	r0, #2
 80087b4:	e7cf      	b.n	8008756 <HAL_DMA_Start_IT+0x1e>
 80087b6:	46c0      	nop			; (mov r8, r8)

080087b8 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80087b8:	2321      	movs	r3, #33	; 0x21
{
 80087ba:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80087bc:	5cc2      	ldrb	r2, [r0, r3]
 80087be:	2a02      	cmp	r2, #2
 80087c0:	d006      	beq.n	80087d0 <HAL_DMA_Abort+0x18>
    __HAL_UNLOCK(hdma);
 80087c2:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80087c4:	3b1d      	subs	r3, #29
 80087c6:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80087c8:	331c      	adds	r3, #28
 80087ca:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 80087cc:	2001      	movs	r0, #1
}
 80087ce:	bd30      	pop	{r4, r5, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80087d0:	240e      	movs	r4, #14
 80087d2:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80087d4:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80087d6:	6811      	ldr	r1, [r2, #0]
 80087d8:	43a1      	bics	r1, r4
 80087da:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80087dc:	2101      	movs	r1, #1
 80087de:	6814      	ldr	r4, [r2, #0]
 80087e0:	438c      	bics	r4, r1
 80087e2:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80087e4:	000c      	movs	r4, r1
 80087e6:	40ac      	lsls	r4, r5
 80087e8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80087ea:	6054      	str	r4, [r2, #4]
  hdma->State = HAL_DMA_STATE_READY; 
 80087ec:	54c1      	strb	r1, [r0, r3]
  __HAL_UNLOCK(hdma);
 80087ee:	2200      	movs	r2, #0
 80087f0:	2320      	movs	r3, #32
 80087f2:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 80087f4:	2000      	movs	r0, #0
 80087f6:	e7ea      	b.n	80087ce <HAL_DMA_Abort+0x16>

080087f8 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80087f8:	2321      	movs	r3, #33	; 0x21
{  
 80087fa:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80087fc:	5cc2      	ldrb	r2, [r0, r3]
 80087fe:	2a02      	cmp	r2, #2
 8008800:	d003      	beq.n	800880a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008802:	3b1d      	subs	r3, #29
 8008804:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8008806:	2001      	movs	r0, #1
}
 8008808:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800880a:	240e      	movs	r4, #14
 800880c:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800880e:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8008810:	6811      	ldr	r1, [r2, #0]
 8008812:	43a1      	bics	r1, r4
 8008814:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8008816:	2101      	movs	r1, #1
 8008818:	6814      	ldr	r4, [r2, #0]
 800881a:	438c      	bics	r4, r1
 800881c:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800881e:	000c      	movs	r4, r1
 8008820:	40ac      	lsls	r4, r5
 8008822:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008824:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8008826:	54c1      	strb	r1, [r0, r3]
    __HAL_UNLOCK(hdma);
 8008828:	2200      	movs	r2, #0
 800882a:	2320      	movs	r3, #32
 800882c:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 800882e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008830:	2b00      	cmp	r3, #0
 8008832:	d002      	beq.n	800883a <HAL_DMA_Abort_IT+0x42>
      hdma->XferAbortCallback(hdma);
 8008834:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8008836:	2000      	movs	r0, #0
 8008838:	e7e6      	b.n	8008808 <HAL_DMA_Abort_IT+0x10>
 800883a:	2000      	movs	r0, #0
 800883c:	e7e4      	b.n	8008808 <HAL_DMA_Abort_IT+0x10>
 800883e:	46c0      	nop			; (mov r8, r8)

08008840 <HAL_DMA_IRQHandler>:
{
 8008840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8008842:	2404      	movs	r4, #4
 8008844:	0026      	movs	r6, r4
 8008846:	6c03      	ldr	r3, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008848:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800884a:	409e      	lsls	r6, r3
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800884c:	682a      	ldr	r2, [r5, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800884e:	6801      	ldr	r1, [r0, #0]
 8008850:	680f      	ldr	r7, [r1, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8008852:	4232      	tst	r2, r6
 8008854:	d00d      	beq.n	8008872 <HAL_DMA_IRQHandler+0x32>
 8008856:	423c      	tst	r4, r7
 8008858:	d00b      	beq.n	8008872 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800885a:	680b      	ldr	r3, [r1, #0]
 800885c:	069b      	lsls	r3, r3, #26
 800885e:	d402      	bmi.n	8008866 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8008860:	680b      	ldr	r3, [r1, #0]
 8008862:	43a3      	bics	r3, r4
 8008864:	600b      	str	r3, [r1, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8008866:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8008868:	606e      	str	r6, [r5, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 800886a:	2b00      	cmp	r3, #0
 800886c:	d000      	beq.n	8008870 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 800886e:	4798      	blx	r3
}  
 8008870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8008872:	2402      	movs	r4, #2
 8008874:	0026      	movs	r6, r4
 8008876:	409e      	lsls	r6, r3
 8008878:	4232      	tst	r2, r6
 800887a:	d014      	beq.n	80088a6 <HAL_DMA_IRQHandler+0x66>
 800887c:	423c      	tst	r4, r7
 800887e:	d012      	beq.n	80088a6 <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008880:	680b      	ldr	r3, [r1, #0]
 8008882:	069b      	lsls	r3, r3, #26
 8008884:	d406      	bmi.n	8008894 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8008886:	220a      	movs	r2, #10
 8008888:	680b      	ldr	r3, [r1, #0]
 800888a:	4393      	bics	r3, r2
 800888c:	600b      	str	r3, [r1, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 800888e:	2321      	movs	r3, #33	; 0x21
 8008890:	3a09      	subs	r2, #9
 8008892:	54c2      	strb	r2, [r0, r3]
  	__HAL_UNLOCK(hdma);
 8008894:	2320      	movs	r3, #32
 8008896:	2200      	movs	r2, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8008898:	606e      	str	r6, [r5, #4]
  	__HAL_UNLOCK(hdma);
 800889a:	54c2      	strb	r2, [r0, r3]
  	if(hdma->XferCpltCallback != NULL)
 800889c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d0e6      	beq.n	8008870 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 80088a2:	4798      	blx	r3
 80088a4:	e7e4      	b.n	8008870 <HAL_DMA_IRQHandler+0x30>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80088a6:	2408      	movs	r4, #8
 80088a8:	0026      	movs	r6, r4
 80088aa:	409e      	lsls	r6, r3
 80088ac:	4232      	tst	r2, r6
 80088ae:	d0df      	beq.n	8008870 <HAL_DMA_IRQHandler+0x30>
 80088b0:	423c      	tst	r4, r7
 80088b2:	d0dd      	beq.n	8008870 <HAL_DMA_IRQHandler+0x30>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80088b4:	680a      	ldr	r2, [r1, #0]
 80088b6:	3406      	adds	r4, #6
 80088b8:	43a2      	bics	r2, r4
 80088ba:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80088bc:	2201      	movs	r2, #1
 80088be:	0011      	movs	r1, r2
 80088c0:	4099      	lsls	r1, r3
    hdma->State = HAL_DMA_STATE_READY;    
 80088c2:	2321      	movs	r3, #33	; 0x21
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80088c4:	6069      	str	r1, [r5, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80088c6:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 80088c8:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma); 
 80088ca:	2200      	movs	r2, #0
 80088cc:	3b01      	subs	r3, #1
 80088ce:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferErrorCallback != NULL)
 80088d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d0cc      	beq.n	8008870 <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 80088d6:	4798      	blx	r3
 80088d8:	e7ca      	b.n	8008870 <HAL_DMA_IRQHandler+0x30>
 80088da:	46c0      	nop			; (mov r8, r8)

080088dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80088dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088de:	464e      	mov	r6, r9
 80088e0:	46de      	mov	lr, fp
 80088e2:	4657      	mov	r7, sl
 80088e4:	4645      	mov	r5, r8
 80088e6:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80088e8:	680a      	ldr	r2, [r1, #0]
{
 80088ea:	4689      	mov	r9, r1
  uint32_t position = 0x00u;
 80088ec:	2300      	movs	r3, #0
{
 80088ee:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80088f0:	2a00      	cmp	r2, #0
 80088f2:	d075      	beq.n	80089e0 <HAL_GPIO_Init+0x104>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80088f4:	2101      	movs	r1, #1
 80088f6:	4688      	mov	r8, r1
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80088f8:	496c      	ldr	r1, [pc, #432]	; (8008aac <HAL_GPIO_Init+0x1d0>)
 80088fa:	468b      	mov	fp, r1
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80088fc:	4644      	mov	r4, r8
 80088fe:	0015      	movs	r5, r2
 8008900:	409c      	lsls	r4, r3
 8008902:	4025      	ands	r5, r4
 8008904:	9501      	str	r5, [sp, #4]
    if (iocurrent != 0x00u)
 8008906:	4222      	tst	r2, r4
 8008908:	d066      	beq.n	80089d8 <HAL_GPIO_Init+0xfc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800890a:	464d      	mov	r5, r9
 800890c:	2603      	movs	r6, #3
 800890e:	686d      	ldr	r5, [r5, #4]
 8008910:	402e      	ands	r6, r5
 8008912:	46aa      	mov	sl, r5
 8008914:	1e75      	subs	r5, r6, #1
 8008916:	2d01      	cmp	r5, #1
 8008918:	d969      	bls.n	80089ee <HAL_GPIO_Init+0x112>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800891a:	005f      	lsls	r7, r3, #1
 800891c:	2e03      	cmp	r6, #3
 800891e:	d000      	beq.n	8008922 <HAL_GPIO_Init+0x46>
 8008920:	e0a5      	b.n	8008a6e <HAL_GPIO_Init+0x192>
 8008922:	0034      	movs	r4, r6
 8008924:	40bc      	lsls	r4, r7
 8008926:	43e1      	mvns	r1, r4
 8008928:	9102      	str	r1, [sp, #8]
      temp = GPIOx->MODER;
 800892a:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800892c:	9d02      	ldr	r5, [sp, #8]
 800892e:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008930:	4325      	orrs	r5, r4
      GPIOx->MODER = temp;
 8008932:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008934:	25c0      	movs	r5, #192	; 0xc0
 8008936:	4654      	mov	r4, sl
 8008938:	02ad      	lsls	r5, r5, #10
 800893a:	422c      	tst	r4, r5
 800893c:	d04c      	beq.n	80089d8 <HAL_GPIO_Init+0xfc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800893e:	4659      	mov	r1, fp
 8008940:	698c      	ldr	r4, [r1, #24]
 8008942:	4641      	mov	r1, r8
 8008944:	430c      	orrs	r4, r1
 8008946:	4659      	mov	r1, fp
 8008948:	618c      	str	r4, [r1, #24]
 800894a:	698c      	ldr	r4, [r1, #24]
 800894c:	4641      	mov	r1, r8

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800894e:	2603      	movs	r6, #3
 8008950:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008952:	400c      	ands	r4, r1
 8008954:	4956      	ldr	r1, [pc, #344]	; (8008ab0 <HAL_GPIO_Init+0x1d4>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008956:	401e      	ands	r6, r3
 8008958:	468c      	mov	ip, r1
 800895a:	00b6      	lsls	r6, r6, #2
 800895c:	40b7      	lsls	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800895e:	2190      	movs	r1, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008960:	9405      	str	r4, [sp, #20]
 8008962:	9c05      	ldr	r4, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8008964:	089c      	lsrs	r4, r3, #2
 8008966:	00a4      	lsls	r4, r4, #2
 8008968:	4464      	add	r4, ip
 800896a:	68a5      	ldr	r5, [r4, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800896c:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800896e:	43bd      	bics	r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008970:	4288      	cmp	r0, r1
 8008972:	d00e      	beq.n	8008992 <HAL_GPIO_Init+0xb6>
 8008974:	4f4f      	ldr	r7, [pc, #316]	; (8008ab4 <HAL_GPIO_Init+0x1d8>)
 8008976:	42b8      	cmp	r0, r7
 8008978:	d100      	bne.n	800897c <HAL_GPIO_Init+0xa0>
 800897a:	e08e      	b.n	8008a9a <HAL_GPIO_Init+0x1be>
 800897c:	4f4e      	ldr	r7, [pc, #312]	; (8008ab8 <HAL_GPIO_Init+0x1dc>)
 800897e:	42b8      	cmp	r0, r7
 8008980:	d100      	bne.n	8008984 <HAL_GPIO_Init+0xa8>
 8008982:	e08e      	b.n	8008aa2 <HAL_GPIO_Init+0x1c6>
 8008984:	4f4d      	ldr	r7, [pc, #308]	; (8008abc <HAL_GPIO_Init+0x1e0>)
 8008986:	42b8      	cmp	r0, r7
 8008988:	d100      	bne.n	800898c <HAL_GPIO_Init+0xb0>
 800898a:	e082      	b.n	8008a92 <HAL_GPIO_Init+0x1b6>
 800898c:	2705      	movs	r7, #5
 800898e:	40b7      	lsls	r7, r6
 8008990:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008992:	494b      	ldr	r1, [pc, #300]	; (8008ac0 <HAL_GPIO_Init+0x1e4>)
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008994:	60a5      	str	r5, [r4, #8]
        temp = EXTI->IMR;
 8008996:	680c      	ldr	r4, [r1, #0]
        temp &= ~(iocurrent);
 8008998:	9901      	ldr	r1, [sp, #4]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800899a:	2580      	movs	r5, #128	; 0x80
        temp &= ~(iocurrent);
 800899c:	43ce      	mvns	r6, r1
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800899e:	4651      	mov	r1, sl
 80089a0:	026d      	lsls	r5, r5, #9
 80089a2:	4229      	tst	r1, r5
 80089a4:	d000      	beq.n	80089a8 <HAL_GPIO_Init+0xcc>
 80089a6:	e071      	b.n	8008a8c <HAL_GPIO_Init+0x1b0>
        temp &= ~(iocurrent);
 80089a8:	4034      	ands	r4, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80089aa:	4945      	ldr	r1, [pc, #276]	; (8008ac0 <HAL_GPIO_Init+0x1e4>)
 80089ac:	600c      	str	r4, [r1, #0]

        temp = EXTI->EMR;
 80089ae:	684c      	ldr	r4, [r1, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80089b0:	4651      	mov	r1, sl
 80089b2:	0389      	lsls	r1, r1, #14
 80089b4:	d467      	bmi.n	8008a86 <HAL_GPIO_Init+0x1aa>
        temp &= ~(iocurrent);
 80089b6:	4034      	ands	r4, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80089b8:	4941      	ldr	r1, [pc, #260]	; (8008ac0 <HAL_GPIO_Init+0x1e4>)
 80089ba:	604c      	str	r4, [r1, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80089bc:	688d      	ldr	r5, [r1, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80089be:	4651      	mov	r1, sl
 80089c0:	02c9      	lsls	r1, r1, #11
 80089c2:	d45d      	bmi.n	8008a80 <HAL_GPIO_Init+0x1a4>
        temp &= ~(iocurrent);
 80089c4:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80089c6:	493e      	ldr	r1, [pc, #248]	; (8008ac0 <HAL_GPIO_Init+0x1e4>)
 80089c8:	608d      	str	r5, [r1, #8]

        temp = EXTI->FTSR;
 80089ca:	68cc      	ldr	r4, [r1, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80089cc:	4651      	mov	r1, sl
 80089ce:	0289      	lsls	r1, r1, #10
 80089d0:	d452      	bmi.n	8008a78 <HAL_GPIO_Init+0x19c>
        temp &= ~(iocurrent);
 80089d2:	4034      	ands	r4, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80089d4:	493a      	ldr	r1, [pc, #232]	; (8008ac0 <HAL_GPIO_Init+0x1e4>)
 80089d6:	60cc      	str	r4, [r1, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80089d8:	0014      	movs	r4, r2
      }
    }

    position++;
 80089da:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80089dc:	40dc      	lsrs	r4, r3
 80089de:	d18d      	bne.n	80088fc <HAL_GPIO_Init+0x20>
  } 
}
 80089e0:	b007      	add	sp, #28
 80089e2:	bcf0      	pop	{r4, r5, r6, r7}
 80089e4:	46bb      	mov	fp, r7
 80089e6:	46b2      	mov	sl, r6
 80089e8:	46a9      	mov	r9, r5
 80089ea:	46a0      	mov	r8, r4
 80089ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 80089ee:	6885      	ldr	r5, [r0, #8]
 80089f0:	005f      	lsls	r7, r3, #1
 80089f2:	9503      	str	r5, [sp, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80089f4:	2503      	movs	r5, #3
 80089f6:	40bd      	lsls	r5, r7
 80089f8:	46ac      	mov	ip, r5
 80089fa:	43e9      	mvns	r1, r5
 80089fc:	9102      	str	r1, [sp, #8]
 80089fe:	4661      	mov	r1, ip
 8008a00:	9d03      	ldr	r5, [sp, #12]
 8008a02:	438d      	bics	r5, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008a04:	4649      	mov	r1, r9
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8008a06:	9503      	str	r5, [sp, #12]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008a08:	68cd      	ldr	r5, [r1, #12]
 8008a0a:	40bd      	lsls	r5, r7
 8008a0c:	46ac      	mov	ip, r5
 8008a0e:	4661      	mov	r1, ip
 8008a10:	9d03      	ldr	r5, [sp, #12]
 8008a12:	430d      	orrs	r5, r1
        GPIOx->OSPEEDR = temp;
 8008a14:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8008a16:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008a18:	000d      	movs	r5, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008a1a:	4651      	mov	r1, sl
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008a1c:	43a5      	bics	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008a1e:	090c      	lsrs	r4, r1, #4
 8008a20:	4641      	mov	r1, r8
 8008a22:	400c      	ands	r4, r1
 8008a24:	409c      	lsls	r4, r3
 8008a26:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8008a28:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8008a2a:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8008a2c:	9902      	ldr	r1, [sp, #8]
 8008a2e:	400c      	ands	r4, r1
 8008a30:	46a4      	mov	ip, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008a32:	464c      	mov	r4, r9
 8008a34:	68a4      	ldr	r4, [r4, #8]
 8008a36:	4665      	mov	r5, ip
 8008a38:	40bc      	lsls	r4, r7
 8008a3a:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8008a3c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008a3e:	0034      	movs	r4, r6
 8008a40:	40bc      	lsls	r4, r7
 8008a42:	2e02      	cmp	r6, #2
 8008a44:	d000      	beq.n	8008a48 <HAL_GPIO_Init+0x16c>
 8008a46:	e770      	b.n	800892a <HAL_GPIO_Init+0x4e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008a48:	2707      	movs	r7, #7
 8008a4a:	250f      	movs	r5, #15
 8008a4c:	401f      	ands	r7, r3
 8008a4e:	00bf      	lsls	r7, r7, #2
 8008a50:	40bd      	lsls	r5, r7
        temp = GPIOx->AFR[position >> 3u];
 8008a52:	08de      	lsrs	r6, r3, #3
 8008a54:	00b6      	lsls	r6, r6, #2
 8008a56:	1986      	adds	r6, r0, r6
 8008a58:	6a31      	ldr	r1, [r6, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008a5a:	43a9      	bics	r1, r5
 8008a5c:	468c      	mov	ip, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008a5e:	4649      	mov	r1, r9
 8008a60:	6909      	ldr	r1, [r1, #16]
 8008a62:	40b9      	lsls	r1, r7
 8008a64:	000f      	movs	r7, r1
 8008a66:	4661      	mov	r1, ip
 8008a68:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 8008a6a:	6237      	str	r7, [r6, #32]
 8008a6c:	e75d      	b.n	800892a <HAL_GPIO_Init+0x4e>
 8008a6e:	2503      	movs	r5, #3
 8008a70:	40bd      	lsls	r5, r7
 8008a72:	43e9      	mvns	r1, r5
 8008a74:	9102      	str	r1, [sp, #8]
 8008a76:	e7d8      	b.n	8008a2a <HAL_GPIO_Init+0x14e>
          temp |= iocurrent;
 8008a78:	9901      	ldr	r1, [sp, #4]
 8008a7a:	4321      	orrs	r1, r4
 8008a7c:	000c      	movs	r4, r1
 8008a7e:	e7a9      	b.n	80089d4 <HAL_GPIO_Init+0xf8>
          temp |= iocurrent;
 8008a80:	9901      	ldr	r1, [sp, #4]
 8008a82:	430d      	orrs	r5, r1
 8008a84:	e79f      	b.n	80089c6 <HAL_GPIO_Init+0xea>
          temp |= iocurrent;
 8008a86:	9901      	ldr	r1, [sp, #4]
 8008a88:	430c      	orrs	r4, r1
 8008a8a:	e795      	b.n	80089b8 <HAL_GPIO_Init+0xdc>
          temp |= iocurrent;
 8008a8c:	9901      	ldr	r1, [sp, #4]
 8008a8e:	430c      	orrs	r4, r1
 8008a90:	e78b      	b.n	80089aa <HAL_GPIO_Init+0xce>
 8008a92:	2103      	movs	r1, #3
 8008a94:	40b1      	lsls	r1, r6
 8008a96:	430d      	orrs	r5, r1
 8008a98:	e77b      	b.n	8008992 <HAL_GPIO_Init+0xb6>
 8008a9a:	4641      	mov	r1, r8
 8008a9c:	40b1      	lsls	r1, r6
 8008a9e:	430d      	orrs	r5, r1
 8008aa0:	e777      	b.n	8008992 <HAL_GPIO_Init+0xb6>
 8008aa2:	2702      	movs	r7, #2
 8008aa4:	40b7      	lsls	r7, r6
 8008aa6:	433d      	orrs	r5, r7
 8008aa8:	e773      	b.n	8008992 <HAL_GPIO_Init+0xb6>
 8008aaa:	46c0      	nop			; (mov r8, r8)
 8008aac:	40021000 	.word	0x40021000
 8008ab0:	40010000 	.word	0x40010000
 8008ab4:	48000400 	.word	0x48000400
 8008ab8:	48000800 	.word	0x48000800
 8008abc:	48000c00 	.word	0x48000c00
 8008ac0:	40010400 	.word	0x40010400

08008ac4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008ac4:	6900      	ldr	r0, [r0, #16]
 8008ac6:	4008      	ands	r0, r1
 8008ac8:	1e41      	subs	r1, r0, #1
 8008aca:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8008acc:	b2c0      	uxtb	r0, r0
  }
 8008ace:	4770      	bx	lr

08008ad0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008ad0:	2a00      	cmp	r2, #0
 8008ad2:	d001      	beq.n	8008ad8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008ad4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008ad6:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008ad8:	6281      	str	r1, [r0, #40]	; 0x28
}
 8008ada:	e7fc      	b.n	8008ad6 <HAL_GPIO_WritePin+0x6>

08008adc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ade:	46c6      	mov	lr, r8
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008ae0:	6804      	ldr	r4, [r0, #0]
{
 8008ae2:	0007      	movs	r7, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008ae4:	69a3      	ldr	r3, [r4, #24]
{
 8008ae6:	000d      	movs	r5, r1
 8008ae8:	4690      	mov	r8, r2
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8008aea:	2000      	movs	r0, #0
{
 8008aec:	b500      	push	{lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008aee:	06db      	lsls	r3, r3, #27
 8008af0:	d529      	bpl.n	8008b46 <I2C_IsAcknowledgeFailed+0x6a>
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008af2:	6863      	ldr	r3, [r4, #4]
 8008af4:	019b      	lsls	r3, r3, #6
 8008af6:	d529      	bpl.n	8008b4c <I2C_IsAcknowledgeFailed+0x70>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008af8:	2620      	movs	r6, #32
 8008afa:	e001      	b.n	8008b00 <I2C_IsAcknowledgeFailed+0x24>
      if (Timeout != HAL_MAX_DELAY)
 8008afc:	1c6b      	adds	r3, r5, #1
 8008afe:	d12b      	bne.n	8008b58 <I2C_IsAcknowledgeFailed+0x7c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008b00:	69a3      	ldr	r3, [r4, #24]
 8008b02:	421e      	tst	r6, r3
 8008b04:	d0fa      	beq.n	8008afc <I2C_IsAcknowledgeFailed+0x20>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b06:	2310      	movs	r3, #16
 8008b08:	61e3      	str	r3, [r4, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b0a:	61e6      	str	r6, [r4, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008b0c:	69a3      	ldr	r3, [r4, #24]
 8008b0e:	079b      	lsls	r3, r3, #30
 8008b10:	d501      	bpl.n	8008b16 <I2C_IsAcknowledgeFailed+0x3a>
    hi2c->Instance->TXDR = 0x00U;
 8008b12:	2300      	movs	r3, #0
 8008b14:	62a3      	str	r3, [r4, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008b16:	2301      	movs	r3, #1
 8008b18:	69a2      	ldr	r2, [r4, #24]
 8008b1a:	4213      	tst	r3, r2
 8008b1c:	d102      	bne.n	8008b24 <I2C_IsAcknowledgeFailed+0x48>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008b1e:	69a2      	ldr	r2, [r4, #24]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	61a3      	str	r3, [r4, #24]
    I2C_RESET_CR2(hi2c);
 8008b24:	6863      	ldr	r3, [r4, #4]
 8008b26:	4a14      	ldr	r2, [pc, #80]	; (8008b78 <I2C_IsAcknowledgeFailed+0x9c>)
 8008b28:	4013      	ands	r3, r2
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008b2a:	2204      	movs	r2, #4
    I2C_RESET_CR2(hi2c);
 8008b2c:	6063      	str	r3, [r4, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b30:	4313      	orrs	r3, r2
 8008b32:	647b      	str	r3, [r7, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008b34:	2341      	movs	r3, #65	; 0x41
 8008b36:	321c      	adds	r2, #28
 8008b38:	54fa      	strb	r2, [r7, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b3a:	2300      	movs	r3, #0
    return HAL_ERROR;
 8008b3c:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b3e:	3222      	adds	r2, #34	; 0x22
 8008b40:	54bb      	strb	r3, [r7, r2]
    __HAL_UNLOCK(hi2c);
 8008b42:	3a02      	subs	r2, #2
 8008b44:	54bb      	strb	r3, [r7, r2]
}
 8008b46:	bc80      	pop	{r7}
 8008b48:	46b8      	mov	r8, r7
 8008b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008b4c:	2380      	movs	r3, #128	; 0x80
 8008b4e:	6862      	ldr	r2, [r4, #4]
 8008b50:	01db      	lsls	r3, r3, #7
 8008b52:	4313      	orrs	r3, r2
 8008b54:	6063      	str	r3, [r4, #4]
 8008b56:	e7cf      	b.n	8008af8 <I2C_IsAcknowledgeFailed+0x1c>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b58:	f7ff face 	bl	80080f8 <HAL_GetTick>
 8008b5c:	4643      	mov	r3, r8
 8008b5e:	1ac0      	subs	r0, r0, r3
 8008b60:	4285      	cmp	r5, r0
 8008b62:	d303      	bcc.n	8008b6c <I2C_IsAcknowledgeFailed+0x90>
 8008b64:	2d00      	cmp	r5, #0
 8008b66:	d001      	beq.n	8008b6c <I2C_IsAcknowledgeFailed+0x90>
 8008b68:	683c      	ldr	r4, [r7, #0]
 8008b6a:	e7c9      	b.n	8008b00 <I2C_IsAcknowledgeFailed+0x24>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b6c:	2220      	movs	r2, #32
 8008b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b70:	4313      	orrs	r3, r2
 8008b72:	647b      	str	r3, [r7, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008b74:	2341      	movs	r3, #65	; 0x41
 8008b76:	e7df      	b.n	8008b38 <I2C_IsAcknowledgeFailed+0x5c>
 8008b78:	fe00e800 	.word	0xfe00e800

08008b7c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8008b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7e:	0004      	movs	r4, r0
 8008b80:	000d      	movs	r5, r1
 8008b82:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008b84:	2702      	movs	r7, #2
 8008b86:	e008      	b.n	8008b9a <I2C_WaitOnTXISFlagUntilTimeout+0x1e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b88:	0032      	movs	r2, r6
 8008b8a:	0029      	movs	r1, r5
 8008b8c:	0020      	movs	r0, r4
 8008b8e:	f7ff ffa5 	bl	8008adc <I2C_IsAcknowledgeFailed>
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d107      	bne.n	8008ba6 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8008b96:	1c6b      	adds	r3, r5, #1
 8008b98:	d107      	bne.n	8008baa <I2C_WaitOnTXISFlagUntilTimeout+0x2e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008b9a:	6823      	ldr	r3, [r4, #0]
 8008b9c:	699b      	ldr	r3, [r3, #24]
 8008b9e:	421f      	tst	r7, r3
 8008ba0:	d0f2      	beq.n	8008b88 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
  return HAL_OK;
 8008ba2:	2000      	movs	r0, #0
}
 8008ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8008ba6:	2001      	movs	r0, #1
 8008ba8:	e7fc      	b.n	8008ba4 <I2C_WaitOnTXISFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008baa:	f7ff faa5 	bl	80080f8 <HAL_GetTick>
 8008bae:	1b80      	subs	r0, r0, r6
 8008bb0:	42a8      	cmp	r0, r5
 8008bb2:	d801      	bhi.n	8008bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x3c>
 8008bb4:	2d00      	cmp	r5, #0
 8008bb6:	d1f0      	bne.n	8008b9a <I2C_WaitOnTXISFlagUntilTimeout+0x1e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008bb8:	2220      	movs	r2, #32
 8008bba:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8008bbc:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008bc2:	2341      	movs	r3, #65	; 0x41
 8008bc4:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	3222      	adds	r2, #34	; 0x22
 8008bca:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 8008bcc:	3a02      	subs	r2, #2
 8008bce:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 8008bd0:	e7e8      	b.n	8008ba4 <I2C_WaitOnTXISFlagUntilTimeout+0x28>
 8008bd2:	46c0      	nop			; (mov r8, r8)

08008bd4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8008bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd6:	0005      	movs	r5, r0
 8008bd8:	000c      	movs	r4, r1
 8008bda:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008bdc:	2720      	movs	r7, #32
 8008bde:	e00d      	b.n	8008bfc <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008be0:	0032      	movs	r2, r6
 8008be2:	0021      	movs	r1, r4
 8008be4:	0028      	movs	r0, r5
 8008be6:	f7ff ff79 	bl	8008adc <I2C_IsAcknowledgeFailed>
 8008bea:	2800      	cmp	r0, #0
 8008bec:	d119      	bne.n	8008c22 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bee:	f7ff fa83 	bl	80080f8 <HAL_GetTick>
 8008bf2:	1b80      	subs	r0, r0, r6
 8008bf4:	42a0      	cmp	r0, r4
 8008bf6:	d807      	bhi.n	8008c08 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 8008bf8:	2c00      	cmp	r4, #0
 8008bfa:	d005      	beq.n	8008c08 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008bfc:	682b      	ldr	r3, [r5, #0]
 8008bfe:	699b      	ldr	r3, [r3, #24]
 8008c00:	421f      	tst	r7, r3
 8008c02:	d0ed      	beq.n	8008be0 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
  return HAL_OK;
 8008c04:	2000      	movs	r0, #0
}
 8008c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c08:	2220      	movs	r2, #32
 8008c0a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8008c0c:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008c12:	2341      	movs	r3, #65	; 0x41
 8008c14:	54ea      	strb	r2, [r5, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c16:	2300      	movs	r3, #0
 8008c18:	3222      	adds	r2, #34	; 0x22
 8008c1a:	54ab      	strb	r3, [r5, r2]
        __HAL_UNLOCK(hi2c);
 8008c1c:	3a02      	subs	r2, #2
 8008c1e:	54ab      	strb	r3, [r5, r2]
        return HAL_ERROR;
 8008c20:	e7f1      	b.n	8008c06 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
      return HAL_ERROR;
 8008c22:	2001      	movs	r0, #1
 8008c24:	e7ef      	b.n	8008c06 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8008c26:	46c0      	nop			; (mov r8, r8)

08008c28 <I2C_WaitOnFlagUntilTimeout>:
{
 8008c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c2a:	46c6      	mov	lr, r8
 8008c2c:	000d      	movs	r5, r1
 8008c2e:	4680      	mov	r8, r0
 8008c30:	0017      	movs	r7, r2
 8008c32:	001e      	movs	r6, r3
 8008c34:	b500      	push	{lr}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c36:	4643      	mov	r3, r8
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	e001      	b.n	8008c40 <I2C_WaitOnFlagUntilTimeout+0x18>
    if (Timeout != HAL_MAX_DELAY)
 8008c3c:	1c72      	adds	r2, r6, #1
 8008c3e:	d10a      	bne.n	8008c56 <I2C_WaitOnFlagUntilTimeout+0x2e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c40:	699c      	ldr	r4, [r3, #24]
 8008c42:	402c      	ands	r4, r5
 8008c44:	1b64      	subs	r4, r4, r5
 8008c46:	4262      	negs	r2, r4
 8008c48:	4154      	adcs	r4, r2
 8008c4a:	42bc      	cmp	r4, r7
 8008c4c:	d0f6      	beq.n	8008c3c <I2C_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 8008c4e:	2000      	movs	r0, #0
}
 8008c50:	bc80      	pop	{r7}
 8008c52:	46b8      	mov	r8, r7
 8008c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c56:	f7ff fa4f 	bl	80080f8 <HAL_GetTick>
 8008c5a:	9b06      	ldr	r3, [sp, #24]
 8008c5c:	1ac0      	subs	r0, r0, r3
 8008c5e:	42b0      	cmp	r0, r6
 8008c60:	d801      	bhi.n	8008c66 <I2C_WaitOnFlagUntilTimeout+0x3e>
 8008c62:	2e00      	cmp	r6, #0
 8008c64:	d1e7      	bne.n	8008c36 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c66:	4643      	mov	r3, r8
 8008c68:	2220      	movs	r2, #32
 8008c6a:	4641      	mov	r1, r8
 8008c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8008c6e:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c70:	4313      	orrs	r3, r2
 8008c72:	644b      	str	r3, [r1, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008c74:	2341      	movs	r3, #65	; 0x41
 8008c76:	54ca      	strb	r2, [r1, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	3222      	adds	r2, #34	; 0x22
 8008c7c:	548b      	strb	r3, [r1, r2]
        __HAL_UNLOCK(hi2c);
 8008c7e:	3a02      	subs	r2, #2
 8008c80:	548b      	strb	r3, [r1, r2]
        return HAL_ERROR;
 8008c82:	e7e5      	b.n	8008c50 <I2C_WaitOnFlagUntilTimeout+0x28>

08008c84 <I2C_RequestMemoryWrite>:
{
 8008c84:	b570      	push	{r4, r5, r6, lr}
 8008c86:	001e      	movs	r6, r3
 8008c88:	0004      	movs	r4, r0
 8008c8a:	0015      	movs	r5, r2
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8008c8c:	0589      	lsls	r1, r1, #22
 8008c8e:	6802      	ldr	r2, [r0, #0]
 8008c90:	b2f0      	uxtb	r0, r6
 8008c92:	0400      	lsls	r0, r0, #16
 8008c94:	0d89      	lsrs	r1, r1, #22
 8008c96:	6853      	ldr	r3, [r2, #4]
 8008c98:	4301      	orrs	r1, r0
 8008c9a:	4816      	ldr	r0, [pc, #88]	; (8008cf4 <I2C_RequestMemoryWrite+0x70>)
{
 8008c9c:	b082      	sub	sp, #8
  MODIFY_REG(hi2c->Instance->CR2,
 8008c9e:	4003      	ands	r3, r0
 8008ca0:	4319      	orrs	r1, r3
 8008ca2:	4b15      	ldr	r3, [pc, #84]	; (8008cf8 <I2C_RequestMemoryWrite+0x74>)
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ca4:	0020      	movs	r0, r4
  MODIFY_REG(hi2c->Instance->CR2,
 8008ca6:	4319      	orrs	r1, r3
 8008ca8:	6051      	str	r1, [r2, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008caa:	9a07      	ldr	r2, [sp, #28]
 8008cac:	9906      	ldr	r1, [sp, #24]
 8008cae:	f7ff ff65 	bl	8008b7c <I2C_WaitOnTXISFlagUntilTimeout>
 8008cb2:	2800      	cmp	r0, #0
 8008cb4:	d11c      	bne.n	8008cf0 <I2C_RequestMemoryWrite+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008cb6:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008cb8:	2e01      	cmp	r6, #1
 8008cba:	d10e      	bne.n	8008cda <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008cbc:	b2ed      	uxtb	r5, r5
 8008cbe:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008cc0:	9b07      	ldr	r3, [sp, #28]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	2180      	movs	r1, #128	; 0x80
 8008cc8:	9b06      	ldr	r3, [sp, #24]
 8008cca:	0020      	movs	r0, r4
 8008ccc:	f7ff ffac 	bl	8008c28 <I2C_WaitOnFlagUntilTimeout>
 8008cd0:	1e43      	subs	r3, r0, #1
 8008cd2:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8008cd4:	b2c0      	uxtb	r0, r0
}
 8008cd6:	b002      	add	sp, #8
 8008cd8:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008cda:	0a2a      	lsrs	r2, r5, #8
 8008cdc:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cde:	0020      	movs	r0, r4
 8008ce0:	9a07      	ldr	r2, [sp, #28]
 8008ce2:	9906      	ldr	r1, [sp, #24]
 8008ce4:	f7ff ff4a 	bl	8008b7c <I2C_WaitOnTXISFlagUntilTimeout>
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	d101      	bne.n	8008cf0 <I2C_RequestMemoryWrite+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008cec:	6823      	ldr	r3, [r4, #0]
 8008cee:	e7e5      	b.n	8008cbc <I2C_RequestMemoryWrite+0x38>
    return HAL_ERROR;
 8008cf0:	2001      	movs	r0, #1
 8008cf2:	e7f0      	b.n	8008cd6 <I2C_RequestMemoryWrite+0x52>
 8008cf4:	fc009800 	.word	0xfc009800
 8008cf8:	81002000 	.word	0x81002000

08008cfc <I2C_RequestMemoryRead>:
{
 8008cfc:	b570      	push	{r4, r5, r6, lr}
 8008cfe:	001e      	movs	r6, r3
 8008d00:	0004      	movs	r4, r0
 8008d02:	0015      	movs	r5, r2
  MODIFY_REG(hi2c->Instance->CR2,
 8008d04:	0589      	lsls	r1, r1, #22
 8008d06:	6802      	ldr	r2, [r0, #0]
 8008d08:	b2f0      	uxtb	r0, r6
 8008d0a:	0400      	lsls	r0, r0, #16
 8008d0c:	0d89      	lsrs	r1, r1, #22
 8008d0e:	6853      	ldr	r3, [r2, #4]
 8008d10:	4301      	orrs	r1, r0
 8008d12:	4816      	ldr	r0, [pc, #88]	; (8008d6c <I2C_RequestMemoryRead+0x70>)
{
 8008d14:	b082      	sub	sp, #8
  MODIFY_REG(hi2c->Instance->CR2,
 8008d16:	4003      	ands	r3, r0
 8008d18:	4319      	orrs	r1, r3
 8008d1a:	4b15      	ldr	r3, [pc, #84]	; (8008d70 <I2C_RequestMemoryRead+0x74>)
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d1c:	0020      	movs	r0, r4
  MODIFY_REG(hi2c->Instance->CR2,
 8008d1e:	4319      	orrs	r1, r3
 8008d20:	6051      	str	r1, [r2, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d22:	9a07      	ldr	r2, [sp, #28]
 8008d24:	9906      	ldr	r1, [sp, #24]
 8008d26:	f7ff ff29 	bl	8008b7c <I2C_WaitOnTXISFlagUntilTimeout>
 8008d2a:	2800      	cmp	r0, #0
 8008d2c:	d11c      	bne.n	8008d68 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008d2e:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008d30:	2e01      	cmp	r6, #1
 8008d32:	d10e      	bne.n	8008d52 <I2C_RequestMemoryRead+0x56>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008d34:	b2ed      	uxtb	r5, r5
 8008d36:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008d38:	9b07      	ldr	r3, [sp, #28]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	9300      	str	r3, [sp, #0]
 8008d3e:	2140      	movs	r1, #64	; 0x40
 8008d40:	9b06      	ldr	r3, [sp, #24]
 8008d42:	0020      	movs	r0, r4
 8008d44:	f7ff ff70 	bl	8008c28 <I2C_WaitOnFlagUntilTimeout>
 8008d48:	1e43      	subs	r3, r0, #1
 8008d4a:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8008d4c:	b2c0      	uxtb	r0, r0
}
 8008d4e:	b002      	add	sp, #8
 8008d50:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008d52:	0a2a      	lsrs	r2, r5, #8
 8008d54:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d56:	0020      	movs	r0, r4
 8008d58:	9a07      	ldr	r2, [sp, #28]
 8008d5a:	9906      	ldr	r1, [sp, #24]
 8008d5c:	f7ff ff0e 	bl	8008b7c <I2C_WaitOnTXISFlagUntilTimeout>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	d101      	bne.n	8008d68 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008d64:	6823      	ldr	r3, [r4, #0]
 8008d66:	e7e5      	b.n	8008d34 <I2C_RequestMemoryRead+0x38>
    return HAL_ERROR;
 8008d68:	2001      	movs	r0, #1
 8008d6a:	e7f0      	b.n	8008d4e <I2C_RequestMemoryRead+0x52>
 8008d6c:	fc009800 	.word	0xfc009800
 8008d70:	80002000 	.word	0x80002000

08008d74 <HAL_I2C_Init>:
{
 8008d74:	b510      	push	{r4, lr}
 8008d76:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 8008d78:	d04d      	beq.n	8008e16 <HAL_I2C_Init+0xa2>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008d7a:	2341      	movs	r3, #65	; 0x41
 8008d7c:	5cc3      	ldrb	r3, [r0, r3]
 8008d7e:	b2da      	uxtb	r2, r3
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d043      	beq.n	8008e0c <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008d84:	2341      	movs	r3, #65	; 0x41
 8008d86:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8008d88:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008d8a:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8008d8c:	6823      	ldr	r3, [r4, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	438a      	bics	r2, r1
 8008d92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008d94:	6861      	ldr	r1, [r4, #4]
 8008d96:	4a21      	ldr	r2, [pc, #132]	; (8008e1c <HAL_I2C_Init+0xa8>)
 8008d98:	400a      	ands	r2, r1
 8008d9a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008d9c:	689a      	ldr	r2, [r3, #8]
 8008d9e:	4920      	ldr	r1, [pc, #128]	; (8008e20 <HAL_I2C_Init+0xac>)
 8008da0:	400a      	ands	r2, r1
 8008da2:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008da4:	68e2      	ldr	r2, [r4, #12]
 8008da6:	2a01      	cmp	r2, #1
 8008da8:	d02a      	beq.n	8008e00 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008daa:	2184      	movs	r1, #132	; 0x84
 8008dac:	68a0      	ldr	r0, [r4, #8]
 8008dae:	0209      	lsls	r1, r1, #8
 8008db0:	4301      	orrs	r1, r0
 8008db2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008db4:	2a02      	cmp	r2, #2
 8008db6:	d102      	bne.n	8008dbe <HAL_I2C_Init+0x4a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008db8:	2280      	movs	r2, #128	; 0x80
 8008dba:	0112      	lsls	r2, r2, #4
 8008dbc:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008dbe:	6859      	ldr	r1, [r3, #4]
 8008dc0:	4a18      	ldr	r2, [pc, #96]	; (8008e24 <HAL_I2C_Init+0xb0>)
  return HAL_OK;
 8008dc2:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008dc4:	430a      	orrs	r2, r1
 8008dc6:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008dc8:	68da      	ldr	r2, [r3, #12]
 8008dca:	4915      	ldr	r1, [pc, #84]	; (8008e20 <HAL_I2C_Init+0xac>)
 8008dcc:	400a      	ands	r2, r1
 8008dce:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008dd0:	6961      	ldr	r1, [r4, #20]
 8008dd2:	6922      	ldr	r2, [r4, #16]
 8008dd4:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008dd6:	69a1      	ldr	r1, [r4, #24]
 8008dd8:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008dda:	430a      	orrs	r2, r1
 8008ddc:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008dde:	6a21      	ldr	r1, [r4, #32]
 8008de0:	69e2      	ldr	r2, [r4, #28]
 8008de2:	430a      	orrs	r2, r1
  __HAL_I2C_ENABLE(hi2c);
 8008de4:	2101      	movs	r1, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008de6:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	430a      	orrs	r2, r1
 8008dec:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008dee:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8008df0:	2241      	movs	r2, #65	; 0x41
 8008df2:	311f      	adds	r1, #31
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008df4:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008df6:	54a1      	strb	r1, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008df8:	3201      	adds	r2, #1
  hi2c->PreviousState = I2C_STATE_NONE;
 8008dfa:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dfc:	54a3      	strb	r3, [r4, r2]
}
 8008dfe:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008e00:	2280      	movs	r2, #128	; 0x80
 8008e02:	68a1      	ldr	r1, [r4, #8]
 8008e04:	0212      	lsls	r2, r2, #8
 8008e06:	430a      	orrs	r2, r1
 8008e08:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008e0a:	e7d8      	b.n	8008dbe <HAL_I2C_Init+0x4a>
    hi2c->Lock = HAL_UNLOCKED;
 8008e0c:	3340      	adds	r3, #64	; 0x40
 8008e0e:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8008e10:	f7fa f940 	bl	8003094 <HAL_I2C_MspInit>
 8008e14:	e7b6      	b.n	8008d84 <HAL_I2C_Init+0x10>
    return HAL_ERROR;
 8008e16:	2001      	movs	r0, #1
 8008e18:	e7f1      	b.n	8008dfe <HAL_I2C_Init+0x8a>
 8008e1a:	46c0      	nop			; (mov r8, r8)
 8008e1c:	f0ffffff 	.word	0xf0ffffff
 8008e20:	ffff7fff 	.word	0xffff7fff
 8008e24:	02008000 	.word	0x02008000

08008e28 <HAL_I2C_Mem_Write>:
{
 8008e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e2a:	464e      	mov	r6, r9
 8008e2c:	4645      	mov	r5, r8
 8008e2e:	46de      	mov	lr, fp
 8008e30:	4657      	mov	r7, sl
 8008e32:	b5e0      	push	{r5, r6, r7, lr}
 8008e34:	b085      	sub	sp, #20
 8008e36:	001e      	movs	r6, r3
 8008e38:	ab0e      	add	r3, sp, #56	; 0x38
 8008e3a:	0015      	movs	r5, r2
 8008e3c:	cb04      	ldmia	r3!, {r2}
 8008e3e:	0004      	movs	r4, r0
 8008e40:	881b      	ldrh	r3, [r3, #0]
 8008e42:	468b      	mov	fp, r1
 8008e44:	469a      	mov	sl, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e46:	2341      	movs	r3, #65	; 0x41
 8008e48:	4698      	mov	r8, r3
 8008e4a:	5cc3      	ldrb	r3, [r0, r3]
{
 8008e4c:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e4e:	2b20      	cmp	r3, #32
 8008e50:	d125      	bne.n	8008e9e <HAL_I2C_Mem_Write+0x76>
    if ((pData == NULL) || (Size == 0U))
 8008e52:	2a00      	cmp	r2, #0
 8008e54:	d018      	beq.n	8008e88 <HAL_I2C_Mem_Write+0x60>
 8008e56:	4653      	mov	r3, sl
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d015      	beq.n	8008e88 <HAL_I2C_Mem_Write+0x60>
    __HAL_LOCK(hi2c);
 8008e5c:	2240      	movs	r2, #64	; 0x40
 8008e5e:	5c83      	ldrb	r3, [r0, r2]
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d01c      	beq.n	8008e9e <HAL_I2C_Mem_Write+0x76>
 8008e64:	2301      	movs	r3, #1
 8008e66:	5483      	strb	r3, [r0, r2]
    tickstart = HAL_GetTick();
 8008e68:	f7ff f946 	bl	80080f8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008e6c:	2180      	movs	r1, #128	; 0x80
 8008e6e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8008e70:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008e72:	2319      	movs	r3, #25
 8008e74:	2201      	movs	r2, #1
 8008e76:	0020      	movs	r0, r4
 8008e78:	0209      	lsls	r1, r1, #8
 8008e7a:	f7ff fed5 	bl	8008c28 <I2C_WaitOnFlagUntilTimeout>
 8008e7e:	9003      	str	r0, [sp, #12]
 8008e80:	2800      	cmp	r0, #0
 8008e82:	d00e      	beq.n	8008ea2 <HAL_I2C_Mem_Write+0x7a>
      return HAL_ERROR;
 8008e84:	2001      	movs	r0, #1
 8008e86:	e003      	b.n	8008e90 <HAL_I2C_Mem_Write+0x68>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008e88:	2380      	movs	r3, #128	; 0x80
      return  HAL_ERROR;
 8008e8a:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	6463      	str	r3, [r4, #68]	; 0x44
}
 8008e90:	b005      	add	sp, #20
 8008e92:	bcf0      	pop	{r4, r5, r6, r7}
 8008e94:	46bb      	mov	fp, r7
 8008e96:	46b2      	mov	sl, r6
 8008e98:	46a9      	mov	r9, r5
 8008e9a:	46a0      	mov	r8, r4
 8008e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8008e9e:	2002      	movs	r0, #2
 8008ea0:	e7f6      	b.n	8008e90 <HAL_I2C_Mem_Write+0x68>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008ea2:	2321      	movs	r3, #33	; 0x21
 8008ea4:	4642      	mov	r2, r8
 8008ea6:	54a3      	strb	r3, [r4, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008ea8:	2240      	movs	r2, #64	; 0x40
 8008eaa:	3321      	adds	r3, #33	; 0x21
 8008eac:	54e2      	strb	r2, [r4, r3]
    hi2c->pBuffPtr  = pData;
 8008eae:	464a      	mov	r2, r9
 8008eb0:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8008eb2:	4652      	mov	r2, sl
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008eb4:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008eb6:	4659      	mov	r1, fp
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008eb8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 8008eba:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008ebc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    hi2c->XferCount = Size;
 8008ebe:	8562      	strh	r2, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008ec0:	9300      	str	r3, [sp, #0]
 8008ec2:	002a      	movs	r2, r5
 8008ec4:	0033      	movs	r3, r6
 8008ec6:	0020      	movs	r0, r4
 8008ec8:	9701      	str	r7, [sp, #4]
 8008eca:	f7ff fedb 	bl	8008c84 <I2C_RequestMemoryWrite>
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	d167      	bne.n	8008fa2 <HAL_I2C_Mem_Write+0x17a>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ed2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008ed4:	2bff      	cmp	r3, #255	; 0xff
 8008ed6:	d847      	bhi.n	8008f68 <HAL_I2C_Mem_Write+0x140>
  MODIFY_REG(hi2c->Instance->CR2,
 8008ed8:	465a      	mov	r2, fp
      hi2c->XferSize = hi2c->XferCount;
 8008eda:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8008edc:	6821      	ldr	r1, [r4, #0]
      hi2c->XferSize = hi2c->XferCount;
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8008ee2:	0595      	lsls	r5, r2, #22
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	0daa      	lsrs	r2, r5, #22
 8008ee8:	041b      	lsls	r3, r3, #16
 8008eea:	6848      	ldr	r0, [r1, #4]
 8008eec:	4313      	orrs	r3, r2
 8008eee:	4a3a      	ldr	r2, [pc, #232]	; (8008fd8 <HAL_I2C_Mem_Write+0x1b0>)
 8008ef0:	4002      	ands	r2, r0
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	2280      	movs	r2, #128	; 0x80
 8008ef6:	0492      	lsls	r2, r2, #18
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	604b      	str	r3, [r1, #4]
 8008efc:	4e36      	ldr	r6, [pc, #216]	; (8008fd8 <HAL_I2C_Mem_Write+0x1b0>)
 8008efe:	0dad      	lsrs	r5, r5, #22
 8008f00:	e002      	b.n	8008f08 <HAL_I2C_Mem_Write+0xe0>
    } while (hi2c->XferCount > 0U);
 8008f02:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d051      	beq.n	8008fac <HAL_I2C_Mem_Write+0x184>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f08:	003a      	movs	r2, r7
 8008f0a:	0020      	movs	r0, r4
 8008f0c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008f0e:	f7ff fe35 	bl	8008b7c <I2C_WaitOnTXISFlagUntilTimeout>
 8008f12:	2800      	cmp	r0, #0
 8008f14:	d1b6      	bne.n	8008e84 <HAL_I2C_Mem_Write+0x5c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f18:	6822      	ldr	r2, [r4, #0]
 8008f1a:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8008f1c:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008f1e:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8008f20:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8008f22:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008f24:	3b01      	subs	r3, #1
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8008f2a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008f2c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008f34:	2a00      	cmp	r2, #0
 8008f36:	d0e4      	beq.n	8008f02 <HAL_I2C_Mem_Write+0xda>
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1e2      	bne.n	8008f02 <HAL_I2C_Mem_Write+0xda>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	2180      	movs	r1, #128	; 0x80
 8008f40:	0020      	movs	r0, r4
 8008f42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f44:	9700      	str	r7, [sp, #0]
 8008f46:	f7ff fe6f 	bl	8008c28 <I2C_WaitOnFlagUntilTimeout>
 8008f4a:	2800      	cmp	r0, #0
 8008f4c:	d19a      	bne.n	8008e84 <HAL_I2C_Mem_Write+0x5c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008f50:	2bff      	cmp	r3, #255	; 0xff
 8008f52:	d917      	bls.n	8008f84 <HAL_I2C_Mem_Write+0x15c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f54:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 8008f56:	6821      	ldr	r1, [r4, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f58:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8008f5a:	684b      	ldr	r3, [r1, #4]
 8008f5c:	4a1f      	ldr	r2, [pc, #124]	; (8008fdc <HAL_I2C_Mem_Write+0x1b4>)
 8008f5e:	4033      	ands	r3, r6
 8008f60:	432b      	orrs	r3, r5
 8008f62:	4313      	orrs	r3, r2
 8008f64:	604b      	str	r3, [r1, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8008f66:	e7cc      	b.n	8008f02 <HAL_I2C_Mem_Write+0xda>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f68:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 8008f6a:	6821      	ldr	r1, [r4, #0]
 8008f6c:	4a1a      	ldr	r2, [pc, #104]	; (8008fd8 <HAL_I2C_Mem_Write+0x1b0>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f6e:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8008f70:	684b      	ldr	r3, [r1, #4]
 8008f72:	4013      	ands	r3, r2
 8008f74:	465a      	mov	r2, fp
 8008f76:	0595      	lsls	r5, r2, #22
 8008f78:	0daa      	lsrs	r2, r5, #22
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	4a17      	ldr	r2, [pc, #92]	; (8008fdc <HAL_I2C_Mem_Write+0x1b4>)
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	604b      	str	r3, [r1, #4]
}
 8008f82:	e7bb      	b.n	8008efc <HAL_I2C_Mem_Write+0xd4>
          hi2c->XferSize = hi2c->XferCount;
 8008f84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8008f86:	6821      	ldr	r1, [r4, #0]
          hi2c->XferSize = hi2c->XferCount;
 8008f88:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2,
 8008f8a:	684a      	ldr	r2, [r1, #4]
          hi2c->XferSize = hi2c->XferCount;
 8008f8c:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	041b      	lsls	r3, r3, #16
 8008f92:	4032      	ands	r2, r6
 8008f94:	432b      	orrs	r3, r5
 8008f96:	4313      	orrs	r3, r2
 8008f98:	2280      	movs	r2, #128	; 0x80
 8008f9a:	0492      	lsls	r2, r2, #18
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	604b      	str	r3, [r1, #4]
}
 8008fa0:	e7af      	b.n	8008f02 <HAL_I2C_Mem_Write+0xda>
      __HAL_UNLOCK(hi2c);
 8008fa2:	2340      	movs	r3, #64	; 0x40
 8008fa4:	9a03      	ldr	r2, [sp, #12]
      return HAL_ERROR;
 8008fa6:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 8008fa8:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8008faa:	e771      	b.n	8008e90 <HAL_I2C_Mem_Write+0x68>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fac:	003a      	movs	r2, r7
 8008fae:	0020      	movs	r0, r4
 8008fb0:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008fb2:	f7ff fe0f 	bl	8008bd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	d000      	beq.n	8008fbc <HAL_I2C_Mem_Write+0x194>
 8008fba:	e763      	b.n	8008e84 <HAL_I2C_Mem_Write+0x5c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008fbc:	2120      	movs	r1, #32
 8008fbe:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8008fc0:	4d07      	ldr	r5, [pc, #28]	; (8008fe0 <HAL_I2C_Mem_Write+0x1b8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008fc2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008fc4:	685a      	ldr	r2, [r3, #4]
 8008fc6:	402a      	ands	r2, r5
 8008fc8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008fca:	2341      	movs	r3, #65	; 0x41
 8008fcc:	54e1      	strb	r1, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008fce:	3301      	adds	r3, #1
 8008fd0:	54e0      	strb	r0, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8008fd2:	3b02      	subs	r3, #2
 8008fd4:	54e0      	strb	r0, [r4, r3]
    return HAL_OK;
 8008fd6:	e75b      	b.n	8008e90 <HAL_I2C_Mem_Write+0x68>
 8008fd8:	fc009c00 	.word	0xfc009c00
 8008fdc:	01ff0000 	.word	0x01ff0000
 8008fe0:	fe00e800 	.word	0xfe00e800

08008fe4 <HAL_I2C_Mem_Read>:
{
 8008fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fe6:	464e      	mov	r6, r9
 8008fe8:	4645      	mov	r5, r8
 8008fea:	46de      	mov	lr, fp
 8008fec:	4657      	mov	r7, sl
 8008fee:	b5e0      	push	{r5, r6, r7, lr}
 8008ff0:	b085      	sub	sp, #20
 8008ff2:	001e      	movs	r6, r3
 8008ff4:	ab0e      	add	r3, sp, #56	; 0x38
 8008ff6:	0015      	movs	r5, r2
 8008ff8:	cb04      	ldmia	r3!, {r2}
 8008ffa:	0004      	movs	r4, r0
 8008ffc:	881b      	ldrh	r3, [r3, #0]
 8008ffe:	468b      	mov	fp, r1
 8009000:	469a      	mov	sl, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009002:	2341      	movs	r3, #65	; 0x41
 8009004:	4698      	mov	r8, r3
 8009006:	5cc3      	ldrb	r3, [r0, r3]
{
 8009008:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800900a:	2b20      	cmp	r3, #32
 800900c:	d125      	bne.n	800905a <HAL_I2C_Mem_Read+0x76>
    if ((pData == NULL) || (Size == 0U))
 800900e:	2a00      	cmp	r2, #0
 8009010:	d018      	beq.n	8009044 <HAL_I2C_Mem_Read+0x60>
 8009012:	4653      	mov	r3, sl
 8009014:	2b00      	cmp	r3, #0
 8009016:	d015      	beq.n	8009044 <HAL_I2C_Mem_Read+0x60>
    __HAL_LOCK(hi2c);
 8009018:	2240      	movs	r2, #64	; 0x40
 800901a:	5c83      	ldrb	r3, [r0, r2]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d01c      	beq.n	800905a <HAL_I2C_Mem_Read+0x76>
 8009020:	2301      	movs	r3, #1
 8009022:	5483      	strb	r3, [r0, r2]
    tickstart = HAL_GetTick();
 8009024:	f7ff f868 	bl	80080f8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009028:	2180      	movs	r1, #128	; 0x80
 800902a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800902c:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800902e:	2319      	movs	r3, #25
 8009030:	2201      	movs	r2, #1
 8009032:	0020      	movs	r0, r4
 8009034:	0209      	lsls	r1, r1, #8
 8009036:	f7ff fdf7 	bl	8008c28 <I2C_WaitOnFlagUntilTimeout>
 800903a:	9003      	str	r0, [sp, #12]
 800903c:	2800      	cmp	r0, #0
 800903e:	d00e      	beq.n	800905e <HAL_I2C_Mem_Read+0x7a>
      return HAL_ERROR;
 8009040:	2001      	movs	r0, #1
 8009042:	e003      	b.n	800904c <HAL_I2C_Mem_Read+0x68>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009044:	2380      	movs	r3, #128	; 0x80
      return  HAL_ERROR;
 8009046:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	6463      	str	r3, [r4, #68]	; 0x44
}
 800904c:	b005      	add	sp, #20
 800904e:	bcf0      	pop	{r4, r5, r6, r7}
 8009050:	46bb      	mov	fp, r7
 8009052:	46b2      	mov	sl, r6
 8009054:	46a9      	mov	r9, r5
 8009056:	46a0      	mov	r8, r4
 8009058:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800905a:	2002      	movs	r0, #2
 800905c:	e7f6      	b.n	800904c <HAL_I2C_Mem_Read+0x68>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800905e:	2322      	movs	r3, #34	; 0x22
 8009060:	4642      	mov	r2, r8
 8009062:	54a3      	strb	r3, [r4, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009064:	2240      	movs	r2, #64	; 0x40
 8009066:	3320      	adds	r3, #32
 8009068:	54e2      	strb	r2, [r4, r3]
    hi2c->pBuffPtr  = pData;
 800906a:	464a      	mov	r2, r9
 800906c:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800906e:	4652      	mov	r2, sl
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009070:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009072:	4659      	mov	r1, fp
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009074:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 8009076:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009078:	9b10      	ldr	r3, [sp, #64]	; 0x40
    hi2c->XferCount = Size;
 800907a:	8562      	strh	r2, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800907c:	9300      	str	r3, [sp, #0]
 800907e:	002a      	movs	r2, r5
 8009080:	0033      	movs	r3, r6
 8009082:	0020      	movs	r0, r4
 8009084:	9701      	str	r7, [sp, #4]
 8009086:	f7ff fe39 	bl	8008cfc <I2C_RequestMemoryRead>
 800908a:	2800      	cmp	r0, #0
 800908c:	d169      	bne.n	8009162 <HAL_I2C_Mem_Read+0x17e>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800908e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009090:	2bff      	cmp	r3, #255	; 0xff
 8009092:	d849      	bhi.n	8009128 <HAL_I2C_Mem_Read+0x144>
  MODIFY_REG(hi2c->Instance->CR2,
 8009094:	465a      	mov	r2, fp
      hi2c->XferSize = hi2c->XferCount;
 8009096:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8009098:	6821      	ldr	r1, [r4, #0]
      hi2c->XferSize = hi2c->XferCount;
 800909a:	b29b      	uxth	r3, r3
 800909c:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800909e:	0595      	lsls	r5, r2, #22
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	0daa      	lsrs	r2, r5, #22
 80090a4:	041b      	lsls	r3, r3, #16
 80090a6:	6848      	ldr	r0, [r1, #4]
 80090a8:	4313      	orrs	r3, r2
 80090aa:	4a3b      	ldr	r2, [pc, #236]	; (8009198 <HAL_I2C_Mem_Read+0x1b4>)
 80090ac:	4002      	ands	r2, r0
 80090ae:	4313      	orrs	r3, r2
 80090b0:	4a3a      	ldr	r2, [pc, #232]	; (800919c <HAL_I2C_Mem_Read+0x1b8>)
 80090b2:	4313      	orrs	r3, r2
 80090b4:	604b      	str	r3, [r1, #4]
 80090b6:	4e3a      	ldr	r6, [pc, #232]	; (80091a0 <HAL_I2C_Mem_Read+0x1bc>)
 80090b8:	0dad      	lsrs	r5, r5, #22
 80090ba:	e002      	b.n	80090c2 <HAL_I2C_Mem_Read+0xde>
    } while (hi2c->XferCount > 0U);
 80090bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d054      	beq.n	800916c <HAL_I2C_Mem_Read+0x188>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80090c2:	2200      	movs	r2, #0
 80090c4:	2104      	movs	r1, #4
 80090c6:	0020      	movs	r0, r4
 80090c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80090ca:	9700      	str	r7, [sp, #0]
 80090cc:	f7ff fdac 	bl	8008c28 <I2C_WaitOnFlagUntilTimeout>
 80090d0:	2800      	cmp	r0, #0
 80090d2:	d1b5      	bne.n	8009040 <HAL_I2C_Mem_Read+0x5c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80090d4:	6823      	ldr	r3, [r4, #0]
 80090d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80090d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090da:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 80090dc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80090de:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80090e0:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80090e2:	3301      	adds	r3, #1
      hi2c->XferCount--;
 80090e4:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 80090e6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80090e8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80090ea:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80090ec:	3b01      	subs	r3, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80090ee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80090f4:	2a00      	cmp	r2, #0
 80090f6:	d0e1      	beq.n	80090bc <HAL_I2C_Mem_Read+0xd8>
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d1df      	bne.n	80090bc <HAL_I2C_Mem_Read+0xd8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80090fc:	2200      	movs	r2, #0
 80090fe:	2180      	movs	r1, #128	; 0x80
 8009100:	0020      	movs	r0, r4
 8009102:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009104:	9700      	str	r7, [sp, #0]
 8009106:	f7ff fd8f 	bl	8008c28 <I2C_WaitOnFlagUntilTimeout>
 800910a:	2800      	cmp	r0, #0
 800910c:	d198      	bne.n	8009040 <HAL_I2C_Mem_Read+0x5c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800910e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009110:	2bff      	cmp	r3, #255	; 0xff
 8009112:	d917      	bls.n	8009144 <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009114:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 8009116:	6821      	ldr	r1, [r4, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009118:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800911a:	684b      	ldr	r3, [r1, #4]
 800911c:	4a21      	ldr	r2, [pc, #132]	; (80091a4 <HAL_I2C_Mem_Read+0x1c0>)
 800911e:	4033      	ands	r3, r6
 8009120:	432b      	orrs	r3, r5
 8009122:	4313      	orrs	r3, r2
 8009124:	604b      	str	r3, [r1, #4]
}
 8009126:	e7c9      	b.n	80090bc <HAL_I2C_Mem_Read+0xd8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009128:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 800912a:	6821      	ldr	r1, [r4, #0]
 800912c:	4a1a      	ldr	r2, [pc, #104]	; (8009198 <HAL_I2C_Mem_Read+0x1b4>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800912e:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8009130:	684b      	ldr	r3, [r1, #4]
 8009132:	4013      	ands	r3, r2
 8009134:	465a      	mov	r2, fp
 8009136:	0595      	lsls	r5, r2, #22
 8009138:	0daa      	lsrs	r2, r5, #22
 800913a:	4313      	orrs	r3, r2
 800913c:	4a1a      	ldr	r2, [pc, #104]	; (80091a8 <HAL_I2C_Mem_Read+0x1c4>)
 800913e:	4313      	orrs	r3, r2
 8009140:	604b      	str	r3, [r1, #4]
}
 8009142:	e7b8      	b.n	80090b6 <HAL_I2C_Mem_Read+0xd2>
          hi2c->XferSize = hi2c->XferCount;
 8009144:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8009146:	6821      	ldr	r1, [r4, #0]
          hi2c->XferSize = hi2c->XferCount;
 8009148:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2,
 800914a:	684a      	ldr	r2, [r1, #4]
          hi2c->XferSize = hi2c->XferCount;
 800914c:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800914e:	b2db      	uxtb	r3, r3
 8009150:	041b      	lsls	r3, r3, #16
 8009152:	4032      	ands	r2, r6
 8009154:	432b      	orrs	r3, r5
 8009156:	4313      	orrs	r3, r2
 8009158:	2280      	movs	r2, #128	; 0x80
 800915a:	0492      	lsls	r2, r2, #18
 800915c:	4313      	orrs	r3, r2
 800915e:	604b      	str	r3, [r1, #4]
}
 8009160:	e7ac      	b.n	80090bc <HAL_I2C_Mem_Read+0xd8>
      __HAL_UNLOCK(hi2c);
 8009162:	2340      	movs	r3, #64	; 0x40
 8009164:	9a03      	ldr	r2, [sp, #12]
      return HAL_ERROR;
 8009166:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 8009168:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 800916a:	e76f      	b.n	800904c <HAL_I2C_Mem_Read+0x68>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800916c:	003a      	movs	r2, r7
 800916e:	0020      	movs	r0, r4
 8009170:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009172:	f7ff fd2f 	bl	8008bd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009176:	2800      	cmp	r0, #0
 8009178:	d000      	beq.n	800917c <HAL_I2C_Mem_Read+0x198>
 800917a:	e761      	b.n	8009040 <HAL_I2C_Mem_Read+0x5c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800917c:	2120      	movs	r1, #32
 800917e:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8009180:	4d0a      	ldr	r5, [pc, #40]	; (80091ac <HAL_I2C_Mem_Read+0x1c8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009182:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009184:	685a      	ldr	r2, [r3, #4]
 8009186:	402a      	ands	r2, r5
 8009188:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800918a:	2341      	movs	r3, #65	; 0x41
 800918c:	54e1      	strb	r1, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800918e:	3301      	adds	r3, #1
 8009190:	54e0      	strb	r0, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8009192:	3b02      	subs	r3, #2
 8009194:	54e0      	strb	r0, [r4, r3]
    return HAL_OK;
 8009196:	e759      	b.n	800904c <HAL_I2C_Mem_Read+0x68>
 8009198:	fc009800 	.word	0xfc009800
 800919c:	82002400 	.word	0x82002400
 80091a0:	fc009c00 	.word	0xfc009c00
 80091a4:	01ff0000 	.word	0x01ff0000
 80091a8:	81ff2400 	.word	0x81ff2400
 80091ac:	fe00e800 	.word	0xfe00e800

080091b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80091b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091b2:	2541      	movs	r5, #65	; 0x41
 80091b4:	5d43      	ldrb	r3, [r0, r5]
{
 80091b6:	000a      	movs	r2, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80091b8:	b2de      	uxtb	r6, r3
 80091ba:	2b20      	cmp	r3, #32
 80091bc:	d11b      	bne.n	80091f6 <HAL_I2CEx_ConfigAnalogFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091be:	2740      	movs	r7, #64	; 0x40
 80091c0:	5dc3      	ldrb	r3, [r0, r7]
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d017      	beq.n	80091f6 <HAL_I2CEx_ConfigAnalogFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80091c6:	2101      	movs	r1, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 80091c8:	2324      	movs	r3, #36	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 80091ca:	468c      	mov	ip, r1
    hi2c->State = HAL_I2C_STATE_BUSY;
 80091cc:	5543      	strb	r3, [r0, r5]
    __HAL_I2C_DISABLE(hi2c);
 80091ce:	6803      	ldr	r3, [r0, #0]
 80091d0:	681c      	ldr	r4, [r3, #0]
 80091d2:	438c      	bics	r4, r1
 80091d4:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80091d6:	681c      	ldr	r4, [r3, #0]
 80091d8:	4908      	ldr	r1, [pc, #32]	; (80091fc <HAL_I2CEx_ConfigAnalogFilter+0x4c>)
 80091da:	400c      	ands	r4, r1
 80091dc:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80091de:	6819      	ldr	r1, [r3, #0]
 80091e0:	4311      	orrs	r1, r2
 80091e2:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80091e4:	4661      	mov	r1, ip
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	430a      	orrs	r2, r1
 80091ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091ec:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80091ee:	5546      	strb	r6, [r0, r5]
    __HAL_UNLOCK(hi2c);
 80091f0:	55c3      	strb	r3, [r0, r7]

    return HAL_OK;
 80091f2:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80091f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80091f6:	2002      	movs	r0, #2
 80091f8:	e7fc      	b.n	80091f4 <HAL_I2CEx_ConfigAnalogFilter+0x44>
 80091fa:	46c0      	nop			; (mov r8, r8)
 80091fc:	ffffefff 	.word	0xffffefff

08009200 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009200:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009202:	2541      	movs	r5, #65	; 0x41
 8009204:	5d43      	ldrb	r3, [r0, r5]
 8009206:	b2de      	uxtb	r6, r3
 8009208:	2b20      	cmp	r3, #32
 800920a:	d11a      	bne.n	8009242 <HAL_I2CEx_ConfigDigitalFilter+0x42>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800920c:	2740      	movs	r7, #64	; 0x40
 800920e:	5dc3      	ldrb	r3, [r0, r7]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d016      	beq.n	8009242 <HAL_I2CEx_ConfigDigitalFilter+0x42>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009214:	2324      	movs	r3, #36	; 0x24
 8009216:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009218:	3b23      	subs	r3, #35	; 0x23
 800921a:	469c      	mov	ip, r3
 800921c:	6804      	ldr	r4, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800921e:	0209      	lsls	r1, r1, #8
    __HAL_I2C_DISABLE(hi2c);
 8009220:	6822      	ldr	r2, [r4, #0]
 8009222:	439a      	bics	r2, r3
 8009224:	6022      	str	r2, [r4, #0]
    tmpreg = hi2c->Instance->CR1;
 8009226:	6822      	ldr	r2, [r4, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8009228:	4b07      	ldr	r3, [pc, #28]	; (8009248 <HAL_I2CEx_ConfigDigitalFilter+0x48>)
 800922a:	401a      	ands	r2, r3
    tmpreg |= DigitalFilter << 8U;
 800922c:	4311      	orrs	r1, r2

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;

    __HAL_I2C_ENABLE(hi2c);
 800922e:	4662      	mov	r2, ip
    hi2c->Instance->CR1 = tmpreg;
 8009230:	6021      	str	r1, [r4, #0]
    __HAL_I2C_ENABLE(hi2c);
 8009232:	6823      	ldr	r3, [r4, #0]
 8009234:	4313      	orrs	r3, r2
 8009236:	6023      	str	r3, [r4, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009238:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800923a:	5546      	strb	r6, [r0, r5]
    __HAL_UNLOCK(hi2c);
 800923c:	55c3      	strb	r3, [r0, r7]

    return HAL_OK;
 800923e:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8009240:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8009242:	2002      	movs	r0, #2
 8009244:	e7fc      	b.n	8009240 <HAL_I2CEx_ConfigDigitalFilter+0x40>
 8009246:	46c0      	nop			; (mov r8, r8)
 8009248:	fffff0ff 	.word	0xfffff0ff

0800924c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800924c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800924e:	46ce      	mov	lr, r9
 8009250:	4647      	mov	r7, r8
 8009252:	b580      	push	{r7, lr}
 8009254:	0004      	movs	r4, r0
 8009256:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009258:	2800      	cmp	r0, #0
 800925a:	d100      	bne.n	800925e <HAL_RCC_OscConfig+0x12>
 800925c:	e0ee      	b.n	800943c <HAL_RCC_OscConfig+0x1f0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800925e:	6803      	ldr	r3, [r0, #0]
 8009260:	07da      	lsls	r2, r3, #31
 8009262:	d535      	bpl.n	80092d0 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8009264:	210c      	movs	r1, #12
 8009266:	48c3      	ldr	r0, [pc, #780]	; (8009574 <HAL_RCC_OscConfig+0x328>)
 8009268:	6842      	ldr	r2, [r0, #4]
 800926a:	400a      	ands	r2, r1
 800926c:	2a04      	cmp	r2, #4
 800926e:	d100      	bne.n	8009272 <HAL_RCC_OscConfig+0x26>
 8009270:	e101      	b.n	8009476 <HAL_RCC_OscConfig+0x22a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009272:	6842      	ldr	r2, [r0, #4]
 8009274:	4011      	ands	r1, r2
 8009276:	2908      	cmp	r1, #8
 8009278:	d100      	bne.n	800927c <HAL_RCC_OscConfig+0x30>
 800927a:	e0f8      	b.n	800946e <HAL_RCC_OscConfig+0x222>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800927c:	6863      	ldr	r3, [r4, #4]
 800927e:	2b01      	cmp	r3, #1
 8009280:	d00f      	beq.n	80092a2 <HAL_RCC_OscConfig+0x56>
 8009282:	2b00      	cmp	r3, #0
 8009284:	d100      	bne.n	8009288 <HAL_RCC_OscConfig+0x3c>
 8009286:	e11e      	b.n	80094c6 <HAL_RCC_OscConfig+0x27a>
 8009288:	2b05      	cmp	r3, #5
 800928a:	d100      	bne.n	800928e <HAL_RCC_OscConfig+0x42>
 800928c:	e1a7      	b.n	80095de <HAL_RCC_OscConfig+0x392>
 800928e:	4bb9      	ldr	r3, [pc, #740]	; (8009574 <HAL_RCC_OscConfig+0x328>)
 8009290:	49b9      	ldr	r1, [pc, #740]	; (8009578 <HAL_RCC_OscConfig+0x32c>)
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	400a      	ands	r2, r1
 8009296:	601a      	str	r2, [r3, #0]
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	49b8      	ldr	r1, [pc, #736]	; (800957c <HAL_RCC_OscConfig+0x330>)
 800929c:	400a      	ands	r2, r1
 800929e:	601a      	str	r2, [r3, #0]
 80092a0:	e005      	b.n	80092ae <HAL_RCC_OscConfig+0x62>
 80092a2:	2380      	movs	r3, #128	; 0x80
 80092a4:	4ab3      	ldr	r2, [pc, #716]	; (8009574 <HAL_RCC_OscConfig+0x328>)
 80092a6:	025b      	lsls	r3, r3, #9
 80092a8:	6811      	ldr	r1, [r2, #0]
 80092aa:	430b      	orrs	r3, r1
 80092ac:	6013      	str	r3, [r2, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092ae:	f7fe ff23 	bl	80080f8 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092b2:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80092b4:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092b6:	4faf      	ldr	r7, [pc, #700]	; (8009574 <HAL_RCC_OscConfig+0x328>)
 80092b8:	02b6      	lsls	r6, r6, #10
 80092ba:	e005      	b.n	80092c8 <HAL_RCC_OscConfig+0x7c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80092bc:	f7fe ff1c 	bl	80080f8 <HAL_GetTick>
 80092c0:	1b40      	subs	r0, r0, r5
 80092c2:	2864      	cmp	r0, #100	; 0x64
 80092c4:	d900      	bls.n	80092c8 <HAL_RCC_OscConfig+0x7c>
 80092c6:	e0fc      	b.n	80094c2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	4233      	tst	r3, r6
 80092cc:	d0f6      	beq.n	80092bc <HAL_RCC_OscConfig+0x70>
 80092ce:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80092d0:	079a      	lsls	r2, r3, #30
 80092d2:	d529      	bpl.n	8009328 <HAL_RCC_OscConfig+0xdc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80092d4:	220c      	movs	r2, #12
 80092d6:	49a7      	ldr	r1, [pc, #668]	; (8009574 <HAL_RCC_OscConfig+0x328>)
 80092d8:	6848      	ldr	r0, [r1, #4]
 80092da:	4202      	tst	r2, r0
 80092dc:	d100      	bne.n	80092e0 <HAL_RCC_OscConfig+0x94>
 80092de:	e0a6      	b.n	800942e <HAL_RCC_OscConfig+0x1e2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80092e0:	6848      	ldr	r0, [r1, #4]
 80092e2:	4002      	ands	r2, r0
 80092e4:	2a08      	cmp	r2, #8
 80092e6:	d100      	bne.n	80092ea <HAL_RCC_OscConfig+0x9e>
 80092e8:	e09d      	b.n	8009426 <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80092ea:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80092ec:	4da1      	ldr	r5, [pc, #644]	; (8009574 <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d100      	bne.n	80092f4 <HAL_RCC_OscConfig+0xa8>
 80092f2:	e11f      	b.n	8009534 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 80092f4:	2201      	movs	r2, #1
 80092f6:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092f8:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 80092fa:	4313      	orrs	r3, r2
 80092fc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80092fe:	f7fe fefb 	bl	80080f8 <HAL_GetTick>
 8009302:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009304:	e005      	b.n	8009312 <HAL_RCC_OscConfig+0xc6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009306:	f7fe fef7 	bl	80080f8 <HAL_GetTick>
 800930a:	1b80      	subs	r0, r0, r6
 800930c:	2802      	cmp	r0, #2
 800930e:	d900      	bls.n	8009312 <HAL_RCC_OscConfig+0xc6>
 8009310:	e0d7      	b.n	80094c2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009312:	682b      	ldr	r3, [r5, #0]
 8009314:	421f      	tst	r7, r3
 8009316:	d0f6      	beq.n	8009306 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009318:	21f8      	movs	r1, #248	; 0xf8
 800931a:	682a      	ldr	r2, [r5, #0]
 800931c:	6923      	ldr	r3, [r4, #16]
 800931e:	438a      	bics	r2, r1
 8009320:	00db      	lsls	r3, r3, #3
 8009322:	4313      	orrs	r3, r2
 8009324:	602b      	str	r3, [r5, #0]
 8009326:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009328:	071a      	lsls	r2, r3, #28
 800932a:	d42d      	bmi.n	8009388 <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800932c:	075a      	lsls	r2, r3, #29
 800932e:	d544      	bpl.n	80093ba <HAL_RCC_OscConfig+0x16e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009330:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8009332:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009334:	4b8f      	ldr	r3, [pc, #572]	; (8009574 <HAL_RCC_OscConfig+0x328>)
 8009336:	0552      	lsls	r2, r2, #21
 8009338:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 800933a:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800933c:	4211      	tst	r1, r2
 800933e:	d108      	bne.n	8009352 <HAL_RCC_OscConfig+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009340:	69d9      	ldr	r1, [r3, #28]
 8009342:	4311      	orrs	r1, r2
 8009344:	61d9      	str	r1, [r3, #28]
 8009346:	69db      	ldr	r3, [r3, #28]
 8009348:	401a      	ands	r2, r3
 800934a:	9201      	str	r2, [sp, #4]
 800934c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800934e:	2301      	movs	r3, #1
 8009350:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009352:	2780      	movs	r7, #128	; 0x80
 8009354:	4e8a      	ldr	r6, [pc, #552]	; (8009580 <HAL_RCC_OscConfig+0x334>)
 8009356:	007f      	lsls	r7, r7, #1
 8009358:	6833      	ldr	r3, [r6, #0]
 800935a:	423b      	tst	r3, r7
 800935c:	d100      	bne.n	8009360 <HAL_RCC_OscConfig+0x114>
 800935e:	e094      	b.n	800948a <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009360:	68a3      	ldr	r3, [r4, #8]
 8009362:	2b01      	cmp	r3, #1
 8009364:	d100      	bne.n	8009368 <HAL_RCC_OscConfig+0x11c>
 8009366:	e0f8      	b.n	800955a <HAL_RCC_OscConfig+0x30e>
 8009368:	2b00      	cmp	r3, #0
 800936a:	d100      	bne.n	800936e <HAL_RCC_OscConfig+0x122>
 800936c:	e0c4      	b.n	80094f8 <HAL_RCC_OscConfig+0x2ac>
 800936e:	2b05      	cmp	r3, #5
 8009370:	d100      	bne.n	8009374 <HAL_RCC_OscConfig+0x128>
 8009372:	e140      	b.n	80095f6 <HAL_RCC_OscConfig+0x3aa>
 8009374:	2101      	movs	r1, #1
 8009376:	4b7f      	ldr	r3, [pc, #508]	; (8009574 <HAL_RCC_OscConfig+0x328>)
 8009378:	6a1a      	ldr	r2, [r3, #32]
 800937a:	438a      	bics	r2, r1
 800937c:	621a      	str	r2, [r3, #32]
 800937e:	6a1a      	ldr	r2, [r3, #32]
 8009380:	3103      	adds	r1, #3
 8009382:	438a      	bics	r2, r1
 8009384:	621a      	str	r2, [r3, #32]
 8009386:	e0ec      	b.n	8009562 <HAL_RCC_OscConfig+0x316>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009388:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 800938a:	4d7a      	ldr	r5, [pc, #488]	; (8009574 <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800938c:	2b00      	cmp	r3, #0
 800938e:	d05b      	beq.n	8009448 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8009390:	2201      	movs	r2, #1
 8009392:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009394:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8009396:	4313      	orrs	r3, r2
 8009398:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 800939a:	f7fe fead 	bl	80080f8 <HAL_GetTick>
 800939e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80093a0:	e005      	b.n	80093ae <HAL_RCC_OscConfig+0x162>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80093a2:	f7fe fea9 	bl	80080f8 <HAL_GetTick>
 80093a6:	1b80      	subs	r0, r0, r6
 80093a8:	2802      	cmp	r0, #2
 80093aa:	d900      	bls.n	80093ae <HAL_RCC_OscConfig+0x162>
 80093ac:	e089      	b.n	80094c2 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80093ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80093b0:	421f      	tst	r7, r3
 80093b2:	d0f6      	beq.n	80093a2 <HAL_RCC_OscConfig+0x156>
 80093b4:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80093b6:	075a      	lsls	r2, r3, #29
 80093b8:	d4ba      	bmi.n	8009330 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80093ba:	06db      	lsls	r3, r3, #27
 80093bc:	d512      	bpl.n	80093e4 <HAL_RCC_OscConfig+0x198>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80093be:	6963      	ldr	r3, [r4, #20]
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d100      	bne.n	80093c6 <HAL_RCC_OscConfig+0x17a>
 80093c4:	e13d      	b.n	8009642 <HAL_RCC_OscConfig+0x3f6>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80093c6:	3305      	adds	r3, #5
 80093c8:	d000      	beq.n	80093cc <HAL_RCC_OscConfig+0x180>
 80093ca:	e0e9      	b.n	80095a0 <HAL_RCC_OscConfig+0x354>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80093cc:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80093ce:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 80093d0:	4a68      	ldr	r2, [pc, #416]	; (8009574 <HAL_RCC_OscConfig+0x328>)
 80093d2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80093d4:	438b      	bics	r3, r1
 80093d6:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80093d8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80093da:	69a3      	ldr	r3, [r4, #24]
 80093dc:	4381      	bics	r1, r0
 80093de:	00db      	lsls	r3, r3, #3
 80093e0:	430b      	orrs	r3, r1
 80093e2:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80093e4:	6a23      	ldr	r3, [r4, #32]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d01b      	beq.n	8009422 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80093ea:	220c      	movs	r2, #12
 80093ec:	4e61      	ldr	r6, [pc, #388]	; (8009574 <HAL_RCC_OscConfig+0x328>)
 80093ee:	6871      	ldr	r1, [r6, #4]
 80093f0:	400a      	ands	r2, r1
 80093f2:	2a08      	cmp	r2, #8
 80093f4:	d100      	bne.n	80093f8 <HAL_RCC_OscConfig+0x1ac>
 80093f6:	e108      	b.n	800960a <HAL_RCC_OscConfig+0x3be>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80093f8:	2b02      	cmp	r3, #2
 80093fa:	d100      	bne.n	80093fe <HAL_RCC_OscConfig+0x1b2>
 80093fc:	e13f      	b.n	800967e <HAL_RCC_OscConfig+0x432>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093fe:	6833      	ldr	r3, [r6, #0]
 8009400:	4a60      	ldr	r2, [pc, #384]	; (8009584 <HAL_RCC_OscConfig+0x338>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009402:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8009404:	4013      	ands	r3, r2
 8009406:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8009408:	f7fe fe76 	bl	80080f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800940c:	04ad      	lsls	r5, r5, #18
        tickstart = HAL_GetTick();
 800940e:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009410:	e004      	b.n	800941c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009412:	f7fe fe71 	bl	80080f8 <HAL_GetTick>
 8009416:	1b00      	subs	r0, r0, r4
 8009418:	2802      	cmp	r0, #2
 800941a:	d852      	bhi.n	80094c2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800941c:	6833      	ldr	r3, [r6, #0]
 800941e:	422b      	tst	r3, r5
 8009420:	d1f7      	bne.n	8009412 <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }

  return HAL_OK;
 8009422:	2000      	movs	r0, #0
 8009424:	e00b      	b.n	800943e <HAL_RCC_OscConfig+0x1f2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8009426:	684a      	ldr	r2, [r1, #4]
 8009428:	03d2      	lsls	r2, r2, #15
 800942a:	d500      	bpl.n	800942e <HAL_RCC_OscConfig+0x1e2>
 800942c:	e75d      	b.n	80092ea <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800942e:	4a51      	ldr	r2, [pc, #324]	; (8009574 <HAL_RCC_OscConfig+0x328>)
 8009430:	6812      	ldr	r2, [r2, #0]
 8009432:	0792      	lsls	r2, r2, #30
 8009434:	d539      	bpl.n	80094aa <HAL_RCC_OscConfig+0x25e>
 8009436:	68e2      	ldr	r2, [r4, #12]
 8009438:	2a01      	cmp	r2, #1
 800943a:	d036      	beq.n	80094aa <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 800943c:	2001      	movs	r0, #1
}
 800943e:	b003      	add	sp, #12
 8009440:	bcc0      	pop	{r6, r7}
 8009442:	46b9      	mov	r9, r7
 8009444:	46b0      	mov	r8, r6
 8009446:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 8009448:	2201      	movs	r2, #1
 800944a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800944c:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 800944e:	4393      	bics	r3, r2
 8009450:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8009452:	f7fe fe51 	bl	80080f8 <HAL_GetTick>
 8009456:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009458:	e004      	b.n	8009464 <HAL_RCC_OscConfig+0x218>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800945a:	f7fe fe4d 	bl	80080f8 <HAL_GetTick>
 800945e:	1b80      	subs	r0, r0, r6
 8009460:	2802      	cmp	r0, #2
 8009462:	d82e      	bhi.n	80094c2 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009464:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009466:	421f      	tst	r7, r3
 8009468:	d1f7      	bne.n	800945a <HAL_RCC_OscConfig+0x20e>
 800946a:	6823      	ldr	r3, [r4, #0]
 800946c:	e7a3      	b.n	80093b6 <HAL_RCC_OscConfig+0x16a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800946e:	6842      	ldr	r2, [r0, #4]
 8009470:	03d2      	lsls	r2, r2, #15
 8009472:	d400      	bmi.n	8009476 <HAL_RCC_OscConfig+0x22a>
 8009474:	e702      	b.n	800927c <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009476:	4a3f      	ldr	r2, [pc, #252]	; (8009574 <HAL_RCC_OscConfig+0x328>)
 8009478:	6812      	ldr	r2, [r2, #0]
 800947a:	0392      	lsls	r2, r2, #14
 800947c:	d400      	bmi.n	8009480 <HAL_RCC_OscConfig+0x234>
 800947e:	e727      	b.n	80092d0 <HAL_RCC_OscConfig+0x84>
 8009480:	6862      	ldr	r2, [r4, #4]
 8009482:	2a00      	cmp	r2, #0
 8009484:	d000      	beq.n	8009488 <HAL_RCC_OscConfig+0x23c>
 8009486:	e723      	b.n	80092d0 <HAL_RCC_OscConfig+0x84>
 8009488:	e7d8      	b.n	800943c <HAL_RCC_OscConfig+0x1f0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800948a:	6833      	ldr	r3, [r6, #0]
 800948c:	433b      	orrs	r3, r7
 800948e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8009490:	f7fe fe32 	bl	80080f8 <HAL_GetTick>
 8009494:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009496:	e004      	b.n	80094a2 <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009498:	f7fe fe2e 	bl	80080f8 <HAL_GetTick>
 800949c:	1b40      	subs	r0, r0, r5
 800949e:	2864      	cmp	r0, #100	; 0x64
 80094a0:	d80f      	bhi.n	80094c2 <HAL_RCC_OscConfig+0x276>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094a2:	6833      	ldr	r3, [r6, #0]
 80094a4:	423b      	tst	r3, r7
 80094a6:	d0f7      	beq.n	8009498 <HAL_RCC_OscConfig+0x24c>
 80094a8:	e75a      	b.n	8009360 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094aa:	25f8      	movs	r5, #248	; 0xf8
 80094ac:	4831      	ldr	r0, [pc, #196]	; (8009574 <HAL_RCC_OscConfig+0x328>)
 80094ae:	6922      	ldr	r2, [r4, #16]
 80094b0:	6801      	ldr	r1, [r0, #0]
 80094b2:	00d2      	lsls	r2, r2, #3
 80094b4:	43a9      	bics	r1, r5
 80094b6:	430a      	orrs	r2, r1
 80094b8:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80094ba:	071a      	lsls	r2, r3, #28
 80094bc:	d400      	bmi.n	80094c0 <HAL_RCC_OscConfig+0x274>
 80094be:	e735      	b.n	800932c <HAL_RCC_OscConfig+0xe0>
 80094c0:	e762      	b.n	8009388 <HAL_RCC_OscConfig+0x13c>
            return HAL_TIMEOUT;
 80094c2:	2003      	movs	r0, #3
 80094c4:	e7bb      	b.n	800943e <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80094c6:	4d2b      	ldr	r5, [pc, #172]	; (8009574 <HAL_RCC_OscConfig+0x328>)
 80094c8:	4a2b      	ldr	r2, [pc, #172]	; (8009578 <HAL_RCC_OscConfig+0x32c>)
 80094ca:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80094cc:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80094ce:	4013      	ands	r3, r2
 80094d0:	602b      	str	r3, [r5, #0]
 80094d2:	682b      	ldr	r3, [r5, #0]
 80094d4:	4a29      	ldr	r2, [pc, #164]	; (800957c <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80094d6:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80094d8:	4013      	ands	r3, r2
 80094da:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80094dc:	f7fe fe0c 	bl	80080f8 <HAL_GetTick>
 80094e0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80094e2:	e004      	b.n	80094ee <HAL_RCC_OscConfig+0x2a2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80094e4:	f7fe fe08 	bl	80080f8 <HAL_GetTick>
 80094e8:	1b80      	subs	r0, r0, r6
 80094ea:	2864      	cmp	r0, #100	; 0x64
 80094ec:	d8e9      	bhi.n	80094c2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80094ee:	682b      	ldr	r3, [r5, #0]
 80094f0:	423b      	tst	r3, r7
 80094f2:	d1f7      	bne.n	80094e4 <HAL_RCC_OscConfig+0x298>
 80094f4:	6823      	ldr	r3, [r4, #0]
 80094f6:	e6eb      	b.n	80092d0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80094f8:	2201      	movs	r2, #1
 80094fa:	4e1e      	ldr	r6, [pc, #120]	; (8009574 <HAL_RCC_OscConfig+0x328>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094fc:	4d22      	ldr	r5, [pc, #136]	; (8009588 <HAL_RCC_OscConfig+0x33c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80094fe:	6a33      	ldr	r3, [r6, #32]
 8009500:	4393      	bics	r3, r2
 8009502:	6233      	str	r3, [r6, #32]
 8009504:	6a33      	ldr	r3, [r6, #32]
 8009506:	3203      	adds	r2, #3
 8009508:	4393      	bics	r3, r2
 800950a:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 800950c:	f7fe fdf4 	bl	80080f8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009510:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8009512:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009514:	4698      	mov	r8, r3
 8009516:	e004      	b.n	8009522 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009518:	f7fe fdee 	bl	80080f8 <HAL_GetTick>
 800951c:	1bc0      	subs	r0, r0, r7
 800951e:	42a8      	cmp	r0, r5
 8009520:	d8cf      	bhi.n	80094c2 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009522:	4642      	mov	r2, r8
 8009524:	6a33      	ldr	r3, [r6, #32]
 8009526:	421a      	tst	r2, r3
 8009528:	d1f6      	bne.n	8009518 <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 800952a:	464b      	mov	r3, r9
 800952c:	2b01      	cmp	r3, #1
 800952e:	d04f      	beq.n	80095d0 <HAL_RCC_OscConfig+0x384>
 8009530:	6823      	ldr	r3, [r4, #0]
 8009532:	e742      	b.n	80093ba <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 8009534:	2201      	movs	r2, #1
 8009536:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009538:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 800953a:	4393      	bics	r3, r2
 800953c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800953e:	f7fe fddb 	bl	80080f8 <HAL_GetTick>
 8009542:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009544:	e004      	b.n	8009550 <HAL_RCC_OscConfig+0x304>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009546:	f7fe fdd7 	bl	80080f8 <HAL_GetTick>
 800954a:	1b80      	subs	r0, r0, r6
 800954c:	2802      	cmp	r0, #2
 800954e:	d8b8      	bhi.n	80094c2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009550:	682b      	ldr	r3, [r5, #0]
 8009552:	421f      	tst	r7, r3
 8009554:	d1f7      	bne.n	8009546 <HAL_RCC_OscConfig+0x2fa>
 8009556:	6823      	ldr	r3, [r4, #0]
 8009558:	e6e6      	b.n	8009328 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800955a:	4906      	ldr	r1, [pc, #24]	; (8009574 <HAL_RCC_OscConfig+0x328>)
 800955c:	6a0a      	ldr	r2, [r1, #32]
 800955e:	4313      	orrs	r3, r2
 8009560:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8009562:	f7fe fdc9 	bl	80080f8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009566:	4b03      	ldr	r3, [pc, #12]	; (8009574 <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 8009568:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800956a:	4698      	mov	r8, r3
 800956c:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800956e:	4d06      	ldr	r5, [pc, #24]	; (8009588 <HAL_RCC_OscConfig+0x33c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009570:	e011      	b.n	8009596 <HAL_RCC_OscConfig+0x34a>
 8009572:	46c0      	nop			; (mov r8, r8)
 8009574:	40021000 	.word	0x40021000
 8009578:	fffeffff 	.word	0xfffeffff
 800957c:	fffbffff 	.word	0xfffbffff
 8009580:	40007000 	.word	0x40007000
 8009584:	feffffff 	.word	0xfeffffff
 8009588:	00001388 	.word	0x00001388
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800958c:	f7fe fdb4 	bl	80080f8 <HAL_GetTick>
 8009590:	1b80      	subs	r0, r0, r6
 8009592:	42a8      	cmp	r0, r5
 8009594:	d895      	bhi.n	80094c2 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009596:	4643      	mov	r3, r8
 8009598:	6a1b      	ldr	r3, [r3, #32]
 800959a:	421f      	tst	r7, r3
 800959c:	d0f6      	beq.n	800958c <HAL_RCC_OscConfig+0x340>
 800959e:	e7c4      	b.n	800952a <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_DISABLE();
 80095a0:	2204      	movs	r2, #4
 80095a2:	4d53      	ldr	r5, [pc, #332]	; (80096f0 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80095a4:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80095a6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80095a8:	4313      	orrs	r3, r2
 80095aa:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80095ac:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80095ae:	3a03      	subs	r2, #3
 80095b0:	4393      	bics	r3, r2
 80095b2:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80095b4:	f7fe fda0 	bl	80080f8 <HAL_GetTick>
 80095b8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80095ba:	e005      	b.n	80095c8 <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80095bc:	f7fe fd9c 	bl	80080f8 <HAL_GetTick>
 80095c0:	1b80      	subs	r0, r0, r6
 80095c2:	2802      	cmp	r0, #2
 80095c4:	d900      	bls.n	80095c8 <HAL_RCC_OscConfig+0x37c>
 80095c6:	e77c      	b.n	80094c2 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80095c8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80095ca:	421f      	tst	r7, r3
 80095cc:	d1f6      	bne.n	80095bc <HAL_RCC_OscConfig+0x370>
 80095ce:	e709      	b.n	80093e4 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_DISABLE();
 80095d0:	4a47      	ldr	r2, [pc, #284]	; (80096f0 <HAL_RCC_OscConfig+0x4a4>)
 80095d2:	4948      	ldr	r1, [pc, #288]	; (80096f4 <HAL_RCC_OscConfig+0x4a8>)
 80095d4:	69d3      	ldr	r3, [r2, #28]
 80095d6:	400b      	ands	r3, r1
 80095d8:	61d3      	str	r3, [r2, #28]
 80095da:	6823      	ldr	r3, [r4, #0]
 80095dc:	e6ed      	b.n	80093ba <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80095de:	2280      	movs	r2, #128	; 0x80
 80095e0:	4b43      	ldr	r3, [pc, #268]	; (80096f0 <HAL_RCC_OscConfig+0x4a4>)
 80095e2:	02d2      	lsls	r2, r2, #11
 80095e4:	6819      	ldr	r1, [r3, #0]
 80095e6:	430a      	orrs	r2, r1
 80095e8:	601a      	str	r2, [r3, #0]
 80095ea:	2280      	movs	r2, #128	; 0x80
 80095ec:	6819      	ldr	r1, [r3, #0]
 80095ee:	0252      	lsls	r2, r2, #9
 80095f0:	430a      	orrs	r2, r1
 80095f2:	601a      	str	r2, [r3, #0]
 80095f4:	e65b      	b.n	80092ae <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80095f6:	2104      	movs	r1, #4
 80095f8:	4b3d      	ldr	r3, [pc, #244]	; (80096f0 <HAL_RCC_OscConfig+0x4a4>)
 80095fa:	6a1a      	ldr	r2, [r3, #32]
 80095fc:	430a      	orrs	r2, r1
 80095fe:	621a      	str	r2, [r3, #32]
 8009600:	6a1a      	ldr	r2, [r3, #32]
 8009602:	3903      	subs	r1, #3
 8009604:	430a      	orrs	r2, r1
 8009606:	621a      	str	r2, [r3, #32]
 8009608:	e7ab      	b.n	8009562 <HAL_RCC_OscConfig+0x316>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800960a:	2b01      	cmp	r3, #1
 800960c:	d100      	bne.n	8009610 <HAL_RCC_OscConfig+0x3c4>
 800960e:	e715      	b.n	800943c <HAL_RCC_OscConfig+0x1f0>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009610:	2380      	movs	r3, #128	; 0x80
        pll_config  = RCC->CFGR;
 8009612:	6872      	ldr	r2, [r6, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009614:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009616:	025b      	lsls	r3, r3, #9
        return HAL_ERROR;
 8009618:	2001      	movs	r0, #1
        pll_config2 = RCC->CFGR2;
 800961a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800961c:	4013      	ands	r3, r2
 800961e:	42ab      	cmp	r3, r5
 8009620:	d000      	beq.n	8009624 <HAL_RCC_OscConfig+0x3d8>
 8009622:	e70c      	b.n	800943e <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8009624:	230f      	movs	r3, #15
 8009626:	400b      	ands	r3, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009628:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800962a:	428b      	cmp	r3, r1
 800962c:	d000      	beq.n	8009630 <HAL_RCC_OscConfig+0x3e4>
 800962e:	e706      	b.n	800943e <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8009630:	20f0      	movs	r0, #240	; 0xf0
 8009632:	0380      	lsls	r0, r0, #14
 8009634:	4002      	ands	r2, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8009636:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009638:	1a10      	subs	r0, r2, r0
 800963a:	1e42      	subs	r2, r0, #1
 800963c:	4190      	sbcs	r0, r2
  return HAL_OK;
 800963e:	b2c0      	uxtb	r0, r0
 8009640:	e6fd      	b.n	800943e <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSI14ADC_DISABLE();
 8009642:	2104      	movs	r1, #4
 8009644:	4e2a      	ldr	r6, [pc, #168]	; (80096f0 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8009646:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8009648:	6b72      	ldr	r2, [r6, #52]	; 0x34
 800964a:	430a      	orrs	r2, r1
 800964c:	6372      	str	r2, [r6, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800964e:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8009650:	4313      	orrs	r3, r2
 8009652:	6373      	str	r3, [r6, #52]	; 0x34
      tickstart = HAL_GetTick();
 8009654:	f7fe fd50 	bl	80080f8 <HAL_GetTick>
 8009658:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800965a:	e005      	b.n	8009668 <HAL_RCC_OscConfig+0x41c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800965c:	f7fe fd4c 	bl	80080f8 <HAL_GetTick>
 8009660:	1b40      	subs	r0, r0, r5
 8009662:	2802      	cmp	r0, #2
 8009664:	d900      	bls.n	8009668 <HAL_RCC_OscConfig+0x41c>
 8009666:	e72c      	b.n	80094c2 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8009668:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800966a:	421f      	tst	r7, r3
 800966c:	d0f6      	beq.n	800965c <HAL_RCC_OscConfig+0x410>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800966e:	21f8      	movs	r1, #248	; 0xf8
 8009670:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8009672:	69a3      	ldr	r3, [r4, #24]
 8009674:	438a      	bics	r2, r1
 8009676:	00db      	lsls	r3, r3, #3
 8009678:	4313      	orrs	r3, r2
 800967a:	6373      	str	r3, [r6, #52]	; 0x34
 800967c:	e6b2      	b.n	80093e4 <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_PLL_DISABLE();
 800967e:	6833      	ldr	r3, [r6, #0]
 8009680:	4a1d      	ldr	r2, [pc, #116]	; (80096f8 <HAL_RCC_OscConfig+0x4ac>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009682:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8009684:	4013      	ands	r3, r2
 8009686:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8009688:	f7fe fd36 	bl	80080f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800968c:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 800968e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009690:	e005      	b.n	800969e <HAL_RCC_OscConfig+0x452>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009692:	f7fe fd31 	bl	80080f8 <HAL_GetTick>
 8009696:	1b40      	subs	r0, r0, r5
 8009698:	2802      	cmp	r0, #2
 800969a:	d900      	bls.n	800969e <HAL_RCC_OscConfig+0x452>
 800969c:	e711      	b.n	80094c2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800969e:	6833      	ldr	r3, [r6, #0]
 80096a0:	423b      	tst	r3, r7
 80096a2:	d1f6      	bne.n	8009692 <HAL_RCC_OscConfig+0x446>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80096a4:	220f      	movs	r2, #15
 80096a6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80096a8:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80096aa:	4393      	bics	r3, r2
 80096ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80096ae:	04ad      	lsls	r5, r5, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80096b0:	4313      	orrs	r3, r2
 80096b2:	62f3      	str	r3, [r6, #44]	; 0x2c
 80096b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80096b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80096b8:	6872      	ldr	r2, [r6, #4]
 80096ba:	430b      	orrs	r3, r1
 80096bc:	490f      	ldr	r1, [pc, #60]	; (80096fc <HAL_RCC_OscConfig+0x4b0>)
 80096be:	400a      	ands	r2, r1
 80096c0:	4313      	orrs	r3, r2
 80096c2:	6073      	str	r3, [r6, #4]
        __HAL_RCC_PLL_ENABLE();
 80096c4:	2380      	movs	r3, #128	; 0x80
 80096c6:	6832      	ldr	r2, [r6, #0]
 80096c8:	045b      	lsls	r3, r3, #17
 80096ca:	4313      	orrs	r3, r2
 80096cc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80096ce:	f7fe fd13 	bl	80080f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80096d2:	4e07      	ldr	r6, [pc, #28]	; (80096f0 <HAL_RCC_OscConfig+0x4a4>)
        tickstart = HAL_GetTick();
 80096d4:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80096d6:	e005      	b.n	80096e4 <HAL_RCC_OscConfig+0x498>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80096d8:	f7fe fd0e 	bl	80080f8 <HAL_GetTick>
 80096dc:	1b00      	subs	r0, r0, r4
 80096de:	2802      	cmp	r0, #2
 80096e0:	d900      	bls.n	80096e4 <HAL_RCC_OscConfig+0x498>
 80096e2:	e6ee      	b.n	80094c2 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80096e4:	6833      	ldr	r3, [r6, #0]
 80096e6:	422b      	tst	r3, r5
 80096e8:	d0f6      	beq.n	80096d8 <HAL_RCC_OscConfig+0x48c>
  return HAL_OK;
 80096ea:	2000      	movs	r0, #0
 80096ec:	e6a7      	b.n	800943e <HAL_RCC_OscConfig+0x1f2>
 80096ee:	46c0      	nop			; (mov r8, r8)
 80096f0:	40021000 	.word	0x40021000
 80096f4:	efffffff 	.word	0xefffffff
 80096f8:	feffffff 	.word	0xfeffffff
 80096fc:	ffc2ffff 	.word	0xffc2ffff

08009700 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009700:	b570      	push	{r4, r5, r6, lr}
 8009702:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8009704:	4669      	mov	r1, sp
 8009706:	000a      	movs	r2, r1
 8009708:	4b15      	ldr	r3, [pc, #84]	; (8009760 <HAL_RCC_GetSysClockFreq+0x60>)
 800970a:	cb31      	ldmia	r3!, {r0, r4, r5}
 800970c:	c231      	stmia	r2!, {r0, r4, r5}
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	6013      	str	r3, [r2, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8009712:	aa04      	add	r2, sp, #16
 8009714:	0010      	movs	r0, r2
 8009716:	4b13      	ldr	r3, [pc, #76]	; (8009764 <HAL_RCC_GetSysClockFreq+0x64>)
 8009718:	cb70      	ldmia	r3!, {r4, r5, r6}
 800971a:	c070      	stmia	r0!, {r4, r5, r6}
 800971c:	681b      	ldr	r3, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800971e:	4c12      	ldr	r4, [pc, #72]	; (8009768 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8009720:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009722:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8009724:	6860      	ldr	r0, [r4, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8009726:	4003      	ands	r3, r0
 8009728:	2b08      	cmp	r3, #8
 800972a:	d002      	beq.n	8009732 <HAL_RCC_GetSysClockFreq+0x32>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800972c:	480f      	ldr	r0, [pc, #60]	; (800976c <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800972e:	b008      	add	sp, #32
 8009730:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8009732:	3307      	adds	r3, #7
 8009734:	0c85      	lsrs	r5, r0, #18
 8009736:	401d      	ands	r5, r3
 8009738:	5d4d      	ldrb	r5, [r1, r5]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800973a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800973c:	400b      	ands	r3, r1
 800973e:	5cd1      	ldrb	r1, [r2, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009740:	03c3      	lsls	r3, r0, #15
 8009742:	d504      	bpl.n	800974e <HAL_RCC_GetSysClockFreq+0x4e>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8009744:	4809      	ldr	r0, [pc, #36]	; (800976c <HAL_RCC_GetSysClockFreq+0x6c>)
 8009746:	f7f6 fce9 	bl	800011c <__udivsi3>
 800974a:	4368      	muls	r0, r5
 800974c:	e7ef      	b.n	800972e <HAL_RCC_GetSysClockFreq+0x2e>
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800974e:	016b      	lsls	r3, r5, #5
 8009750:	1b5b      	subs	r3, r3, r5
 8009752:	0198      	lsls	r0, r3, #6
 8009754:	1ac0      	subs	r0, r0, r3
 8009756:	00c0      	lsls	r0, r0, #3
 8009758:	1940      	adds	r0, r0, r5
 800975a:	0200      	lsls	r0, r0, #8
 800975c:	e7e7      	b.n	800972e <HAL_RCC_GetSysClockFreq+0x2e>
 800975e:	46c0      	nop			; (mov r8, r8)
 8009760:	0800e46c 	.word	0x0800e46c
 8009764:	0800e480 	.word	0x0800e480
 8009768:	40021000 	.word	0x40021000
 800976c:	007a1200 	.word	0x007a1200

08009770 <HAL_RCC_ClockConfig>:
{
 8009770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009772:	46ce      	mov	lr, r9
 8009774:	4647      	mov	r7, r8
 8009776:	0004      	movs	r4, r0
 8009778:	000d      	movs	r5, r1
 800977a:	b580      	push	{r7, lr}
  if(RCC_ClkInitStruct == NULL)
 800977c:	2800      	cmp	r0, #0
 800977e:	d00d      	beq.n	800979c <HAL_RCC_ClockConfig+0x2c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009780:	2301      	movs	r3, #1
 8009782:	493b      	ldr	r1, [pc, #236]	; (8009870 <HAL_RCC_ClockConfig+0x100>)
 8009784:	680a      	ldr	r2, [r1, #0]
 8009786:	401a      	ands	r2, r3
 8009788:	42aa      	cmp	r2, r5
 800978a:	d20c      	bcs.n	80097a6 <HAL_RCC_ClockConfig+0x36>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800978c:	680a      	ldr	r2, [r1, #0]
 800978e:	439a      	bics	r2, r3
 8009790:	432a      	orrs	r2, r5
 8009792:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009794:	680a      	ldr	r2, [r1, #0]
 8009796:	4013      	ands	r3, r2
 8009798:	42ab      	cmp	r3, r5
 800979a:	d004      	beq.n	80097a6 <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 800979c:	2001      	movs	r0, #1
}
 800979e:	bcc0      	pop	{r6, r7}
 80097a0:	46b9      	mov	r9, r7
 80097a2:	46b0      	mov	r8, r6
 80097a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80097a6:	6823      	ldr	r3, [r4, #0]
 80097a8:	079a      	lsls	r2, r3, #30
 80097aa:	d50e      	bpl.n	80097ca <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097ac:	075a      	lsls	r2, r3, #29
 80097ae:	d505      	bpl.n	80097bc <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80097b0:	22e0      	movs	r2, #224	; 0xe0
 80097b2:	4930      	ldr	r1, [pc, #192]	; (8009874 <HAL_RCC_ClockConfig+0x104>)
 80097b4:	00d2      	lsls	r2, r2, #3
 80097b6:	6848      	ldr	r0, [r1, #4]
 80097b8:	4302      	orrs	r2, r0
 80097ba:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80097bc:	20f0      	movs	r0, #240	; 0xf0
 80097be:	492d      	ldr	r1, [pc, #180]	; (8009874 <HAL_RCC_ClockConfig+0x104>)
 80097c0:	684a      	ldr	r2, [r1, #4]
 80097c2:	4382      	bics	r2, r0
 80097c4:	68a0      	ldr	r0, [r4, #8]
 80097c6:	4302      	orrs	r2, r0
 80097c8:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80097ca:	07db      	lsls	r3, r3, #31
 80097cc:	d522      	bpl.n	8009814 <HAL_RCC_ClockConfig+0xa4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097ce:	4b29      	ldr	r3, [pc, #164]	; (8009874 <HAL_RCC_ClockConfig+0x104>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097d0:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097d2:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097d4:	2a01      	cmp	r2, #1
 80097d6:	d046      	beq.n	8009866 <HAL_RCC_ClockConfig+0xf6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80097d8:	2a02      	cmp	r2, #2
 80097da:	d041      	beq.n	8009860 <HAL_RCC_ClockConfig+0xf0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097dc:	079b      	lsls	r3, r3, #30
 80097de:	d5dd      	bpl.n	800979c <HAL_RCC_ClockConfig+0x2c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80097e0:	2103      	movs	r1, #3
 80097e2:	4e24      	ldr	r6, [pc, #144]	; (8009874 <HAL_RCC_ClockConfig+0x104>)
 80097e4:	6873      	ldr	r3, [r6, #4]
 80097e6:	438b      	bics	r3, r1
 80097e8:	4313      	orrs	r3, r2
 80097ea:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80097ec:	f7fe fc84 	bl	80080f8 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097f0:	230c      	movs	r3, #12
 80097f2:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80097f4:	4b20      	ldr	r3, [pc, #128]	; (8009878 <HAL_RCC_ClockConfig+0x108>)
    tickstart = HAL_GetTick();
 80097f6:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80097f8:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097fa:	e004      	b.n	8009806 <HAL_RCC_ClockConfig+0x96>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80097fc:	f7fe fc7c 	bl	80080f8 <HAL_GetTick>
 8009800:	1bc0      	subs	r0, r0, r7
 8009802:	4548      	cmp	r0, r9
 8009804:	d832      	bhi.n	800986c <HAL_RCC_ClockConfig+0xfc>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009806:	4643      	mov	r3, r8
 8009808:	6872      	ldr	r2, [r6, #4]
 800980a:	401a      	ands	r2, r3
 800980c:	6863      	ldr	r3, [r4, #4]
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	429a      	cmp	r2, r3
 8009812:	d1f3      	bne.n	80097fc <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009814:	2101      	movs	r1, #1
 8009816:	4a16      	ldr	r2, [pc, #88]	; (8009870 <HAL_RCC_ClockConfig+0x100>)
 8009818:	6813      	ldr	r3, [r2, #0]
 800981a:	400b      	ands	r3, r1
 800981c:	42ab      	cmp	r3, r5
 800981e:	d905      	bls.n	800982c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009820:	6813      	ldr	r3, [r2, #0]
 8009822:	438b      	bics	r3, r1
 8009824:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009826:	6813      	ldr	r3, [r2, #0]
 8009828:	4219      	tst	r1, r3
 800982a:	d1b7      	bne.n	800979c <HAL_RCC_ClockConfig+0x2c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800982c:	6823      	ldr	r3, [r4, #0]
 800982e:	075b      	lsls	r3, r3, #29
 8009830:	d506      	bpl.n	8009840 <HAL_RCC_ClockConfig+0xd0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8009832:	4a10      	ldr	r2, [pc, #64]	; (8009874 <HAL_RCC_ClockConfig+0x104>)
 8009834:	4911      	ldr	r1, [pc, #68]	; (800987c <HAL_RCC_ClockConfig+0x10c>)
 8009836:	6853      	ldr	r3, [r2, #4]
 8009838:	400b      	ands	r3, r1
 800983a:	68e1      	ldr	r1, [r4, #12]
 800983c:	430b      	orrs	r3, r1
 800983e:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8009840:	f7ff ff5e 	bl	8009700 <HAL_RCC_GetSysClockFreq>
 8009844:	4b0b      	ldr	r3, [pc, #44]	; (8009874 <HAL_RCC_ClockConfig+0x104>)
 8009846:	4a0e      	ldr	r2, [pc, #56]	; (8009880 <HAL_RCC_ClockConfig+0x110>)
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	061b      	lsls	r3, r3, #24
 800984c:	0f1b      	lsrs	r3, r3, #28
 800984e:	5cd3      	ldrb	r3, [r2, r3]
 8009850:	40d8      	lsrs	r0, r3
 8009852:	4b0c      	ldr	r3, [pc, #48]	; (8009884 <HAL_RCC_ClockConfig+0x114>)
 8009854:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8009856:	2000      	movs	r0, #0
 8009858:	f7fe fc0c 	bl	8008074 <HAL_InitTick>
  return HAL_OK;
 800985c:	2000      	movs	r0, #0
 800985e:	e79e      	b.n	800979e <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009860:	019b      	lsls	r3, r3, #6
 8009862:	d4bd      	bmi.n	80097e0 <HAL_RCC_ClockConfig+0x70>
 8009864:	e79a      	b.n	800979c <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009866:	039b      	lsls	r3, r3, #14
 8009868:	d4ba      	bmi.n	80097e0 <HAL_RCC_ClockConfig+0x70>
 800986a:	e797      	b.n	800979c <HAL_RCC_ClockConfig+0x2c>
        return HAL_TIMEOUT;
 800986c:	2003      	movs	r0, #3
 800986e:	e796      	b.n	800979e <HAL_RCC_ClockConfig+0x2e>
 8009870:	40022000 	.word	0x40022000
 8009874:	40021000 	.word	0x40021000
 8009878:	00001388 	.word	0x00001388
 800987c:	fffff8ff 	.word	0xfffff8ff
 8009880:	0800c068 	.word	0x0800c068
 8009884:	20000000 	.word	0x20000000

08009888 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8009888:	4b04      	ldr	r3, [pc, #16]	; (800989c <HAL_RCC_GetPCLK1Freq+0x14>)
 800988a:	4a05      	ldr	r2, [pc, #20]	; (80098a0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	055b      	lsls	r3, r3, #21
 8009890:	0f5b      	lsrs	r3, r3, #29
 8009892:	5cd3      	ldrb	r3, [r2, r3]
 8009894:	4a03      	ldr	r2, [pc, #12]	; (80098a4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009896:	6810      	ldr	r0, [r2, #0]
 8009898:	40d8      	lsrs	r0, r3
}    
 800989a:	4770      	bx	lr
 800989c:	40021000 	.word	0x40021000
 80098a0:	0800c078 	.word	0x0800c078
 80098a4:	20000000 	.word	0x20000000

080098a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80098a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098aa:	46ce      	mov	lr, r9
 80098ac:	4647      	mov	r7, r8
 80098ae:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80098b0:	6803      	ldr	r3, [r0, #0]
{
 80098b2:	0004      	movs	r4, r0
 80098b4:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80098b6:	03da      	lsls	r2, r3, #15
 80098b8:	d532      	bpl.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80098ba:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80098bc:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80098be:	4b3f      	ldr	r3, [pc, #252]	; (80099bc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80098c0:	0552      	lsls	r2, r2, #21
 80098c2:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 80098c4:	4680      	mov	r8, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80098c6:	4211      	tst	r1, r2
 80098c8:	d042      	beq.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098ca:	2680      	movs	r6, #128	; 0x80
 80098cc:	4d3c      	ldr	r5, [pc, #240]	; (80099c0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80098ce:	0076      	lsls	r6, r6, #1
 80098d0:	682b      	ldr	r3, [r5, #0]
 80098d2:	4233      	tst	r3, r6
 80098d4:	d04b      	beq.n	800996e <HAL_RCCEx_PeriphCLKConfig+0xc6>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80098d6:	4d39      	ldr	r5, [pc, #228]	; (80099bc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80098d8:	22c0      	movs	r2, #192	; 0xc0
 80098da:	6a2b      	ldr	r3, [r5, #32]
 80098dc:	0092      	lsls	r2, r2, #2
 80098de:	0018      	movs	r0, r3
 80098e0:	4010      	ands	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80098e2:	4213      	tst	r3, r2
 80098e4:	d062      	beq.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x104>
 80098e6:	6861      	ldr	r1, [r4, #4]
 80098e8:	400a      	ands	r2, r1
 80098ea:	4282      	cmp	r2, r0
 80098ec:	d00e      	beq.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80098ee:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80098f0:	6a28      	ldr	r0, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80098f2:	6a2e      	ldr	r6, [r5, #32]
 80098f4:	0252      	lsls	r2, r2, #9
 80098f6:	4332      	orrs	r2, r6
 80098f8:	622a      	str	r2, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80098fa:	6a2a      	ldr	r2, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80098fc:	4b31      	ldr	r3, [pc, #196]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 80098fe:	4e32      	ldr	r6, [pc, #200]	; (80099c8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009900:	4003      	ands	r3, r0
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009902:	4032      	ands	r2, r6
 8009904:	622a      	str	r2, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8009906:	622b      	str	r3, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009908:	07c3      	lsls	r3, r0, #31
 800990a:	d440      	bmi.n	800998e <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800990c:	4a2b      	ldr	r2, [pc, #172]	; (80099bc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800990e:	482d      	ldr	r0, [pc, #180]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8009910:	6a13      	ldr	r3, [r2, #32]
 8009912:	4003      	ands	r3, r0
 8009914:	430b      	orrs	r3, r1
 8009916:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009918:	4643      	mov	r3, r8
 800991a:	2b01      	cmp	r3, #1
 800991c:	d048      	beq.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800991e:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009920:	07da      	lsls	r2, r3, #31
 8009922:	d506      	bpl.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009924:	2003      	movs	r0, #3
 8009926:	4925      	ldr	r1, [pc, #148]	; (80099bc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8009928:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800992a:	4382      	bics	r2, r0
 800992c:	68a0      	ldr	r0, [r4, #8]
 800992e:	4302      	orrs	r2, r0
 8009930:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8009932:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009934:	069b      	lsls	r3, r3, #26
 8009936:	d506      	bpl.n	8009946 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009938:	2110      	movs	r1, #16
 800993a:	4a20      	ldr	r2, [pc, #128]	; (80099bc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800993c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800993e:	438b      	bics	r3, r1
 8009940:	68e1      	ldr	r1, [r4, #12]
 8009942:	430b      	orrs	r3, r1
 8009944:	6313      	str	r3, [r2, #48]	; 0x30
}
 8009946:	b003      	add	sp, #12
 8009948:	bcc0      	pop	{r6, r7}
 800994a:	46b9      	mov	r9, r7
 800994c:	46b0      	mov	r8, r6
 800994e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8009950:	69d9      	ldr	r1, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009952:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 8009954:	4311      	orrs	r1, r2
 8009956:	61d9      	str	r1, [r3, #28]
 8009958:	69db      	ldr	r3, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800995a:	4d19      	ldr	r5, [pc, #100]	; (80099c0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800995c:	401a      	ands	r2, r3
 800995e:	9201      	str	r2, [sp, #4]
 8009960:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8009962:	2301      	movs	r3, #1
 8009964:	4698      	mov	r8, r3
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009966:	682b      	ldr	r3, [r5, #0]
 8009968:	0076      	lsls	r6, r6, #1
 800996a:	4233      	tst	r3, r6
 800996c:	d1b3      	bne.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800996e:	682b      	ldr	r3, [r5, #0]
 8009970:	4333      	orrs	r3, r6
 8009972:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8009974:	f7fe fbc0 	bl	80080f8 <HAL_GetTick>
 8009978:	0007      	movs	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800997a:	682b      	ldr	r3, [r5, #0]
 800997c:	4233      	tst	r3, r6
 800997e:	d1aa      	bne.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009980:	f7fe fbba 	bl	80080f8 <HAL_GetTick>
 8009984:	1bc0      	subs	r0, r0, r7
 8009986:	2864      	cmp	r0, #100	; 0x64
 8009988:	d9f7      	bls.n	800997a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          return HAL_TIMEOUT;
 800998a:	2003      	movs	r0, #3
 800998c:	e7db      	b.n	8009946 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 800998e:	f7fe fbb3 	bl	80080f8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009992:	4b0e      	ldr	r3, [pc, #56]	; (80099cc <HAL_RCCEx_PeriphCLKConfig+0x124>)
        tickstart = HAL_GetTick();
 8009994:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009996:	2702      	movs	r7, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009998:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800999a:	e004      	b.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800999c:	f7fe fbac 	bl	80080f8 <HAL_GetTick>
 80099a0:	1b80      	subs	r0, r0, r6
 80099a2:	4548      	cmp	r0, r9
 80099a4:	d8f1      	bhi.n	800998a <HAL_RCCEx_PeriphCLKConfig+0xe2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099a6:	6a2b      	ldr	r3, [r5, #32]
 80099a8:	421f      	tst	r7, r3
 80099aa:	d0f7      	beq.n	800999c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80099ac:	6861      	ldr	r1, [r4, #4]
 80099ae:	e7ad      	b.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x64>
      __HAL_RCC_PWR_CLK_DISABLE();
 80099b0:	69d3      	ldr	r3, [r2, #28]
 80099b2:	4907      	ldr	r1, [pc, #28]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80099b4:	400b      	ands	r3, r1
 80099b6:	61d3      	str	r3, [r2, #28]
 80099b8:	6823      	ldr	r3, [r4, #0]
 80099ba:	e7b1      	b.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80099bc:	40021000 	.word	0x40021000
 80099c0:	40007000 	.word	0x40007000
 80099c4:	fffffcff 	.word	0xfffffcff
 80099c8:	fffeffff 	.word	0xfffeffff
 80099cc:	00001388 	.word	0x00001388
 80099d0:	efffffff 	.word	0xefffffff

080099d4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099d4:	2201      	movs	r2, #1
{
 80099d6:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80099d8:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099da:	6a03      	ldr	r3, [r0, #32]
 80099dc:	4393      	bics	r3, r2
 80099de:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80099e0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80099e2:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80099e4:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80099e6:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099e8:	680d      	ldr	r5, [r1, #0]
 80099ea:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80099ec:	2502      	movs	r5, #2
 80099ee:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80099f0:	688d      	ldr	r5, [r1, #8]
 80099f2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80099f4:	4d0e      	ldr	r5, [pc, #56]	; (8009a30 <TIM_OC1_SetConfig+0x5c>)
 80099f6:	42a8      	cmp	r0, r5
 80099f8:	d008      	beq.n	8009a0c <TIM_OC1_SetConfig+0x38>
 80099fa:	4d0e      	ldr	r5, [pc, #56]	; (8009a34 <TIM_OC1_SetConfig+0x60>)
 80099fc:	42a8      	cmp	r0, r5
 80099fe:	d005      	beq.n	8009a0c <TIM_OC1_SetConfig+0x38>
 8009a00:	4d0d      	ldr	r5, [pc, #52]	; (8009a38 <TIM_OC1_SetConfig+0x64>)
 8009a02:	42a8      	cmp	r0, r5
 8009a04:	d002      	beq.n	8009a0c <TIM_OC1_SetConfig+0x38>
 8009a06:	4d0d      	ldr	r5, [pc, #52]	; (8009a3c <TIM_OC1_SetConfig+0x68>)
 8009a08:	42a8      	cmp	r0, r5
 8009a0a:	d10b      	bne.n	8009a24 <TIM_OC1_SetConfig+0x50>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a0c:	2508      	movs	r5, #8
 8009a0e:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a10:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a12:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8009a14:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a16:	2504      	movs	r5, #4
 8009a18:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a1a:	4d09      	ldr	r5, [pc, #36]	; (8009a40 <TIM_OC1_SetConfig+0x6c>)
 8009a1c:	402a      	ands	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a1e:	694d      	ldr	r5, [r1, #20]
 8009a20:	4335      	orrs	r5, r6
 8009a22:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a24:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a26:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8009a28:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8009a2a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a2c:	6203      	str	r3, [r0, #32]
}
 8009a2e:	bd70      	pop	{r4, r5, r6, pc}
 8009a30:	40012c00 	.word	0x40012c00
 8009a34:	40014000 	.word	0x40014000
 8009a38:	40014400 	.word	0x40014400
 8009a3c:	40014800 	.word	0x40014800
 8009a40:	fffffcff 	.word	0xfffffcff

08009a44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a44:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009a46:	2473      	movs	r4, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a48:	6a03      	ldr	r3, [r0, #32]
 8009a4a:	4a17      	ldr	r2, [pc, #92]	; (8009aa8 <TIM_OC3_SetConfig+0x64>)
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8009a50:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8009a52:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8009a54:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009a56:	43a5      	bics	r5, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a58:	680c      	ldr	r4, [r1, #0]
 8009a5a:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009a5c:	4c13      	ldr	r4, [pc, #76]	; (8009aac <TIM_OC3_SetConfig+0x68>)
 8009a5e:	4023      	ands	r3, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009a60:	688c      	ldr	r4, [r1, #8]
 8009a62:	0224      	lsls	r4, r4, #8
 8009a64:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009a66:	4c12      	ldr	r4, [pc, #72]	; (8009ab0 <TIM_OC3_SetConfig+0x6c>)
 8009a68:	42a0      	cmp	r0, r4
 8009a6a:	d015      	beq.n	8009a98 <TIM_OC3_SetConfig+0x54>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a6c:	4c11      	ldr	r4, [pc, #68]	; (8009ab4 <TIM_OC3_SetConfig+0x70>)
 8009a6e:	42a0      	cmp	r0, r4
 8009a70:	d005      	beq.n	8009a7e <TIM_OC3_SetConfig+0x3a>
 8009a72:	4c11      	ldr	r4, [pc, #68]	; (8009ab8 <TIM_OC3_SetConfig+0x74>)
 8009a74:	42a0      	cmp	r0, r4
 8009a76:	d002      	beq.n	8009a7e <TIM_OC3_SetConfig+0x3a>
 8009a78:	4c10      	ldr	r4, [pc, #64]	; (8009abc <TIM_OC3_SetConfig+0x78>)
 8009a7a:	42a0      	cmp	r0, r4
 8009a7c:	d106      	bne.n	8009a8c <TIM_OC3_SetConfig+0x48>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a7e:	4c10      	ldr	r4, [pc, #64]	; (8009ac0 <TIM_OC3_SetConfig+0x7c>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009a80:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a82:	4014      	ands	r4, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009a84:	698a      	ldr	r2, [r1, #24]
 8009a86:	4332      	orrs	r2, r6
 8009a88:	0112      	lsls	r2, r2, #4
 8009a8a:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a8c:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009a8e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8009a90:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8009a92:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a94:	6203      	str	r3, [r0, #32]
}
 8009a96:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 8009a98:	4c0a      	ldr	r4, [pc, #40]	; (8009ac4 <TIM_OC3_SetConfig+0x80>)
 8009a9a:	401c      	ands	r4, r3
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009a9c:	68cb      	ldr	r3, [r1, #12]
 8009a9e:	021b      	lsls	r3, r3, #8
 8009aa0:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC3NE;
 8009aa2:	4c09      	ldr	r4, [pc, #36]	; (8009ac8 <TIM_OC3_SetConfig+0x84>)
 8009aa4:	4023      	ands	r3, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009aa6:	e7ea      	b.n	8009a7e <TIM_OC3_SetConfig+0x3a>
 8009aa8:	fffffeff 	.word	0xfffffeff
 8009aac:	fffffdff 	.word	0xfffffdff
 8009ab0:	40012c00 	.word	0x40012c00
 8009ab4:	40014000 	.word	0x40014000
 8009ab8:	40014400 	.word	0x40014400
 8009abc:	40014800 	.word	0x40014800
 8009ac0:	ffffcfff 	.word	0xffffcfff
 8009ac4:	fffff7ff 	.word	0xfffff7ff
 8009ac8:	fffffbff 	.word	0xfffffbff

08009acc <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009acc:	6a03      	ldr	r3, [r0, #32]
 8009ace:	4a14      	ldr	r2, [pc, #80]	; (8009b20 <TIM_OC4_SetConfig+0x54>)
{
 8009ad0:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009ad2:	4013      	ands	r3, r2
 8009ad4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ad6:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ad8:	4d12      	ldr	r5, [pc, #72]	; (8009b24 <TIM_OC4_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 8009ada:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8009adc:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ade:	402c      	ands	r4, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ae0:	680d      	ldr	r5, [r1, #0]
 8009ae2:	022d      	lsls	r5, r5, #8
 8009ae4:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009ae6:	4d10      	ldr	r5, [pc, #64]	; (8009b28 <TIM_OC4_SetConfig+0x5c>)
 8009ae8:	4015      	ands	r5, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009aea:	688a      	ldr	r2, [r1, #8]
 8009aec:	0312      	lsls	r2, r2, #12
 8009aee:	432a      	orrs	r2, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009af0:	4d0e      	ldr	r5, [pc, #56]	; (8009b2c <TIM_OC4_SetConfig+0x60>)
 8009af2:	42a8      	cmp	r0, r5
 8009af4:	d008      	beq.n	8009b08 <TIM_OC4_SetConfig+0x3c>
 8009af6:	4d0e      	ldr	r5, [pc, #56]	; (8009b30 <TIM_OC4_SetConfig+0x64>)
 8009af8:	42a8      	cmp	r0, r5
 8009afa:	d005      	beq.n	8009b08 <TIM_OC4_SetConfig+0x3c>
 8009afc:	4d0d      	ldr	r5, [pc, #52]	; (8009b34 <TIM_OC4_SetConfig+0x68>)
 8009afe:	42a8      	cmp	r0, r5
 8009b00:	d002      	beq.n	8009b08 <TIM_OC4_SetConfig+0x3c>
 8009b02:	4d0d      	ldr	r5, [pc, #52]	; (8009b38 <TIM_OC4_SetConfig+0x6c>)
 8009b04:	42a8      	cmp	r0, r5
 8009b06:	d104      	bne.n	8009b12 <TIM_OC4_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009b08:	4d0c      	ldr	r5, [pc, #48]	; (8009b3c <TIM_OC4_SetConfig+0x70>)
 8009b0a:	402b      	ands	r3, r5

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009b0c:	694d      	ldr	r5, [r1, #20]
 8009b0e:	01ad      	lsls	r5, r5, #6
 8009b10:	432b      	orrs	r3, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b12:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009b14:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8009b16:	61c4      	str	r4, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8009b18:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b1a:	6202      	str	r2, [r0, #32]
}
 8009b1c:	bd30      	pop	{r4, r5, pc}
 8009b1e:	46c0      	nop			; (mov r8, r8)
 8009b20:	ffffefff 	.word	0xffffefff
 8009b24:	ffff8cff 	.word	0xffff8cff
 8009b28:	ffffdfff 	.word	0xffffdfff
 8009b2c:	40012c00 	.word	0x40012c00
 8009b30:	40014000 	.word	0x40014000
 8009b34:	40014400 	.word	0x40014400
 8009b38:	40014800 	.word	0x40014800
 8009b3c:	ffffbfff 	.word	0xffffbfff

08009b40 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8009b40:	223d      	movs	r2, #61	; 0x3d
 8009b42:	5c81      	ldrb	r1, [r0, r2]
{
 8009b44:	0003      	movs	r3, r0
    return HAL_ERROR;
 8009b46:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8009b48:	2901      	cmp	r1, #1
 8009b4a:	d112      	bne.n	8009b72 <HAL_TIM_Base_Start_IT+0x32>
  htim->State = HAL_TIM_STATE_BUSY;
 8009b4c:	3101      	adds	r1, #1
 8009b4e:	5499      	strb	r1, [r3, r2]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	68da      	ldr	r2, [r3, #12]
 8009b54:	4302      	orrs	r2, r0
 8009b56:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b58:	4a0d      	ldr	r2, [pc, #52]	; (8009b90 <HAL_TIM_Base_Start_IT+0x50>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d00a      	beq.n	8009b74 <HAL_TIM_Base_Start_IT+0x34>
 8009b5e:	4a0d      	ldr	r2, [pc, #52]	; (8009b94 <HAL_TIM_Base_Start_IT+0x54>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d007      	beq.n	8009b74 <HAL_TIM_Base_Start_IT+0x34>
 8009b64:	4a0c      	ldr	r2, [pc, #48]	; (8009b98 <HAL_TIM_Base_Start_IT+0x58>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d004      	beq.n	8009b74 <HAL_TIM_Base_Start_IT+0x34>
    __HAL_TIM_ENABLE(htim);
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	4310      	orrs	r0, r2
 8009b6e:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8009b70:	2000      	movs	r0, #0
}
 8009b72:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b74:	2207      	movs	r2, #7
 8009b76:	6899      	ldr	r1, [r3, #8]
 8009b78:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b7a:	2a06      	cmp	r2, #6
 8009b7c:	d005      	beq.n	8009b8a <HAL_TIM_Base_Start_IT+0x4a>
      __HAL_TIM_ENABLE(htim);
 8009b7e:	2101      	movs	r1, #1
 8009b80:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8009b82:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8009b84:	430a      	orrs	r2, r1
 8009b86:	601a      	str	r2, [r3, #0]
 8009b88:	e7f3      	b.n	8009b72 <HAL_TIM_Base_Start_IT+0x32>
  return HAL_OK;
 8009b8a:	2000      	movs	r0, #0
 8009b8c:	e7f1      	b.n	8009b72 <HAL_TIM_Base_Start_IT+0x32>
 8009b8e:	46c0      	nop			; (mov r8, r8)
 8009b90:	40012c00 	.word	0x40012c00
 8009b94:	40000400 	.word	0x40000400
 8009b98:	40014000 	.word	0x40014000

08009b9c <HAL_TIM_OC_Start_IT>:
{
 8009b9c:	0003      	movs	r3, r0
 8009b9e:	b510      	push	{r4, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009ba0:	2900      	cmp	r1, #0
 8009ba2:	d123      	bne.n	8009bec <HAL_TIM_OC_Start_IT+0x50>
 8009ba4:	223e      	movs	r2, #62	; 0x3e
 8009ba6:	5c80      	ldrb	r0, [r0, r2]
 8009ba8:	2801      	cmp	r0, #1
 8009baa:	d128      	bne.n	8009bfe <HAL_TIM_OC_Start_IT+0x62>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009bac:	2002      	movs	r0, #2
 8009bae:	5498      	strb	r0, [r3, r2]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	68da      	ldr	r2, [r3, #12]
 8009bb4:	4302      	orrs	r2, r0
 8009bb6:	60da      	str	r2, [r3, #12]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009bb8:	221f      	movs	r2, #31
 8009bba:	4011      	ands	r1, r2
 8009bbc:	3a1e      	subs	r2, #30
 8009bbe:	408a      	lsls	r2, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009bc0:	6a19      	ldr	r1, [r3, #32]
 8009bc2:	4391      	bics	r1, r2
 8009bc4:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009bc6:	6a19      	ldr	r1, [r3, #32]
 8009bc8:	430a      	orrs	r2, r1
 8009bca:	621a      	str	r2, [r3, #32]
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009bcc:	4a26      	ldr	r2, [pc, #152]	; (8009c68 <HAL_TIM_OC_Start_IT+0xcc>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d021      	beq.n	8009c16 <HAL_TIM_OC_Start_IT+0x7a>
 8009bd2:	4a26      	ldr	r2, [pc, #152]	; (8009c6c <HAL_TIM_OC_Start_IT+0xd0>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d01e      	beq.n	8009c16 <HAL_TIM_OC_Start_IT+0x7a>
 8009bd8:	4a25      	ldr	r2, [pc, #148]	; (8009c70 <HAL_TIM_OC_Start_IT+0xd4>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d02b      	beq.n	8009c36 <HAL_TIM_OC_Start_IT+0x9a>
 8009bde:	4a25      	ldr	r2, [pc, #148]	; (8009c74 <HAL_TIM_OC_Start_IT+0xd8>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d028      	beq.n	8009c36 <HAL_TIM_OC_Start_IT+0x9a>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009be4:	4a24      	ldr	r2, [pc, #144]	; (8009c78 <HAL_TIM_OC_Start_IT+0xdc>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d11f      	bne.n	8009c2a <HAL_TIM_OC_Start_IT+0x8e>
 8009bea:	e019      	b.n	8009c20 <HAL_TIM_OC_Start_IT+0x84>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009bec:	2904      	cmp	r1, #4
 8009bee:	d028      	beq.n	8009c42 <HAL_TIM_OC_Start_IT+0xa6>
 8009bf0:	2908      	cmp	r1, #8
 8009bf2:	d033      	beq.n	8009c5c <HAL_TIM_OC_Start_IT+0xc0>
 8009bf4:	2241      	movs	r2, #65	; 0x41
 8009bf6:	5c84      	ldrb	r4, [r0, r2]
 8009bf8:	b2e0      	uxtb	r0, r4
 8009bfa:	2c01      	cmp	r4, #1
 8009bfc:	d001      	beq.n	8009c02 <HAL_TIM_OC_Start_IT+0x66>
    return HAL_ERROR;
 8009bfe:	2001      	movs	r0, #1
}
 8009c00:	bd10      	pop	{r4, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c02:	2402      	movs	r4, #2
 8009c04:	549c      	strb	r4, [r3, r2]
  switch (Channel)
 8009c06:	290c      	cmp	r1, #12
 8009c08:	d1fa      	bne.n	8009c00 <HAL_TIM_OC_Start_IT+0x64>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009c0a:	2010      	movs	r0, #16
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	68da      	ldr	r2, [r3, #12]
 8009c10:	4302      	orrs	r2, r0
 8009c12:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8009c14:	e7d0      	b.n	8009bb8 <HAL_TIM_OC_Start_IT+0x1c>
      __HAL_TIM_MOE_ENABLE(htim);
 8009c16:	2280      	movs	r2, #128	; 0x80
 8009c18:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8009c1a:	0212      	lsls	r2, r2, #8
 8009c1c:	430a      	orrs	r2, r1
 8009c1e:	645a      	str	r2, [r3, #68]	; 0x44
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c20:	2207      	movs	r2, #7
 8009c22:	6899      	ldr	r1, [r3, #8]
 8009c24:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c26:	2a06      	cmp	r2, #6
 8009c28:	d016      	beq.n	8009c58 <HAL_TIM_OC_Start_IT+0xbc>
      __HAL_TIM_ENABLE(htim);
 8009c2a:	2101      	movs	r1, #1
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	2000      	movs	r0, #0
 8009c30:	430a      	orrs	r2, r1
 8009c32:	601a      	str	r2, [r3, #0]
 8009c34:	e7e4      	b.n	8009c00 <HAL_TIM_OC_Start_IT+0x64>
      __HAL_TIM_MOE_ENABLE(htim);
 8009c36:	2280      	movs	r2, #128	; 0x80
 8009c38:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8009c3a:	0212      	lsls	r2, r2, #8
 8009c3c:	430a      	orrs	r2, r1
 8009c3e:	645a      	str	r2, [r3, #68]	; 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c40:	e7f3      	b.n	8009c2a <HAL_TIM_OC_Start_IT+0x8e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009c42:	223f      	movs	r2, #63	; 0x3f
 8009c44:	5c80      	ldrb	r0, [r0, r2]
 8009c46:	2801      	cmp	r0, #1
 8009c48:	d1d9      	bne.n	8009bfe <HAL_TIM_OC_Start_IT+0x62>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c4a:	2002      	movs	r0, #2
 8009c4c:	5498      	strb	r0, [r3, r2]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68da      	ldr	r2, [r3, #12]
 8009c52:	430a      	orrs	r2, r1
 8009c54:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8009c56:	e7af      	b.n	8009bb8 <HAL_TIM_OC_Start_IT+0x1c>
 8009c58:	2000      	movs	r0, #0
 8009c5a:	e7d1      	b.n	8009c00 <HAL_TIM_OC_Start_IT+0x64>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009c5c:	2240      	movs	r2, #64	; 0x40
 8009c5e:	5c80      	ldrb	r0, [r0, r2]
 8009c60:	2801      	cmp	r0, #1
 8009c62:	d0f2      	beq.n	8009c4a <HAL_TIM_OC_Start_IT+0xae>
 8009c64:	e7cb      	b.n	8009bfe <HAL_TIM_OC_Start_IT+0x62>
 8009c66:	46c0      	nop			; (mov r8, r8)
 8009c68:	40012c00 	.word	0x40012c00
 8009c6c:	40014000 	.word	0x40014000
 8009c70:	40014400 	.word	0x40014400
 8009c74:	40014800 	.word	0x40014800
 8009c78:	40000400 	.word	0x40000400

08009c7c <HAL_TIM_OC_Stop_IT>:
{
 8009c7c:	b530      	push	{r4, r5, lr}
  switch (Channel)
 8009c7e:	2908      	cmp	r1, #8
 8009c80:	d004      	beq.n	8009c8c <HAL_TIM_OC_Stop_IT+0x10>
 8009c82:	d840      	bhi.n	8009d06 <HAL_TIM_OC_Stop_IT+0x8a>
 8009c84:	2900      	cmp	r1, #0
 8009c86:	d056      	beq.n	8009d36 <HAL_TIM_OC_Stop_IT+0xba>
 8009c88:	2904      	cmp	r1, #4
 8009c8a:	d14d      	bne.n	8009d28 <HAL_TIM_OC_Stop_IT+0xac>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009c8c:	6805      	ldr	r5, [r0, #0]
 8009c8e:	68eb      	ldr	r3, [r5, #12]
 8009c90:	438b      	bics	r3, r1
 8009c92:	60eb      	str	r3, [r5, #12]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c94:	241f      	movs	r4, #31
 8009c96:	2201      	movs	r2, #1
 8009c98:	400c      	ands	r4, r1
 8009c9a:	40a2      	lsls	r2, r4
  TIMx->CCER &= ~tmp;
 8009c9c:	6a2b      	ldr	r3, [r5, #32]
 8009c9e:	4393      	bics	r3, r2
 8009ca0:	622b      	str	r3, [r5, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009ca2:	6a2b      	ldr	r3, [r5, #32]
 8009ca4:	622b      	str	r3, [r5, #32]
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009ca6:	4b29      	ldr	r3, [pc, #164]	; (8009d4c <HAL_TIM_OC_Stop_IT+0xd0>)
 8009ca8:	429d      	cmp	r5, r3
 8009caa:	d01b      	beq.n	8009ce4 <HAL_TIM_OC_Stop_IT+0x68>
 8009cac:	4b28      	ldr	r3, [pc, #160]	; (8009d50 <HAL_TIM_OC_Stop_IT+0xd4>)
 8009cae:	429d      	cmp	r5, r3
 8009cb0:	d018      	beq.n	8009ce4 <HAL_TIM_OC_Stop_IT+0x68>
 8009cb2:	4b28      	ldr	r3, [pc, #160]	; (8009d54 <HAL_TIM_OC_Stop_IT+0xd8>)
 8009cb4:	429d      	cmp	r5, r3
 8009cb6:	d015      	beq.n	8009ce4 <HAL_TIM_OC_Stop_IT+0x68>
 8009cb8:	4b27      	ldr	r3, [pc, #156]	; (8009d58 <HAL_TIM_OC_Stop_IT+0xdc>)
 8009cba:	429d      	cmp	r5, r3
 8009cbc:	d012      	beq.n	8009ce4 <HAL_TIM_OC_Stop_IT+0x68>
    __HAL_TIM_DISABLE(htim);
 8009cbe:	6a2a      	ldr	r2, [r5, #32]
 8009cc0:	4b26      	ldr	r3, [pc, #152]	; (8009d5c <HAL_TIM_OC_Stop_IT+0xe0>)
 8009cc2:	421a      	tst	r2, r3
 8009cc4:	d107      	bne.n	8009cd6 <HAL_TIM_OC_Stop_IT+0x5a>
 8009cc6:	6a2a      	ldr	r2, [r5, #32]
 8009cc8:	4b25      	ldr	r3, [pc, #148]	; (8009d60 <HAL_TIM_OC_Stop_IT+0xe4>)
 8009cca:	421a      	tst	r2, r3
 8009ccc:	d103      	bne.n	8009cd6 <HAL_TIM_OC_Stop_IT+0x5a>
 8009cce:	2201      	movs	r2, #1
 8009cd0:	682b      	ldr	r3, [r5, #0]
 8009cd2:	4393      	bics	r3, r2
 8009cd4:	602b      	str	r3, [r5, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009cd6:	2900      	cmp	r1, #0
 8009cd8:	d11d      	bne.n	8009d16 <HAL_TIM_OC_Stop_IT+0x9a>
 8009cda:	233e      	movs	r3, #62	; 0x3e
 8009cdc:	2201      	movs	r2, #1
 8009cde:	54c2      	strb	r2, [r0, r3]
 8009ce0:	2000      	movs	r0, #0
}
 8009ce2:	bd30      	pop	{r4, r5, pc}
      __HAL_TIM_MOE_DISABLE(htim);
 8009ce4:	6a2a      	ldr	r2, [r5, #32]
 8009ce6:	4b1d      	ldr	r3, [pc, #116]	; (8009d5c <HAL_TIM_OC_Stop_IT+0xe0>)
 8009ce8:	421a      	tst	r2, r3
 8009cea:	d1e8      	bne.n	8009cbe <HAL_TIM_OC_Stop_IT+0x42>
 8009cec:	6a2a      	ldr	r2, [r5, #32]
 8009cee:	4b1c      	ldr	r3, [pc, #112]	; (8009d60 <HAL_TIM_OC_Stop_IT+0xe4>)
 8009cf0:	421a      	tst	r2, r3
 8009cf2:	d1e4      	bne.n	8009cbe <HAL_TIM_OC_Stop_IT+0x42>
 8009cf4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8009cf6:	4a1b      	ldr	r2, [pc, #108]	; (8009d64 <HAL_TIM_OC_Stop_IT+0xe8>)
 8009cf8:	4013      	ands	r3, r2
 8009cfa:	646b      	str	r3, [r5, #68]	; 0x44
    __HAL_TIM_DISABLE(htim);
 8009cfc:	6a2a      	ldr	r2, [r5, #32]
 8009cfe:	4b17      	ldr	r3, [pc, #92]	; (8009d5c <HAL_TIM_OC_Stop_IT+0xe0>)
 8009d00:	421a      	tst	r2, r3
 8009d02:	d1e8      	bne.n	8009cd6 <HAL_TIM_OC_Stop_IT+0x5a>
 8009d04:	e7df      	b.n	8009cc6 <HAL_TIM_OC_Stop_IT+0x4a>
  switch (Channel)
 8009d06:	290c      	cmp	r1, #12
 8009d08:	d10e      	bne.n	8009d28 <HAL_TIM_OC_Stop_IT+0xac>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8009d0a:	2210      	movs	r2, #16
 8009d0c:	6805      	ldr	r5, [r0, #0]
 8009d0e:	68eb      	ldr	r3, [r5, #12]
 8009d10:	4393      	bics	r3, r2
 8009d12:	60eb      	str	r3, [r5, #12]
  if (status == HAL_OK)
 8009d14:	e7be      	b.n	8009c94 <HAL_TIM_OC_Stop_IT+0x18>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009d16:	2904      	cmp	r1, #4
 8009d18:	d013      	beq.n	8009d42 <HAL_TIM_OC_Stop_IT+0xc6>
 8009d1a:	2908      	cmp	r1, #8
 8009d1c:	d006      	beq.n	8009d2c <HAL_TIM_OC_Stop_IT+0xb0>
 8009d1e:	2341      	movs	r3, #65	; 0x41
 8009d20:	2201      	movs	r2, #1
 8009d22:	54c2      	strb	r2, [r0, r3]
 8009d24:	2000      	movs	r0, #0
 8009d26:	e7dc      	b.n	8009ce2 <HAL_TIM_OC_Stop_IT+0x66>
  switch (Channel)
 8009d28:	2001      	movs	r0, #1
 8009d2a:	e7da      	b.n	8009ce2 <HAL_TIM_OC_Stop_IT+0x66>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009d2c:	2340      	movs	r3, #64	; 0x40
 8009d2e:	2201      	movs	r2, #1
 8009d30:	54c2      	strb	r2, [r0, r3]
 8009d32:	2000      	movs	r0, #0
 8009d34:	e7d5      	b.n	8009ce2 <HAL_TIM_OC_Stop_IT+0x66>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009d36:	2202      	movs	r2, #2
 8009d38:	6805      	ldr	r5, [r0, #0]
 8009d3a:	68eb      	ldr	r3, [r5, #12]
 8009d3c:	4393      	bics	r3, r2
 8009d3e:	60eb      	str	r3, [r5, #12]
  if (status == HAL_OK)
 8009d40:	e7a8      	b.n	8009c94 <HAL_TIM_OC_Stop_IT+0x18>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009d42:	233f      	movs	r3, #63	; 0x3f
 8009d44:	2201      	movs	r2, #1
 8009d46:	54c2      	strb	r2, [r0, r3]
 8009d48:	2000      	movs	r0, #0
 8009d4a:	e7ca      	b.n	8009ce2 <HAL_TIM_OC_Stop_IT+0x66>
 8009d4c:	40012c00 	.word	0x40012c00
 8009d50:	40014000 	.word	0x40014000
 8009d54:	40014400 	.word	0x40014400
 8009d58:	40014800 	.word	0x40014800
 8009d5c:	00001111 	.word	0x00001111
 8009d60:	00000444 	.word	0x00000444
 8009d64:	ffff7fff 	.word	0xffff7fff

08009d68 <HAL_TIM_PWM_Start_IT>:
 8009d68:	b510      	push	{r4, lr}
 8009d6a:	f7ff ff17 	bl	8009b9c <HAL_TIM_OC_Start_IT>
 8009d6e:	bd10      	pop	{r4, pc}

08009d70 <HAL_TIM_PWM_Stop_IT>:
 8009d70:	b510      	push	{r4, lr}
 8009d72:	f7ff ff83 	bl	8009c7c <HAL_TIM_OC_Stop_IT>
 8009d76:	bd10      	pop	{r4, pc}

08009d78 <HAL_TIM_IC_CaptureCallback>:
 8009d78:	4770      	bx	lr
 8009d7a:	46c0      	nop			; (mov r8, r8)

08009d7c <HAL_TIM_TriggerCallback>:
 8009d7c:	4770      	bx	lr
 8009d7e:	46c0      	nop			; (mov r8, r8)

08009d80 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009d80:	2202      	movs	r2, #2
 8009d82:	6803      	ldr	r3, [r0, #0]
{
 8009d84:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009d86:	6919      	ldr	r1, [r3, #16]
{
 8009d88:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009d8a:	420a      	tst	r2, r1
 8009d8c:	d002      	beq.n	8009d94 <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009d8e:	68d9      	ldr	r1, [r3, #12]
 8009d90:	420a      	tst	r2, r1
 8009d92:	d165      	bne.n	8009e60 <HAL_TIM_IRQHandler+0xe0>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009d94:	2204      	movs	r2, #4
 8009d96:	6919      	ldr	r1, [r3, #16]
 8009d98:	420a      	tst	r2, r1
 8009d9a:	d002      	beq.n	8009da2 <HAL_TIM_IRQHandler+0x22>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009d9c:	68d9      	ldr	r1, [r3, #12]
 8009d9e:	420a      	tst	r2, r1
 8009da0:	d14b      	bne.n	8009e3a <HAL_TIM_IRQHandler+0xba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009da2:	2208      	movs	r2, #8
 8009da4:	6919      	ldr	r1, [r3, #16]
 8009da6:	420a      	tst	r2, r1
 8009da8:	d002      	beq.n	8009db0 <HAL_TIM_IRQHandler+0x30>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009daa:	68d9      	ldr	r1, [r3, #12]
 8009dac:	420a      	tst	r2, r1
 8009dae:	d133      	bne.n	8009e18 <HAL_TIM_IRQHandler+0x98>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009db0:	2210      	movs	r2, #16
 8009db2:	6919      	ldr	r1, [r3, #16]
 8009db4:	420a      	tst	r2, r1
 8009db6:	d002      	beq.n	8009dbe <HAL_TIM_IRQHandler+0x3e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009db8:	68d9      	ldr	r1, [r3, #12]
 8009dba:	420a      	tst	r2, r1
 8009dbc:	d11c      	bne.n	8009df8 <HAL_TIM_IRQHandler+0x78>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	6919      	ldr	r1, [r3, #16]
 8009dc2:	420a      	tst	r2, r1
 8009dc4:	d002      	beq.n	8009dcc <HAL_TIM_IRQHandler+0x4c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009dc6:	68d9      	ldr	r1, [r3, #12]
 8009dc8:	420a      	tst	r2, r1
 8009dca:	d15c      	bne.n	8009e86 <HAL_TIM_IRQHandler+0x106>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009dcc:	2280      	movs	r2, #128	; 0x80
 8009dce:	6919      	ldr	r1, [r3, #16]
 8009dd0:	420a      	tst	r2, r1
 8009dd2:	d002      	beq.n	8009dda <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009dd4:	68d9      	ldr	r1, [r3, #12]
 8009dd6:	420a      	tst	r2, r1
 8009dd8:	d15c      	bne.n	8009e94 <HAL_TIM_IRQHandler+0x114>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009dda:	2240      	movs	r2, #64	; 0x40
 8009ddc:	6919      	ldr	r1, [r3, #16]
 8009dde:	420a      	tst	r2, r1
 8009de0:	d002      	beq.n	8009de8 <HAL_TIM_IRQHandler+0x68>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009de2:	68d9      	ldr	r1, [r3, #12]
 8009de4:	420a      	tst	r2, r1
 8009de6:	d15d      	bne.n	8009ea4 <HAL_TIM_IRQHandler+0x124>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009de8:	2220      	movs	r2, #32
 8009dea:	6919      	ldr	r1, [r3, #16]
 8009dec:	420a      	tst	r2, r1
 8009dee:	d002      	beq.n	8009df6 <HAL_TIM_IRQHandler+0x76>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009df0:	68d9      	ldr	r1, [r3, #12]
 8009df2:	420a      	tst	r2, r1
 8009df4:	d141      	bne.n	8009e7a <HAL_TIM_IRQHandler+0xfa>
}
 8009df6:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009df8:	3a21      	subs	r2, #33	; 0x21
 8009dfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009dfc:	3219      	adds	r2, #25
 8009dfe:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e00:	69da      	ldr	r2, [r3, #28]
 8009e02:	23c0      	movs	r3, #192	; 0xc0
 8009e04:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8009e06:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e08:	421a      	tst	r2, r3
 8009e0a:	d05e      	beq.n	8009eca <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_IC_CaptureCallback(htim);
 8009e0c:	f7ff ffb4 	bl	8009d78 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e10:	2300      	movs	r3, #0
 8009e12:	7723      	strb	r3, [r4, #28]
 8009e14:	6823      	ldr	r3, [r4, #0]
 8009e16:	e7d2      	b.n	8009dbe <HAL_TIM_IRQHandler+0x3e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009e18:	3a11      	subs	r2, #17
 8009e1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e1c:	320d      	adds	r2, #13
 8009e1e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009e20:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8009e22:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009e24:	079b      	lsls	r3, r3, #30
 8009e26:	d14d      	bne.n	8009ec4 <HAL_TIM_IRQHandler+0x144>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e28:	f7fd ffb0 	bl	8007d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e2c:	0020      	movs	r0, r4
 8009e2e:	f7fd ff9f 	bl	8007d70 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e32:	2300      	movs	r3, #0
 8009e34:	7723      	strb	r3, [r4, #28]
 8009e36:	6823      	ldr	r3, [r4, #0]
 8009e38:	e7ba      	b.n	8009db0 <HAL_TIM_IRQHandler+0x30>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009e3a:	3a09      	subs	r2, #9
 8009e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e3e:	3207      	adds	r2, #7
 8009e40:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e42:	699a      	ldr	r2, [r3, #24]
 8009e44:	23c0      	movs	r3, #192	; 0xc0
 8009e46:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8009e48:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e4a:	421a      	tst	r2, r3
 8009e4c:	d137      	bne.n	8009ebe <HAL_TIM_IRQHandler+0x13e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e4e:	f7fd ff9d 	bl	8007d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e52:	0020      	movs	r0, r4
 8009e54:	f7fd ff8c 	bl	8007d70 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	7723      	strb	r3, [r4, #28]
 8009e5c:	6823      	ldr	r3, [r4, #0]
 8009e5e:	e7a0      	b.n	8009da2 <HAL_TIM_IRQHandler+0x22>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009e60:	3a05      	subs	r2, #5
 8009e62:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e64:	3204      	adds	r2, #4
 8009e66:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e68:	699b      	ldr	r3, [r3, #24]
 8009e6a:	079b      	lsls	r3, r3, #30
 8009e6c:	d021      	beq.n	8009eb2 <HAL_TIM_IRQHandler+0x132>
          HAL_TIM_IC_CaptureCallback(htim);
 8009e6e:	f7ff ff83 	bl	8009d78 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e72:	2300      	movs	r3, #0
 8009e74:	7723      	strb	r3, [r4, #28]
 8009e76:	6823      	ldr	r3, [r4, #0]
 8009e78:	e78c      	b.n	8009d94 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e7a:	3a41      	subs	r2, #65	; 0x41
      HAL_TIMEx_CommutCallback(htim);
 8009e7c:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e7e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8009e80:	f000 fa00 	bl	800a284 <HAL_TIMEx_CommutCallback>
}
 8009e84:	e7b7      	b.n	8009df6 <HAL_TIM_IRQHandler+0x76>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009e86:	3a03      	subs	r2, #3
 8009e88:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e8a:	0020      	movs	r0, r4
 8009e8c:	f7fd ff4a 	bl	8007d24 <HAL_TIM_PeriodElapsedCallback>
 8009e90:	6823      	ldr	r3, [r4, #0]
 8009e92:	e79b      	b.n	8009dcc <HAL_TIM_IRQHandler+0x4c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009e94:	3a02      	subs	r2, #2
 8009e96:	3aff      	subs	r2, #255	; 0xff
 8009e98:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8009e9a:	0020      	movs	r0, r4
 8009e9c:	f000 f9f4 	bl	800a288 <HAL_TIMEx_BreakCallback>
 8009ea0:	6823      	ldr	r3, [r4, #0]
 8009ea2:	e79a      	b.n	8009dda <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009ea4:	3a81      	subs	r2, #129	; 0x81
 8009ea6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009ea8:	0020      	movs	r0, r4
 8009eaa:	f7ff ff67 	bl	8009d7c <HAL_TIM_TriggerCallback>
 8009eae:	6823      	ldr	r3, [r4, #0]
 8009eb0:	e79a      	b.n	8009de8 <HAL_TIM_IRQHandler+0x68>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009eb2:	f7fd ff6b 	bl	8007d8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009eb6:	0020      	movs	r0, r4
 8009eb8:	f7fd ff5a 	bl	8007d70 <HAL_TIM_PWM_PulseFinishedCallback>
 8009ebc:	e7d9      	b.n	8009e72 <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 8009ebe:	f7ff ff5b 	bl	8009d78 <HAL_TIM_IC_CaptureCallback>
 8009ec2:	e7c9      	b.n	8009e58 <HAL_TIM_IRQHandler+0xd8>
        HAL_TIM_IC_CaptureCallback(htim);
 8009ec4:	f7ff ff58 	bl	8009d78 <HAL_TIM_IC_CaptureCallback>
 8009ec8:	e7b3      	b.n	8009e32 <HAL_TIM_IRQHandler+0xb2>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009eca:	f7fd ff5f 	bl	8007d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ece:	0020      	movs	r0, r4
 8009ed0:	f7fd ff4e 	bl	8007d70 <HAL_TIM_PWM_PulseFinishedCallback>
 8009ed4:	e79c      	b.n	8009e10 <HAL_TIM_IRQHandler+0x90>
 8009ed6:	46c0      	nop			; (mov r8, r8)

08009ed8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ed8:	4a1d      	ldr	r2, [pc, #116]	; (8009f50 <TIM_Base_SetConfig+0x78>)
  tmpcr1 = TIMx->CR1;
 8009eda:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009edc:	4290      	cmp	r0, r2
 8009ede:	d023      	beq.n	8009f28 <TIM_Base_SetConfig+0x50>
 8009ee0:	4a1c      	ldr	r2, [pc, #112]	; (8009f54 <TIM_Base_SetConfig+0x7c>)
 8009ee2:	4290      	cmp	r0, r2
 8009ee4:	d017      	beq.n	8009f16 <TIM_Base_SetConfig+0x3e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ee6:	4a1c      	ldr	r2, [pc, #112]	; (8009f58 <TIM_Base_SetConfig+0x80>)
 8009ee8:	4290      	cmp	r0, r2
 8009eea:	d018      	beq.n	8009f1e <TIM_Base_SetConfig+0x46>
 8009eec:	4a1b      	ldr	r2, [pc, #108]	; (8009f5c <TIM_Base_SetConfig+0x84>)
 8009eee:	4290      	cmp	r0, r2
 8009ef0:	d01e      	beq.n	8009f30 <TIM_Base_SetConfig+0x58>
 8009ef2:	4a1b      	ldr	r2, [pc, #108]	; (8009f60 <TIM_Base_SetConfig+0x88>)
 8009ef4:	4290      	cmp	r0, r2
 8009ef6:	d01b      	beq.n	8009f30 <TIM_Base_SetConfig+0x58>
 8009ef8:	4a1a      	ldr	r2, [pc, #104]	; (8009f64 <TIM_Base_SetConfig+0x8c>)
 8009efa:	4290      	cmp	r0, r2
 8009efc:	d018      	beq.n	8009f30 <TIM_Base_SetConfig+0x58>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009efe:	2280      	movs	r2, #128	; 0x80
 8009f00:	4393      	bics	r3, r2
 8009f02:	694a      	ldr	r2, [r1, #20]
 8009f04:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8009f06:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f08:	688b      	ldr	r3, [r1, #8]
 8009f0a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009f0c:	680b      	ldr	r3, [r1, #0]
 8009f0e:	6283      	str	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8009f10:	2301      	movs	r3, #1
 8009f12:	6143      	str	r3, [r0, #20]
}
 8009f14:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f16:	2270      	movs	r2, #112	; 0x70
 8009f18:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8009f1a:	684a      	ldr	r2, [r1, #4]
 8009f1c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f1e:	4a12      	ldr	r2, [pc, #72]	; (8009f68 <TIM_Base_SetConfig+0x90>)
 8009f20:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f22:	68ca      	ldr	r2, [r1, #12]
 8009f24:	4313      	orrs	r3, r2
 8009f26:	e7ea      	b.n	8009efe <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f28:	2270      	movs	r2, #112	; 0x70
 8009f2a:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8009f2c:	684a      	ldr	r2, [r1, #4]
 8009f2e:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f30:	4a0d      	ldr	r2, [pc, #52]	; (8009f68 <TIM_Base_SetConfig+0x90>)
 8009f32:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f34:	68ca      	ldr	r2, [r1, #12]
 8009f36:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f38:	2280      	movs	r2, #128	; 0x80
 8009f3a:	4393      	bics	r3, r2
 8009f3c:	694a      	ldr	r2, [r1, #20]
 8009f3e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8009f40:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f42:	688b      	ldr	r3, [r1, #8]
 8009f44:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009f46:	680b      	ldr	r3, [r1, #0]
 8009f48:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8009f4a:	690b      	ldr	r3, [r1, #16]
 8009f4c:	6303      	str	r3, [r0, #48]	; 0x30
 8009f4e:	e7df      	b.n	8009f10 <TIM_Base_SetConfig+0x38>
 8009f50:	40012c00 	.word	0x40012c00
 8009f54:	40000400 	.word	0x40000400
 8009f58:	40002000 	.word	0x40002000
 8009f5c:	40014000 	.word	0x40014000
 8009f60:	40014400 	.word	0x40014400
 8009f64:	40014800 	.word	0x40014800
 8009f68:	fffffcff 	.word	0xfffffcff

08009f6c <HAL_TIM_OC_Init>:
{
 8009f6c:	b570      	push	{r4, r5, r6, lr}
 8009f6e:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8009f70:	d026      	beq.n	8009fc0 <HAL_TIM_OC_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8009f72:	233d      	movs	r3, #61	; 0x3d
 8009f74:	5cc3      	ldrb	r3, [r0, r3]
 8009f76:	b2da      	uxtb	r2, r3
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d01c      	beq.n	8009fb6 <HAL_TIM_OC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8009f7c:	2302      	movs	r3, #2
 8009f7e:	253d      	movs	r5, #61	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009f80:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8009f82:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009f84:	c901      	ldmia	r1!, {r0}
 8009f86:	f7ff ffa7 	bl	8009ed8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 8009f8e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f90:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f92:	3a08      	subs	r2, #8
 8009f94:	54a3      	strb	r3, [r4, r2]
 8009f96:	3201      	adds	r2, #1
 8009f98:	54a3      	strb	r3, [r4, r2]
 8009f9a:	3201      	adds	r2, #1
 8009f9c:	54a3      	strb	r3, [r4, r2]
 8009f9e:	3201      	adds	r2, #1
 8009fa0:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fa2:	3201      	adds	r2, #1
 8009fa4:	54a3      	strb	r3, [r4, r2]
 8009fa6:	3201      	adds	r2, #1
 8009fa8:	54a3      	strb	r3, [r4, r2]
 8009faa:	3201      	adds	r2, #1
 8009fac:	54a3      	strb	r3, [r4, r2]
 8009fae:	3201      	adds	r2, #1
 8009fb0:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8009fb2:	5563      	strb	r3, [r4, r5]
}
 8009fb4:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8009fb6:	333c      	adds	r3, #60	; 0x3c
 8009fb8:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_OC_MspInit(htim);
 8009fba:	f7f9 f9f9 	bl	80033b0 <HAL_TIM_OC_MspInit>
 8009fbe:	e7dd      	b.n	8009f7c <HAL_TIM_OC_Init+0x10>
    return HAL_ERROR;
 8009fc0:	2001      	movs	r0, #1
 8009fc2:	e7f7      	b.n	8009fb4 <HAL_TIM_OC_Init+0x48>

08009fc4 <HAL_TIM_PWM_Init>:
{
 8009fc4:	b570      	push	{r4, r5, r6, lr}
 8009fc6:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8009fc8:	d026      	beq.n	800a018 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8009fca:	233d      	movs	r3, #61	; 0x3d
 8009fcc:	5cc3      	ldrb	r3, [r0, r3]
 8009fce:	b2da      	uxtb	r2, r3
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d01c      	beq.n	800a00e <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8009fd4:	2302      	movs	r3, #2
 8009fd6:	253d      	movs	r5, #61	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fd8:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8009fda:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fdc:	c901      	ldmia	r1!, {r0}
 8009fde:	f7ff ff7b 	bl	8009ed8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 8009fe6:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fe8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fea:	3a08      	subs	r2, #8
 8009fec:	54a3      	strb	r3, [r4, r2]
 8009fee:	3201      	adds	r2, #1
 8009ff0:	54a3      	strb	r3, [r4, r2]
 8009ff2:	3201      	adds	r2, #1
 8009ff4:	54a3      	strb	r3, [r4, r2]
 8009ff6:	3201      	adds	r2, #1
 8009ff8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ffa:	3201      	adds	r2, #1
 8009ffc:	54a3      	strb	r3, [r4, r2]
 8009ffe:	3201      	adds	r2, #1
 800a000:	54a3      	strb	r3, [r4, r2]
 800a002:	3201      	adds	r2, #1
 800a004:	54a3      	strb	r3, [r4, r2]
 800a006:	3201      	adds	r2, #1
 800a008:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 800a00a:	5563      	strb	r3, [r4, r5]
}
 800a00c:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800a00e:	333c      	adds	r3, #60	; 0x3c
 800a010:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 800a012:	f7f9 f9a5 	bl	8003360 <HAL_TIM_PWM_MspInit>
 800a016:	e7dd      	b.n	8009fd4 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 800a018:	2001      	movs	r0, #1
 800a01a:	e7f7      	b.n	800a00c <HAL_TIM_PWM_Init+0x48>

0800a01c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a01c:	2210      	movs	r2, #16
 800a01e:	6a03      	ldr	r3, [r0, #32]
{
 800a020:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a022:	4393      	bics	r3, r2
 800a024:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800a026:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a028:	4c16      	ldr	r4, [pc, #88]	; (800a084 <TIM_OC2_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 800a02a:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800a02c:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a02e:	4025      	ands	r5, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a030:	680c      	ldr	r4, [r1, #0]
 800a032:	0224      	lsls	r4, r4, #8
 800a034:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 800a036:	2420      	movs	r4, #32
 800a038:	43a2      	bics	r2, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a03a:	688c      	ldr	r4, [r1, #8]
 800a03c:	0124      	lsls	r4, r4, #4
 800a03e:	4322      	orrs	r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a040:	4c11      	ldr	r4, [pc, #68]	; (800a088 <TIM_OC2_SetConfig+0x6c>)
 800a042:	42a0      	cmp	r0, r4
 800a044:	d015      	beq.n	800a072 <TIM_OC2_SetConfig+0x56>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a046:	4c11      	ldr	r4, [pc, #68]	; (800a08c <TIM_OC2_SetConfig+0x70>)
 800a048:	42a0      	cmp	r0, r4
 800a04a:	d005      	beq.n	800a058 <TIM_OC2_SetConfig+0x3c>
 800a04c:	4c10      	ldr	r4, [pc, #64]	; (800a090 <TIM_OC2_SetConfig+0x74>)
 800a04e:	42a0      	cmp	r0, r4
 800a050:	d002      	beq.n	800a058 <TIM_OC2_SetConfig+0x3c>
 800a052:	4c10      	ldr	r4, [pc, #64]	; (800a094 <TIM_OC2_SetConfig+0x78>)
 800a054:	42a0      	cmp	r0, r4
 800a056:	d106      	bne.n	800a066 <TIM_OC2_SetConfig+0x4a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a058:	4c0f      	ldr	r4, [pc, #60]	; (800a098 <TIM_OC2_SetConfig+0x7c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a05a:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a05c:	401c      	ands	r4, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a05e:	698b      	ldr	r3, [r1, #24]
 800a060:	4333      	orrs	r3, r6
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	4323      	orrs	r3, r4
  TIMx->CR2 = tmpcr2;
 800a066:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800a068:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800a06a:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800a06c:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800a06e:	6202      	str	r2, [r0, #32]
}
 800a070:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 800a072:	2480      	movs	r4, #128	; 0x80
 800a074:	43a2      	bics	r2, r4
 800a076:	0014      	movs	r4, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a078:	68ca      	ldr	r2, [r1, #12]
 800a07a:	0112      	lsls	r2, r2, #4
 800a07c:	4322      	orrs	r2, r4
    tmpccer &= ~TIM_CCER_CC2NE;
 800a07e:	2440      	movs	r4, #64	; 0x40
 800a080:	43a2      	bics	r2, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a082:	e7e9      	b.n	800a058 <TIM_OC2_SetConfig+0x3c>
 800a084:	ffff8cff 	.word	0xffff8cff
 800a088:	40012c00 	.word	0x40012c00
 800a08c:	40014000 	.word	0x40014000
 800a090:	40014400 	.word	0x40014400
 800a094:	40014800 	.word	0x40014800
 800a098:	fffff3ff 	.word	0xfffff3ff

0800a09c <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 800a09c:	233c      	movs	r3, #60	; 0x3c
{
 800a09e:	b510      	push	{r4, lr}
 800a0a0:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 800a0a2:	5cc0      	ldrb	r0, [r0, r3]
 800a0a4:	2801      	cmp	r0, #1
 800a0a6:	d022      	beq.n	800a0ee <HAL_TIM_OC_ConfigChannel+0x52>
 800a0a8:	2001      	movs	r0, #1
 800a0aa:	54e0      	strb	r0, [r4, r3]
  switch (Channel)
 800a0ac:	2a08      	cmp	r2, #8
 800a0ae:	d014      	beq.n	800a0da <HAL_TIM_OC_ConfigChannel+0x3e>
 800a0b0:	d80b      	bhi.n	800a0ca <HAL_TIM_OC_ConfigChannel+0x2e>
 800a0b2:	2a00      	cmp	r2, #0
 800a0b4:	d016      	beq.n	800a0e4 <HAL_TIM_OC_ConfigChannel+0x48>
 800a0b6:	2a04      	cmp	r2, #4
 800a0b8:	d103      	bne.n	800a0c2 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a0ba:	6820      	ldr	r0, [r4, #0]
 800a0bc:	f7ff ffae 	bl	800a01c <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800a0c0:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 800a0c2:	233c      	movs	r3, #60	; 0x3c
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	54e2      	strb	r2, [r4, r3]
}
 800a0c8:	bd10      	pop	{r4, pc}
  switch (Channel)
 800a0ca:	2001      	movs	r0, #1
 800a0cc:	2a0c      	cmp	r2, #12
 800a0ce:	d1f8      	bne.n	800a0c2 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a0d0:	6820      	ldr	r0, [r4, #0]
 800a0d2:	f7ff fcfb 	bl	8009acc <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800a0d6:	2000      	movs	r0, #0
      break;
 800a0d8:	e7f3      	b.n	800a0c2 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a0da:	6820      	ldr	r0, [r4, #0]
 800a0dc:	f7ff fcb2 	bl	8009a44 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800a0e0:	2000      	movs	r0, #0
      break;
 800a0e2:	e7ee      	b.n	800a0c2 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a0e4:	6820      	ldr	r0, [r4, #0]
 800a0e6:	f7ff fc75 	bl	80099d4 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800a0ea:	2000      	movs	r0, #0
      break;
 800a0ec:	e7e9      	b.n	800a0c2 <HAL_TIM_OC_ConfigChannel+0x26>
  __HAL_LOCK(htim);
 800a0ee:	2002      	movs	r0, #2
 800a0f0:	e7ea      	b.n	800a0c8 <HAL_TIM_OC_ConfigChannel+0x2c>
 800a0f2:	46c0      	nop			; (mov r8, r8)

0800a0f4 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 800a0f4:	233c      	movs	r3, #60	; 0x3c
{
 800a0f6:	b570      	push	{r4, r5, r6, lr}
 800a0f8:	0014      	movs	r4, r2
  __HAL_LOCK(htim);
 800a0fa:	5cc2      	ldrb	r2, [r0, r3]
{
 800a0fc:	0005      	movs	r5, r0
 800a0fe:	000e      	movs	r6, r1
  __HAL_LOCK(htim);
 800a100:	2a01      	cmp	r2, #1
 800a102:	d05a      	beq.n	800a1ba <HAL_TIM_PWM_ConfigChannel+0xc6>
 800a104:	2201      	movs	r2, #1
 800a106:	54c2      	strb	r2, [r0, r3]
  switch (Channel)
 800a108:	2c08      	cmp	r4, #8
 800a10a:	d045      	beq.n	800a198 <HAL_TIM_PWM_ConfigChannel+0xa4>
 800a10c:	d81a      	bhi.n	800a144 <HAL_TIM_PWM_ConfigChannel+0x50>
 800a10e:	2c00      	cmp	r4, #0
 800a110:	d030      	beq.n	800a174 <HAL_TIM_PWM_ConfigChannel+0x80>
 800a112:	2c04      	cmp	r4, #4
 800a114:	d12c      	bne.n	800a170 <HAL_TIM_PWM_ConfigChannel+0x7c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a116:	6800      	ldr	r0, [r0, #0]
 800a118:	f7ff ff80 	bl	800a01c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a11c:	2280      	movs	r2, #128	; 0x80
  HAL_StatusTypeDef status = HAL_OK;
 800a11e:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a120:	682b      	ldr	r3, [r5, #0]
 800a122:	0112      	lsls	r2, r2, #4
 800a124:	6999      	ldr	r1, [r3, #24]
 800a126:	430a      	orrs	r2, r1
 800a128:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a12a:	699a      	ldr	r2, [r3, #24]
 800a12c:	4924      	ldr	r1, [pc, #144]	; (800a1c0 <HAL_TIM_PWM_ConfigChannel+0xcc>)
 800a12e:	400a      	ands	r2, r1
 800a130:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a132:	6932      	ldr	r2, [r6, #16]
 800a134:	6999      	ldr	r1, [r3, #24]
 800a136:	0212      	lsls	r2, r2, #8
 800a138:	430a      	orrs	r2, r1
 800a13a:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800a13c:	233c      	movs	r3, #60	; 0x3c
 800a13e:	2200      	movs	r2, #0
 800a140:	54ea      	strb	r2, [r5, r3]
}
 800a142:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 800a144:	2c0c      	cmp	r4, #12
 800a146:	d113      	bne.n	800a170 <HAL_TIM_PWM_ConfigChannel+0x7c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a148:	6800      	ldr	r0, [r0, #0]
 800a14a:	f7ff fcbf 	bl	8009acc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a14e:	2280      	movs	r2, #128	; 0x80
 800a150:	682b      	ldr	r3, [r5, #0]
 800a152:	0112      	lsls	r2, r2, #4
 800a154:	69d9      	ldr	r1, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800a156:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a158:	430a      	orrs	r2, r1
 800a15a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a15c:	69da      	ldr	r2, [r3, #28]
 800a15e:	4918      	ldr	r1, [pc, #96]	; (800a1c0 <HAL_TIM_PWM_ConfigChannel+0xcc>)
 800a160:	400a      	ands	r2, r1
 800a162:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a164:	6932      	ldr	r2, [r6, #16]
 800a166:	69d9      	ldr	r1, [r3, #28]
 800a168:	0212      	lsls	r2, r2, #8
 800a16a:	430a      	orrs	r2, r1
 800a16c:	61da      	str	r2, [r3, #28]
      break;
 800a16e:	e7e5      	b.n	800a13c <HAL_TIM_PWM_ConfigChannel+0x48>
  switch (Channel)
 800a170:	2001      	movs	r0, #1
 800a172:	e7e3      	b.n	800a13c <HAL_TIM_PWM_ConfigChannel+0x48>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a174:	6800      	ldr	r0, [r0, #0]
 800a176:	f7ff fc2d 	bl	80099d4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a17a:	2108      	movs	r1, #8
 800a17c:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a17e:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a180:	699a      	ldr	r2, [r3, #24]
 800a182:	430a      	orrs	r2, r1
 800a184:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a186:	699a      	ldr	r2, [r3, #24]
 800a188:	3904      	subs	r1, #4
 800a18a:	438a      	bics	r2, r1
 800a18c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a18e:	699a      	ldr	r2, [r3, #24]
 800a190:	6931      	ldr	r1, [r6, #16]
 800a192:	430a      	orrs	r2, r1
 800a194:	619a      	str	r2, [r3, #24]
      break;
 800a196:	e7d1      	b.n	800a13c <HAL_TIM_PWM_ConfigChannel+0x48>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a198:	6800      	ldr	r0, [r0, #0]
 800a19a:	f7ff fc53 	bl	8009a44 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a19e:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a1a0:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a1a2:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a1a4:	69da      	ldr	r2, [r3, #28]
 800a1a6:	4314      	orrs	r4, r2
 800a1a8:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a1aa:	69da      	ldr	r2, [r3, #28]
 800a1ac:	438a      	bics	r2, r1
 800a1ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a1b0:	69da      	ldr	r2, [r3, #28]
 800a1b2:	6931      	ldr	r1, [r6, #16]
 800a1b4:	430a      	orrs	r2, r1
 800a1b6:	61da      	str	r2, [r3, #28]
      break;
 800a1b8:	e7c0      	b.n	800a13c <HAL_TIM_PWM_ConfigChannel+0x48>
  __HAL_LOCK(htim);
 800a1ba:	2002      	movs	r0, #2
 800a1bc:	e7c1      	b.n	800a142 <HAL_TIM_PWM_ConfigChannel+0x4e>
 800a1be:	46c0      	nop			; (mov r8, r8)
 800a1c0:	fffffbff 	.word	0xfffffbff

0800a1c4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a1c4:	233c      	movs	r3, #60	; 0x3c
{
 800a1c6:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800a1c8:	5cc3      	ldrb	r3, [r0, r3]
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d020      	beq.n	800a210 <HAL_TIMEx_MasterConfigSynchronization+0x4c>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1ce:	233d      	movs	r3, #61	; 0x3d
 800a1d0:	2202      	movs	r2, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a1d2:	2570      	movs	r5, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 800a1d4:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 800a1d6:	6803      	ldr	r3, [r0, #0]
 800a1d8:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800a1da:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800a1dc:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a1de:	680d      	ldr	r5, [r1, #0]
 800a1e0:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a1e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1e4:	4a0b      	ldr	r2, [pc, #44]	; (800a214 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d005      	beq.n	800a1f6 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 800a1ea:	4a0b      	ldr	r2, [pc, #44]	; (800a218 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d002      	beq.n	800a1f6 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 800a1f0:	4a0a      	ldr	r2, [pc, #40]	; (800a21c <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d104      	bne.n	800a200 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a1f6:	2280      	movs	r2, #128	; 0x80
 800a1f8:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a1fa:	684a      	ldr	r2, [r1, #4]
 800a1fc:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a1fe:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a200:	233d      	movs	r3, #61	; 0x3d
 800a202:	2201      	movs	r2, #1
 800a204:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 800a206:	2200      	movs	r2, #0
 800a208:	3b01      	subs	r3, #1
 800a20a:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 800a20c:	2000      	movs	r0, #0
}
 800a20e:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 800a210:	2002      	movs	r0, #2
 800a212:	e7fc      	b.n	800a20e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 800a214:	40012c00 	.word	0x40012c00
 800a218:	40000400 	.word	0x40000400
 800a21c:	40014000 	.word	0x40014000

0800a220 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a220:	223c      	movs	r2, #60	; 0x3c
{
 800a222:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800a224:	5c83      	ldrb	r3, [r0, r2]
 800a226:	2b01      	cmp	r3, #1
 800a228:	d01e      	beq.n	800a268 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a22a:	68cc      	ldr	r4, [r1, #12]
 800a22c:	4b0f      	ldr	r3, [pc, #60]	; (800a26c <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
 800a22e:	4023      	ands	r3, r4
 800a230:	688c      	ldr	r4, [r1, #8]
 800a232:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a234:	4c0e      	ldr	r4, [pc, #56]	; (800a270 <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 800a236:	4023      	ands	r3, r4
 800a238:	684c      	ldr	r4, [r1, #4]
 800a23a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a23c:	4c0d      	ldr	r4, [pc, #52]	; (800a274 <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 800a23e:	4023      	ands	r3, r4
 800a240:	680c      	ldr	r4, [r1, #0]
 800a242:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a244:	4c0c      	ldr	r4, [pc, #48]	; (800a278 <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 800a246:	4023      	ands	r3, r4
 800a248:	690c      	ldr	r4, [r1, #16]
 800a24a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a24c:	4c0b      	ldr	r4, [pc, #44]	; (800a27c <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 800a24e:	4023      	ands	r3, r4
 800a250:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a252:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a254:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a256:	4c0a      	ldr	r4, [pc, #40]	; (800a280 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 800a258:	4023      	ands	r3, r4
 800a25a:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a25c:	6801      	ldr	r1, [r0, #0]
 800a25e:	644b      	str	r3, [r1, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a260:	2300      	movs	r3, #0
 800a262:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 800a264:	2000      	movs	r0, #0
}
 800a266:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 800a268:	2002      	movs	r0, #2
 800a26a:	e7fc      	b.n	800a266 <HAL_TIMEx_ConfigBreakDeadTime+0x46>
 800a26c:	fffffcff 	.word	0xfffffcff
 800a270:	fffffbff 	.word	0xfffffbff
 800a274:	fffff7ff 	.word	0xfffff7ff
 800a278:	ffffefff 	.word	0xffffefff
 800a27c:	ffffdfff 	.word	0xffffdfff
 800a280:	ffffbfff 	.word	0xffffbfff

0800a284 <HAL_TIMEx_CommutCallback>:
 800a284:	4770      	bx	lr
 800a286:	46c0      	nop			; (mov r8, r8)

0800a288 <HAL_TIMEx_BreakCallback>:
 800a288:	4770      	bx	lr
 800a28a:	46c0      	nop			; (mov r8, r8)

0800a28c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a28c:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a28e:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a292:	2201      	movs	r2, #1
 800a294:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a298:	6801      	ldr	r1, [r0, #0]
 800a29a:	4d12      	ldr	r5, [pc, #72]	; (800a2e4 <UART_EndRxTransfer+0x58>)
 800a29c:	680b      	ldr	r3, [r1, #0]
 800a29e:	402b      	ands	r3, r5
 800a2a0:	600b      	str	r3, [r1, #0]
 800a2a2:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2a6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2aa:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2ae:	6801      	ldr	r1, [r0, #0]
 800a2b0:	688b      	ldr	r3, [r1, #8]
 800a2b2:	4393      	bics	r3, r2
 800a2b4:	608b      	str	r3, [r1, #8]
 800a2b6:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2ba:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d10a      	bne.n	800a2d6 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2c0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2c4:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2c8:	2410      	movs	r4, #16
 800a2ca:	6802      	ldr	r2, [r0, #0]
 800a2cc:	6813      	ldr	r3, [r2, #0]
 800a2ce:	43a3      	bics	r3, r4
 800a2d0:	6013      	str	r3, [r2, #0]
 800a2d2:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a2d6:	2320      	movs	r3, #32
 800a2d8:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a2de:	6643      	str	r3, [r0, #100]	; 0x64
}
 800a2e0:	bd30      	pop	{r4, r5, pc}
 800a2e2:	46c0      	nop			; (mov r8, r8)
 800a2e4:	fffffedf 	.word	0xfffffedf

0800a2e8 <HAL_UART_TxCpltCallback>:
 800a2e8:	4770      	bx	lr
 800a2ea:	46c0      	nop			; (mov r8, r8)

0800a2ec <HAL_UART_ErrorCallback>:
 800a2ec:	4770      	bx	lr
 800a2ee:	46c0      	nop			; (mov r8, r8)

0800a2f0 <UART_DMAAbortOnError>:
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	225a      	movs	r2, #90	; 0x5a
{
 800a2f4:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2f6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 800a2f8:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 800a2fa:	3a08      	subs	r2, #8
 800a2fc:	5283      	strh	r3, [r0, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2fe:	f7ff fff5 	bl	800a2ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a302:	bd10      	pop	{r4, pc}

0800a304 <HAL_UARTEx_RxEventCallback>:
}
 800a304:	4770      	bx	lr
 800a306:	46c0      	nop			; (mov r8, r8)

0800a308 <HAL_UART_IRQHandler>:
{
 800a308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a30a:	46ce      	mov	lr, r9
 800a30c:	4647      	mov	r7, r8
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a30e:	6802      	ldr	r2, [r0, #0]
{
 800a310:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a312:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a314:	48a8      	ldr	r0, [pc, #672]	; (800a5b8 <HAL_UART_IRQHandler+0x2b0>)
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a316:	6811      	ldr	r1, [r2, #0]
{
 800a318:	b580      	push	{r7, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a31a:	6895      	ldr	r5, [r2, #8]
  if (errorflags == 0U)
 800a31c:	4203      	tst	r3, r0
 800a31e:	d000      	beq.n	800a322 <HAL_UART_IRQHandler+0x1a>
 800a320:	e074      	b.n	800a40c <HAL_UART_IRQHandler+0x104>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a322:	2020      	movs	r0, #32
 800a324:	4218      	tst	r0, r3
 800a326:	d002      	beq.n	800a32e <HAL_UART_IRQHandler+0x26>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a328:	4208      	tst	r0, r1
 800a32a:	d000      	beq.n	800a32e <HAL_UART_IRQHandler+0x26>
 800a32c:	e0e3      	b.n	800a4f6 <HAL_UART_IRQHandler+0x1ee>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a32e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800a330:	2801      	cmp	r0, #1
 800a332:	d014      	beq.n	800a35e <HAL_UART_IRQHandler+0x56>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a334:	2280      	movs	r2, #128	; 0x80
 800a336:	421a      	tst	r2, r3
 800a338:	d109      	bne.n	800a34e <HAL_UART_IRQHandler+0x46>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a33a:	2240      	movs	r2, #64	; 0x40
 800a33c:	421a      	tst	r2, r3
 800a33e:	d002      	beq.n	800a346 <HAL_UART_IRQHandler+0x3e>
 800a340:	420a      	tst	r2, r1
 800a342:	d000      	beq.n	800a346 <HAL_UART_IRQHandler+0x3e>
 800a344:	e0dc      	b.n	800a500 <HAL_UART_IRQHandler+0x1f8>
}
 800a346:	bcc0      	pop	{r6, r7}
 800a348:	46b9      	mov	r9, r7
 800a34a:	46b0      	mov	r8, r6
 800a34c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a34e:	420a      	tst	r2, r1
 800a350:	d0f3      	beq.n	800a33a <HAL_UART_IRQHandler+0x32>
    if (huart->TxISR != NULL)
 800a352:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a354:	2b00      	cmp	r3, #0
 800a356:	d0f6      	beq.n	800a346 <HAL_UART_IRQHandler+0x3e>
      huart->TxISR(huart);
 800a358:	0020      	movs	r0, r4
 800a35a:	4798      	blx	r3
 800a35c:	e7f3      	b.n	800a346 <HAL_UART_IRQHandler+0x3e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a35e:	2510      	movs	r5, #16
 800a360:	421d      	tst	r5, r3
 800a362:	d0e7      	beq.n	800a334 <HAL_UART_IRQHandler+0x2c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a364:	420d      	tst	r5, r1
 800a366:	d0e5      	beq.n	800a334 <HAL_UART_IRQHandler+0x2c>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a368:	2340      	movs	r3, #64	; 0x40
 800a36a:	001e      	movs	r6, r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a36c:	6215      	str	r5, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a36e:	6892      	ldr	r2, [r2, #8]
 800a370:	4016      	ands	r6, r2
 800a372:	4213      	tst	r3, r2
 800a374:	d100      	bne.n	800a378 <HAL_UART_IRQHandler+0x70>
 800a376:	e0e1      	b.n	800a53c <HAL_UART_IRQHandler+0x234>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a378:	6f26      	ldr	r6, [r4, #112]	; 0x70
 800a37a:	6832      	ldr	r2, [r6, #0]
 800a37c:	6852      	ldr	r2, [r2, #4]
 800a37e:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800a380:	2a00      	cmp	r2, #0
 800a382:	d0e0      	beq.n	800a346 <HAL_UART_IRQHandler+0x3e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a384:	2158      	movs	r1, #88	; 0x58
 800a386:	4688      	mov	r8, r1
 800a388:	5a61      	ldrh	r1, [r4, r1]
 800a38a:	4291      	cmp	r1, r2
 800a38c:	d9db      	bls.n	800a346 <HAL_UART_IRQHandler+0x3e>
        huart->RxXferCount = nb_remaining_rx_data;
 800a38e:	275a      	movs	r7, #90	; 0x5a
 800a390:	53e2      	strh	r2, [r4, r7]
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a392:	69b2      	ldr	r2, [r6, #24]
 800a394:	2a20      	cmp	r2, #32
 800a396:	d031      	beq.n	800a3fc <HAL_UART_IRQHandler+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a398:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a39c:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3a0:	6821      	ldr	r1, [r4, #0]
 800a3a2:	4f86      	ldr	r7, [pc, #536]	; (800a5bc <HAL_UART_IRQHandler+0x2b4>)
 800a3a4:	680a      	ldr	r2, [r1, #0]
 800a3a6:	403a      	ands	r2, r7
 800a3a8:	600a      	str	r2, [r1, #0]
 800a3aa:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3ae:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3b2:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3b6:	6821      	ldr	r1, [r4, #0]
 800a3b8:	688a      	ldr	r2, [r1, #8]
 800a3ba:	4382      	bics	r2, r0
 800a3bc:	608a      	str	r2, [r1, #8]
 800a3be:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3c2:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3c6:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3ca:	6821      	ldr	r1, [r4, #0]
 800a3cc:	688a      	ldr	r2, [r1, #8]
 800a3ce:	439a      	bics	r2, r3
 800a3d0:	608a      	str	r2, [r1, #8]
 800a3d2:	f386 8810 	msr	PRIMASK, r6
          huart->RxState = HAL_UART_STATE_READY;
 800a3d6:	3b20      	subs	r3, #32
 800a3d8:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	6623      	str	r3, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3de:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3e2:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3e6:	6822      	ldr	r2, [r4, #0]
 800a3e8:	6813      	ldr	r3, [r2, #0]
 800a3ea:	43ab      	bics	r3, r5
 800a3ec:	6013      	str	r3, [r2, #0]
 800a3ee:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a3f2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800a3f4:	f7fe f9e0 	bl	80087b8 <HAL_DMA_Abort>
 800a3f8:	4643      	mov	r3, r8
 800a3fa:	5ae1      	ldrh	r1, [r4, r3]
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a3fc:	235a      	movs	r3, #90	; 0x5a
 800a3fe:	5ae3      	ldrh	r3, [r4, r3]
 800a400:	0020      	movs	r0, r4
 800a402:	1ac9      	subs	r1, r1, r3
 800a404:	b289      	uxth	r1, r1
 800a406:	f7ff ff7d 	bl	800a304 <HAL_UARTEx_RxEventCallback>
 800a40a:	e79c      	b.n	800a346 <HAL_UART_IRQHandler+0x3e>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a40c:	2601      	movs	r6, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a40e:	486c      	ldr	r0, [pc, #432]	; (800a5c0 <HAL_UART_IRQHandler+0x2b8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a410:	4035      	ands	r5, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a412:	4008      	ands	r0, r1
 800a414:	4328      	orrs	r0, r5
 800a416:	d100      	bne.n	800a41a <HAL_UART_IRQHandler+0x112>
 800a418:	e789      	b.n	800a32e <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a41a:	421e      	tst	r6, r3
 800a41c:	d006      	beq.n	800a42c <HAL_UART_IRQHandler+0x124>
 800a41e:	05c8      	lsls	r0, r1, #23
 800a420:	d504      	bpl.n	800a42c <HAL_UART_IRQHandler+0x124>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a422:	2780      	movs	r7, #128	; 0x80
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a424:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a426:	59e0      	ldr	r0, [r4, r7]
 800a428:	4306      	orrs	r6, r0
 800a42a:	51e6      	str	r6, [r4, r7]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a42c:	2002      	movs	r0, #2
 800a42e:	4218      	tst	r0, r3
 800a430:	d055      	beq.n	800a4de <HAL_UART_IRQHandler+0x1d6>
 800a432:	2d00      	cmp	r5, #0
 800a434:	d007      	beq.n	800a446 <HAL_UART_IRQHandler+0x13e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a436:	2780      	movs	r7, #128	; 0x80
 800a438:	2604      	movs	r6, #4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a43a:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a43c:	59e0      	ldr	r0, [r4, r7]
 800a43e:	4330      	orrs	r0, r6
 800a440:	51e0      	str	r0, [r4, r7]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a442:	421e      	tst	r6, r3
 800a444:	d14f      	bne.n	800a4e6 <HAL_UART_IRQHandler+0x1de>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a446:	2608      	movs	r6, #8
 800a448:	421e      	tst	r6, r3
 800a44a:	d008      	beq.n	800a45e <HAL_UART_IRQHandler+0x156>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a44c:	2020      	movs	r0, #32
 800a44e:	4008      	ands	r0, r1
 800a450:	4305      	orrs	r5, r0
 800a452:	d004      	beq.n	800a45e <HAL_UART_IRQHandler+0x156>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a454:	2580      	movs	r5, #128	; 0x80
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a456:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a458:	5960      	ldr	r0, [r4, r5]
 800a45a:	4306      	orrs	r6, r0
 800a45c:	5166      	str	r6, [r4, r5]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a45e:	2080      	movs	r0, #128	; 0x80
 800a460:	0100      	lsls	r0, r0, #4
 800a462:	4203      	tst	r3, r0
 800a464:	d007      	beq.n	800a476 <HAL_UART_IRQHandler+0x16e>
 800a466:	014d      	lsls	r5, r1, #5
 800a468:	d505      	bpl.n	800a476 <HAL_UART_IRQHandler+0x16e>
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a46a:	2580      	movs	r5, #128	; 0x80
 800a46c:	2620      	movs	r6, #32
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a46e:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a470:	5960      	ldr	r0, [r4, r5]
 800a472:	4330      	orrs	r0, r6
 800a474:	5160      	str	r0, [r4, r5]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a476:	2080      	movs	r0, #128	; 0x80
 800a478:	5820      	ldr	r0, [r4, r0]
 800a47a:	2800      	cmp	r0, #0
 800a47c:	d100      	bne.n	800a480 <HAL_UART_IRQHandler+0x178>
 800a47e:	e762      	b.n	800a346 <HAL_UART_IRQHandler+0x3e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a480:	2020      	movs	r0, #32
 800a482:	4218      	tst	r0, r3
 800a484:	d001      	beq.n	800a48a <HAL_UART_IRQHandler+0x182>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a486:	4208      	tst	r0, r1
 800a488:	d151      	bne.n	800a52e <HAL_UART_IRQHandler+0x226>
      errorcode = huart->ErrorCode;
 800a48a:	2680      	movs	r6, #128	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a48c:	2740      	movs	r7, #64	; 0x40
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a48e:	2328      	movs	r3, #40	; 0x28
      errorcode = huart->ErrorCode;
 800a490:	59a1      	ldr	r1, [r4, r6]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a492:	6895      	ldr	r5, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a494:	400b      	ands	r3, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a496:	403d      	ands	r5, r7
        UART_EndRxTransfer(huart);
 800a498:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a49a:	431d      	orrs	r5, r3
 800a49c:	d100      	bne.n	800a4a0 <HAL_UART_IRQHandler+0x198>
 800a49e:	e087      	b.n	800a5b0 <HAL_UART_IRQHandler+0x2a8>
        UART_EndRxTransfer(huart);
 800a4a0:	f7ff fef4 	bl	800a28c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4a4:	6823      	ldr	r3, [r4, #0]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	421f      	tst	r7, r3
 800a4aa:	d03c      	beq.n	800a526 <HAL_UART_IRQHandler+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4ac:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4b6:	6822      	ldr	r2, [r4, #0]
 800a4b8:	6893      	ldr	r3, [r2, #8]
 800a4ba:	43bb      	bics	r3, r7
 800a4bc:	6093      	str	r3, [r2, #8]
 800a4be:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 800a4c2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	d02e      	beq.n	800a526 <HAL_UART_IRQHandler+0x21e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a4c8:	4b3e      	ldr	r3, [pc, #248]	; (800a5c4 <HAL_UART_IRQHandler+0x2bc>)
 800a4ca:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a4cc:	f7fe f994 	bl	80087f8 <HAL_DMA_Abort_IT>
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	d100      	bne.n	800a4d6 <HAL_UART_IRQHandler+0x1ce>
 800a4d4:	e737      	b.n	800a346 <HAL_UART_IRQHandler+0x3e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a4d6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800a4d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a4da:	4798      	blx	r3
 800a4dc:	e733      	b.n	800a346 <HAL_UART_IRQHandler+0x3e>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a4de:	0758      	lsls	r0, r3, #29
 800a4e0:	d5b1      	bpl.n	800a446 <HAL_UART_IRQHandler+0x13e>
 800a4e2:	2d00      	cmp	r5, #0
 800a4e4:	d0af      	beq.n	800a446 <HAL_UART_IRQHandler+0x13e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a4e6:	2004      	movs	r0, #4
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a4e8:	2680      	movs	r6, #128	; 0x80
 800a4ea:	2702      	movs	r7, #2
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a4ec:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a4ee:	59a0      	ldr	r0, [r4, r6]
 800a4f0:	4338      	orrs	r0, r7
 800a4f2:	51a0      	str	r0, [r4, r6]
 800a4f4:	e7a7      	b.n	800a446 <HAL_UART_IRQHandler+0x13e>
      if (huart->RxISR != NULL)
 800a4f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d000      	beq.n	800a4fe <HAL_UART_IRQHandler+0x1f6>
 800a4fc:	e72c      	b.n	800a358 <HAL_UART_IRQHandler+0x50>
 800a4fe:	e722      	b.n	800a346 <HAL_UART_IRQHandler+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a500:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a504:	2301      	movs	r3, #1
 800a506:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a50a:	6821      	ldr	r1, [r4, #0]
 800a50c:	680b      	ldr	r3, [r1, #0]
 800a50e:	4393      	bics	r3, r2
 800a510:	600b      	str	r3, [r1, #0]
 800a512:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a516:	2320      	movs	r3, #32
 800a518:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a51a:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a51c:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 800a51e:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 800a520:	f7ff fee2 	bl	800a2e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a524:	e70f      	b.n	800a346 <HAL_UART_IRQHandler+0x3e>
            HAL_UART_ErrorCallback(huart);
 800a526:	0020      	movs	r0, r4
 800a528:	f7ff fee0 	bl	800a2ec <HAL_UART_ErrorCallback>
 800a52c:	e70b      	b.n	800a346 <HAL_UART_IRQHandler+0x3e>
        if (huart->RxISR != NULL)
 800a52e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a530:	2b00      	cmp	r3, #0
 800a532:	d0aa      	beq.n	800a48a <HAL_UART_IRQHandler+0x182>
          huart->RxISR(huart);
 800a534:	0020      	movs	r0, r4
 800a536:	4798      	blx	r3
 800a538:	6822      	ldr	r2, [r4, #0]
 800a53a:	e7a6      	b.n	800a48a <HAL_UART_IRQHandler+0x182>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a53c:	225a      	movs	r2, #90	; 0x5a
 800a53e:	5aa3      	ldrh	r3, [r4, r2]
      if ((huart->RxXferCount > 0U)
 800a540:	5aa2      	ldrh	r2, [r4, r2]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a542:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 800a544:	2a00      	cmp	r2, #0
 800a546:	d100      	bne.n	800a54a <HAL_UART_IRQHandler+0x242>
 800a548:	e6fd      	b.n	800a346 <HAL_UART_IRQHandler+0x3e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a54a:	2258      	movs	r2, #88	; 0x58
 800a54c:	5aa1      	ldrh	r1, [r4, r2]
 800a54e:	1ac9      	subs	r1, r1, r3
 800a550:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800a552:	2900      	cmp	r1, #0
 800a554:	d100      	bne.n	800a558 <HAL_UART_IRQHandler+0x250>
 800a556:	e6f6      	b.n	800a346 <HAL_UART_IRQHandler+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a558:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a55c:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a560:	6823      	ldr	r3, [r4, #0]
 800a562:	4699      	mov	r9, r3
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4698      	mov	r8, r3
 800a568:	4642      	mov	r2, r8
 800a56a:	4b17      	ldr	r3, [pc, #92]	; (800a5c8 <HAL_UART_IRQHandler+0x2c0>)
 800a56c:	401a      	ands	r2, r3
 800a56e:	0013      	movs	r3, r2
 800a570:	464a      	mov	r2, r9
 800a572:	6013      	str	r3, [r2, #0]
 800a574:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a578:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a57c:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a580:	6822      	ldr	r2, [r4, #0]
 800a582:	6893      	ldr	r3, [r2, #8]
 800a584:	4383      	bics	r3, r0
 800a586:	6093      	str	r3, [r2, #8]
 800a588:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 800a58c:	2320      	movs	r3, #32
        huart->RxISR = NULL;
 800a58e:	6666      	str	r6, [r4, #100]	; 0x64
        huart->RxState = HAL_UART_STATE_READY;
 800a590:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a592:	6626      	str	r6, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a594:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a598:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a59c:	6822      	ldr	r2, [r4, #0]
 800a59e:	6813      	ldr	r3, [r2, #0]
 800a5a0:	43ab      	bics	r3, r5
 800a5a2:	6013      	str	r3, [r2, #0]
 800a5a4:	f386 8810 	msr	PRIMASK, r6
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a5a8:	0020      	movs	r0, r4
 800a5aa:	f7ff feab 	bl	800a304 <HAL_UARTEx_RxEventCallback>
 800a5ae:	e6ca      	b.n	800a346 <HAL_UART_IRQHandler+0x3e>
        HAL_UART_ErrorCallback(huart);
 800a5b0:	f7ff fe9c 	bl	800a2ec <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5b4:	51a5      	str	r5, [r4, r6]
 800a5b6:	e6c6      	b.n	800a346 <HAL_UART_IRQHandler+0x3e>
 800a5b8:	0000080f 	.word	0x0000080f
 800a5bc:	fffffeff 	.word	0xfffffeff
 800a5c0:	04000120 	.word	0x04000120
 800a5c4:	0800a2f1 	.word	0x0800a2f1
 800a5c8:	fffffedf 	.word	0xfffffedf

0800a5cc <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 800a5cc:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5ce:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f382 8810 	msr	PRIMASK, r2
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a5d8:	6801      	ldr	r1, [r0, #0]
 800a5da:	4d18      	ldr	r5, [pc, #96]	; (800a63c <UART_RxISR_16BIT.part.0+0x70>)
 800a5dc:	680b      	ldr	r3, [r1, #0]
 800a5de:	402b      	ands	r3, r5
 800a5e0:	600b      	str	r3, [r1, #0]
 800a5e2:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5e6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5ea:	f382 8810 	msr	PRIMASK, r2

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5ee:	6801      	ldr	r1, [r0, #0]
 800a5f0:	688b      	ldr	r3, [r1, #8]
 800a5f2:	4393      	bics	r3, r2
 800a5f4:	608b      	str	r3, [r1, #8]
 800a5f6:	f384 8810 	msr	PRIMASK, r4

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a5fa:	2320      	movs	r3, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a5fc:	2200      	movs	r2, #0
      huart->RxState = HAL_UART_STATE_READY;
 800a5fe:	67c3      	str	r3, [r0, #124]	; 0x7c

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a600:	6e03      	ldr	r3, [r0, #96]	; 0x60
      huart->RxISR = NULL;
 800a602:	6642      	str	r2, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a604:	2b01      	cmp	r3, #1
 800a606:	d116      	bne.n	800a636 <UART_RxISR_16BIT.part.0+0x6a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a608:	6602      	str	r2, [r0, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a60a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a60e:	f383 8810 	msr	PRIMASK, r3

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a612:	6801      	ldr	r1, [r0, #0]
 800a614:	3210      	adds	r2, #16
 800a616:	680b      	ldr	r3, [r1, #0]
 800a618:	4393      	bics	r3, r2
 800a61a:	600b      	str	r3, [r1, #0]
 800a61c:	f384 8810 	msr	PRIMASK, r4

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a620:	6803      	ldr	r3, [r0, #0]
 800a622:	69d9      	ldr	r1, [r3, #28]
 800a624:	420a      	tst	r2, r1
 800a626:	d104      	bne.n	800a632 <UART_RxISR_16BIT.part.0+0x66>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a628:	2358      	movs	r3, #88	; 0x58
 800a62a:	5ac1      	ldrh	r1, [r0, r3]
 800a62c:	f7ff fe6a 	bl	800a304 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a630:	bd70      	pop	{r4, r5, r6, pc}
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a632:	621a      	str	r2, [r3, #32]
 800a634:	e7f8      	b.n	800a628 <UART_RxISR_16BIT.part.0+0x5c>
        HAL_UART_RxCpltCallback(huart);
 800a636:	f7fd fb47 	bl	8007cc8 <HAL_UART_RxCpltCallback>
}
 800a63a:	e7f9      	b.n	800a630 <UART_RxISR_16BIT.part.0+0x64>
 800a63c:	fffffedf 	.word	0xfffffedf

0800a640 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a640:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 800a642:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a644:	2b22      	cmp	r3, #34	; 0x22
 800a646:	d005      	beq.n	800a654 <UART_RxISR_16BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a648:	2108      	movs	r1, #8
 800a64a:	6802      	ldr	r2, [r0, #0]
 800a64c:	6993      	ldr	r3, [r2, #24]
 800a64e:	430b      	orrs	r3, r1
 800a650:	6193      	str	r3, [r2, #24]
  }
}
 800a652:	bd10      	pop	{r4, pc}
  uint16_t uhMask = huart->Mask;
 800a654:	225c      	movs	r2, #92	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a656:	6803      	ldr	r3, [r0, #0]
    *tmp = (uint16_t)(uhdata & uhMask);
 800a658:	5a82      	ldrh	r2, [r0, r2]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a65a:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a65c:	6d43      	ldr	r3, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 800a65e:	400a      	ands	r2, r1
 800a660:	801a      	strh	r2, [r3, #0]
    huart->RxXferCount--;
 800a662:	225a      	movs	r2, #90	; 0x5a
    huart->pRxBuffPtr += 2U;
 800a664:	3302      	adds	r3, #2
 800a666:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800a668:	5a83      	ldrh	r3, [r0, r2]
 800a66a:	3b01      	subs	r3, #1
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 800a670:	5a83      	ldrh	r3, [r0, r2]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d1ed      	bne.n	800a652 <UART_RxISR_16BIT+0x12>
 800a676:	f7ff ffa9 	bl	800a5cc <UART_RxISR_16BIT.part.0>
 800a67a:	e7ea      	b.n	800a652 <UART_RxISR_16BIT+0x12>

0800a67c <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a67c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 800a67e:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a680:	2b22      	cmp	r3, #34	; 0x22
 800a682:	d005      	beq.n	800a690 <UART_RxISR_8BIT+0x14>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a684:	2108      	movs	r1, #8
 800a686:	6802      	ldr	r2, [r0, #0]
 800a688:	6993      	ldr	r3, [r2, #24]
 800a68a:	430b      	orrs	r3, r1
 800a68c:	6193      	str	r3, [r2, #24]
}
 800a68e:	bd10      	pop	{r4, pc}
  uint16_t uhMask = huart->Mask;
 800a690:	225c      	movs	r2, #92	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a692:	6803      	ldr	r3, [r0, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a694:	5a82      	ldrh	r2, [r0, r2]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a696:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a698:	4013      	ands	r3, r2
 800a69a:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800a69c:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 800a69e:	225a      	movs	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 800a6a0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800a6a6:	5a83      	ldrh	r3, [r0, r2]
 800a6a8:	3b01      	subs	r3, #1
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 800a6ae:	5a83      	ldrh	r3, [r0, r2]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d1ec      	bne.n	800a68e <UART_RxISR_8BIT+0x12>
 800a6b4:	f7ff ff8a 	bl	800a5cc <UART_RxISR_16BIT.part.0>
 800a6b8:	e7e9      	b.n	800a68e <UART_RxISR_8BIT+0x12>
 800a6ba:	46c0      	nop			; (mov r8, r8)

0800a6bc <UART_SetConfig>:
{
 800a6bc:	b570      	push	{r4, r5, r6, lr}
 800a6be:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a6c0:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a6c2:	69c5      	ldr	r5, [r0, #28]
 800a6c4:	6883      	ldr	r3, [r0, #8]
 800a6c6:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a6c8:	6811      	ldr	r1, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a6ca:	4303      	orrs	r3, r0
 800a6cc:	6960      	ldr	r0, [r4, #20]
 800a6ce:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a6d0:	483e      	ldr	r0, [pc, #248]	; (800a7cc <UART_SetConfig+0x110>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a6d2:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a6d4:	4001      	ands	r1, r0
 800a6d6:	430b      	orrs	r3, r1
 800a6d8:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a6da:	6853      	ldr	r3, [r2, #4]
 800a6dc:	493c      	ldr	r1, [pc, #240]	; (800a7d0 <UART_SetConfig+0x114>)
  tmpreg |= huart->Init.OneBitSampling;
 800a6de:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a6e0:	400b      	ands	r3, r1
 800a6e2:	68e1      	ldr	r1, [r4, #12]
 800a6e4:	430b      	orrs	r3, r1
 800a6e6:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 800a6e8:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a6ea:	6891      	ldr	r1, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 800a6ec:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a6ee:	4839      	ldr	r0, [pc, #228]	; (800a7d4 <UART_SetConfig+0x118>)
 800a6f0:	4001      	ands	r1, r0
 800a6f2:	430b      	orrs	r3, r1
 800a6f4:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a6f6:	4b38      	ldr	r3, [pc, #224]	; (800a7d8 <UART_SetConfig+0x11c>)
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d007      	beq.n	800a70c <UART_SetConfig+0x50>
 800a6fc:	4b37      	ldr	r3, [pc, #220]	; (800a7dc <UART_SetConfig+0x120>)
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d00b      	beq.n	800a71a <UART_SetConfig+0x5e>
    switch (clocksource)
 800a702:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800a704:	2300      	movs	r3, #0
 800a706:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 800a708:	66a3      	str	r3, [r4, #104]	; 0x68
}
 800a70a:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a70c:	4b34      	ldr	r3, [pc, #208]	; (800a7e0 <UART_SetConfig+0x124>)
 800a70e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a710:	2303      	movs	r3, #3
 800a712:	4013      	ands	r3, r2
 800a714:	3b01      	subs	r3, #1
 800a716:	2b02      	cmp	r3, #2
 800a718:	d918      	bls.n	800a74c <UART_SetConfig+0x90>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a71a:	2380      	movs	r3, #128	; 0x80
 800a71c:	021b      	lsls	r3, r3, #8
 800a71e:	429d      	cmp	r5, r3
 800a720:	d02e      	beq.n	800a780 <UART_SetConfig+0xc4>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a722:	f7ff f8b1 	bl	8009888 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a726:	2800      	cmp	r0, #0
 800a728:	d00e      	beq.n	800a748 <UART_SetConfig+0x8c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a72a:	6863      	ldr	r3, [r4, #4]
 800a72c:	6861      	ldr	r1, [r4, #4]
 800a72e:	085b      	lsrs	r3, r3, #1
 800a730:	1818      	adds	r0, r3, r0
 800a732:	f7f5 fcf3 	bl	800011c <__udivsi3>
 800a736:	0400      	lsls	r0, r0, #16
 800a738:	0c00      	lsrs	r0, r0, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a73a:	0002      	movs	r2, r0
 800a73c:	4b29      	ldr	r3, [pc, #164]	; (800a7e4 <UART_SetConfig+0x128>)
 800a73e:	3a10      	subs	r2, #16
 800a740:	429a      	cmp	r2, r3
 800a742:	d8de      	bhi.n	800a702 <UART_SetConfig+0x46>
        huart->Instance->BRR = usartdiv;
 800a744:	6823      	ldr	r3, [r4, #0]
 800a746:	60d8      	str	r0, [r3, #12]
 800a748:	2000      	movs	r0, #0
 800a74a:	e7db      	b.n	800a704 <UART_SetConfig+0x48>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a74c:	2080      	movs	r0, #128	; 0x80
 800a74e:	4a26      	ldr	r2, [pc, #152]	; (800a7e8 <UART_SetConfig+0x12c>)
 800a750:	0200      	lsls	r0, r0, #8
 800a752:	5cd3      	ldrb	r3, [r2, r3]
 800a754:	4285      	cmp	r5, r0
 800a756:	d00e      	beq.n	800a776 <UART_SetConfig+0xba>
    switch (clocksource)
 800a758:	2b04      	cmp	r3, #4
 800a75a:	d006      	beq.n	800a76a <UART_SetConfig+0xae>
 800a75c:	d808      	bhi.n	800a770 <UART_SetConfig+0xb4>
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d0df      	beq.n	800a722 <UART_SetConfig+0x66>
 800a762:	2b02      	cmp	r3, #2
 800a764:	d1cd      	bne.n	800a702 <UART_SetConfig+0x46>
        pclk = (uint32_t) HSI_VALUE;
 800a766:	4821      	ldr	r0, [pc, #132]	; (800a7ec <UART_SetConfig+0x130>)
 800a768:	e7df      	b.n	800a72a <UART_SetConfig+0x6e>
        pclk = HAL_RCC_GetSysClockFreq();
 800a76a:	f7fe ffc9 	bl	8009700 <HAL_RCC_GetSysClockFreq>
        break;
 800a76e:	e7da      	b.n	800a726 <UART_SetConfig+0x6a>
    switch (clocksource)
 800a770:	2b08      	cmp	r3, #8
 800a772:	d0da      	beq.n	800a72a <UART_SetConfig+0x6e>
 800a774:	e7c5      	b.n	800a702 <UART_SetConfig+0x46>
    switch (clocksource)
 800a776:	2b04      	cmp	r3, #4
 800a778:	d025      	beq.n	800a7c6 <UART_SetConfig+0x10a>
 800a77a:	d81f      	bhi.n	800a7bc <UART_SetConfig+0x100>
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d119      	bne.n	800a7b4 <UART_SetConfig+0xf8>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a780:	f7ff f882 	bl	8009888 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a784:	2800      	cmp	r0, #0
 800a786:	d0df      	beq.n	800a748 <UART_SetConfig+0x8c>
 800a788:	0040      	lsls	r0, r0, #1
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a78a:	6863      	ldr	r3, [r4, #4]
 800a78c:	6861      	ldr	r1, [r4, #4]
 800a78e:	085b      	lsrs	r3, r3, #1
 800a790:	1818      	adds	r0, r3, r0
 800a792:	f7f5 fcc3 	bl	800011c <__udivsi3>
 800a796:	0403      	lsls	r3, r0, #16
 800a798:	0c1a      	lsrs	r2, r3, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a79a:	4912      	ldr	r1, [pc, #72]	; (800a7e4 <UART_SetConfig+0x128>)
 800a79c:	3a10      	subs	r2, #16
 800a79e:	428a      	cmp	r2, r1
 800a7a0:	d8af      	bhi.n	800a702 <UART_SetConfig+0x46>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a7a2:	4a13      	ldr	r2, [pc, #76]	; (800a7f0 <UART_SetConfig+0x134>)
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a7a4:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a7a6:	4010      	ands	r0, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a7a8:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 800a7aa:	6822      	ldr	r2, [r4, #0]
 800a7ac:	4318      	orrs	r0, r3
 800a7ae:	60d0      	str	r0, [r2, #12]
 800a7b0:	2000      	movs	r0, #0
 800a7b2:	e7a7      	b.n	800a704 <UART_SetConfig+0x48>
    switch (clocksource)
 800a7b4:	2b02      	cmp	r3, #2
 800a7b6:	d1a4      	bne.n	800a702 <UART_SetConfig+0x46>
 800a7b8:	480e      	ldr	r0, [pc, #56]	; (800a7f4 <UART_SetConfig+0x138>)
 800a7ba:	e7e6      	b.n	800a78a <UART_SetConfig+0xce>
 800a7bc:	2080      	movs	r0, #128	; 0x80
 800a7be:	0240      	lsls	r0, r0, #9
 800a7c0:	2b08      	cmp	r3, #8
 800a7c2:	d0e2      	beq.n	800a78a <UART_SetConfig+0xce>
 800a7c4:	e79d      	b.n	800a702 <UART_SetConfig+0x46>
        pclk = HAL_RCC_GetSysClockFreq();
 800a7c6:	f7fe ff9b 	bl	8009700 <HAL_RCC_GetSysClockFreq>
        break;
 800a7ca:	e7db      	b.n	800a784 <UART_SetConfig+0xc8>
 800a7cc:	ffff69f3 	.word	0xffff69f3
 800a7d0:	ffffcfff 	.word	0xffffcfff
 800a7d4:	fffff4ff 	.word	0xfffff4ff
 800a7d8:	40013800 	.word	0x40013800
 800a7dc:	40004400 	.word	0x40004400
 800a7e0:	40021000 	.word	0x40021000
 800a7e4:	0000ffef 	.word	0x0000ffef
 800a7e8:	0800e494 	.word	0x0800e494
 800a7ec:	007a1200 	.word	0x007a1200
 800a7f0:	0000fff0 	.word	0x0000fff0
 800a7f4:	00f42400 	.word	0x00f42400

0800a7f8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a7f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800a7fa:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a7fc:	07da      	lsls	r2, r3, #31
 800a7fe:	d506      	bpl.n	800a80e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a800:	6801      	ldr	r1, [r0, #0]
 800a802:	4c28      	ldr	r4, [pc, #160]	; (800a8a4 <UART_AdvFeatureConfig+0xac>)
 800a804:	684a      	ldr	r2, [r1, #4]
 800a806:	4022      	ands	r2, r4
 800a808:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800a80a:	4322      	orrs	r2, r4
 800a80c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a80e:	079a      	lsls	r2, r3, #30
 800a810:	d506      	bpl.n	800a820 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a812:	6801      	ldr	r1, [r0, #0]
 800a814:	4c24      	ldr	r4, [pc, #144]	; (800a8a8 <UART_AdvFeatureConfig+0xb0>)
 800a816:	684a      	ldr	r2, [r1, #4]
 800a818:	4022      	ands	r2, r4
 800a81a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800a81c:	4322      	orrs	r2, r4
 800a81e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a820:	075a      	lsls	r2, r3, #29
 800a822:	d506      	bpl.n	800a832 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a824:	6801      	ldr	r1, [r0, #0]
 800a826:	4c21      	ldr	r4, [pc, #132]	; (800a8ac <UART_AdvFeatureConfig+0xb4>)
 800a828:	684a      	ldr	r2, [r1, #4]
 800a82a:	4022      	ands	r2, r4
 800a82c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800a82e:	4322      	orrs	r2, r4
 800a830:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a832:	071a      	lsls	r2, r3, #28
 800a834:	d506      	bpl.n	800a844 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a836:	6801      	ldr	r1, [r0, #0]
 800a838:	4c1d      	ldr	r4, [pc, #116]	; (800a8b0 <UART_AdvFeatureConfig+0xb8>)
 800a83a:	684a      	ldr	r2, [r1, #4]
 800a83c:	4022      	ands	r2, r4
 800a83e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800a840:	4322      	orrs	r2, r4
 800a842:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a844:	06da      	lsls	r2, r3, #27
 800a846:	d506      	bpl.n	800a856 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a848:	6801      	ldr	r1, [r0, #0]
 800a84a:	4c1a      	ldr	r4, [pc, #104]	; (800a8b4 <UART_AdvFeatureConfig+0xbc>)
 800a84c:	688a      	ldr	r2, [r1, #8]
 800a84e:	4022      	ands	r2, r4
 800a850:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800a852:	4322      	orrs	r2, r4
 800a854:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a856:	069a      	lsls	r2, r3, #26
 800a858:	d506      	bpl.n	800a868 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a85a:	6801      	ldr	r1, [r0, #0]
 800a85c:	4c16      	ldr	r4, [pc, #88]	; (800a8b8 <UART_AdvFeatureConfig+0xc0>)
 800a85e:	688a      	ldr	r2, [r1, #8]
 800a860:	4022      	ands	r2, r4
 800a862:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800a864:	4322      	orrs	r2, r4
 800a866:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a868:	065a      	lsls	r2, r3, #25
 800a86a:	d50a      	bpl.n	800a882 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a86c:	6801      	ldr	r1, [r0, #0]
 800a86e:	4d13      	ldr	r5, [pc, #76]	; (800a8bc <UART_AdvFeatureConfig+0xc4>)
 800a870:	684a      	ldr	r2, [r1, #4]
 800a872:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800a874:	402a      	ands	r2, r5
 800a876:	4322      	orrs	r2, r4
 800a878:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a87a:	2280      	movs	r2, #128	; 0x80
 800a87c:	0352      	lsls	r2, r2, #13
 800a87e:	4294      	cmp	r4, r2
 800a880:	d009      	beq.n	800a896 <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a882:	061b      	lsls	r3, r3, #24
 800a884:	d506      	bpl.n	800a894 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a886:	6802      	ldr	r2, [r0, #0]
 800a888:	490d      	ldr	r1, [pc, #52]	; (800a8c0 <UART_AdvFeatureConfig+0xc8>)
 800a88a:	6853      	ldr	r3, [r2, #4]
 800a88c:	400b      	ands	r3, r1
 800a88e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800a890:	430b      	orrs	r3, r1
 800a892:	6053      	str	r3, [r2, #4]
}
 800a894:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a896:	684a      	ldr	r2, [r1, #4]
 800a898:	4c0a      	ldr	r4, [pc, #40]	; (800a8c4 <UART_AdvFeatureConfig+0xcc>)
 800a89a:	4022      	ands	r2, r4
 800a89c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800a89e:	4322      	orrs	r2, r4
 800a8a0:	604a      	str	r2, [r1, #4]
 800a8a2:	e7ee      	b.n	800a882 <UART_AdvFeatureConfig+0x8a>
 800a8a4:	fffdffff 	.word	0xfffdffff
 800a8a8:	fffeffff 	.word	0xfffeffff
 800a8ac:	fffbffff 	.word	0xfffbffff
 800a8b0:	ffff7fff 	.word	0xffff7fff
 800a8b4:	ffffefff 	.word	0xffffefff
 800a8b8:	ffffdfff 	.word	0xffffdfff
 800a8bc:	ffefffff 	.word	0xffefffff
 800a8c0:	fff7ffff 	.word	0xfff7ffff
 800a8c4:	ff9fffff 	.word	0xff9fffff

0800a8c8 <UART_WaitOnFlagUntilTimeout>:
{
 800a8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ca:	4657      	mov	r7, sl
 800a8cc:	464e      	mov	r6, r9
 800a8ce:	4645      	mov	r5, r8
 800a8d0:	46de      	mov	lr, fp
 800a8d2:	b5e0      	push	{r5, r6, r7, lr}
 800a8d4:	0016      	movs	r6, r2
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a8d6:	2204      	movs	r2, #4
 800a8d8:	4692      	mov	sl, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a8da:	2280      	movs	r2, #128	; 0x80
 800a8dc:	0112      	lsls	r2, r2, #4
{
 800a8de:	4699      	mov	r9, r3
 800a8e0:	4680      	mov	r8, r0
 800a8e2:	000d      	movs	r5, r1
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a8e4:	4693      	mov	fp, r2
{
 800a8e6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a8e8:	6803      	ldr	r3, [r0, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8ea:	e001      	b.n	800a8f0 <UART_WaitOnFlagUntilTimeout+0x28>
    if (Timeout != HAL_MAX_DELAY)
 800a8ec:	1c7a      	adds	r2, r7, #1
 800a8ee:	d10d      	bne.n	800a90c <UART_WaitOnFlagUntilTimeout+0x44>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8f0:	69dc      	ldr	r4, [r3, #28]
 800a8f2:	402c      	ands	r4, r5
 800a8f4:	1b64      	subs	r4, r4, r5
 800a8f6:	4262      	negs	r2, r4
 800a8f8:	4154      	adcs	r4, r2
 800a8fa:	42b4      	cmp	r4, r6
 800a8fc:	d0f6      	beq.n	800a8ec <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800a8fe:	2000      	movs	r0, #0
}
 800a900:	bcf0      	pop	{r4, r5, r6, r7}
 800a902:	46bb      	mov	fp, r7
 800a904:	46b2      	mov	sl, r6
 800a906:	46a9      	mov	r9, r5
 800a908:	46a0      	mov	r8, r4
 800a90a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a90c:	f7fd fbf4 	bl	80080f8 <HAL_GetTick>
 800a910:	464b      	mov	r3, r9
 800a912:	1ac0      	subs	r0, r0, r3
 800a914:	42b8      	cmp	r0, r7
 800a916:	d830      	bhi.n	800a97a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a918:	2f00      	cmp	r7, #0
 800a91a:	d02e      	beq.n	800a97a <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a91c:	4643      	mov	r3, r8
 800a91e:	4651      	mov	r1, sl
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	4211      	tst	r1, r2
 800a926:	d0e3      	beq.n	800a8f0 <UART_WaitOnFlagUntilTimeout+0x28>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a928:	4659      	mov	r1, fp
 800a92a:	69da      	ldr	r2, [r3, #28]
 800a92c:	420a      	tst	r2, r1
 800a92e:	d0df      	beq.n	800a8f0 <UART_WaitOnFlagUntilTimeout+0x28>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a930:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a932:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a936:	2201      	movs	r2, #1
 800a938:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a93c:	4643      	mov	r3, r8
 800a93e:	6819      	ldr	r1, [r3, #0]
 800a940:	4c1f      	ldr	r4, [pc, #124]	; (800a9c0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800a942:	680b      	ldr	r3, [r1, #0]
 800a944:	4023      	ands	r3, r4
 800a946:	600b      	str	r3, [r1, #0]
 800a948:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a94c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a950:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a954:	4643      	mov	r3, r8
 800a956:	6819      	ldr	r1, [r3, #0]
 800a958:	688b      	ldr	r3, [r1, #8]
 800a95a:	4393      	bics	r3, r2
 800a95c:	608b      	str	r3, [r1, #8]
 800a95e:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 800a962:	2320      	movs	r3, #32
 800a964:	4642      	mov	r2, r8
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a966:	4641      	mov	r1, r8
          huart->gState = HAL_UART_STATE_READY;
 800a968:	6793      	str	r3, [r2, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a96a:	67d3      	str	r3, [r2, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a96c:	2280      	movs	r2, #128	; 0x80
 800a96e:	508b      	str	r3, [r1, r2]
          __HAL_UNLOCK(huart);
 800a970:	2200      	movs	r2, #0
 800a972:	3354      	adds	r3, #84	; 0x54
          return HAL_TIMEOUT;
 800a974:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800a976:	54ca      	strb	r2, [r1, r3]
          return HAL_TIMEOUT;
 800a978:	e7c2      	b.n	800a900 <UART_WaitOnFlagUntilTimeout+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a97a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a97e:	2201      	movs	r2, #1
 800a980:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a984:	4643      	mov	r3, r8
 800a986:	6819      	ldr	r1, [r3, #0]
 800a988:	4c0d      	ldr	r4, [pc, #52]	; (800a9c0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800a98a:	680b      	ldr	r3, [r1, #0]
 800a98c:	4023      	ands	r3, r4
 800a98e:	600b      	str	r3, [r1, #0]
 800a990:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a994:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a998:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a99c:	4643      	mov	r3, r8
 800a99e:	6819      	ldr	r1, [r3, #0]
 800a9a0:	688b      	ldr	r3, [r1, #8]
 800a9a2:	4393      	bics	r3, r2
 800a9a4:	608b      	str	r3, [r1, #8]
 800a9a6:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 800a9aa:	2320      	movs	r3, #32
 800a9ac:	4642      	mov	r2, r8
        __HAL_UNLOCK(huart);
 800a9ae:	4641      	mov	r1, r8
        huart->gState = HAL_UART_STATE_READY;
 800a9b0:	6793      	str	r3, [r2, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a9b2:	67d3      	str	r3, [r2, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	3354      	adds	r3, #84	; 0x54
        return HAL_TIMEOUT;
 800a9b8:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 800a9ba:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 800a9bc:	e7a0      	b.n	800a900 <UART_WaitOnFlagUntilTimeout+0x38>
 800a9be:	46c0      	nop			; (mov r8, r8)
 800a9c0:	fffffe5f 	.word	0xfffffe5f

0800a9c4 <HAL_UART_Transmit>:
{
 800a9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9c6:	4647      	mov	r7, r8
 800a9c8:	46ce      	mov	lr, r9
 800a9ca:	b580      	push	{r7, lr}
 800a9cc:	001f      	movs	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800a9ce:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 800a9d0:	0004      	movs	r4, r0
 800a9d2:	000d      	movs	r5, r1
 800a9d4:	0016      	movs	r6, r2
 800a9d6:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 800a9d8:	2b20      	cmp	r3, #32
 800a9da:	d155      	bne.n	800aa88 <HAL_UART_Transmit+0xc4>
    if ((pData == NULL) || (Size == 0U))
 800a9dc:	2900      	cmp	r1, #0
 800a9de:	d04d      	beq.n	800aa7c <HAL_UART_Transmit+0xb8>
 800a9e0:	2a00      	cmp	r2, #0
 800a9e2:	d04b      	beq.n	800aa7c <HAL_UART_Transmit+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9e4:	2380      	movs	r3, #128	; 0x80
 800a9e6:	6882      	ldr	r2, [r0, #8]
 800a9e8:	015b      	lsls	r3, r3, #5
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d041      	beq.n	800aa72 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 800a9ee:	2374      	movs	r3, #116	; 0x74
 800a9f0:	5ce2      	ldrb	r2, [r4, r3]
 800a9f2:	2a01      	cmp	r2, #1
 800a9f4:	d048      	beq.n	800aa88 <HAL_UART_Transmit+0xc4>
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	54e2      	strb	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	330c      	adds	r3, #12
 800a9fe:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa00:	3b5f      	subs	r3, #95	; 0x5f
 800aa02:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 800aa04:	f7fd fb78 	bl	80080f8 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800aa08:	2350      	movs	r3, #80	; 0x50
      pdata16bits = NULL;
 800aa0a:	2200      	movs	r2, #0
    huart->TxXferSize  = Size;
 800aa0c:	52e6      	strh	r6, [r4, r3]
    huart->TxXferCount = Size;
 800aa0e:	3302      	adds	r3, #2
 800aa10:	52e6      	strh	r6, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa12:	2380      	movs	r3, #128	; 0x80
      pdata16bits = NULL;
 800aa14:	4691      	mov	r9, r2
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa16:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800aa18:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa1a:	015b      	lsls	r3, r3, #5
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d035      	beq.n	800aa8c <HAL_UART_Transmit+0xc8>
    __HAL_UNLOCK(huart);
 800aa20:	2374      	movs	r3, #116	; 0x74
 800aa22:	2200      	movs	r2, #0
 800aa24:	54e2      	strb	r2, [r4, r3]
    while (huart->TxXferCount > 0U)
 800aa26:	3b22      	subs	r3, #34	; 0x22
 800aa28:	5ae3      	ldrh	r3, [r4, r3]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d036      	beq.n	800aa9c <HAL_UART_Transmit+0xd8>
      huart->TxXferCount--;
 800aa2e:	2652      	movs	r6, #82	; 0x52
 800aa30:	e00a      	b.n	800aa48 <HAL_UART_Transmit+0x84>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aa32:	782b      	ldrb	r3, [r5, #0]
 800aa34:	6822      	ldr	r2, [r4, #0]
        pdata8bits++;
 800aa36:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aa38:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800aa3a:	5ba2      	ldrh	r2, [r4, r6]
 800aa3c:	3a01      	subs	r2, #1
 800aa3e:	b292      	uxth	r2, r2
 800aa40:	53a2      	strh	r2, [r4, r6]
    while (huart->TxXferCount > 0U)
 800aa42:	5ba3      	ldrh	r3, [r4, r6]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d029      	beq.n	800aa9c <HAL_UART_Transmit+0xd8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aa48:	4643      	mov	r3, r8
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	2180      	movs	r1, #128	; 0x80
 800aa4e:	0020      	movs	r0, r4
 800aa50:	9700      	str	r7, [sp, #0]
 800aa52:	f7ff ff39 	bl	800a8c8 <UART_WaitOnFlagUntilTimeout>
 800aa56:	2800      	cmp	r0, #0
 800aa58:	d11e      	bne.n	800aa98 <HAL_UART_Transmit+0xd4>
      if (pdata8bits == NULL)
 800aa5a:	2d00      	cmp	r5, #0
 800aa5c:	d1e9      	bne.n	800aa32 <HAL_UART_Transmit+0x6e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aa5e:	464b      	mov	r3, r9
 800aa60:	881b      	ldrh	r3, [r3, #0]
 800aa62:	6822      	ldr	r2, [r4, #0]
 800aa64:	05db      	lsls	r3, r3, #23
 800aa66:	0ddb      	lsrs	r3, r3, #23
 800aa68:	8513      	strh	r3, [r2, #40]	; 0x28
        pdata16bits++;
 800aa6a:	2302      	movs	r3, #2
 800aa6c:	469c      	mov	ip, r3
 800aa6e:	44e1      	add	r9, ip
 800aa70:	e7e3      	b.n	800aa3a <HAL_UART_Transmit+0x76>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa72:	6903      	ldr	r3, [r0, #16]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d1ba      	bne.n	800a9ee <HAL_UART_Transmit+0x2a>
      if ((((uint32_t)pData) & 1U) != 0U)
 800aa78:	07cb      	lsls	r3, r1, #31
 800aa7a:	d5b8      	bpl.n	800a9ee <HAL_UART_Transmit+0x2a>
      return  HAL_ERROR;
 800aa7c:	2001      	movs	r0, #1
}
 800aa7e:	b003      	add	sp, #12
 800aa80:	bcc0      	pop	{r6, r7}
 800aa82:	46b9      	mov	r9, r7
 800aa84:	46b0      	mov	r8, r6
 800aa86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800aa88:	2002      	movs	r0, #2
 800aa8a:	e7f8      	b.n	800aa7e <HAL_UART_Transmit+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa8c:	6923      	ldr	r3, [r4, #16]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d1c6      	bne.n	800aa20 <HAL_UART_Transmit+0x5c>
 800aa92:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 800aa94:	2500      	movs	r5, #0
 800aa96:	e7c3      	b.n	800aa20 <HAL_UART_Transmit+0x5c>
        return HAL_TIMEOUT;
 800aa98:	2003      	movs	r0, #3
 800aa9a:	e7f0      	b.n	800aa7e <HAL_UART_Transmit+0xba>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aa9c:	4643      	mov	r3, r8
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	2140      	movs	r1, #64	; 0x40
 800aaa2:	0020      	movs	r0, r4
 800aaa4:	9700      	str	r7, [sp, #0]
 800aaa6:	f7ff ff0f 	bl	800a8c8 <UART_WaitOnFlagUntilTimeout>
 800aaaa:	2800      	cmp	r0, #0
 800aaac:	d1f4      	bne.n	800aa98 <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 800aaae:	2320      	movs	r3, #32
 800aab0:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 800aab2:	e7e4      	b.n	800aa7e <HAL_UART_Transmit+0xba>

0800aab4 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aab4:	2380      	movs	r3, #128	; 0x80
 800aab6:	2200      	movs	r2, #0
{
 800aab8:	b530      	push	{r4, r5, lr}
 800aaba:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aabc:	50c2      	str	r2, [r0, r3]
{
 800aabe:	b083      	sub	sp, #12
  tickstart = HAL_GetTick();
 800aac0:	f7fd fb1a 	bl	80080f8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aac4:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800aac6:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	0712      	lsls	r2, r2, #28
 800aacc:	d40c      	bmi.n	800aae8 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	075b      	lsls	r3, r3, #29
 800aad2:	d418      	bmi.n	800ab06 <UART_CheckIdleState+0x52>
  huart->gState = HAL_UART_STATE_READY;
 800aad4:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800aad6:	2274      	movs	r2, #116	; 0x74
  huart->gState = HAL_UART_STATE_READY;
 800aad8:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800aada:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aadc:	2300      	movs	r3, #0
  return HAL_OK;
 800aade:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aae0:	6623      	str	r3, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 800aae2:	54a3      	strb	r3, [r4, r2]
}
 800aae4:	b003      	add	sp, #12
 800aae6:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aae8:	2180      	movs	r1, #128	; 0x80
 800aaea:	4b0d      	ldr	r3, [pc, #52]	; (800ab20 <UART_CheckIdleState+0x6c>)
 800aaec:	2200      	movs	r2, #0
 800aaee:	9300      	str	r3, [sp, #0]
 800aaf0:	0389      	lsls	r1, r1, #14
 800aaf2:	0003      	movs	r3, r0
 800aaf4:	0020      	movs	r0, r4
 800aaf6:	f7ff fee7 	bl	800a8c8 <UART_WaitOnFlagUntilTimeout>
 800aafa:	2800      	cmp	r0, #0
 800aafc:	d10e      	bne.n	800ab1c <UART_CheckIdleState+0x68>
 800aafe:	6823      	ldr	r3, [r4, #0]
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	075b      	lsls	r3, r3, #29
 800ab04:	d5e6      	bpl.n	800aad4 <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab06:	2180      	movs	r1, #128	; 0x80
 800ab08:	4b05      	ldr	r3, [pc, #20]	; (800ab20 <UART_CheckIdleState+0x6c>)
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	9300      	str	r3, [sp, #0]
 800ab0e:	0020      	movs	r0, r4
 800ab10:	002b      	movs	r3, r5
 800ab12:	03c9      	lsls	r1, r1, #15
 800ab14:	f7ff fed8 	bl	800a8c8 <UART_WaitOnFlagUntilTimeout>
 800ab18:	2800      	cmp	r0, #0
 800ab1a:	d0db      	beq.n	800aad4 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 800ab1c:	2003      	movs	r0, #3
 800ab1e:	e7e1      	b.n	800aae4 <UART_CheckIdleState+0x30>
 800ab20:	01ffffff 	.word	0x01ffffff

0800ab24 <HAL_UART_Init>:
{
 800ab24:	b510      	push	{r4, lr}
 800ab26:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 800ab28:	d026      	beq.n	800ab78 <HAL_UART_Init+0x54>
  if (huart->gState == HAL_UART_STATE_RESET)
 800ab2a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d025      	beq.n	800ab7c <HAL_UART_Init+0x58>
  huart->gState = HAL_UART_STATE_BUSY;
 800ab30:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800ab32:	2101      	movs	r1, #1
 800ab34:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800ab36:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 800ab38:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab3a:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800ab3c:	438b      	bics	r3, r1
 800ab3e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab40:	f7ff fdbc 	bl	800a6bc <UART_SetConfig>
 800ab44:	2801      	cmp	r0, #1
 800ab46:	d017      	beq.n	800ab78 <HAL_UART_Init+0x54>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d110      	bne.n	800ab70 <HAL_UART_Init+0x4c>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800ab4e:	6823      	ldr	r3, [r4, #0]
 800ab50:	490d      	ldr	r1, [pc, #52]	; (800ab88 <HAL_UART_Init+0x64>)
 800ab52:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800ab54:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800ab56:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800ab58:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800ab5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800ab5c:	689a      	ldr	r2, [r3, #8]
 800ab5e:	438a      	bics	r2, r1
 800ab60:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	3907      	subs	r1, #7
 800ab66:	430a      	orrs	r2, r1
 800ab68:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800ab6a:	f7ff ffa3 	bl	800aab4 <UART_CheckIdleState>
}
 800ab6e:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 800ab70:	0020      	movs	r0, r4
 800ab72:	f7ff fe41 	bl	800a7f8 <UART_AdvFeatureConfig>
 800ab76:	e7ea      	b.n	800ab4e <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800ab78:	2001      	movs	r0, #1
 800ab7a:	e7f8      	b.n	800ab6e <HAL_UART_Init+0x4a>
    huart->Lock = HAL_UNLOCKED;
 800ab7c:	2274      	movs	r2, #116	; 0x74
 800ab7e:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 800ab80:	f7f8 fd36 	bl	80035f0 <HAL_UART_MspInit>
 800ab84:	e7d4      	b.n	800ab30 <HAL_UART_Init+0xc>
 800ab86:	46c0      	nop			; (mov r8, r8)
 800ab88:	fffff7ff 	.word	0xfffff7ff

0800ab8c <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 800ab8c:	2358      	movs	r3, #88	; 0x58
{
 800ab8e:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 800ab90:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 800ab92:	52c2      	strh	r2, [r0, r3]
  huart->RxXferCount = Size;
 800ab94:	3302      	adds	r3, #2
 800ab96:	52c2      	strh	r2, [r0, r3]
  UART_MASK_COMPUTATION(huart);
 800ab98:	2180      	movs	r1, #128	; 0x80
  huart->RxISR       = NULL;
 800ab9a:	2200      	movs	r2, #0
  UART_MASK_COMPUTATION(huart);
 800ab9c:	6883      	ldr	r3, [r0, #8]
  huart->RxISR       = NULL;
 800ab9e:	6642      	str	r2, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 800aba0:	0149      	lsls	r1, r1, #5
 800aba2:	428b      	cmp	r3, r1
 800aba4:	d038      	beq.n	800ac18 <UART_Start_Receive_IT+0x8c>
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d02f      	beq.n	800ac0a <UART_Start_Receive_IT+0x7e>
 800abaa:	235c      	movs	r3, #92	; 0x5c
 800abac:	52c2      	strh	r2, [r0, r3]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abae:	2380      	movs	r3, #128	; 0x80
 800abb0:	2200      	movs	r2, #0
 800abb2:	50c2      	str	r2, [r0, r3]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800abb4:	3b5e      	subs	r3, #94	; 0x5e
 800abb6:	67c3      	str	r3, [r0, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abb8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abbc:	2101      	movs	r1, #1
 800abbe:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abc2:	6802      	ldr	r2, [r0, #0]
 800abc4:	6893      	ldr	r3, [r2, #8]
 800abc6:	430b      	orrs	r3, r1
 800abc8:	6093      	str	r3, [r2, #8]
 800abca:	f384 8810 	msr	PRIMASK, r4
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abce:	2380      	movs	r3, #128	; 0x80
 800abd0:	6882      	ldr	r2, [r0, #8]
 800abd2:	015b      	lsls	r3, r3, #5
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d013      	beq.n	800ac00 <UART_Start_Receive_IT+0x74>
    huart->RxISR = UART_RxISR_8BIT;
 800abd8:	4b15      	ldr	r3, [pc, #84]	; (800ac30 <UART_Start_Receive_IT+0xa4>)
 800abda:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 800abdc:	2200      	movs	r2, #0
 800abde:	2374      	movs	r3, #116	; 0x74
 800abe0:	54c2      	strb	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abe2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abe6:	3b73      	subs	r3, #115	; 0x73
 800abe8:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800abec:	6802      	ldr	r2, [r0, #0]
 800abee:	3320      	adds	r3, #32
 800abf0:	6810      	ldr	r0, [r2, #0]
 800abf2:	33ff      	adds	r3, #255	; 0xff
 800abf4:	4303      	orrs	r3, r0
 800abf6:	6013      	str	r3, [r2, #0]
 800abf8:	f381 8810 	msr	PRIMASK, r1
}
 800abfc:	2000      	movs	r0, #0
 800abfe:	bd10      	pop	{r4, pc}
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac00:	6903      	ldr	r3, [r0, #16]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d1e8      	bne.n	800abd8 <UART_Start_Receive_IT+0x4c>
    huart->RxISR = UART_RxISR_16BIT;
 800ac06:	4b0b      	ldr	r3, [pc, #44]	; (800ac34 <UART_Start_Receive_IT+0xa8>)
 800ac08:	e7e7      	b.n	800abda <UART_Start_Receive_IT+0x4e>
  UART_MASK_COMPUTATION(huart);
 800ac0a:	6903      	ldr	r3, [r0, #16]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d10a      	bne.n	800ac26 <UART_Start_Receive_IT+0x9a>
 800ac10:	235c      	movs	r3, #92	; 0x5c
 800ac12:	22ff      	movs	r2, #255	; 0xff
 800ac14:	52c2      	strh	r2, [r0, r3]
 800ac16:	e7ca      	b.n	800abae <UART_Start_Receive_IT+0x22>
 800ac18:	6903      	ldr	r3, [r0, #16]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d1f8      	bne.n	800ac10 <UART_Start_Receive_IT+0x84>
 800ac1e:	4a06      	ldr	r2, [pc, #24]	; (800ac38 <UART_Start_Receive_IT+0xac>)
 800ac20:	335c      	adds	r3, #92	; 0x5c
 800ac22:	52c2      	strh	r2, [r0, r3]
 800ac24:	e7c3      	b.n	800abae <UART_Start_Receive_IT+0x22>
 800ac26:	235c      	movs	r3, #92	; 0x5c
 800ac28:	227f      	movs	r2, #127	; 0x7f
 800ac2a:	52c2      	strh	r2, [r0, r3]
 800ac2c:	e7bf      	b.n	800abae <UART_Start_Receive_IT+0x22>
 800ac2e:	46c0      	nop			; (mov r8, r8)
 800ac30:	0800a67d 	.word	0x0800a67d
 800ac34:	0800a641 	.word	0x0800a641
 800ac38:	000001ff 	.word	0x000001ff

0800ac3c <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800ac3c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 800ac3e:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800ac40:	2b20      	cmp	r3, #32
 800ac42:	d12a      	bne.n	800ac9a <HAL_UART_Receive_IT+0x5e>
    if ((pData == NULL) || (Size == 0U))
 800ac44:	2900      	cmp	r1, #0
 800ac46:	d026      	beq.n	800ac96 <HAL_UART_Receive_IT+0x5a>
 800ac48:	2a00      	cmp	r2, #0
 800ac4a:	d024      	beq.n	800ac96 <HAL_UART_Receive_IT+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac4c:	2380      	movs	r3, #128	; 0x80
 800ac4e:	6884      	ldr	r4, [r0, #8]
 800ac50:	015b      	lsls	r3, r3, #5
 800ac52:	429c      	cmp	r4, r3
 800ac54:	d01a      	beq.n	800ac8c <HAL_UART_Receive_IT+0x50>
    __HAL_LOCK(huart);
 800ac56:	2374      	movs	r3, #116	; 0x74
 800ac58:	5cc4      	ldrb	r4, [r0, r3]
 800ac5a:	2c01      	cmp	r4, #1
 800ac5c:	d01d      	beq.n	800ac9a <HAL_UART_Receive_IT+0x5e>
 800ac5e:	2401      	movs	r4, #1
 800ac60:	54c4      	strb	r4, [r0, r3]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac62:	2300      	movs	r3, #0
 800ac64:	6603      	str	r3, [r0, #96]	; 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ac66:	6803      	ldr	r3, [r0, #0]
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	021b      	lsls	r3, r3, #8
 800ac6c:	d50b      	bpl.n	800ac86 <HAL_UART_Receive_IT+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac6e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac72:	f384 8810 	msr	PRIMASK, r4
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ac76:	2380      	movs	r3, #128	; 0x80
 800ac78:	6804      	ldr	r4, [r0, #0]
 800ac7a:	04db      	lsls	r3, r3, #19
 800ac7c:	6826      	ldr	r6, [r4, #0]
 800ac7e:	4333      	orrs	r3, r6
 800ac80:	6023      	str	r3, [r4, #0]
 800ac82:	f385 8810 	msr	PRIMASK, r5
    return (UART_Start_Receive_IT(huart, pData, Size));
 800ac86:	f7ff ff81 	bl	800ab8c <UART_Start_Receive_IT>
 800ac8a:	e005      	b.n	800ac98 <HAL_UART_Receive_IT+0x5c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac8c:	6903      	ldr	r3, [r0, #16]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d1e1      	bne.n	800ac56 <HAL_UART_Receive_IT+0x1a>
      if ((((uint32_t)pData) & 1U) != 0U)
 800ac92:	07cb      	lsls	r3, r1, #31
 800ac94:	d5df      	bpl.n	800ac56 <HAL_UART_Receive_IT+0x1a>
      return HAL_ERROR;
 800ac96:	2001      	movs	r0, #1
}
 800ac98:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800ac9a:	2002      	movs	r0, #2
 800ac9c:	e7fc      	b.n	800ac98 <HAL_UART_Receive_IT+0x5c>
 800ac9e:	46c0      	nop			; (mov r8, r8)

0800aca0 <__errno>:
 800aca0:	4b01      	ldr	r3, [pc, #4]	; (800aca8 <__errno+0x8>)
 800aca2:	6818      	ldr	r0, [r3, #0]
 800aca4:	4770      	bx	lr
 800aca6:	46c0      	nop			; (mov r8, r8)
 800aca8:	20000074 	.word	0x20000074

0800acac <__libc_init_array>:
 800acac:	b570      	push	{r4, r5, r6, lr}
 800acae:	2600      	movs	r6, #0
 800acb0:	4d0c      	ldr	r5, [pc, #48]	; (800ace4 <__libc_init_array+0x38>)
 800acb2:	4c0d      	ldr	r4, [pc, #52]	; (800ace8 <__libc_init_array+0x3c>)
 800acb4:	1b64      	subs	r4, r4, r5
 800acb6:	10a4      	asrs	r4, r4, #2
 800acb8:	42a6      	cmp	r6, r4
 800acba:	d109      	bne.n	800acd0 <__libc_init_array+0x24>
 800acbc:	2600      	movs	r6, #0
 800acbe:	f001 f927 	bl	800bf10 <_init>
 800acc2:	4d0a      	ldr	r5, [pc, #40]	; (800acec <__libc_init_array+0x40>)
 800acc4:	4c0a      	ldr	r4, [pc, #40]	; (800acf0 <__libc_init_array+0x44>)
 800acc6:	1b64      	subs	r4, r4, r5
 800acc8:	10a4      	asrs	r4, r4, #2
 800acca:	42a6      	cmp	r6, r4
 800accc:	d105      	bne.n	800acda <__libc_init_array+0x2e>
 800acce:	bd70      	pop	{r4, r5, r6, pc}
 800acd0:	00b3      	lsls	r3, r6, #2
 800acd2:	58eb      	ldr	r3, [r5, r3]
 800acd4:	4798      	blx	r3
 800acd6:	3601      	adds	r6, #1
 800acd8:	e7ee      	b.n	800acb8 <__libc_init_array+0xc>
 800acda:	00b3      	lsls	r3, r6, #2
 800acdc:	58eb      	ldr	r3, [r5, r3]
 800acde:	4798      	blx	r3
 800ace0:	3601      	adds	r6, #1
 800ace2:	e7f2      	b.n	800acca <__libc_init_array+0x1e>
 800ace4:	0800e530 	.word	0x0800e530
 800ace8:	0800e530 	.word	0x0800e530
 800acec:	0800e530 	.word	0x0800e530
 800acf0:	0800e534 	.word	0x0800e534

0800acf4 <memcpy>:
 800acf4:	2300      	movs	r3, #0
 800acf6:	b510      	push	{r4, lr}
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d100      	bne.n	800acfe <memcpy+0xa>
 800acfc:	bd10      	pop	{r4, pc}
 800acfe:	5ccc      	ldrb	r4, [r1, r3]
 800ad00:	54c4      	strb	r4, [r0, r3]
 800ad02:	3301      	adds	r3, #1
 800ad04:	e7f8      	b.n	800acf8 <memcpy+0x4>

0800ad06 <memset>:
 800ad06:	0003      	movs	r3, r0
 800ad08:	1882      	adds	r2, r0, r2
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d100      	bne.n	800ad10 <memset+0xa>
 800ad0e:	4770      	bx	lr
 800ad10:	7019      	strb	r1, [r3, #0]
 800ad12:	3301      	adds	r3, #1
 800ad14:	e7f9      	b.n	800ad0a <memset+0x4>
	...

0800ad18 <iprintf>:
 800ad18:	b40f      	push	{r0, r1, r2, r3}
 800ad1a:	4b0b      	ldr	r3, [pc, #44]	; (800ad48 <iprintf+0x30>)
 800ad1c:	b513      	push	{r0, r1, r4, lr}
 800ad1e:	681c      	ldr	r4, [r3, #0]
 800ad20:	2c00      	cmp	r4, #0
 800ad22:	d005      	beq.n	800ad30 <iprintf+0x18>
 800ad24:	69a3      	ldr	r3, [r4, #24]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d102      	bne.n	800ad30 <iprintf+0x18>
 800ad2a:	0020      	movs	r0, r4
 800ad2c:	f000 fa86 	bl	800b23c <__sinit>
 800ad30:	ab05      	add	r3, sp, #20
 800ad32:	0020      	movs	r0, r4
 800ad34:	9a04      	ldr	r2, [sp, #16]
 800ad36:	68a1      	ldr	r1, [r4, #8]
 800ad38:	9301      	str	r3, [sp, #4]
 800ad3a:	f000 fc5f 	bl	800b5fc <_vfiprintf_r>
 800ad3e:	bc16      	pop	{r1, r2, r4}
 800ad40:	bc08      	pop	{r3}
 800ad42:	b004      	add	sp, #16
 800ad44:	4718      	bx	r3
 800ad46:	46c0      	nop			; (mov r8, r8)
 800ad48:	20000074 	.word	0x20000074

0800ad4c <_puts_r>:
 800ad4c:	b570      	push	{r4, r5, r6, lr}
 800ad4e:	0005      	movs	r5, r0
 800ad50:	000e      	movs	r6, r1
 800ad52:	2800      	cmp	r0, #0
 800ad54:	d004      	beq.n	800ad60 <_puts_r+0x14>
 800ad56:	6983      	ldr	r3, [r0, #24]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d101      	bne.n	800ad60 <_puts_r+0x14>
 800ad5c:	f000 fa6e 	bl	800b23c <__sinit>
 800ad60:	69ab      	ldr	r3, [r5, #24]
 800ad62:	68ac      	ldr	r4, [r5, #8]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d102      	bne.n	800ad6e <_puts_r+0x22>
 800ad68:	0028      	movs	r0, r5
 800ad6a:	f000 fa67 	bl	800b23c <__sinit>
 800ad6e:	4b2d      	ldr	r3, [pc, #180]	; (800ae24 <_puts_r+0xd8>)
 800ad70:	429c      	cmp	r4, r3
 800ad72:	d122      	bne.n	800adba <_puts_r+0x6e>
 800ad74:	686c      	ldr	r4, [r5, #4]
 800ad76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad78:	07db      	lsls	r3, r3, #31
 800ad7a:	d405      	bmi.n	800ad88 <_puts_r+0x3c>
 800ad7c:	89a3      	ldrh	r3, [r4, #12]
 800ad7e:	059b      	lsls	r3, r3, #22
 800ad80:	d402      	bmi.n	800ad88 <_puts_r+0x3c>
 800ad82:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad84:	f000 fafb 	bl	800b37e <__retarget_lock_acquire_recursive>
 800ad88:	89a3      	ldrh	r3, [r4, #12]
 800ad8a:	071b      	lsls	r3, r3, #28
 800ad8c:	d502      	bpl.n	800ad94 <_puts_r+0x48>
 800ad8e:	6923      	ldr	r3, [r4, #16]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d129      	bne.n	800ade8 <_puts_r+0x9c>
 800ad94:	0021      	movs	r1, r4
 800ad96:	0028      	movs	r0, r5
 800ad98:	f000 f8aa 	bl	800aef0 <__swsetup_r>
 800ad9c:	2800      	cmp	r0, #0
 800ad9e:	d023      	beq.n	800ade8 <_puts_r+0x9c>
 800ada0:	2501      	movs	r5, #1
 800ada2:	426d      	negs	r5, r5
 800ada4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ada6:	07db      	lsls	r3, r3, #31
 800ada8:	d405      	bmi.n	800adb6 <_puts_r+0x6a>
 800adaa:	89a3      	ldrh	r3, [r4, #12]
 800adac:	059b      	lsls	r3, r3, #22
 800adae:	d402      	bmi.n	800adb6 <_puts_r+0x6a>
 800adb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adb2:	f000 fae5 	bl	800b380 <__retarget_lock_release_recursive>
 800adb6:	0028      	movs	r0, r5
 800adb8:	bd70      	pop	{r4, r5, r6, pc}
 800adba:	4b1b      	ldr	r3, [pc, #108]	; (800ae28 <_puts_r+0xdc>)
 800adbc:	429c      	cmp	r4, r3
 800adbe:	d101      	bne.n	800adc4 <_puts_r+0x78>
 800adc0:	68ac      	ldr	r4, [r5, #8]
 800adc2:	e7d8      	b.n	800ad76 <_puts_r+0x2a>
 800adc4:	4b19      	ldr	r3, [pc, #100]	; (800ae2c <_puts_r+0xe0>)
 800adc6:	429c      	cmp	r4, r3
 800adc8:	d1d5      	bne.n	800ad76 <_puts_r+0x2a>
 800adca:	68ec      	ldr	r4, [r5, #12]
 800adcc:	e7d3      	b.n	800ad76 <_puts_r+0x2a>
 800adce:	3601      	adds	r6, #1
 800add0:	60a3      	str	r3, [r4, #8]
 800add2:	2b00      	cmp	r3, #0
 800add4:	da04      	bge.n	800ade0 <_puts_r+0x94>
 800add6:	69a2      	ldr	r2, [r4, #24]
 800add8:	429a      	cmp	r2, r3
 800adda:	dc16      	bgt.n	800ae0a <_puts_r+0xbe>
 800addc:	290a      	cmp	r1, #10
 800adde:	d014      	beq.n	800ae0a <_puts_r+0xbe>
 800ade0:	6823      	ldr	r3, [r4, #0]
 800ade2:	1c5a      	adds	r2, r3, #1
 800ade4:	6022      	str	r2, [r4, #0]
 800ade6:	7019      	strb	r1, [r3, #0]
 800ade8:	68a3      	ldr	r3, [r4, #8]
 800adea:	7831      	ldrb	r1, [r6, #0]
 800adec:	3b01      	subs	r3, #1
 800adee:	2900      	cmp	r1, #0
 800adf0:	d1ed      	bne.n	800adce <_puts_r+0x82>
 800adf2:	60a3      	str	r3, [r4, #8]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	da0f      	bge.n	800ae18 <_puts_r+0xcc>
 800adf8:	0028      	movs	r0, r5
 800adfa:	0022      	movs	r2, r4
 800adfc:	310a      	adds	r1, #10
 800adfe:	f000 f821 	bl	800ae44 <__swbuf_r>
 800ae02:	250a      	movs	r5, #10
 800ae04:	1c43      	adds	r3, r0, #1
 800ae06:	d1cd      	bne.n	800ada4 <_puts_r+0x58>
 800ae08:	e7ca      	b.n	800ada0 <_puts_r+0x54>
 800ae0a:	0022      	movs	r2, r4
 800ae0c:	0028      	movs	r0, r5
 800ae0e:	f000 f819 	bl	800ae44 <__swbuf_r>
 800ae12:	1c43      	adds	r3, r0, #1
 800ae14:	d1e8      	bne.n	800ade8 <_puts_r+0x9c>
 800ae16:	e7c3      	b.n	800ada0 <_puts_r+0x54>
 800ae18:	250a      	movs	r5, #10
 800ae1a:	6823      	ldr	r3, [r4, #0]
 800ae1c:	1c5a      	adds	r2, r3, #1
 800ae1e:	6022      	str	r2, [r4, #0]
 800ae20:	701d      	strb	r5, [r3, #0]
 800ae22:	e7bf      	b.n	800ada4 <_puts_r+0x58>
 800ae24:	0800e4bc 	.word	0x0800e4bc
 800ae28:	0800e4dc 	.word	0x0800e4dc
 800ae2c:	0800e49c 	.word	0x0800e49c

0800ae30 <puts>:
 800ae30:	b510      	push	{r4, lr}
 800ae32:	4b03      	ldr	r3, [pc, #12]	; (800ae40 <puts+0x10>)
 800ae34:	0001      	movs	r1, r0
 800ae36:	6818      	ldr	r0, [r3, #0]
 800ae38:	f7ff ff88 	bl	800ad4c <_puts_r>
 800ae3c:	bd10      	pop	{r4, pc}
 800ae3e:	46c0      	nop			; (mov r8, r8)
 800ae40:	20000074 	.word	0x20000074

0800ae44 <__swbuf_r>:
 800ae44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae46:	0005      	movs	r5, r0
 800ae48:	000e      	movs	r6, r1
 800ae4a:	0014      	movs	r4, r2
 800ae4c:	2800      	cmp	r0, #0
 800ae4e:	d004      	beq.n	800ae5a <__swbuf_r+0x16>
 800ae50:	6983      	ldr	r3, [r0, #24]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d101      	bne.n	800ae5a <__swbuf_r+0x16>
 800ae56:	f000 f9f1 	bl	800b23c <__sinit>
 800ae5a:	4b22      	ldr	r3, [pc, #136]	; (800aee4 <__swbuf_r+0xa0>)
 800ae5c:	429c      	cmp	r4, r3
 800ae5e:	d12e      	bne.n	800aebe <__swbuf_r+0x7a>
 800ae60:	686c      	ldr	r4, [r5, #4]
 800ae62:	69a3      	ldr	r3, [r4, #24]
 800ae64:	60a3      	str	r3, [r4, #8]
 800ae66:	89a3      	ldrh	r3, [r4, #12]
 800ae68:	071b      	lsls	r3, r3, #28
 800ae6a:	d532      	bpl.n	800aed2 <__swbuf_r+0x8e>
 800ae6c:	6923      	ldr	r3, [r4, #16]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d02f      	beq.n	800aed2 <__swbuf_r+0x8e>
 800ae72:	6823      	ldr	r3, [r4, #0]
 800ae74:	6922      	ldr	r2, [r4, #16]
 800ae76:	b2f7      	uxtb	r7, r6
 800ae78:	1a98      	subs	r0, r3, r2
 800ae7a:	6963      	ldr	r3, [r4, #20]
 800ae7c:	b2f6      	uxtb	r6, r6
 800ae7e:	4283      	cmp	r3, r0
 800ae80:	dc05      	bgt.n	800ae8e <__swbuf_r+0x4a>
 800ae82:	0021      	movs	r1, r4
 800ae84:	0028      	movs	r0, r5
 800ae86:	f000 f937 	bl	800b0f8 <_fflush_r>
 800ae8a:	2800      	cmp	r0, #0
 800ae8c:	d127      	bne.n	800aede <__swbuf_r+0x9a>
 800ae8e:	68a3      	ldr	r3, [r4, #8]
 800ae90:	3001      	adds	r0, #1
 800ae92:	3b01      	subs	r3, #1
 800ae94:	60a3      	str	r3, [r4, #8]
 800ae96:	6823      	ldr	r3, [r4, #0]
 800ae98:	1c5a      	adds	r2, r3, #1
 800ae9a:	6022      	str	r2, [r4, #0]
 800ae9c:	701f      	strb	r7, [r3, #0]
 800ae9e:	6963      	ldr	r3, [r4, #20]
 800aea0:	4283      	cmp	r3, r0
 800aea2:	d004      	beq.n	800aeae <__swbuf_r+0x6a>
 800aea4:	89a3      	ldrh	r3, [r4, #12]
 800aea6:	07db      	lsls	r3, r3, #31
 800aea8:	d507      	bpl.n	800aeba <__swbuf_r+0x76>
 800aeaa:	2e0a      	cmp	r6, #10
 800aeac:	d105      	bne.n	800aeba <__swbuf_r+0x76>
 800aeae:	0021      	movs	r1, r4
 800aeb0:	0028      	movs	r0, r5
 800aeb2:	f000 f921 	bl	800b0f8 <_fflush_r>
 800aeb6:	2800      	cmp	r0, #0
 800aeb8:	d111      	bne.n	800aede <__swbuf_r+0x9a>
 800aeba:	0030      	movs	r0, r6
 800aebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aebe:	4b0a      	ldr	r3, [pc, #40]	; (800aee8 <__swbuf_r+0xa4>)
 800aec0:	429c      	cmp	r4, r3
 800aec2:	d101      	bne.n	800aec8 <__swbuf_r+0x84>
 800aec4:	68ac      	ldr	r4, [r5, #8]
 800aec6:	e7cc      	b.n	800ae62 <__swbuf_r+0x1e>
 800aec8:	4b08      	ldr	r3, [pc, #32]	; (800aeec <__swbuf_r+0xa8>)
 800aeca:	429c      	cmp	r4, r3
 800aecc:	d1c9      	bne.n	800ae62 <__swbuf_r+0x1e>
 800aece:	68ec      	ldr	r4, [r5, #12]
 800aed0:	e7c7      	b.n	800ae62 <__swbuf_r+0x1e>
 800aed2:	0021      	movs	r1, r4
 800aed4:	0028      	movs	r0, r5
 800aed6:	f000 f80b 	bl	800aef0 <__swsetup_r>
 800aeda:	2800      	cmp	r0, #0
 800aedc:	d0c9      	beq.n	800ae72 <__swbuf_r+0x2e>
 800aede:	2601      	movs	r6, #1
 800aee0:	4276      	negs	r6, r6
 800aee2:	e7ea      	b.n	800aeba <__swbuf_r+0x76>
 800aee4:	0800e4bc 	.word	0x0800e4bc
 800aee8:	0800e4dc 	.word	0x0800e4dc
 800aeec:	0800e49c 	.word	0x0800e49c

0800aef0 <__swsetup_r>:
 800aef0:	4b37      	ldr	r3, [pc, #220]	; (800afd0 <__swsetup_r+0xe0>)
 800aef2:	b570      	push	{r4, r5, r6, lr}
 800aef4:	681d      	ldr	r5, [r3, #0]
 800aef6:	0006      	movs	r6, r0
 800aef8:	000c      	movs	r4, r1
 800aefa:	2d00      	cmp	r5, #0
 800aefc:	d005      	beq.n	800af0a <__swsetup_r+0x1a>
 800aefe:	69ab      	ldr	r3, [r5, #24]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d102      	bne.n	800af0a <__swsetup_r+0x1a>
 800af04:	0028      	movs	r0, r5
 800af06:	f000 f999 	bl	800b23c <__sinit>
 800af0a:	4b32      	ldr	r3, [pc, #200]	; (800afd4 <__swsetup_r+0xe4>)
 800af0c:	429c      	cmp	r4, r3
 800af0e:	d10f      	bne.n	800af30 <__swsetup_r+0x40>
 800af10:	686c      	ldr	r4, [r5, #4]
 800af12:	230c      	movs	r3, #12
 800af14:	5ee2      	ldrsh	r2, [r4, r3]
 800af16:	b293      	uxth	r3, r2
 800af18:	0711      	lsls	r1, r2, #28
 800af1a:	d42d      	bmi.n	800af78 <__swsetup_r+0x88>
 800af1c:	06d9      	lsls	r1, r3, #27
 800af1e:	d411      	bmi.n	800af44 <__swsetup_r+0x54>
 800af20:	2309      	movs	r3, #9
 800af22:	2001      	movs	r0, #1
 800af24:	6033      	str	r3, [r6, #0]
 800af26:	3337      	adds	r3, #55	; 0x37
 800af28:	4313      	orrs	r3, r2
 800af2a:	81a3      	strh	r3, [r4, #12]
 800af2c:	4240      	negs	r0, r0
 800af2e:	bd70      	pop	{r4, r5, r6, pc}
 800af30:	4b29      	ldr	r3, [pc, #164]	; (800afd8 <__swsetup_r+0xe8>)
 800af32:	429c      	cmp	r4, r3
 800af34:	d101      	bne.n	800af3a <__swsetup_r+0x4a>
 800af36:	68ac      	ldr	r4, [r5, #8]
 800af38:	e7eb      	b.n	800af12 <__swsetup_r+0x22>
 800af3a:	4b28      	ldr	r3, [pc, #160]	; (800afdc <__swsetup_r+0xec>)
 800af3c:	429c      	cmp	r4, r3
 800af3e:	d1e8      	bne.n	800af12 <__swsetup_r+0x22>
 800af40:	68ec      	ldr	r4, [r5, #12]
 800af42:	e7e6      	b.n	800af12 <__swsetup_r+0x22>
 800af44:	075b      	lsls	r3, r3, #29
 800af46:	d513      	bpl.n	800af70 <__swsetup_r+0x80>
 800af48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af4a:	2900      	cmp	r1, #0
 800af4c:	d008      	beq.n	800af60 <__swsetup_r+0x70>
 800af4e:	0023      	movs	r3, r4
 800af50:	3344      	adds	r3, #68	; 0x44
 800af52:	4299      	cmp	r1, r3
 800af54:	d002      	beq.n	800af5c <__swsetup_r+0x6c>
 800af56:	0030      	movs	r0, r6
 800af58:	f000 fa80 	bl	800b45c <_free_r>
 800af5c:	2300      	movs	r3, #0
 800af5e:	6363      	str	r3, [r4, #52]	; 0x34
 800af60:	2224      	movs	r2, #36	; 0x24
 800af62:	89a3      	ldrh	r3, [r4, #12]
 800af64:	4393      	bics	r3, r2
 800af66:	81a3      	strh	r3, [r4, #12]
 800af68:	2300      	movs	r3, #0
 800af6a:	6063      	str	r3, [r4, #4]
 800af6c:	6923      	ldr	r3, [r4, #16]
 800af6e:	6023      	str	r3, [r4, #0]
 800af70:	2308      	movs	r3, #8
 800af72:	89a2      	ldrh	r2, [r4, #12]
 800af74:	4313      	orrs	r3, r2
 800af76:	81a3      	strh	r3, [r4, #12]
 800af78:	6923      	ldr	r3, [r4, #16]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d10b      	bne.n	800af96 <__swsetup_r+0xa6>
 800af7e:	21a0      	movs	r1, #160	; 0xa0
 800af80:	2280      	movs	r2, #128	; 0x80
 800af82:	89a3      	ldrh	r3, [r4, #12]
 800af84:	0089      	lsls	r1, r1, #2
 800af86:	0092      	lsls	r2, r2, #2
 800af88:	400b      	ands	r3, r1
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d003      	beq.n	800af96 <__swsetup_r+0xa6>
 800af8e:	0021      	movs	r1, r4
 800af90:	0030      	movs	r0, r6
 800af92:	f000 fa1f 	bl	800b3d4 <__smakebuf_r>
 800af96:	220c      	movs	r2, #12
 800af98:	5ea3      	ldrsh	r3, [r4, r2]
 800af9a:	2001      	movs	r0, #1
 800af9c:	001a      	movs	r2, r3
 800af9e:	b299      	uxth	r1, r3
 800afa0:	4002      	ands	r2, r0
 800afa2:	4203      	tst	r3, r0
 800afa4:	d00f      	beq.n	800afc6 <__swsetup_r+0xd6>
 800afa6:	2200      	movs	r2, #0
 800afa8:	60a2      	str	r2, [r4, #8]
 800afaa:	6962      	ldr	r2, [r4, #20]
 800afac:	4252      	negs	r2, r2
 800afae:	61a2      	str	r2, [r4, #24]
 800afb0:	2000      	movs	r0, #0
 800afb2:	6922      	ldr	r2, [r4, #16]
 800afb4:	4282      	cmp	r2, r0
 800afb6:	d1ba      	bne.n	800af2e <__swsetup_r+0x3e>
 800afb8:	060a      	lsls	r2, r1, #24
 800afba:	d5b8      	bpl.n	800af2e <__swsetup_r+0x3e>
 800afbc:	2240      	movs	r2, #64	; 0x40
 800afbe:	4313      	orrs	r3, r2
 800afc0:	81a3      	strh	r3, [r4, #12]
 800afc2:	3801      	subs	r0, #1
 800afc4:	e7b3      	b.n	800af2e <__swsetup_r+0x3e>
 800afc6:	0788      	lsls	r0, r1, #30
 800afc8:	d400      	bmi.n	800afcc <__swsetup_r+0xdc>
 800afca:	6962      	ldr	r2, [r4, #20]
 800afcc:	60a2      	str	r2, [r4, #8]
 800afce:	e7ef      	b.n	800afb0 <__swsetup_r+0xc0>
 800afd0:	20000074 	.word	0x20000074
 800afd4:	0800e4bc 	.word	0x0800e4bc
 800afd8:	0800e4dc 	.word	0x0800e4dc
 800afdc:	0800e49c 	.word	0x0800e49c

0800afe0 <__sflush_r>:
 800afe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afe2:	898b      	ldrh	r3, [r1, #12]
 800afe4:	0005      	movs	r5, r0
 800afe6:	000c      	movs	r4, r1
 800afe8:	071a      	lsls	r2, r3, #28
 800afea:	d45f      	bmi.n	800b0ac <__sflush_r+0xcc>
 800afec:	684a      	ldr	r2, [r1, #4]
 800afee:	2a00      	cmp	r2, #0
 800aff0:	dc04      	bgt.n	800affc <__sflush_r+0x1c>
 800aff2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800aff4:	2a00      	cmp	r2, #0
 800aff6:	dc01      	bgt.n	800affc <__sflush_r+0x1c>
 800aff8:	2000      	movs	r0, #0
 800affa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800affc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800affe:	2f00      	cmp	r7, #0
 800b000:	d0fa      	beq.n	800aff8 <__sflush_r+0x18>
 800b002:	2200      	movs	r2, #0
 800b004:	2180      	movs	r1, #128	; 0x80
 800b006:	682e      	ldr	r6, [r5, #0]
 800b008:	602a      	str	r2, [r5, #0]
 800b00a:	001a      	movs	r2, r3
 800b00c:	0149      	lsls	r1, r1, #5
 800b00e:	400a      	ands	r2, r1
 800b010:	420b      	tst	r3, r1
 800b012:	d034      	beq.n	800b07e <__sflush_r+0x9e>
 800b014:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b016:	89a3      	ldrh	r3, [r4, #12]
 800b018:	075b      	lsls	r3, r3, #29
 800b01a:	d506      	bpl.n	800b02a <__sflush_r+0x4a>
 800b01c:	6863      	ldr	r3, [r4, #4]
 800b01e:	1ac0      	subs	r0, r0, r3
 800b020:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b022:	2b00      	cmp	r3, #0
 800b024:	d001      	beq.n	800b02a <__sflush_r+0x4a>
 800b026:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b028:	1ac0      	subs	r0, r0, r3
 800b02a:	0002      	movs	r2, r0
 800b02c:	6a21      	ldr	r1, [r4, #32]
 800b02e:	2300      	movs	r3, #0
 800b030:	0028      	movs	r0, r5
 800b032:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b034:	47b8      	blx	r7
 800b036:	89a1      	ldrh	r1, [r4, #12]
 800b038:	1c43      	adds	r3, r0, #1
 800b03a:	d106      	bne.n	800b04a <__sflush_r+0x6a>
 800b03c:	682b      	ldr	r3, [r5, #0]
 800b03e:	2b1d      	cmp	r3, #29
 800b040:	d831      	bhi.n	800b0a6 <__sflush_r+0xc6>
 800b042:	4a2c      	ldr	r2, [pc, #176]	; (800b0f4 <__sflush_r+0x114>)
 800b044:	40da      	lsrs	r2, r3
 800b046:	07d3      	lsls	r3, r2, #31
 800b048:	d52d      	bpl.n	800b0a6 <__sflush_r+0xc6>
 800b04a:	2300      	movs	r3, #0
 800b04c:	6063      	str	r3, [r4, #4]
 800b04e:	6923      	ldr	r3, [r4, #16]
 800b050:	6023      	str	r3, [r4, #0]
 800b052:	04cb      	lsls	r3, r1, #19
 800b054:	d505      	bpl.n	800b062 <__sflush_r+0x82>
 800b056:	1c43      	adds	r3, r0, #1
 800b058:	d102      	bne.n	800b060 <__sflush_r+0x80>
 800b05a:	682b      	ldr	r3, [r5, #0]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d100      	bne.n	800b062 <__sflush_r+0x82>
 800b060:	6560      	str	r0, [r4, #84]	; 0x54
 800b062:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b064:	602e      	str	r6, [r5, #0]
 800b066:	2900      	cmp	r1, #0
 800b068:	d0c6      	beq.n	800aff8 <__sflush_r+0x18>
 800b06a:	0023      	movs	r3, r4
 800b06c:	3344      	adds	r3, #68	; 0x44
 800b06e:	4299      	cmp	r1, r3
 800b070:	d002      	beq.n	800b078 <__sflush_r+0x98>
 800b072:	0028      	movs	r0, r5
 800b074:	f000 f9f2 	bl	800b45c <_free_r>
 800b078:	2000      	movs	r0, #0
 800b07a:	6360      	str	r0, [r4, #52]	; 0x34
 800b07c:	e7bd      	b.n	800affa <__sflush_r+0x1a>
 800b07e:	2301      	movs	r3, #1
 800b080:	0028      	movs	r0, r5
 800b082:	6a21      	ldr	r1, [r4, #32]
 800b084:	47b8      	blx	r7
 800b086:	1c43      	adds	r3, r0, #1
 800b088:	d1c5      	bne.n	800b016 <__sflush_r+0x36>
 800b08a:	682b      	ldr	r3, [r5, #0]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d0c2      	beq.n	800b016 <__sflush_r+0x36>
 800b090:	2b1d      	cmp	r3, #29
 800b092:	d001      	beq.n	800b098 <__sflush_r+0xb8>
 800b094:	2b16      	cmp	r3, #22
 800b096:	d101      	bne.n	800b09c <__sflush_r+0xbc>
 800b098:	602e      	str	r6, [r5, #0]
 800b09a:	e7ad      	b.n	800aff8 <__sflush_r+0x18>
 800b09c:	2340      	movs	r3, #64	; 0x40
 800b09e:	89a2      	ldrh	r2, [r4, #12]
 800b0a0:	4313      	orrs	r3, r2
 800b0a2:	81a3      	strh	r3, [r4, #12]
 800b0a4:	e7a9      	b.n	800affa <__sflush_r+0x1a>
 800b0a6:	2340      	movs	r3, #64	; 0x40
 800b0a8:	430b      	orrs	r3, r1
 800b0aa:	e7fa      	b.n	800b0a2 <__sflush_r+0xc2>
 800b0ac:	690f      	ldr	r7, [r1, #16]
 800b0ae:	2f00      	cmp	r7, #0
 800b0b0:	d0a2      	beq.n	800aff8 <__sflush_r+0x18>
 800b0b2:	680a      	ldr	r2, [r1, #0]
 800b0b4:	600f      	str	r7, [r1, #0]
 800b0b6:	1bd2      	subs	r2, r2, r7
 800b0b8:	9201      	str	r2, [sp, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	079b      	lsls	r3, r3, #30
 800b0be:	d100      	bne.n	800b0c2 <__sflush_r+0xe2>
 800b0c0:	694a      	ldr	r2, [r1, #20]
 800b0c2:	60a2      	str	r2, [r4, #8]
 800b0c4:	9b01      	ldr	r3, [sp, #4]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	dc00      	bgt.n	800b0cc <__sflush_r+0xec>
 800b0ca:	e795      	b.n	800aff8 <__sflush_r+0x18>
 800b0cc:	003a      	movs	r2, r7
 800b0ce:	0028      	movs	r0, r5
 800b0d0:	9b01      	ldr	r3, [sp, #4]
 800b0d2:	6a21      	ldr	r1, [r4, #32]
 800b0d4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b0d6:	47b0      	blx	r6
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	dc06      	bgt.n	800b0ea <__sflush_r+0x10a>
 800b0dc:	2340      	movs	r3, #64	; 0x40
 800b0de:	2001      	movs	r0, #1
 800b0e0:	89a2      	ldrh	r2, [r4, #12]
 800b0e2:	4240      	negs	r0, r0
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	81a3      	strh	r3, [r4, #12]
 800b0e8:	e787      	b.n	800affa <__sflush_r+0x1a>
 800b0ea:	9b01      	ldr	r3, [sp, #4]
 800b0ec:	183f      	adds	r7, r7, r0
 800b0ee:	1a1b      	subs	r3, r3, r0
 800b0f0:	9301      	str	r3, [sp, #4]
 800b0f2:	e7e7      	b.n	800b0c4 <__sflush_r+0xe4>
 800b0f4:	20400001 	.word	0x20400001

0800b0f8 <_fflush_r>:
 800b0f8:	690b      	ldr	r3, [r1, #16]
 800b0fa:	b570      	push	{r4, r5, r6, lr}
 800b0fc:	0005      	movs	r5, r0
 800b0fe:	000c      	movs	r4, r1
 800b100:	2b00      	cmp	r3, #0
 800b102:	d102      	bne.n	800b10a <_fflush_r+0x12>
 800b104:	2500      	movs	r5, #0
 800b106:	0028      	movs	r0, r5
 800b108:	bd70      	pop	{r4, r5, r6, pc}
 800b10a:	2800      	cmp	r0, #0
 800b10c:	d004      	beq.n	800b118 <_fflush_r+0x20>
 800b10e:	6983      	ldr	r3, [r0, #24]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d101      	bne.n	800b118 <_fflush_r+0x20>
 800b114:	f000 f892 	bl	800b23c <__sinit>
 800b118:	4b14      	ldr	r3, [pc, #80]	; (800b16c <_fflush_r+0x74>)
 800b11a:	429c      	cmp	r4, r3
 800b11c:	d11b      	bne.n	800b156 <_fflush_r+0x5e>
 800b11e:	686c      	ldr	r4, [r5, #4]
 800b120:	220c      	movs	r2, #12
 800b122:	5ea3      	ldrsh	r3, [r4, r2]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d0ed      	beq.n	800b104 <_fflush_r+0xc>
 800b128:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b12a:	07d2      	lsls	r2, r2, #31
 800b12c:	d404      	bmi.n	800b138 <_fflush_r+0x40>
 800b12e:	059b      	lsls	r3, r3, #22
 800b130:	d402      	bmi.n	800b138 <_fflush_r+0x40>
 800b132:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b134:	f000 f923 	bl	800b37e <__retarget_lock_acquire_recursive>
 800b138:	0028      	movs	r0, r5
 800b13a:	0021      	movs	r1, r4
 800b13c:	f7ff ff50 	bl	800afe0 <__sflush_r>
 800b140:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b142:	0005      	movs	r5, r0
 800b144:	07db      	lsls	r3, r3, #31
 800b146:	d4de      	bmi.n	800b106 <_fflush_r+0xe>
 800b148:	89a3      	ldrh	r3, [r4, #12]
 800b14a:	059b      	lsls	r3, r3, #22
 800b14c:	d4db      	bmi.n	800b106 <_fflush_r+0xe>
 800b14e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b150:	f000 f916 	bl	800b380 <__retarget_lock_release_recursive>
 800b154:	e7d7      	b.n	800b106 <_fflush_r+0xe>
 800b156:	4b06      	ldr	r3, [pc, #24]	; (800b170 <_fflush_r+0x78>)
 800b158:	429c      	cmp	r4, r3
 800b15a:	d101      	bne.n	800b160 <_fflush_r+0x68>
 800b15c:	68ac      	ldr	r4, [r5, #8]
 800b15e:	e7df      	b.n	800b120 <_fflush_r+0x28>
 800b160:	4b04      	ldr	r3, [pc, #16]	; (800b174 <_fflush_r+0x7c>)
 800b162:	429c      	cmp	r4, r3
 800b164:	d1dc      	bne.n	800b120 <_fflush_r+0x28>
 800b166:	68ec      	ldr	r4, [r5, #12]
 800b168:	e7da      	b.n	800b120 <_fflush_r+0x28>
 800b16a:	46c0      	nop			; (mov r8, r8)
 800b16c:	0800e4bc 	.word	0x0800e4bc
 800b170:	0800e4dc 	.word	0x0800e4dc
 800b174:	0800e49c 	.word	0x0800e49c

0800b178 <std>:
 800b178:	2300      	movs	r3, #0
 800b17a:	b510      	push	{r4, lr}
 800b17c:	0004      	movs	r4, r0
 800b17e:	6003      	str	r3, [r0, #0]
 800b180:	6043      	str	r3, [r0, #4]
 800b182:	6083      	str	r3, [r0, #8]
 800b184:	8181      	strh	r1, [r0, #12]
 800b186:	6643      	str	r3, [r0, #100]	; 0x64
 800b188:	0019      	movs	r1, r3
 800b18a:	81c2      	strh	r2, [r0, #14]
 800b18c:	6103      	str	r3, [r0, #16]
 800b18e:	6143      	str	r3, [r0, #20]
 800b190:	6183      	str	r3, [r0, #24]
 800b192:	2208      	movs	r2, #8
 800b194:	305c      	adds	r0, #92	; 0x5c
 800b196:	f7ff fdb6 	bl	800ad06 <memset>
 800b19a:	4b05      	ldr	r3, [pc, #20]	; (800b1b0 <std+0x38>)
 800b19c:	6263      	str	r3, [r4, #36]	; 0x24
 800b19e:	4b05      	ldr	r3, [pc, #20]	; (800b1b4 <std+0x3c>)
 800b1a0:	6224      	str	r4, [r4, #32]
 800b1a2:	62a3      	str	r3, [r4, #40]	; 0x28
 800b1a4:	4b04      	ldr	r3, [pc, #16]	; (800b1b8 <std+0x40>)
 800b1a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b1a8:	4b04      	ldr	r3, [pc, #16]	; (800b1bc <std+0x44>)
 800b1aa:	6323      	str	r3, [r4, #48]	; 0x30
 800b1ac:	bd10      	pop	{r4, pc}
 800b1ae:	46c0      	nop			; (mov r8, r8)
 800b1b0:	0800bb99 	.word	0x0800bb99
 800b1b4:	0800bbc1 	.word	0x0800bbc1
 800b1b8:	0800bbf9 	.word	0x0800bbf9
 800b1bc:	0800bc25 	.word	0x0800bc25

0800b1c0 <_cleanup_r>:
 800b1c0:	b510      	push	{r4, lr}
 800b1c2:	4902      	ldr	r1, [pc, #8]	; (800b1cc <_cleanup_r+0xc>)
 800b1c4:	f000 f8ba 	bl	800b33c <_fwalk_reent>
 800b1c8:	bd10      	pop	{r4, pc}
 800b1ca:	46c0      	nop			; (mov r8, r8)
 800b1cc:	0800b0f9 	.word	0x0800b0f9

0800b1d0 <__sfmoreglue>:
 800b1d0:	b570      	push	{r4, r5, r6, lr}
 800b1d2:	2568      	movs	r5, #104	; 0x68
 800b1d4:	1e4a      	subs	r2, r1, #1
 800b1d6:	4355      	muls	r5, r2
 800b1d8:	000e      	movs	r6, r1
 800b1da:	0029      	movs	r1, r5
 800b1dc:	3174      	adds	r1, #116	; 0x74
 800b1de:	f000 f987 	bl	800b4f0 <_malloc_r>
 800b1e2:	1e04      	subs	r4, r0, #0
 800b1e4:	d008      	beq.n	800b1f8 <__sfmoreglue+0x28>
 800b1e6:	2100      	movs	r1, #0
 800b1e8:	002a      	movs	r2, r5
 800b1ea:	6001      	str	r1, [r0, #0]
 800b1ec:	6046      	str	r6, [r0, #4]
 800b1ee:	300c      	adds	r0, #12
 800b1f0:	60a0      	str	r0, [r4, #8]
 800b1f2:	3268      	adds	r2, #104	; 0x68
 800b1f4:	f7ff fd87 	bl	800ad06 <memset>
 800b1f8:	0020      	movs	r0, r4
 800b1fa:	bd70      	pop	{r4, r5, r6, pc}

0800b1fc <__sfp_lock_acquire>:
 800b1fc:	b510      	push	{r4, lr}
 800b1fe:	4802      	ldr	r0, [pc, #8]	; (800b208 <__sfp_lock_acquire+0xc>)
 800b200:	f000 f8bd 	bl	800b37e <__retarget_lock_acquire_recursive>
 800b204:	bd10      	pop	{r4, pc}
 800b206:	46c0      	nop			; (mov r8, r8)
 800b208:	20000d60 	.word	0x20000d60

0800b20c <__sfp_lock_release>:
 800b20c:	b510      	push	{r4, lr}
 800b20e:	4802      	ldr	r0, [pc, #8]	; (800b218 <__sfp_lock_release+0xc>)
 800b210:	f000 f8b6 	bl	800b380 <__retarget_lock_release_recursive>
 800b214:	bd10      	pop	{r4, pc}
 800b216:	46c0      	nop			; (mov r8, r8)
 800b218:	20000d60 	.word	0x20000d60

0800b21c <__sinit_lock_acquire>:
 800b21c:	b510      	push	{r4, lr}
 800b21e:	4802      	ldr	r0, [pc, #8]	; (800b228 <__sinit_lock_acquire+0xc>)
 800b220:	f000 f8ad 	bl	800b37e <__retarget_lock_acquire_recursive>
 800b224:	bd10      	pop	{r4, pc}
 800b226:	46c0      	nop			; (mov r8, r8)
 800b228:	20000d5b 	.word	0x20000d5b

0800b22c <__sinit_lock_release>:
 800b22c:	b510      	push	{r4, lr}
 800b22e:	4802      	ldr	r0, [pc, #8]	; (800b238 <__sinit_lock_release+0xc>)
 800b230:	f000 f8a6 	bl	800b380 <__retarget_lock_release_recursive>
 800b234:	bd10      	pop	{r4, pc}
 800b236:	46c0      	nop			; (mov r8, r8)
 800b238:	20000d5b 	.word	0x20000d5b

0800b23c <__sinit>:
 800b23c:	b513      	push	{r0, r1, r4, lr}
 800b23e:	0004      	movs	r4, r0
 800b240:	f7ff ffec 	bl	800b21c <__sinit_lock_acquire>
 800b244:	69a3      	ldr	r3, [r4, #24]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d002      	beq.n	800b250 <__sinit+0x14>
 800b24a:	f7ff ffef 	bl	800b22c <__sinit_lock_release>
 800b24e:	bd13      	pop	{r0, r1, r4, pc}
 800b250:	64a3      	str	r3, [r4, #72]	; 0x48
 800b252:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b254:	6523      	str	r3, [r4, #80]	; 0x50
 800b256:	4b13      	ldr	r3, [pc, #76]	; (800b2a4 <__sinit+0x68>)
 800b258:	4a13      	ldr	r2, [pc, #76]	; (800b2a8 <__sinit+0x6c>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b25e:	9301      	str	r3, [sp, #4]
 800b260:	42a3      	cmp	r3, r4
 800b262:	d101      	bne.n	800b268 <__sinit+0x2c>
 800b264:	2301      	movs	r3, #1
 800b266:	61a3      	str	r3, [r4, #24]
 800b268:	0020      	movs	r0, r4
 800b26a:	f000 f81f 	bl	800b2ac <__sfp>
 800b26e:	6060      	str	r0, [r4, #4]
 800b270:	0020      	movs	r0, r4
 800b272:	f000 f81b 	bl	800b2ac <__sfp>
 800b276:	60a0      	str	r0, [r4, #8]
 800b278:	0020      	movs	r0, r4
 800b27a:	f000 f817 	bl	800b2ac <__sfp>
 800b27e:	2200      	movs	r2, #0
 800b280:	2104      	movs	r1, #4
 800b282:	60e0      	str	r0, [r4, #12]
 800b284:	6860      	ldr	r0, [r4, #4]
 800b286:	f7ff ff77 	bl	800b178 <std>
 800b28a:	2201      	movs	r2, #1
 800b28c:	2109      	movs	r1, #9
 800b28e:	68a0      	ldr	r0, [r4, #8]
 800b290:	f7ff ff72 	bl	800b178 <std>
 800b294:	2202      	movs	r2, #2
 800b296:	2112      	movs	r1, #18
 800b298:	68e0      	ldr	r0, [r4, #12]
 800b29a:	f7ff ff6d 	bl	800b178 <std>
 800b29e:	2301      	movs	r3, #1
 800b2a0:	61a3      	str	r3, [r4, #24]
 800b2a2:	e7d2      	b.n	800b24a <__sinit+0xe>
 800b2a4:	0800e498 	.word	0x0800e498
 800b2a8:	0800b1c1 	.word	0x0800b1c1

0800b2ac <__sfp>:
 800b2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ae:	0007      	movs	r7, r0
 800b2b0:	f7ff ffa4 	bl	800b1fc <__sfp_lock_acquire>
 800b2b4:	4b1f      	ldr	r3, [pc, #124]	; (800b334 <__sfp+0x88>)
 800b2b6:	681e      	ldr	r6, [r3, #0]
 800b2b8:	69b3      	ldr	r3, [r6, #24]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d102      	bne.n	800b2c4 <__sfp+0x18>
 800b2be:	0030      	movs	r0, r6
 800b2c0:	f7ff ffbc 	bl	800b23c <__sinit>
 800b2c4:	3648      	adds	r6, #72	; 0x48
 800b2c6:	68b4      	ldr	r4, [r6, #8]
 800b2c8:	6873      	ldr	r3, [r6, #4]
 800b2ca:	3b01      	subs	r3, #1
 800b2cc:	d504      	bpl.n	800b2d8 <__sfp+0x2c>
 800b2ce:	6833      	ldr	r3, [r6, #0]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d022      	beq.n	800b31a <__sfp+0x6e>
 800b2d4:	6836      	ldr	r6, [r6, #0]
 800b2d6:	e7f6      	b.n	800b2c6 <__sfp+0x1a>
 800b2d8:	220c      	movs	r2, #12
 800b2da:	5ea5      	ldrsh	r5, [r4, r2]
 800b2dc:	2d00      	cmp	r5, #0
 800b2de:	d11a      	bne.n	800b316 <__sfp+0x6a>
 800b2e0:	0020      	movs	r0, r4
 800b2e2:	4b15      	ldr	r3, [pc, #84]	; (800b338 <__sfp+0x8c>)
 800b2e4:	3058      	adds	r0, #88	; 0x58
 800b2e6:	60e3      	str	r3, [r4, #12]
 800b2e8:	6665      	str	r5, [r4, #100]	; 0x64
 800b2ea:	f000 f847 	bl	800b37c <__retarget_lock_init_recursive>
 800b2ee:	f7ff ff8d 	bl	800b20c <__sfp_lock_release>
 800b2f2:	0020      	movs	r0, r4
 800b2f4:	2208      	movs	r2, #8
 800b2f6:	0029      	movs	r1, r5
 800b2f8:	6025      	str	r5, [r4, #0]
 800b2fa:	60a5      	str	r5, [r4, #8]
 800b2fc:	6065      	str	r5, [r4, #4]
 800b2fe:	6125      	str	r5, [r4, #16]
 800b300:	6165      	str	r5, [r4, #20]
 800b302:	61a5      	str	r5, [r4, #24]
 800b304:	305c      	adds	r0, #92	; 0x5c
 800b306:	f7ff fcfe 	bl	800ad06 <memset>
 800b30a:	6365      	str	r5, [r4, #52]	; 0x34
 800b30c:	63a5      	str	r5, [r4, #56]	; 0x38
 800b30e:	64a5      	str	r5, [r4, #72]	; 0x48
 800b310:	64e5      	str	r5, [r4, #76]	; 0x4c
 800b312:	0020      	movs	r0, r4
 800b314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b316:	3468      	adds	r4, #104	; 0x68
 800b318:	e7d7      	b.n	800b2ca <__sfp+0x1e>
 800b31a:	2104      	movs	r1, #4
 800b31c:	0038      	movs	r0, r7
 800b31e:	f7ff ff57 	bl	800b1d0 <__sfmoreglue>
 800b322:	1e04      	subs	r4, r0, #0
 800b324:	6030      	str	r0, [r6, #0]
 800b326:	d1d5      	bne.n	800b2d4 <__sfp+0x28>
 800b328:	f7ff ff70 	bl	800b20c <__sfp_lock_release>
 800b32c:	230c      	movs	r3, #12
 800b32e:	603b      	str	r3, [r7, #0]
 800b330:	e7ef      	b.n	800b312 <__sfp+0x66>
 800b332:	46c0      	nop			; (mov r8, r8)
 800b334:	0800e498 	.word	0x0800e498
 800b338:	ffff0001 	.word	0xffff0001

0800b33c <_fwalk_reent>:
 800b33c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b33e:	0004      	movs	r4, r0
 800b340:	0006      	movs	r6, r0
 800b342:	2700      	movs	r7, #0
 800b344:	9101      	str	r1, [sp, #4]
 800b346:	3448      	adds	r4, #72	; 0x48
 800b348:	6863      	ldr	r3, [r4, #4]
 800b34a:	68a5      	ldr	r5, [r4, #8]
 800b34c:	9300      	str	r3, [sp, #0]
 800b34e:	9b00      	ldr	r3, [sp, #0]
 800b350:	3b01      	subs	r3, #1
 800b352:	9300      	str	r3, [sp, #0]
 800b354:	d504      	bpl.n	800b360 <_fwalk_reent+0x24>
 800b356:	6824      	ldr	r4, [r4, #0]
 800b358:	2c00      	cmp	r4, #0
 800b35a:	d1f5      	bne.n	800b348 <_fwalk_reent+0xc>
 800b35c:	0038      	movs	r0, r7
 800b35e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b360:	89ab      	ldrh	r3, [r5, #12]
 800b362:	2b01      	cmp	r3, #1
 800b364:	d908      	bls.n	800b378 <_fwalk_reent+0x3c>
 800b366:	220e      	movs	r2, #14
 800b368:	5eab      	ldrsh	r3, [r5, r2]
 800b36a:	3301      	adds	r3, #1
 800b36c:	d004      	beq.n	800b378 <_fwalk_reent+0x3c>
 800b36e:	0029      	movs	r1, r5
 800b370:	0030      	movs	r0, r6
 800b372:	9b01      	ldr	r3, [sp, #4]
 800b374:	4798      	blx	r3
 800b376:	4307      	orrs	r7, r0
 800b378:	3568      	adds	r5, #104	; 0x68
 800b37a:	e7e8      	b.n	800b34e <_fwalk_reent+0x12>

0800b37c <__retarget_lock_init_recursive>:
 800b37c:	4770      	bx	lr

0800b37e <__retarget_lock_acquire_recursive>:
 800b37e:	4770      	bx	lr

0800b380 <__retarget_lock_release_recursive>:
 800b380:	4770      	bx	lr
	...

0800b384 <__swhatbuf_r>:
 800b384:	b570      	push	{r4, r5, r6, lr}
 800b386:	000e      	movs	r6, r1
 800b388:	001d      	movs	r5, r3
 800b38a:	230e      	movs	r3, #14
 800b38c:	5ec9      	ldrsh	r1, [r1, r3]
 800b38e:	0014      	movs	r4, r2
 800b390:	b096      	sub	sp, #88	; 0x58
 800b392:	2900      	cmp	r1, #0
 800b394:	da07      	bge.n	800b3a6 <__swhatbuf_r+0x22>
 800b396:	2300      	movs	r3, #0
 800b398:	602b      	str	r3, [r5, #0]
 800b39a:	89b3      	ldrh	r3, [r6, #12]
 800b39c:	061b      	lsls	r3, r3, #24
 800b39e:	d411      	bmi.n	800b3c4 <__swhatbuf_r+0x40>
 800b3a0:	2380      	movs	r3, #128	; 0x80
 800b3a2:	00db      	lsls	r3, r3, #3
 800b3a4:	e00f      	b.n	800b3c6 <__swhatbuf_r+0x42>
 800b3a6:	466a      	mov	r2, sp
 800b3a8:	f000 fc68 	bl	800bc7c <_fstat_r>
 800b3ac:	2800      	cmp	r0, #0
 800b3ae:	dbf2      	blt.n	800b396 <__swhatbuf_r+0x12>
 800b3b0:	23f0      	movs	r3, #240	; 0xf0
 800b3b2:	9901      	ldr	r1, [sp, #4]
 800b3b4:	021b      	lsls	r3, r3, #8
 800b3b6:	4019      	ands	r1, r3
 800b3b8:	4b05      	ldr	r3, [pc, #20]	; (800b3d0 <__swhatbuf_r+0x4c>)
 800b3ba:	18c9      	adds	r1, r1, r3
 800b3bc:	424b      	negs	r3, r1
 800b3be:	4159      	adcs	r1, r3
 800b3c0:	6029      	str	r1, [r5, #0]
 800b3c2:	e7ed      	b.n	800b3a0 <__swhatbuf_r+0x1c>
 800b3c4:	2340      	movs	r3, #64	; 0x40
 800b3c6:	2000      	movs	r0, #0
 800b3c8:	6023      	str	r3, [r4, #0]
 800b3ca:	b016      	add	sp, #88	; 0x58
 800b3cc:	bd70      	pop	{r4, r5, r6, pc}
 800b3ce:	46c0      	nop			; (mov r8, r8)
 800b3d0:	ffffe000 	.word	0xffffe000

0800b3d4 <__smakebuf_r>:
 800b3d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3d6:	2602      	movs	r6, #2
 800b3d8:	898b      	ldrh	r3, [r1, #12]
 800b3da:	0005      	movs	r5, r0
 800b3dc:	000c      	movs	r4, r1
 800b3de:	4233      	tst	r3, r6
 800b3e0:	d006      	beq.n	800b3f0 <__smakebuf_r+0x1c>
 800b3e2:	0023      	movs	r3, r4
 800b3e4:	3347      	adds	r3, #71	; 0x47
 800b3e6:	6023      	str	r3, [r4, #0]
 800b3e8:	6123      	str	r3, [r4, #16]
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	6163      	str	r3, [r4, #20]
 800b3ee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b3f0:	466a      	mov	r2, sp
 800b3f2:	ab01      	add	r3, sp, #4
 800b3f4:	f7ff ffc6 	bl	800b384 <__swhatbuf_r>
 800b3f8:	9900      	ldr	r1, [sp, #0]
 800b3fa:	0007      	movs	r7, r0
 800b3fc:	0028      	movs	r0, r5
 800b3fe:	f000 f877 	bl	800b4f0 <_malloc_r>
 800b402:	2800      	cmp	r0, #0
 800b404:	d108      	bne.n	800b418 <__smakebuf_r+0x44>
 800b406:	220c      	movs	r2, #12
 800b408:	5ea3      	ldrsh	r3, [r4, r2]
 800b40a:	059a      	lsls	r2, r3, #22
 800b40c:	d4ef      	bmi.n	800b3ee <__smakebuf_r+0x1a>
 800b40e:	2203      	movs	r2, #3
 800b410:	4393      	bics	r3, r2
 800b412:	431e      	orrs	r6, r3
 800b414:	81a6      	strh	r6, [r4, #12]
 800b416:	e7e4      	b.n	800b3e2 <__smakebuf_r+0xe>
 800b418:	4b0f      	ldr	r3, [pc, #60]	; (800b458 <__smakebuf_r+0x84>)
 800b41a:	62ab      	str	r3, [r5, #40]	; 0x28
 800b41c:	2380      	movs	r3, #128	; 0x80
 800b41e:	89a2      	ldrh	r2, [r4, #12]
 800b420:	6020      	str	r0, [r4, #0]
 800b422:	4313      	orrs	r3, r2
 800b424:	81a3      	strh	r3, [r4, #12]
 800b426:	9b00      	ldr	r3, [sp, #0]
 800b428:	6120      	str	r0, [r4, #16]
 800b42a:	6163      	str	r3, [r4, #20]
 800b42c:	9b01      	ldr	r3, [sp, #4]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d00d      	beq.n	800b44e <__smakebuf_r+0x7a>
 800b432:	0028      	movs	r0, r5
 800b434:	230e      	movs	r3, #14
 800b436:	5ee1      	ldrsh	r1, [r4, r3]
 800b438:	f000 fc32 	bl	800bca0 <_isatty_r>
 800b43c:	2800      	cmp	r0, #0
 800b43e:	d006      	beq.n	800b44e <__smakebuf_r+0x7a>
 800b440:	2203      	movs	r2, #3
 800b442:	89a3      	ldrh	r3, [r4, #12]
 800b444:	4393      	bics	r3, r2
 800b446:	001a      	movs	r2, r3
 800b448:	2301      	movs	r3, #1
 800b44a:	4313      	orrs	r3, r2
 800b44c:	81a3      	strh	r3, [r4, #12]
 800b44e:	89a0      	ldrh	r0, [r4, #12]
 800b450:	4307      	orrs	r7, r0
 800b452:	81a7      	strh	r7, [r4, #12]
 800b454:	e7cb      	b.n	800b3ee <__smakebuf_r+0x1a>
 800b456:	46c0      	nop			; (mov r8, r8)
 800b458:	0800b1c1 	.word	0x0800b1c1

0800b45c <_free_r>:
 800b45c:	b570      	push	{r4, r5, r6, lr}
 800b45e:	0005      	movs	r5, r0
 800b460:	2900      	cmp	r1, #0
 800b462:	d010      	beq.n	800b486 <_free_r+0x2a>
 800b464:	1f0c      	subs	r4, r1, #4
 800b466:	6823      	ldr	r3, [r4, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	da00      	bge.n	800b46e <_free_r+0x12>
 800b46c:	18e4      	adds	r4, r4, r3
 800b46e:	0028      	movs	r0, r5
 800b470:	f000 fc48 	bl	800bd04 <__malloc_lock>
 800b474:	4a1d      	ldr	r2, [pc, #116]	; (800b4ec <_free_r+0x90>)
 800b476:	6813      	ldr	r3, [r2, #0]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d105      	bne.n	800b488 <_free_r+0x2c>
 800b47c:	6063      	str	r3, [r4, #4]
 800b47e:	6014      	str	r4, [r2, #0]
 800b480:	0028      	movs	r0, r5
 800b482:	f000 fc47 	bl	800bd14 <__malloc_unlock>
 800b486:	bd70      	pop	{r4, r5, r6, pc}
 800b488:	42a3      	cmp	r3, r4
 800b48a:	d908      	bls.n	800b49e <_free_r+0x42>
 800b48c:	6821      	ldr	r1, [r4, #0]
 800b48e:	1860      	adds	r0, r4, r1
 800b490:	4283      	cmp	r3, r0
 800b492:	d1f3      	bne.n	800b47c <_free_r+0x20>
 800b494:	6818      	ldr	r0, [r3, #0]
 800b496:	685b      	ldr	r3, [r3, #4]
 800b498:	1841      	adds	r1, r0, r1
 800b49a:	6021      	str	r1, [r4, #0]
 800b49c:	e7ee      	b.n	800b47c <_free_r+0x20>
 800b49e:	001a      	movs	r2, r3
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d001      	beq.n	800b4aa <_free_r+0x4e>
 800b4a6:	42a3      	cmp	r3, r4
 800b4a8:	d9f9      	bls.n	800b49e <_free_r+0x42>
 800b4aa:	6811      	ldr	r1, [r2, #0]
 800b4ac:	1850      	adds	r0, r2, r1
 800b4ae:	42a0      	cmp	r0, r4
 800b4b0:	d10b      	bne.n	800b4ca <_free_r+0x6e>
 800b4b2:	6820      	ldr	r0, [r4, #0]
 800b4b4:	1809      	adds	r1, r1, r0
 800b4b6:	1850      	adds	r0, r2, r1
 800b4b8:	6011      	str	r1, [r2, #0]
 800b4ba:	4283      	cmp	r3, r0
 800b4bc:	d1e0      	bne.n	800b480 <_free_r+0x24>
 800b4be:	6818      	ldr	r0, [r3, #0]
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	1841      	adds	r1, r0, r1
 800b4c4:	6011      	str	r1, [r2, #0]
 800b4c6:	6053      	str	r3, [r2, #4]
 800b4c8:	e7da      	b.n	800b480 <_free_r+0x24>
 800b4ca:	42a0      	cmp	r0, r4
 800b4cc:	d902      	bls.n	800b4d4 <_free_r+0x78>
 800b4ce:	230c      	movs	r3, #12
 800b4d0:	602b      	str	r3, [r5, #0]
 800b4d2:	e7d5      	b.n	800b480 <_free_r+0x24>
 800b4d4:	6821      	ldr	r1, [r4, #0]
 800b4d6:	1860      	adds	r0, r4, r1
 800b4d8:	4283      	cmp	r3, r0
 800b4da:	d103      	bne.n	800b4e4 <_free_r+0x88>
 800b4dc:	6818      	ldr	r0, [r3, #0]
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	1841      	adds	r1, r0, r1
 800b4e2:	6021      	str	r1, [r4, #0]
 800b4e4:	6063      	str	r3, [r4, #4]
 800b4e6:	6054      	str	r4, [r2, #4]
 800b4e8:	e7ca      	b.n	800b480 <_free_r+0x24>
 800b4ea:	46c0      	nop			; (mov r8, r8)
 800b4ec:	20000ae4 	.word	0x20000ae4

0800b4f0 <_malloc_r>:
 800b4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4f2:	2303      	movs	r3, #3
 800b4f4:	1ccd      	adds	r5, r1, #3
 800b4f6:	439d      	bics	r5, r3
 800b4f8:	3508      	adds	r5, #8
 800b4fa:	0006      	movs	r6, r0
 800b4fc:	2d0c      	cmp	r5, #12
 800b4fe:	d21f      	bcs.n	800b540 <_malloc_r+0x50>
 800b500:	250c      	movs	r5, #12
 800b502:	42a9      	cmp	r1, r5
 800b504:	d81e      	bhi.n	800b544 <_malloc_r+0x54>
 800b506:	0030      	movs	r0, r6
 800b508:	f000 fbfc 	bl	800bd04 <__malloc_lock>
 800b50c:	4925      	ldr	r1, [pc, #148]	; (800b5a4 <_malloc_r+0xb4>)
 800b50e:	680a      	ldr	r2, [r1, #0]
 800b510:	0014      	movs	r4, r2
 800b512:	2c00      	cmp	r4, #0
 800b514:	d11a      	bne.n	800b54c <_malloc_r+0x5c>
 800b516:	4f24      	ldr	r7, [pc, #144]	; (800b5a8 <_malloc_r+0xb8>)
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d104      	bne.n	800b528 <_malloc_r+0x38>
 800b51e:	0021      	movs	r1, r4
 800b520:	0030      	movs	r0, r6
 800b522:	f000 fb27 	bl	800bb74 <_sbrk_r>
 800b526:	6038      	str	r0, [r7, #0]
 800b528:	0029      	movs	r1, r5
 800b52a:	0030      	movs	r0, r6
 800b52c:	f000 fb22 	bl	800bb74 <_sbrk_r>
 800b530:	1c43      	adds	r3, r0, #1
 800b532:	d12b      	bne.n	800b58c <_malloc_r+0x9c>
 800b534:	230c      	movs	r3, #12
 800b536:	0030      	movs	r0, r6
 800b538:	6033      	str	r3, [r6, #0]
 800b53a:	f000 fbeb 	bl	800bd14 <__malloc_unlock>
 800b53e:	e003      	b.n	800b548 <_malloc_r+0x58>
 800b540:	2d00      	cmp	r5, #0
 800b542:	dade      	bge.n	800b502 <_malloc_r+0x12>
 800b544:	230c      	movs	r3, #12
 800b546:	6033      	str	r3, [r6, #0]
 800b548:	2000      	movs	r0, #0
 800b54a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b54c:	6823      	ldr	r3, [r4, #0]
 800b54e:	1b5b      	subs	r3, r3, r5
 800b550:	d419      	bmi.n	800b586 <_malloc_r+0x96>
 800b552:	2b0b      	cmp	r3, #11
 800b554:	d903      	bls.n	800b55e <_malloc_r+0x6e>
 800b556:	6023      	str	r3, [r4, #0]
 800b558:	18e4      	adds	r4, r4, r3
 800b55a:	6025      	str	r5, [r4, #0]
 800b55c:	e003      	b.n	800b566 <_malloc_r+0x76>
 800b55e:	6863      	ldr	r3, [r4, #4]
 800b560:	42a2      	cmp	r2, r4
 800b562:	d10e      	bne.n	800b582 <_malloc_r+0x92>
 800b564:	600b      	str	r3, [r1, #0]
 800b566:	0030      	movs	r0, r6
 800b568:	f000 fbd4 	bl	800bd14 <__malloc_unlock>
 800b56c:	0020      	movs	r0, r4
 800b56e:	2207      	movs	r2, #7
 800b570:	300b      	adds	r0, #11
 800b572:	1d23      	adds	r3, r4, #4
 800b574:	4390      	bics	r0, r2
 800b576:	1ac2      	subs	r2, r0, r3
 800b578:	4298      	cmp	r0, r3
 800b57a:	d0e6      	beq.n	800b54a <_malloc_r+0x5a>
 800b57c:	1a1b      	subs	r3, r3, r0
 800b57e:	50a3      	str	r3, [r4, r2]
 800b580:	e7e3      	b.n	800b54a <_malloc_r+0x5a>
 800b582:	6053      	str	r3, [r2, #4]
 800b584:	e7ef      	b.n	800b566 <_malloc_r+0x76>
 800b586:	0022      	movs	r2, r4
 800b588:	6864      	ldr	r4, [r4, #4]
 800b58a:	e7c2      	b.n	800b512 <_malloc_r+0x22>
 800b58c:	2303      	movs	r3, #3
 800b58e:	1cc4      	adds	r4, r0, #3
 800b590:	439c      	bics	r4, r3
 800b592:	42a0      	cmp	r0, r4
 800b594:	d0e1      	beq.n	800b55a <_malloc_r+0x6a>
 800b596:	1a21      	subs	r1, r4, r0
 800b598:	0030      	movs	r0, r6
 800b59a:	f000 faeb 	bl	800bb74 <_sbrk_r>
 800b59e:	1c43      	adds	r3, r0, #1
 800b5a0:	d1db      	bne.n	800b55a <_malloc_r+0x6a>
 800b5a2:	e7c7      	b.n	800b534 <_malloc_r+0x44>
 800b5a4:	20000ae4 	.word	0x20000ae4
 800b5a8:	20000ae8 	.word	0x20000ae8

0800b5ac <__sfputc_r>:
 800b5ac:	6893      	ldr	r3, [r2, #8]
 800b5ae:	b510      	push	{r4, lr}
 800b5b0:	3b01      	subs	r3, #1
 800b5b2:	6093      	str	r3, [r2, #8]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	da04      	bge.n	800b5c2 <__sfputc_r+0x16>
 800b5b8:	6994      	ldr	r4, [r2, #24]
 800b5ba:	42a3      	cmp	r3, r4
 800b5bc:	db07      	blt.n	800b5ce <__sfputc_r+0x22>
 800b5be:	290a      	cmp	r1, #10
 800b5c0:	d005      	beq.n	800b5ce <__sfputc_r+0x22>
 800b5c2:	6813      	ldr	r3, [r2, #0]
 800b5c4:	1c58      	adds	r0, r3, #1
 800b5c6:	6010      	str	r0, [r2, #0]
 800b5c8:	7019      	strb	r1, [r3, #0]
 800b5ca:	0008      	movs	r0, r1
 800b5cc:	bd10      	pop	{r4, pc}
 800b5ce:	f7ff fc39 	bl	800ae44 <__swbuf_r>
 800b5d2:	0001      	movs	r1, r0
 800b5d4:	e7f9      	b.n	800b5ca <__sfputc_r+0x1e>

0800b5d6 <__sfputs_r>:
 800b5d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5d8:	0006      	movs	r6, r0
 800b5da:	000f      	movs	r7, r1
 800b5dc:	0014      	movs	r4, r2
 800b5de:	18d5      	adds	r5, r2, r3
 800b5e0:	42ac      	cmp	r4, r5
 800b5e2:	d101      	bne.n	800b5e8 <__sfputs_r+0x12>
 800b5e4:	2000      	movs	r0, #0
 800b5e6:	e007      	b.n	800b5f8 <__sfputs_r+0x22>
 800b5e8:	7821      	ldrb	r1, [r4, #0]
 800b5ea:	003a      	movs	r2, r7
 800b5ec:	0030      	movs	r0, r6
 800b5ee:	f7ff ffdd 	bl	800b5ac <__sfputc_r>
 800b5f2:	3401      	adds	r4, #1
 800b5f4:	1c43      	adds	r3, r0, #1
 800b5f6:	d1f3      	bne.n	800b5e0 <__sfputs_r+0xa>
 800b5f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b5fc <_vfiprintf_r>:
 800b5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5fe:	b0a1      	sub	sp, #132	; 0x84
 800b600:	0006      	movs	r6, r0
 800b602:	000c      	movs	r4, r1
 800b604:	001f      	movs	r7, r3
 800b606:	9203      	str	r2, [sp, #12]
 800b608:	2800      	cmp	r0, #0
 800b60a:	d004      	beq.n	800b616 <_vfiprintf_r+0x1a>
 800b60c:	6983      	ldr	r3, [r0, #24]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d101      	bne.n	800b616 <_vfiprintf_r+0x1a>
 800b612:	f7ff fe13 	bl	800b23c <__sinit>
 800b616:	4b8e      	ldr	r3, [pc, #568]	; (800b850 <_vfiprintf_r+0x254>)
 800b618:	429c      	cmp	r4, r3
 800b61a:	d11c      	bne.n	800b656 <_vfiprintf_r+0x5a>
 800b61c:	6874      	ldr	r4, [r6, #4]
 800b61e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b620:	07db      	lsls	r3, r3, #31
 800b622:	d405      	bmi.n	800b630 <_vfiprintf_r+0x34>
 800b624:	89a3      	ldrh	r3, [r4, #12]
 800b626:	059b      	lsls	r3, r3, #22
 800b628:	d402      	bmi.n	800b630 <_vfiprintf_r+0x34>
 800b62a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b62c:	f7ff fea7 	bl	800b37e <__retarget_lock_acquire_recursive>
 800b630:	89a3      	ldrh	r3, [r4, #12]
 800b632:	071b      	lsls	r3, r3, #28
 800b634:	d502      	bpl.n	800b63c <_vfiprintf_r+0x40>
 800b636:	6923      	ldr	r3, [r4, #16]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d11d      	bne.n	800b678 <_vfiprintf_r+0x7c>
 800b63c:	0021      	movs	r1, r4
 800b63e:	0030      	movs	r0, r6
 800b640:	f7ff fc56 	bl	800aef0 <__swsetup_r>
 800b644:	2800      	cmp	r0, #0
 800b646:	d017      	beq.n	800b678 <_vfiprintf_r+0x7c>
 800b648:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b64a:	07db      	lsls	r3, r3, #31
 800b64c:	d50d      	bpl.n	800b66a <_vfiprintf_r+0x6e>
 800b64e:	2001      	movs	r0, #1
 800b650:	4240      	negs	r0, r0
 800b652:	b021      	add	sp, #132	; 0x84
 800b654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b656:	4b7f      	ldr	r3, [pc, #508]	; (800b854 <_vfiprintf_r+0x258>)
 800b658:	429c      	cmp	r4, r3
 800b65a:	d101      	bne.n	800b660 <_vfiprintf_r+0x64>
 800b65c:	68b4      	ldr	r4, [r6, #8]
 800b65e:	e7de      	b.n	800b61e <_vfiprintf_r+0x22>
 800b660:	4b7d      	ldr	r3, [pc, #500]	; (800b858 <_vfiprintf_r+0x25c>)
 800b662:	429c      	cmp	r4, r3
 800b664:	d1db      	bne.n	800b61e <_vfiprintf_r+0x22>
 800b666:	68f4      	ldr	r4, [r6, #12]
 800b668:	e7d9      	b.n	800b61e <_vfiprintf_r+0x22>
 800b66a:	89a3      	ldrh	r3, [r4, #12]
 800b66c:	059b      	lsls	r3, r3, #22
 800b66e:	d4ee      	bmi.n	800b64e <_vfiprintf_r+0x52>
 800b670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b672:	f7ff fe85 	bl	800b380 <__retarget_lock_release_recursive>
 800b676:	e7ea      	b.n	800b64e <_vfiprintf_r+0x52>
 800b678:	2300      	movs	r3, #0
 800b67a:	ad08      	add	r5, sp, #32
 800b67c:	616b      	str	r3, [r5, #20]
 800b67e:	3320      	adds	r3, #32
 800b680:	766b      	strb	r3, [r5, #25]
 800b682:	3310      	adds	r3, #16
 800b684:	76ab      	strb	r3, [r5, #26]
 800b686:	9707      	str	r7, [sp, #28]
 800b688:	9f03      	ldr	r7, [sp, #12]
 800b68a:	783b      	ldrb	r3, [r7, #0]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d001      	beq.n	800b694 <_vfiprintf_r+0x98>
 800b690:	2b25      	cmp	r3, #37	; 0x25
 800b692:	d14e      	bne.n	800b732 <_vfiprintf_r+0x136>
 800b694:	9b03      	ldr	r3, [sp, #12]
 800b696:	1afb      	subs	r3, r7, r3
 800b698:	9305      	str	r3, [sp, #20]
 800b69a:	9b03      	ldr	r3, [sp, #12]
 800b69c:	429f      	cmp	r7, r3
 800b69e:	d00d      	beq.n	800b6bc <_vfiprintf_r+0xc0>
 800b6a0:	9b05      	ldr	r3, [sp, #20]
 800b6a2:	0021      	movs	r1, r4
 800b6a4:	0030      	movs	r0, r6
 800b6a6:	9a03      	ldr	r2, [sp, #12]
 800b6a8:	f7ff ff95 	bl	800b5d6 <__sfputs_r>
 800b6ac:	1c43      	adds	r3, r0, #1
 800b6ae:	d100      	bne.n	800b6b2 <_vfiprintf_r+0xb6>
 800b6b0:	e0b5      	b.n	800b81e <_vfiprintf_r+0x222>
 800b6b2:	696a      	ldr	r2, [r5, #20]
 800b6b4:	9b05      	ldr	r3, [sp, #20]
 800b6b6:	4694      	mov	ip, r2
 800b6b8:	4463      	add	r3, ip
 800b6ba:	616b      	str	r3, [r5, #20]
 800b6bc:	783b      	ldrb	r3, [r7, #0]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d100      	bne.n	800b6c4 <_vfiprintf_r+0xc8>
 800b6c2:	e0ac      	b.n	800b81e <_vfiprintf_r+0x222>
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	1c7b      	adds	r3, r7, #1
 800b6c8:	9303      	str	r3, [sp, #12]
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	4252      	negs	r2, r2
 800b6ce:	606a      	str	r2, [r5, #4]
 800b6d0:	a904      	add	r1, sp, #16
 800b6d2:	3254      	adds	r2, #84	; 0x54
 800b6d4:	1852      	adds	r2, r2, r1
 800b6d6:	602b      	str	r3, [r5, #0]
 800b6d8:	60eb      	str	r3, [r5, #12]
 800b6da:	60ab      	str	r3, [r5, #8]
 800b6dc:	7013      	strb	r3, [r2, #0]
 800b6de:	65ab      	str	r3, [r5, #88]	; 0x58
 800b6e0:	9b03      	ldr	r3, [sp, #12]
 800b6e2:	2205      	movs	r2, #5
 800b6e4:	7819      	ldrb	r1, [r3, #0]
 800b6e6:	485d      	ldr	r0, [pc, #372]	; (800b85c <_vfiprintf_r+0x260>)
 800b6e8:	f000 fb00 	bl	800bcec <memchr>
 800b6ec:	9b03      	ldr	r3, [sp, #12]
 800b6ee:	1c5f      	adds	r7, r3, #1
 800b6f0:	2800      	cmp	r0, #0
 800b6f2:	d120      	bne.n	800b736 <_vfiprintf_r+0x13a>
 800b6f4:	682a      	ldr	r2, [r5, #0]
 800b6f6:	06d3      	lsls	r3, r2, #27
 800b6f8:	d504      	bpl.n	800b704 <_vfiprintf_r+0x108>
 800b6fa:	2353      	movs	r3, #83	; 0x53
 800b6fc:	a904      	add	r1, sp, #16
 800b6fe:	185b      	adds	r3, r3, r1
 800b700:	2120      	movs	r1, #32
 800b702:	7019      	strb	r1, [r3, #0]
 800b704:	0713      	lsls	r3, r2, #28
 800b706:	d504      	bpl.n	800b712 <_vfiprintf_r+0x116>
 800b708:	2353      	movs	r3, #83	; 0x53
 800b70a:	a904      	add	r1, sp, #16
 800b70c:	185b      	adds	r3, r3, r1
 800b70e:	212b      	movs	r1, #43	; 0x2b
 800b710:	7019      	strb	r1, [r3, #0]
 800b712:	9b03      	ldr	r3, [sp, #12]
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	2b2a      	cmp	r3, #42	; 0x2a
 800b718:	d016      	beq.n	800b748 <_vfiprintf_r+0x14c>
 800b71a:	2100      	movs	r1, #0
 800b71c:	68eb      	ldr	r3, [r5, #12]
 800b71e:	9f03      	ldr	r7, [sp, #12]
 800b720:	783a      	ldrb	r2, [r7, #0]
 800b722:	1c78      	adds	r0, r7, #1
 800b724:	3a30      	subs	r2, #48	; 0x30
 800b726:	4684      	mov	ip, r0
 800b728:	2a09      	cmp	r2, #9
 800b72a:	d94f      	bls.n	800b7cc <_vfiprintf_r+0x1d0>
 800b72c:	2900      	cmp	r1, #0
 800b72e:	d111      	bne.n	800b754 <_vfiprintf_r+0x158>
 800b730:	e017      	b.n	800b762 <_vfiprintf_r+0x166>
 800b732:	3701      	adds	r7, #1
 800b734:	e7a9      	b.n	800b68a <_vfiprintf_r+0x8e>
 800b736:	4b49      	ldr	r3, [pc, #292]	; (800b85c <_vfiprintf_r+0x260>)
 800b738:	682a      	ldr	r2, [r5, #0]
 800b73a:	1ac0      	subs	r0, r0, r3
 800b73c:	2301      	movs	r3, #1
 800b73e:	4083      	lsls	r3, r0
 800b740:	4313      	orrs	r3, r2
 800b742:	602b      	str	r3, [r5, #0]
 800b744:	9703      	str	r7, [sp, #12]
 800b746:	e7cb      	b.n	800b6e0 <_vfiprintf_r+0xe4>
 800b748:	9b07      	ldr	r3, [sp, #28]
 800b74a:	1d19      	adds	r1, r3, #4
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	9107      	str	r1, [sp, #28]
 800b750:	2b00      	cmp	r3, #0
 800b752:	db01      	blt.n	800b758 <_vfiprintf_r+0x15c>
 800b754:	930b      	str	r3, [sp, #44]	; 0x2c
 800b756:	e004      	b.n	800b762 <_vfiprintf_r+0x166>
 800b758:	425b      	negs	r3, r3
 800b75a:	60eb      	str	r3, [r5, #12]
 800b75c:	2302      	movs	r3, #2
 800b75e:	4313      	orrs	r3, r2
 800b760:	602b      	str	r3, [r5, #0]
 800b762:	783b      	ldrb	r3, [r7, #0]
 800b764:	2b2e      	cmp	r3, #46	; 0x2e
 800b766:	d10a      	bne.n	800b77e <_vfiprintf_r+0x182>
 800b768:	787b      	ldrb	r3, [r7, #1]
 800b76a:	2b2a      	cmp	r3, #42	; 0x2a
 800b76c:	d137      	bne.n	800b7de <_vfiprintf_r+0x1e2>
 800b76e:	9b07      	ldr	r3, [sp, #28]
 800b770:	3702      	adds	r7, #2
 800b772:	1d1a      	adds	r2, r3, #4
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	9207      	str	r2, [sp, #28]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	db2d      	blt.n	800b7d8 <_vfiprintf_r+0x1dc>
 800b77c:	9309      	str	r3, [sp, #36]	; 0x24
 800b77e:	2203      	movs	r2, #3
 800b780:	7839      	ldrb	r1, [r7, #0]
 800b782:	4837      	ldr	r0, [pc, #220]	; (800b860 <_vfiprintf_r+0x264>)
 800b784:	f000 fab2 	bl	800bcec <memchr>
 800b788:	2800      	cmp	r0, #0
 800b78a:	d007      	beq.n	800b79c <_vfiprintf_r+0x1a0>
 800b78c:	4b34      	ldr	r3, [pc, #208]	; (800b860 <_vfiprintf_r+0x264>)
 800b78e:	682a      	ldr	r2, [r5, #0]
 800b790:	1ac0      	subs	r0, r0, r3
 800b792:	2340      	movs	r3, #64	; 0x40
 800b794:	4083      	lsls	r3, r0
 800b796:	4313      	orrs	r3, r2
 800b798:	3701      	adds	r7, #1
 800b79a:	602b      	str	r3, [r5, #0]
 800b79c:	7839      	ldrb	r1, [r7, #0]
 800b79e:	1c7b      	adds	r3, r7, #1
 800b7a0:	2206      	movs	r2, #6
 800b7a2:	4830      	ldr	r0, [pc, #192]	; (800b864 <_vfiprintf_r+0x268>)
 800b7a4:	9303      	str	r3, [sp, #12]
 800b7a6:	7629      	strb	r1, [r5, #24]
 800b7a8:	f000 faa0 	bl	800bcec <memchr>
 800b7ac:	2800      	cmp	r0, #0
 800b7ae:	d045      	beq.n	800b83c <_vfiprintf_r+0x240>
 800b7b0:	4b2d      	ldr	r3, [pc, #180]	; (800b868 <_vfiprintf_r+0x26c>)
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d127      	bne.n	800b806 <_vfiprintf_r+0x20a>
 800b7b6:	2207      	movs	r2, #7
 800b7b8:	9b07      	ldr	r3, [sp, #28]
 800b7ba:	3307      	adds	r3, #7
 800b7bc:	4393      	bics	r3, r2
 800b7be:	3308      	adds	r3, #8
 800b7c0:	9307      	str	r3, [sp, #28]
 800b7c2:	696b      	ldr	r3, [r5, #20]
 800b7c4:	9a04      	ldr	r2, [sp, #16]
 800b7c6:	189b      	adds	r3, r3, r2
 800b7c8:	616b      	str	r3, [r5, #20]
 800b7ca:	e75d      	b.n	800b688 <_vfiprintf_r+0x8c>
 800b7cc:	210a      	movs	r1, #10
 800b7ce:	434b      	muls	r3, r1
 800b7d0:	4667      	mov	r7, ip
 800b7d2:	189b      	adds	r3, r3, r2
 800b7d4:	3909      	subs	r1, #9
 800b7d6:	e7a3      	b.n	800b720 <_vfiprintf_r+0x124>
 800b7d8:	2301      	movs	r3, #1
 800b7da:	425b      	negs	r3, r3
 800b7dc:	e7ce      	b.n	800b77c <_vfiprintf_r+0x180>
 800b7de:	2300      	movs	r3, #0
 800b7e0:	001a      	movs	r2, r3
 800b7e2:	3701      	adds	r7, #1
 800b7e4:	606b      	str	r3, [r5, #4]
 800b7e6:	7839      	ldrb	r1, [r7, #0]
 800b7e8:	1c78      	adds	r0, r7, #1
 800b7ea:	3930      	subs	r1, #48	; 0x30
 800b7ec:	4684      	mov	ip, r0
 800b7ee:	2909      	cmp	r1, #9
 800b7f0:	d903      	bls.n	800b7fa <_vfiprintf_r+0x1fe>
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d0c3      	beq.n	800b77e <_vfiprintf_r+0x182>
 800b7f6:	9209      	str	r2, [sp, #36]	; 0x24
 800b7f8:	e7c1      	b.n	800b77e <_vfiprintf_r+0x182>
 800b7fa:	230a      	movs	r3, #10
 800b7fc:	435a      	muls	r2, r3
 800b7fe:	4667      	mov	r7, ip
 800b800:	1852      	adds	r2, r2, r1
 800b802:	3b09      	subs	r3, #9
 800b804:	e7ef      	b.n	800b7e6 <_vfiprintf_r+0x1ea>
 800b806:	ab07      	add	r3, sp, #28
 800b808:	9300      	str	r3, [sp, #0]
 800b80a:	0022      	movs	r2, r4
 800b80c:	0029      	movs	r1, r5
 800b80e:	0030      	movs	r0, r6
 800b810:	4b16      	ldr	r3, [pc, #88]	; (800b86c <_vfiprintf_r+0x270>)
 800b812:	e000      	b.n	800b816 <_vfiprintf_r+0x21a>
 800b814:	bf00      	nop
 800b816:	9004      	str	r0, [sp, #16]
 800b818:	9b04      	ldr	r3, [sp, #16]
 800b81a:	3301      	adds	r3, #1
 800b81c:	d1d1      	bne.n	800b7c2 <_vfiprintf_r+0x1c6>
 800b81e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b820:	07db      	lsls	r3, r3, #31
 800b822:	d405      	bmi.n	800b830 <_vfiprintf_r+0x234>
 800b824:	89a3      	ldrh	r3, [r4, #12]
 800b826:	059b      	lsls	r3, r3, #22
 800b828:	d402      	bmi.n	800b830 <_vfiprintf_r+0x234>
 800b82a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b82c:	f7ff fda8 	bl	800b380 <__retarget_lock_release_recursive>
 800b830:	89a3      	ldrh	r3, [r4, #12]
 800b832:	065b      	lsls	r3, r3, #25
 800b834:	d500      	bpl.n	800b838 <_vfiprintf_r+0x23c>
 800b836:	e70a      	b.n	800b64e <_vfiprintf_r+0x52>
 800b838:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b83a:	e70a      	b.n	800b652 <_vfiprintf_r+0x56>
 800b83c:	ab07      	add	r3, sp, #28
 800b83e:	9300      	str	r3, [sp, #0]
 800b840:	0022      	movs	r2, r4
 800b842:	0029      	movs	r1, r5
 800b844:	0030      	movs	r0, r6
 800b846:	4b09      	ldr	r3, [pc, #36]	; (800b86c <_vfiprintf_r+0x270>)
 800b848:	f000 f882 	bl	800b950 <_printf_i>
 800b84c:	e7e3      	b.n	800b816 <_vfiprintf_r+0x21a>
 800b84e:	46c0      	nop			; (mov r8, r8)
 800b850:	0800e4bc 	.word	0x0800e4bc
 800b854:	0800e4dc 	.word	0x0800e4dc
 800b858:	0800e49c 	.word	0x0800e49c
 800b85c:	0800e4fc 	.word	0x0800e4fc
 800b860:	0800e502 	.word	0x0800e502
 800b864:	0800e506 	.word	0x0800e506
 800b868:	00000000 	.word	0x00000000
 800b86c:	0800b5d7 	.word	0x0800b5d7

0800b870 <_printf_common>:
 800b870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b872:	0015      	movs	r5, r2
 800b874:	9301      	str	r3, [sp, #4]
 800b876:	688a      	ldr	r2, [r1, #8]
 800b878:	690b      	ldr	r3, [r1, #16]
 800b87a:	000c      	movs	r4, r1
 800b87c:	9000      	str	r0, [sp, #0]
 800b87e:	4293      	cmp	r3, r2
 800b880:	da00      	bge.n	800b884 <_printf_common+0x14>
 800b882:	0013      	movs	r3, r2
 800b884:	0022      	movs	r2, r4
 800b886:	602b      	str	r3, [r5, #0]
 800b888:	3243      	adds	r2, #67	; 0x43
 800b88a:	7812      	ldrb	r2, [r2, #0]
 800b88c:	2a00      	cmp	r2, #0
 800b88e:	d001      	beq.n	800b894 <_printf_common+0x24>
 800b890:	3301      	adds	r3, #1
 800b892:	602b      	str	r3, [r5, #0]
 800b894:	6823      	ldr	r3, [r4, #0]
 800b896:	069b      	lsls	r3, r3, #26
 800b898:	d502      	bpl.n	800b8a0 <_printf_common+0x30>
 800b89a:	682b      	ldr	r3, [r5, #0]
 800b89c:	3302      	adds	r3, #2
 800b89e:	602b      	str	r3, [r5, #0]
 800b8a0:	6822      	ldr	r2, [r4, #0]
 800b8a2:	2306      	movs	r3, #6
 800b8a4:	0017      	movs	r7, r2
 800b8a6:	401f      	ands	r7, r3
 800b8a8:	421a      	tst	r2, r3
 800b8aa:	d027      	beq.n	800b8fc <_printf_common+0x8c>
 800b8ac:	0023      	movs	r3, r4
 800b8ae:	3343      	adds	r3, #67	; 0x43
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	1e5a      	subs	r2, r3, #1
 800b8b4:	4193      	sbcs	r3, r2
 800b8b6:	6822      	ldr	r2, [r4, #0]
 800b8b8:	0692      	lsls	r2, r2, #26
 800b8ba:	d430      	bmi.n	800b91e <_printf_common+0xae>
 800b8bc:	0022      	movs	r2, r4
 800b8be:	9901      	ldr	r1, [sp, #4]
 800b8c0:	9800      	ldr	r0, [sp, #0]
 800b8c2:	9e08      	ldr	r6, [sp, #32]
 800b8c4:	3243      	adds	r2, #67	; 0x43
 800b8c6:	47b0      	blx	r6
 800b8c8:	1c43      	adds	r3, r0, #1
 800b8ca:	d025      	beq.n	800b918 <_printf_common+0xa8>
 800b8cc:	2306      	movs	r3, #6
 800b8ce:	6820      	ldr	r0, [r4, #0]
 800b8d0:	682a      	ldr	r2, [r5, #0]
 800b8d2:	68e1      	ldr	r1, [r4, #12]
 800b8d4:	2500      	movs	r5, #0
 800b8d6:	4003      	ands	r3, r0
 800b8d8:	2b04      	cmp	r3, #4
 800b8da:	d103      	bne.n	800b8e4 <_printf_common+0x74>
 800b8dc:	1a8d      	subs	r5, r1, r2
 800b8de:	43eb      	mvns	r3, r5
 800b8e0:	17db      	asrs	r3, r3, #31
 800b8e2:	401d      	ands	r5, r3
 800b8e4:	68a3      	ldr	r3, [r4, #8]
 800b8e6:	6922      	ldr	r2, [r4, #16]
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	dd01      	ble.n	800b8f0 <_printf_common+0x80>
 800b8ec:	1a9b      	subs	r3, r3, r2
 800b8ee:	18ed      	adds	r5, r5, r3
 800b8f0:	2700      	movs	r7, #0
 800b8f2:	42bd      	cmp	r5, r7
 800b8f4:	d120      	bne.n	800b938 <_printf_common+0xc8>
 800b8f6:	2000      	movs	r0, #0
 800b8f8:	e010      	b.n	800b91c <_printf_common+0xac>
 800b8fa:	3701      	adds	r7, #1
 800b8fc:	68e3      	ldr	r3, [r4, #12]
 800b8fe:	682a      	ldr	r2, [r5, #0]
 800b900:	1a9b      	subs	r3, r3, r2
 800b902:	42bb      	cmp	r3, r7
 800b904:	ddd2      	ble.n	800b8ac <_printf_common+0x3c>
 800b906:	0022      	movs	r2, r4
 800b908:	2301      	movs	r3, #1
 800b90a:	9901      	ldr	r1, [sp, #4]
 800b90c:	9800      	ldr	r0, [sp, #0]
 800b90e:	9e08      	ldr	r6, [sp, #32]
 800b910:	3219      	adds	r2, #25
 800b912:	47b0      	blx	r6
 800b914:	1c43      	adds	r3, r0, #1
 800b916:	d1f0      	bne.n	800b8fa <_printf_common+0x8a>
 800b918:	2001      	movs	r0, #1
 800b91a:	4240      	negs	r0, r0
 800b91c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b91e:	2030      	movs	r0, #48	; 0x30
 800b920:	18e1      	adds	r1, r4, r3
 800b922:	3143      	adds	r1, #67	; 0x43
 800b924:	7008      	strb	r0, [r1, #0]
 800b926:	0021      	movs	r1, r4
 800b928:	1c5a      	adds	r2, r3, #1
 800b92a:	3145      	adds	r1, #69	; 0x45
 800b92c:	7809      	ldrb	r1, [r1, #0]
 800b92e:	18a2      	adds	r2, r4, r2
 800b930:	3243      	adds	r2, #67	; 0x43
 800b932:	3302      	adds	r3, #2
 800b934:	7011      	strb	r1, [r2, #0]
 800b936:	e7c1      	b.n	800b8bc <_printf_common+0x4c>
 800b938:	0022      	movs	r2, r4
 800b93a:	2301      	movs	r3, #1
 800b93c:	9901      	ldr	r1, [sp, #4]
 800b93e:	9800      	ldr	r0, [sp, #0]
 800b940:	9e08      	ldr	r6, [sp, #32]
 800b942:	321a      	adds	r2, #26
 800b944:	47b0      	blx	r6
 800b946:	1c43      	adds	r3, r0, #1
 800b948:	d0e6      	beq.n	800b918 <_printf_common+0xa8>
 800b94a:	3701      	adds	r7, #1
 800b94c:	e7d1      	b.n	800b8f2 <_printf_common+0x82>
	...

0800b950 <_printf_i>:
 800b950:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b952:	b08b      	sub	sp, #44	; 0x2c
 800b954:	9206      	str	r2, [sp, #24]
 800b956:	000a      	movs	r2, r1
 800b958:	3243      	adds	r2, #67	; 0x43
 800b95a:	9307      	str	r3, [sp, #28]
 800b95c:	9005      	str	r0, [sp, #20]
 800b95e:	9204      	str	r2, [sp, #16]
 800b960:	7e0a      	ldrb	r2, [r1, #24]
 800b962:	000c      	movs	r4, r1
 800b964:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b966:	2a78      	cmp	r2, #120	; 0x78
 800b968:	d806      	bhi.n	800b978 <_printf_i+0x28>
 800b96a:	2a62      	cmp	r2, #98	; 0x62
 800b96c:	d808      	bhi.n	800b980 <_printf_i+0x30>
 800b96e:	2a00      	cmp	r2, #0
 800b970:	d100      	bne.n	800b974 <_printf_i+0x24>
 800b972:	e0c0      	b.n	800baf6 <_printf_i+0x1a6>
 800b974:	2a58      	cmp	r2, #88	; 0x58
 800b976:	d052      	beq.n	800ba1e <_printf_i+0xce>
 800b978:	0026      	movs	r6, r4
 800b97a:	3642      	adds	r6, #66	; 0x42
 800b97c:	7032      	strb	r2, [r6, #0]
 800b97e:	e022      	b.n	800b9c6 <_printf_i+0x76>
 800b980:	0010      	movs	r0, r2
 800b982:	3863      	subs	r0, #99	; 0x63
 800b984:	2815      	cmp	r0, #21
 800b986:	d8f7      	bhi.n	800b978 <_printf_i+0x28>
 800b988:	f7f4 fbbe 	bl	8000108 <__gnu_thumb1_case_shi>
 800b98c:	001f0016 	.word	0x001f0016
 800b990:	fff6fff6 	.word	0xfff6fff6
 800b994:	fff6fff6 	.word	0xfff6fff6
 800b998:	fff6001f 	.word	0xfff6001f
 800b99c:	fff6fff6 	.word	0xfff6fff6
 800b9a0:	00a8fff6 	.word	0x00a8fff6
 800b9a4:	009a0036 	.word	0x009a0036
 800b9a8:	fff6fff6 	.word	0xfff6fff6
 800b9ac:	fff600b9 	.word	0xfff600b9
 800b9b0:	fff60036 	.word	0xfff60036
 800b9b4:	009efff6 	.word	0x009efff6
 800b9b8:	0026      	movs	r6, r4
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	3642      	adds	r6, #66	; 0x42
 800b9be:	1d11      	adds	r1, r2, #4
 800b9c0:	6019      	str	r1, [r3, #0]
 800b9c2:	6813      	ldr	r3, [r2, #0]
 800b9c4:	7033      	strb	r3, [r6, #0]
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	e0a7      	b.n	800bb1a <_printf_i+0x1ca>
 800b9ca:	6808      	ldr	r0, [r1, #0]
 800b9cc:	6819      	ldr	r1, [r3, #0]
 800b9ce:	1d0a      	adds	r2, r1, #4
 800b9d0:	0605      	lsls	r5, r0, #24
 800b9d2:	d50b      	bpl.n	800b9ec <_printf_i+0x9c>
 800b9d4:	680d      	ldr	r5, [r1, #0]
 800b9d6:	601a      	str	r2, [r3, #0]
 800b9d8:	2d00      	cmp	r5, #0
 800b9da:	da03      	bge.n	800b9e4 <_printf_i+0x94>
 800b9dc:	232d      	movs	r3, #45	; 0x2d
 800b9de:	9a04      	ldr	r2, [sp, #16]
 800b9e0:	426d      	negs	r5, r5
 800b9e2:	7013      	strb	r3, [r2, #0]
 800b9e4:	4b61      	ldr	r3, [pc, #388]	; (800bb6c <_printf_i+0x21c>)
 800b9e6:	270a      	movs	r7, #10
 800b9e8:	9303      	str	r3, [sp, #12]
 800b9ea:	e032      	b.n	800ba52 <_printf_i+0x102>
 800b9ec:	680d      	ldr	r5, [r1, #0]
 800b9ee:	601a      	str	r2, [r3, #0]
 800b9f0:	0641      	lsls	r1, r0, #25
 800b9f2:	d5f1      	bpl.n	800b9d8 <_printf_i+0x88>
 800b9f4:	b22d      	sxth	r5, r5
 800b9f6:	e7ef      	b.n	800b9d8 <_printf_i+0x88>
 800b9f8:	680d      	ldr	r5, [r1, #0]
 800b9fa:	6819      	ldr	r1, [r3, #0]
 800b9fc:	1d08      	adds	r0, r1, #4
 800b9fe:	6018      	str	r0, [r3, #0]
 800ba00:	062e      	lsls	r6, r5, #24
 800ba02:	d501      	bpl.n	800ba08 <_printf_i+0xb8>
 800ba04:	680d      	ldr	r5, [r1, #0]
 800ba06:	e003      	b.n	800ba10 <_printf_i+0xc0>
 800ba08:	066d      	lsls	r5, r5, #25
 800ba0a:	d5fb      	bpl.n	800ba04 <_printf_i+0xb4>
 800ba0c:	680d      	ldr	r5, [r1, #0]
 800ba0e:	b2ad      	uxth	r5, r5
 800ba10:	4b56      	ldr	r3, [pc, #344]	; (800bb6c <_printf_i+0x21c>)
 800ba12:	270a      	movs	r7, #10
 800ba14:	9303      	str	r3, [sp, #12]
 800ba16:	2a6f      	cmp	r2, #111	; 0x6f
 800ba18:	d117      	bne.n	800ba4a <_printf_i+0xfa>
 800ba1a:	2708      	movs	r7, #8
 800ba1c:	e015      	b.n	800ba4a <_printf_i+0xfa>
 800ba1e:	3145      	adds	r1, #69	; 0x45
 800ba20:	700a      	strb	r2, [r1, #0]
 800ba22:	4a52      	ldr	r2, [pc, #328]	; (800bb6c <_printf_i+0x21c>)
 800ba24:	9203      	str	r2, [sp, #12]
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	6821      	ldr	r1, [r4, #0]
 800ba2a:	ca20      	ldmia	r2!, {r5}
 800ba2c:	601a      	str	r2, [r3, #0]
 800ba2e:	0608      	lsls	r0, r1, #24
 800ba30:	d550      	bpl.n	800bad4 <_printf_i+0x184>
 800ba32:	07cb      	lsls	r3, r1, #31
 800ba34:	d502      	bpl.n	800ba3c <_printf_i+0xec>
 800ba36:	2320      	movs	r3, #32
 800ba38:	4319      	orrs	r1, r3
 800ba3a:	6021      	str	r1, [r4, #0]
 800ba3c:	2710      	movs	r7, #16
 800ba3e:	2d00      	cmp	r5, #0
 800ba40:	d103      	bne.n	800ba4a <_printf_i+0xfa>
 800ba42:	2320      	movs	r3, #32
 800ba44:	6822      	ldr	r2, [r4, #0]
 800ba46:	439a      	bics	r2, r3
 800ba48:	6022      	str	r2, [r4, #0]
 800ba4a:	0023      	movs	r3, r4
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	3343      	adds	r3, #67	; 0x43
 800ba50:	701a      	strb	r2, [r3, #0]
 800ba52:	6863      	ldr	r3, [r4, #4]
 800ba54:	60a3      	str	r3, [r4, #8]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	db03      	blt.n	800ba62 <_printf_i+0x112>
 800ba5a:	2204      	movs	r2, #4
 800ba5c:	6821      	ldr	r1, [r4, #0]
 800ba5e:	4391      	bics	r1, r2
 800ba60:	6021      	str	r1, [r4, #0]
 800ba62:	2d00      	cmp	r5, #0
 800ba64:	d102      	bne.n	800ba6c <_printf_i+0x11c>
 800ba66:	9e04      	ldr	r6, [sp, #16]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d00c      	beq.n	800ba86 <_printf_i+0x136>
 800ba6c:	9e04      	ldr	r6, [sp, #16]
 800ba6e:	0028      	movs	r0, r5
 800ba70:	0039      	movs	r1, r7
 800ba72:	f7f4 fbd9 	bl	8000228 <__aeabi_uidivmod>
 800ba76:	9b03      	ldr	r3, [sp, #12]
 800ba78:	3e01      	subs	r6, #1
 800ba7a:	5c5b      	ldrb	r3, [r3, r1]
 800ba7c:	7033      	strb	r3, [r6, #0]
 800ba7e:	002b      	movs	r3, r5
 800ba80:	0005      	movs	r5, r0
 800ba82:	429f      	cmp	r7, r3
 800ba84:	d9f3      	bls.n	800ba6e <_printf_i+0x11e>
 800ba86:	2f08      	cmp	r7, #8
 800ba88:	d109      	bne.n	800ba9e <_printf_i+0x14e>
 800ba8a:	6823      	ldr	r3, [r4, #0]
 800ba8c:	07db      	lsls	r3, r3, #31
 800ba8e:	d506      	bpl.n	800ba9e <_printf_i+0x14e>
 800ba90:	6863      	ldr	r3, [r4, #4]
 800ba92:	6922      	ldr	r2, [r4, #16]
 800ba94:	4293      	cmp	r3, r2
 800ba96:	dc02      	bgt.n	800ba9e <_printf_i+0x14e>
 800ba98:	2330      	movs	r3, #48	; 0x30
 800ba9a:	3e01      	subs	r6, #1
 800ba9c:	7033      	strb	r3, [r6, #0]
 800ba9e:	9b04      	ldr	r3, [sp, #16]
 800baa0:	1b9b      	subs	r3, r3, r6
 800baa2:	6123      	str	r3, [r4, #16]
 800baa4:	9b07      	ldr	r3, [sp, #28]
 800baa6:	0021      	movs	r1, r4
 800baa8:	9300      	str	r3, [sp, #0]
 800baaa:	9805      	ldr	r0, [sp, #20]
 800baac:	9b06      	ldr	r3, [sp, #24]
 800baae:	aa09      	add	r2, sp, #36	; 0x24
 800bab0:	f7ff fede 	bl	800b870 <_printf_common>
 800bab4:	1c43      	adds	r3, r0, #1
 800bab6:	d135      	bne.n	800bb24 <_printf_i+0x1d4>
 800bab8:	2001      	movs	r0, #1
 800baba:	4240      	negs	r0, r0
 800babc:	b00b      	add	sp, #44	; 0x2c
 800babe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bac0:	2220      	movs	r2, #32
 800bac2:	6809      	ldr	r1, [r1, #0]
 800bac4:	430a      	orrs	r2, r1
 800bac6:	6022      	str	r2, [r4, #0]
 800bac8:	0022      	movs	r2, r4
 800baca:	2178      	movs	r1, #120	; 0x78
 800bacc:	3245      	adds	r2, #69	; 0x45
 800bace:	7011      	strb	r1, [r2, #0]
 800bad0:	4a27      	ldr	r2, [pc, #156]	; (800bb70 <_printf_i+0x220>)
 800bad2:	e7a7      	b.n	800ba24 <_printf_i+0xd4>
 800bad4:	0648      	lsls	r0, r1, #25
 800bad6:	d5ac      	bpl.n	800ba32 <_printf_i+0xe2>
 800bad8:	b2ad      	uxth	r5, r5
 800bada:	e7aa      	b.n	800ba32 <_printf_i+0xe2>
 800badc:	681a      	ldr	r2, [r3, #0]
 800bade:	680d      	ldr	r5, [r1, #0]
 800bae0:	1d10      	adds	r0, r2, #4
 800bae2:	6949      	ldr	r1, [r1, #20]
 800bae4:	6018      	str	r0, [r3, #0]
 800bae6:	6813      	ldr	r3, [r2, #0]
 800bae8:	062e      	lsls	r6, r5, #24
 800baea:	d501      	bpl.n	800baf0 <_printf_i+0x1a0>
 800baec:	6019      	str	r1, [r3, #0]
 800baee:	e002      	b.n	800baf6 <_printf_i+0x1a6>
 800baf0:	066d      	lsls	r5, r5, #25
 800baf2:	d5fb      	bpl.n	800baec <_printf_i+0x19c>
 800baf4:	8019      	strh	r1, [r3, #0]
 800baf6:	2300      	movs	r3, #0
 800baf8:	9e04      	ldr	r6, [sp, #16]
 800bafa:	6123      	str	r3, [r4, #16]
 800bafc:	e7d2      	b.n	800baa4 <_printf_i+0x154>
 800bafe:	681a      	ldr	r2, [r3, #0]
 800bb00:	1d11      	adds	r1, r2, #4
 800bb02:	6019      	str	r1, [r3, #0]
 800bb04:	6816      	ldr	r6, [r2, #0]
 800bb06:	2100      	movs	r1, #0
 800bb08:	0030      	movs	r0, r6
 800bb0a:	6862      	ldr	r2, [r4, #4]
 800bb0c:	f000 f8ee 	bl	800bcec <memchr>
 800bb10:	2800      	cmp	r0, #0
 800bb12:	d001      	beq.n	800bb18 <_printf_i+0x1c8>
 800bb14:	1b80      	subs	r0, r0, r6
 800bb16:	6060      	str	r0, [r4, #4]
 800bb18:	6863      	ldr	r3, [r4, #4]
 800bb1a:	6123      	str	r3, [r4, #16]
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	9a04      	ldr	r2, [sp, #16]
 800bb20:	7013      	strb	r3, [r2, #0]
 800bb22:	e7bf      	b.n	800baa4 <_printf_i+0x154>
 800bb24:	6923      	ldr	r3, [r4, #16]
 800bb26:	0032      	movs	r2, r6
 800bb28:	9906      	ldr	r1, [sp, #24]
 800bb2a:	9805      	ldr	r0, [sp, #20]
 800bb2c:	9d07      	ldr	r5, [sp, #28]
 800bb2e:	47a8      	blx	r5
 800bb30:	1c43      	adds	r3, r0, #1
 800bb32:	d0c1      	beq.n	800bab8 <_printf_i+0x168>
 800bb34:	6823      	ldr	r3, [r4, #0]
 800bb36:	079b      	lsls	r3, r3, #30
 800bb38:	d415      	bmi.n	800bb66 <_printf_i+0x216>
 800bb3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb3c:	68e0      	ldr	r0, [r4, #12]
 800bb3e:	4298      	cmp	r0, r3
 800bb40:	dabc      	bge.n	800babc <_printf_i+0x16c>
 800bb42:	0018      	movs	r0, r3
 800bb44:	e7ba      	b.n	800babc <_printf_i+0x16c>
 800bb46:	0022      	movs	r2, r4
 800bb48:	2301      	movs	r3, #1
 800bb4a:	9906      	ldr	r1, [sp, #24]
 800bb4c:	9805      	ldr	r0, [sp, #20]
 800bb4e:	9e07      	ldr	r6, [sp, #28]
 800bb50:	3219      	adds	r2, #25
 800bb52:	47b0      	blx	r6
 800bb54:	1c43      	adds	r3, r0, #1
 800bb56:	d0af      	beq.n	800bab8 <_printf_i+0x168>
 800bb58:	3501      	adds	r5, #1
 800bb5a:	68e3      	ldr	r3, [r4, #12]
 800bb5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb5e:	1a9b      	subs	r3, r3, r2
 800bb60:	42ab      	cmp	r3, r5
 800bb62:	dcf0      	bgt.n	800bb46 <_printf_i+0x1f6>
 800bb64:	e7e9      	b.n	800bb3a <_printf_i+0x1ea>
 800bb66:	2500      	movs	r5, #0
 800bb68:	e7f7      	b.n	800bb5a <_printf_i+0x20a>
 800bb6a:	46c0      	nop			; (mov r8, r8)
 800bb6c:	0800e50d 	.word	0x0800e50d
 800bb70:	0800e51e 	.word	0x0800e51e

0800bb74 <_sbrk_r>:
 800bb74:	2300      	movs	r3, #0
 800bb76:	b570      	push	{r4, r5, r6, lr}
 800bb78:	4d06      	ldr	r5, [pc, #24]	; (800bb94 <_sbrk_r+0x20>)
 800bb7a:	0004      	movs	r4, r0
 800bb7c:	0008      	movs	r0, r1
 800bb7e:	602b      	str	r3, [r5, #0]
 800bb80:	f7f7 fb88 	bl	8003294 <_sbrk>
 800bb84:	1c43      	adds	r3, r0, #1
 800bb86:	d103      	bne.n	800bb90 <_sbrk_r+0x1c>
 800bb88:	682b      	ldr	r3, [r5, #0]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d000      	beq.n	800bb90 <_sbrk_r+0x1c>
 800bb8e:	6023      	str	r3, [r4, #0]
 800bb90:	bd70      	pop	{r4, r5, r6, pc}
 800bb92:	46c0      	nop			; (mov r8, r8)
 800bb94:	20000d64 	.word	0x20000d64

0800bb98 <__sread>:
 800bb98:	b570      	push	{r4, r5, r6, lr}
 800bb9a:	000c      	movs	r4, r1
 800bb9c:	250e      	movs	r5, #14
 800bb9e:	5f49      	ldrsh	r1, [r1, r5]
 800bba0:	f000 f8c0 	bl	800bd24 <_read_r>
 800bba4:	2800      	cmp	r0, #0
 800bba6:	db03      	blt.n	800bbb0 <__sread+0x18>
 800bba8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800bbaa:	181b      	adds	r3, r3, r0
 800bbac:	6563      	str	r3, [r4, #84]	; 0x54
 800bbae:	bd70      	pop	{r4, r5, r6, pc}
 800bbb0:	89a3      	ldrh	r3, [r4, #12]
 800bbb2:	4a02      	ldr	r2, [pc, #8]	; (800bbbc <__sread+0x24>)
 800bbb4:	4013      	ands	r3, r2
 800bbb6:	81a3      	strh	r3, [r4, #12]
 800bbb8:	e7f9      	b.n	800bbae <__sread+0x16>
 800bbba:	46c0      	nop			; (mov r8, r8)
 800bbbc:	ffffefff 	.word	0xffffefff

0800bbc0 <__swrite>:
 800bbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbc2:	001f      	movs	r7, r3
 800bbc4:	898b      	ldrh	r3, [r1, #12]
 800bbc6:	0005      	movs	r5, r0
 800bbc8:	000c      	movs	r4, r1
 800bbca:	0016      	movs	r6, r2
 800bbcc:	05db      	lsls	r3, r3, #23
 800bbce:	d505      	bpl.n	800bbdc <__swrite+0x1c>
 800bbd0:	230e      	movs	r3, #14
 800bbd2:	5ec9      	ldrsh	r1, [r1, r3]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	2302      	movs	r3, #2
 800bbd8:	f000 f874 	bl	800bcc4 <_lseek_r>
 800bbdc:	89a3      	ldrh	r3, [r4, #12]
 800bbde:	4a05      	ldr	r2, [pc, #20]	; (800bbf4 <__swrite+0x34>)
 800bbe0:	0028      	movs	r0, r5
 800bbe2:	4013      	ands	r3, r2
 800bbe4:	81a3      	strh	r3, [r4, #12]
 800bbe6:	0032      	movs	r2, r6
 800bbe8:	230e      	movs	r3, #14
 800bbea:	5ee1      	ldrsh	r1, [r4, r3]
 800bbec:	003b      	movs	r3, r7
 800bbee:	f000 f81f 	bl	800bc30 <_write_r>
 800bbf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbf4:	ffffefff 	.word	0xffffefff

0800bbf8 <__sseek>:
 800bbf8:	b570      	push	{r4, r5, r6, lr}
 800bbfa:	000c      	movs	r4, r1
 800bbfc:	250e      	movs	r5, #14
 800bbfe:	5f49      	ldrsh	r1, [r1, r5]
 800bc00:	f000 f860 	bl	800bcc4 <_lseek_r>
 800bc04:	89a3      	ldrh	r3, [r4, #12]
 800bc06:	1c42      	adds	r2, r0, #1
 800bc08:	d103      	bne.n	800bc12 <__sseek+0x1a>
 800bc0a:	4a05      	ldr	r2, [pc, #20]	; (800bc20 <__sseek+0x28>)
 800bc0c:	4013      	ands	r3, r2
 800bc0e:	81a3      	strh	r3, [r4, #12]
 800bc10:	bd70      	pop	{r4, r5, r6, pc}
 800bc12:	2280      	movs	r2, #128	; 0x80
 800bc14:	0152      	lsls	r2, r2, #5
 800bc16:	4313      	orrs	r3, r2
 800bc18:	81a3      	strh	r3, [r4, #12]
 800bc1a:	6560      	str	r0, [r4, #84]	; 0x54
 800bc1c:	e7f8      	b.n	800bc10 <__sseek+0x18>
 800bc1e:	46c0      	nop			; (mov r8, r8)
 800bc20:	ffffefff 	.word	0xffffefff

0800bc24 <__sclose>:
 800bc24:	b510      	push	{r4, lr}
 800bc26:	230e      	movs	r3, #14
 800bc28:	5ec9      	ldrsh	r1, [r1, r3]
 800bc2a:	f000 f815 	bl	800bc58 <_close_r>
 800bc2e:	bd10      	pop	{r4, pc}

0800bc30 <_write_r>:
 800bc30:	b570      	push	{r4, r5, r6, lr}
 800bc32:	0004      	movs	r4, r0
 800bc34:	0008      	movs	r0, r1
 800bc36:	0011      	movs	r1, r2
 800bc38:	001a      	movs	r2, r3
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	4d05      	ldr	r5, [pc, #20]	; (800bc54 <_write_r+0x24>)
 800bc3e:	602b      	str	r3, [r5, #0]
 800bc40:	f7fb f970 	bl	8006f24 <_write>
 800bc44:	1c43      	adds	r3, r0, #1
 800bc46:	d103      	bne.n	800bc50 <_write_r+0x20>
 800bc48:	682b      	ldr	r3, [r5, #0]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d000      	beq.n	800bc50 <_write_r+0x20>
 800bc4e:	6023      	str	r3, [r4, #0]
 800bc50:	bd70      	pop	{r4, r5, r6, pc}
 800bc52:	46c0      	nop			; (mov r8, r8)
 800bc54:	20000d64 	.word	0x20000d64

0800bc58 <_close_r>:
 800bc58:	2300      	movs	r3, #0
 800bc5a:	b570      	push	{r4, r5, r6, lr}
 800bc5c:	4d06      	ldr	r5, [pc, #24]	; (800bc78 <_close_r+0x20>)
 800bc5e:	0004      	movs	r4, r0
 800bc60:	0008      	movs	r0, r1
 800bc62:	602b      	str	r3, [r5, #0]
 800bc64:	f7f7 fb08 	bl	8003278 <_close>
 800bc68:	1c43      	adds	r3, r0, #1
 800bc6a:	d103      	bne.n	800bc74 <_close_r+0x1c>
 800bc6c:	682b      	ldr	r3, [r5, #0]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d000      	beq.n	800bc74 <_close_r+0x1c>
 800bc72:	6023      	str	r3, [r4, #0]
 800bc74:	bd70      	pop	{r4, r5, r6, pc}
 800bc76:	46c0      	nop			; (mov r8, r8)
 800bc78:	20000d64 	.word	0x20000d64

0800bc7c <_fstat_r>:
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	b570      	push	{r4, r5, r6, lr}
 800bc80:	4d06      	ldr	r5, [pc, #24]	; (800bc9c <_fstat_r+0x20>)
 800bc82:	0004      	movs	r4, r0
 800bc84:	0008      	movs	r0, r1
 800bc86:	0011      	movs	r1, r2
 800bc88:	602b      	str	r3, [r5, #0]
 800bc8a:	f7f7 faf9 	bl	8003280 <_fstat>
 800bc8e:	1c43      	adds	r3, r0, #1
 800bc90:	d103      	bne.n	800bc9a <_fstat_r+0x1e>
 800bc92:	682b      	ldr	r3, [r5, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d000      	beq.n	800bc9a <_fstat_r+0x1e>
 800bc98:	6023      	str	r3, [r4, #0]
 800bc9a:	bd70      	pop	{r4, r5, r6, pc}
 800bc9c:	20000d64 	.word	0x20000d64

0800bca0 <_isatty_r>:
 800bca0:	2300      	movs	r3, #0
 800bca2:	b570      	push	{r4, r5, r6, lr}
 800bca4:	4d06      	ldr	r5, [pc, #24]	; (800bcc0 <_isatty_r+0x20>)
 800bca6:	0004      	movs	r4, r0
 800bca8:	0008      	movs	r0, r1
 800bcaa:	602b      	str	r3, [r5, #0]
 800bcac:	f7f7 faee 	bl	800328c <_isatty>
 800bcb0:	1c43      	adds	r3, r0, #1
 800bcb2:	d103      	bne.n	800bcbc <_isatty_r+0x1c>
 800bcb4:	682b      	ldr	r3, [r5, #0]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d000      	beq.n	800bcbc <_isatty_r+0x1c>
 800bcba:	6023      	str	r3, [r4, #0]
 800bcbc:	bd70      	pop	{r4, r5, r6, pc}
 800bcbe:	46c0      	nop			; (mov r8, r8)
 800bcc0:	20000d64 	.word	0x20000d64

0800bcc4 <_lseek_r>:
 800bcc4:	b570      	push	{r4, r5, r6, lr}
 800bcc6:	0004      	movs	r4, r0
 800bcc8:	0008      	movs	r0, r1
 800bcca:	0011      	movs	r1, r2
 800bccc:	001a      	movs	r2, r3
 800bcce:	2300      	movs	r3, #0
 800bcd0:	4d05      	ldr	r5, [pc, #20]	; (800bce8 <_lseek_r+0x24>)
 800bcd2:	602b      	str	r3, [r5, #0]
 800bcd4:	f7f7 fadc 	bl	8003290 <_lseek>
 800bcd8:	1c43      	adds	r3, r0, #1
 800bcda:	d103      	bne.n	800bce4 <_lseek_r+0x20>
 800bcdc:	682b      	ldr	r3, [r5, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d000      	beq.n	800bce4 <_lseek_r+0x20>
 800bce2:	6023      	str	r3, [r4, #0]
 800bce4:	bd70      	pop	{r4, r5, r6, pc}
 800bce6:	46c0      	nop			; (mov r8, r8)
 800bce8:	20000d64 	.word	0x20000d64

0800bcec <memchr>:
 800bcec:	b2c9      	uxtb	r1, r1
 800bcee:	1882      	adds	r2, r0, r2
 800bcf0:	4290      	cmp	r0, r2
 800bcf2:	d101      	bne.n	800bcf8 <memchr+0xc>
 800bcf4:	2000      	movs	r0, #0
 800bcf6:	4770      	bx	lr
 800bcf8:	7803      	ldrb	r3, [r0, #0]
 800bcfa:	428b      	cmp	r3, r1
 800bcfc:	d0fb      	beq.n	800bcf6 <memchr+0xa>
 800bcfe:	3001      	adds	r0, #1
 800bd00:	e7f6      	b.n	800bcf0 <memchr+0x4>
	...

0800bd04 <__malloc_lock>:
 800bd04:	b510      	push	{r4, lr}
 800bd06:	4802      	ldr	r0, [pc, #8]	; (800bd10 <__malloc_lock+0xc>)
 800bd08:	f7ff fb39 	bl	800b37e <__retarget_lock_acquire_recursive>
 800bd0c:	bd10      	pop	{r4, pc}
 800bd0e:	46c0      	nop			; (mov r8, r8)
 800bd10:	20000d5c 	.word	0x20000d5c

0800bd14 <__malloc_unlock>:
 800bd14:	b510      	push	{r4, lr}
 800bd16:	4802      	ldr	r0, [pc, #8]	; (800bd20 <__malloc_unlock+0xc>)
 800bd18:	f7ff fb32 	bl	800b380 <__retarget_lock_release_recursive>
 800bd1c:	bd10      	pop	{r4, pc}
 800bd1e:	46c0      	nop			; (mov r8, r8)
 800bd20:	20000d5c 	.word	0x20000d5c

0800bd24 <_read_r>:
 800bd24:	b570      	push	{r4, r5, r6, lr}
 800bd26:	0004      	movs	r4, r0
 800bd28:	0008      	movs	r0, r1
 800bd2a:	0011      	movs	r1, r2
 800bd2c:	001a      	movs	r2, r3
 800bd2e:	2300      	movs	r3, #0
 800bd30:	4d05      	ldr	r5, [pc, #20]	; (800bd48 <_read_r+0x24>)
 800bd32:	602b      	str	r3, [r5, #0]
 800bd34:	f7f7 fa92 	bl	800325c <_read>
 800bd38:	1c43      	adds	r3, r0, #1
 800bd3a:	d103      	bne.n	800bd44 <_read_r+0x20>
 800bd3c:	682b      	ldr	r3, [r5, #0]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d000      	beq.n	800bd44 <_read_r+0x20>
 800bd42:	6023      	str	r3, [r4, #0]
 800bd44:	bd70      	pop	{r4, r5, r6, pc}
 800bd46:	46c0      	nop			; (mov r8, r8)
 800bd48:	20000d64 	.word	0x20000d64

0800bd4c <sqrt>:
 800bd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd4e:	0004      	movs	r4, r0
 800bd50:	000d      	movs	r5, r1
 800bd52:	f000 f829 	bl	800bda8 <__ieee754_sqrt>
 800bd56:	4b13      	ldr	r3, [pc, #76]	; (800bda4 <sqrt+0x58>)
 800bd58:	0006      	movs	r6, r0
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	000f      	movs	r7, r1
 800bd5e:	b25b      	sxtb	r3, r3
 800bd60:	3301      	adds	r3, #1
 800bd62:	d01b      	beq.n	800bd9c <sqrt+0x50>
 800bd64:	0022      	movs	r2, r4
 800bd66:	002b      	movs	r3, r5
 800bd68:	0020      	movs	r0, r4
 800bd6a:	0029      	movs	r1, r5
 800bd6c:	f7f6 fe34 	bl	80029d8 <__aeabi_dcmpun>
 800bd70:	2800      	cmp	r0, #0
 800bd72:	d113      	bne.n	800bd9c <sqrt+0x50>
 800bd74:	2200      	movs	r2, #0
 800bd76:	2300      	movs	r3, #0
 800bd78:	0020      	movs	r0, r4
 800bd7a:	0029      	movs	r1, r5
 800bd7c:	f7f4 fa70 	bl	8000260 <__aeabi_dcmplt>
 800bd80:	2800      	cmp	r0, #0
 800bd82:	d00b      	beq.n	800bd9c <sqrt+0x50>
 800bd84:	f7fe ff8c 	bl	800aca0 <__errno>
 800bd88:	2321      	movs	r3, #33	; 0x21
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	6003      	str	r3, [r0, #0]
 800bd8e:	2300      	movs	r3, #0
 800bd90:	0010      	movs	r0, r2
 800bd92:	0019      	movs	r1, r3
 800bd94:	f7f5 fc1c 	bl	80015d0 <__aeabi_ddiv>
 800bd98:	0006      	movs	r6, r0
 800bd9a:	000f      	movs	r7, r1
 800bd9c:	0030      	movs	r0, r6
 800bd9e:	0039      	movs	r1, r7
 800bda0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bda2:	46c0      	nop			; (mov r8, r8)
 800bda4:	200000d8 	.word	0x200000d8

0800bda8 <__ieee754_sqrt>:
 800bda8:	4b56      	ldr	r3, [pc, #344]	; (800bf04 <__ieee754_sqrt+0x15c>)
 800bdaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdac:	0002      	movs	r2, r0
 800bdae:	0005      	movs	r5, r0
 800bdb0:	0018      	movs	r0, r3
 800bdb2:	000c      	movs	r4, r1
 800bdb4:	b085      	sub	sp, #20
 800bdb6:	4008      	ands	r0, r1
 800bdb8:	4298      	cmp	r0, r3
 800bdba:	d10f      	bne.n	800bddc <__ieee754_sqrt+0x34>
 800bdbc:	000b      	movs	r3, r1
 800bdbe:	0028      	movs	r0, r5
 800bdc0:	f7f6 f80c 	bl	8001ddc <__aeabi_dmul>
 800bdc4:	0002      	movs	r2, r0
 800bdc6:	000b      	movs	r3, r1
 800bdc8:	0028      	movs	r0, r5
 800bdca:	0021      	movs	r1, r4
 800bdcc:	f7f5 f896 	bl	8000efc <__aeabi_dadd>
 800bdd0:	0005      	movs	r5, r0
 800bdd2:	000c      	movs	r4, r1
 800bdd4:	0028      	movs	r0, r5
 800bdd6:	0021      	movs	r1, r4
 800bdd8:	b005      	add	sp, #20
 800bdda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bddc:	2900      	cmp	r1, #0
 800bdde:	dc10      	bgt.n	800be02 <__ieee754_sqrt+0x5a>
 800bde0:	004b      	lsls	r3, r1, #1
 800bde2:	085b      	lsrs	r3, r3, #1
 800bde4:	432b      	orrs	r3, r5
 800bde6:	d0f5      	beq.n	800bdd4 <__ieee754_sqrt+0x2c>
 800bde8:	2000      	movs	r0, #0
 800bdea:	4281      	cmp	r1, r0
 800bdec:	d100      	bne.n	800bdf0 <__ieee754_sqrt+0x48>
 800bdee:	e080      	b.n	800bef2 <__ieee754_sqrt+0x14a>
 800bdf0:	000b      	movs	r3, r1
 800bdf2:	0028      	movs	r0, r5
 800bdf4:	f7f6 fa5e 	bl	80022b4 <__aeabi_dsub>
 800bdf8:	0002      	movs	r2, r0
 800bdfa:	000b      	movs	r3, r1
 800bdfc:	f7f5 fbe8 	bl	80015d0 <__aeabi_ddiv>
 800be00:	e7e6      	b.n	800bdd0 <__ieee754_sqrt+0x28>
 800be02:	1508      	asrs	r0, r1, #20
 800be04:	d075      	beq.n	800bef2 <__ieee754_sqrt+0x14a>
 800be06:	4b40      	ldr	r3, [pc, #256]	; (800bf08 <__ieee754_sqrt+0x160>)
 800be08:	0309      	lsls	r1, r1, #12
 800be0a:	18c4      	adds	r4, r0, r3
 800be0c:	2380      	movs	r3, #128	; 0x80
 800be0e:	0b09      	lsrs	r1, r1, #12
 800be10:	035b      	lsls	r3, r3, #13
 800be12:	4319      	orrs	r1, r3
 800be14:	07c3      	lsls	r3, r0, #31
 800be16:	d403      	bmi.n	800be20 <__ieee754_sqrt+0x78>
 800be18:	0fd3      	lsrs	r3, r2, #31
 800be1a:	0049      	lsls	r1, r1, #1
 800be1c:	18c9      	adds	r1, r1, r3
 800be1e:	0052      	lsls	r2, r2, #1
 800be20:	1063      	asrs	r3, r4, #1
 800be22:	2400      	movs	r4, #0
 800be24:	0049      	lsls	r1, r1, #1
 800be26:	9303      	str	r3, [sp, #12]
 800be28:	0fd3      	lsrs	r3, r2, #31
 800be2a:	18cb      	adds	r3, r1, r3
 800be2c:	2180      	movs	r1, #128	; 0x80
 800be2e:	2516      	movs	r5, #22
 800be30:	0020      	movs	r0, r4
 800be32:	0052      	lsls	r2, r2, #1
 800be34:	0389      	lsls	r1, r1, #14
 800be36:	1846      	adds	r6, r0, r1
 800be38:	429e      	cmp	r6, r3
 800be3a:	dc02      	bgt.n	800be42 <__ieee754_sqrt+0x9a>
 800be3c:	1870      	adds	r0, r6, r1
 800be3e:	1b9b      	subs	r3, r3, r6
 800be40:	1864      	adds	r4, r4, r1
 800be42:	0fd6      	lsrs	r6, r2, #31
 800be44:	005b      	lsls	r3, r3, #1
 800be46:	3d01      	subs	r5, #1
 800be48:	18f3      	adds	r3, r6, r3
 800be4a:	0052      	lsls	r2, r2, #1
 800be4c:	0849      	lsrs	r1, r1, #1
 800be4e:	2d00      	cmp	r5, #0
 800be50:	d1f1      	bne.n	800be36 <__ieee754_sqrt+0x8e>
 800be52:	2620      	movs	r6, #32
 800be54:	2780      	movs	r7, #128	; 0x80
 800be56:	0029      	movs	r1, r5
 800be58:	9601      	str	r6, [sp, #4]
 800be5a:	063f      	lsls	r7, r7, #24
 800be5c:	197e      	adds	r6, r7, r5
 800be5e:	46b4      	mov	ip, r6
 800be60:	4283      	cmp	r3, r0
 800be62:	dc02      	bgt.n	800be6a <__ieee754_sqrt+0xc2>
 800be64:	d114      	bne.n	800be90 <__ieee754_sqrt+0xe8>
 800be66:	4296      	cmp	r6, r2
 800be68:	d812      	bhi.n	800be90 <__ieee754_sqrt+0xe8>
 800be6a:	4665      	mov	r5, ip
 800be6c:	4666      	mov	r6, ip
 800be6e:	19ed      	adds	r5, r5, r7
 800be70:	9002      	str	r0, [sp, #8]
 800be72:	2e00      	cmp	r6, #0
 800be74:	da03      	bge.n	800be7e <__ieee754_sqrt+0xd6>
 800be76:	43ee      	mvns	r6, r5
 800be78:	0ff6      	lsrs	r6, r6, #31
 800be7a:	1986      	adds	r6, r0, r6
 800be7c:	9602      	str	r6, [sp, #8]
 800be7e:	1a1b      	subs	r3, r3, r0
 800be80:	4562      	cmp	r2, ip
 800be82:	4180      	sbcs	r0, r0
 800be84:	4240      	negs	r0, r0
 800be86:	1a1b      	subs	r3, r3, r0
 800be88:	4660      	mov	r0, ip
 800be8a:	1a12      	subs	r2, r2, r0
 800be8c:	9802      	ldr	r0, [sp, #8]
 800be8e:	19c9      	adds	r1, r1, r7
 800be90:	0fd6      	lsrs	r6, r2, #31
 800be92:	005b      	lsls	r3, r3, #1
 800be94:	18f3      	adds	r3, r6, r3
 800be96:	9e01      	ldr	r6, [sp, #4]
 800be98:	0052      	lsls	r2, r2, #1
 800be9a:	3e01      	subs	r6, #1
 800be9c:	087f      	lsrs	r7, r7, #1
 800be9e:	9601      	str	r6, [sp, #4]
 800bea0:	2e00      	cmp	r6, #0
 800bea2:	d1db      	bne.n	800be5c <__ieee754_sqrt+0xb4>
 800bea4:	4313      	orrs	r3, r2
 800bea6:	d003      	beq.n	800beb0 <__ieee754_sqrt+0x108>
 800bea8:	1c4b      	adds	r3, r1, #1
 800beaa:	d127      	bne.n	800befc <__ieee754_sqrt+0x154>
 800beac:	0031      	movs	r1, r6
 800beae:	3401      	adds	r4, #1
 800beb0:	4b16      	ldr	r3, [pc, #88]	; (800bf0c <__ieee754_sqrt+0x164>)
 800beb2:	1060      	asrs	r0, r4, #1
 800beb4:	18c0      	adds	r0, r0, r3
 800beb6:	0849      	lsrs	r1, r1, #1
 800beb8:	07e3      	lsls	r3, r4, #31
 800beba:	d502      	bpl.n	800bec2 <__ieee754_sqrt+0x11a>
 800bebc:	2380      	movs	r3, #128	; 0x80
 800bebe:	061b      	lsls	r3, r3, #24
 800bec0:	4319      	orrs	r1, r3
 800bec2:	9b03      	ldr	r3, [sp, #12]
 800bec4:	000d      	movs	r5, r1
 800bec6:	051c      	lsls	r4, r3, #20
 800bec8:	1823      	adds	r3, r4, r0
 800beca:	001c      	movs	r4, r3
 800becc:	e782      	b.n	800bdd4 <__ieee754_sqrt+0x2c>
 800bece:	0ad1      	lsrs	r1, r2, #11
 800bed0:	3b15      	subs	r3, #21
 800bed2:	0552      	lsls	r2, r2, #21
 800bed4:	2900      	cmp	r1, #0
 800bed6:	d0fa      	beq.n	800bece <__ieee754_sqrt+0x126>
 800bed8:	2480      	movs	r4, #128	; 0x80
 800beda:	0364      	lsls	r4, r4, #13
 800bedc:	4221      	tst	r1, r4
 800bede:	d00a      	beq.n	800bef6 <__ieee754_sqrt+0x14e>
 800bee0:	2420      	movs	r4, #32
 800bee2:	0016      	movs	r6, r2
 800bee4:	1a24      	subs	r4, r4, r0
 800bee6:	40e6      	lsrs	r6, r4
 800bee8:	1e45      	subs	r5, r0, #1
 800beea:	4082      	lsls	r2, r0
 800beec:	4331      	orrs	r1, r6
 800beee:	1b58      	subs	r0, r3, r5
 800bef0:	e789      	b.n	800be06 <__ieee754_sqrt+0x5e>
 800bef2:	2300      	movs	r3, #0
 800bef4:	e7ee      	b.n	800bed4 <__ieee754_sqrt+0x12c>
 800bef6:	0049      	lsls	r1, r1, #1
 800bef8:	3001      	adds	r0, #1
 800befa:	e7ef      	b.n	800bedc <__ieee754_sqrt+0x134>
 800befc:	2301      	movs	r3, #1
 800befe:	3101      	adds	r1, #1
 800bf00:	4399      	bics	r1, r3
 800bf02:	e7d5      	b.n	800beb0 <__ieee754_sqrt+0x108>
 800bf04:	7ff00000 	.word	0x7ff00000
 800bf08:	fffffc01 	.word	0xfffffc01
 800bf0c:	3fe00000 	.word	0x3fe00000

0800bf10 <_init>:
 800bf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf12:	46c0      	nop			; (mov r8, r8)
 800bf14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf16:	bc08      	pop	{r3}
 800bf18:	469e      	mov	lr, r3
 800bf1a:	4770      	bx	lr

0800bf1c <_fini>:
 800bf1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf1e:	46c0      	nop			; (mov r8, r8)
 800bf20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf22:	bc08      	pop	{r3}
 800bf24:	469e      	mov	lr, r3
 800bf26:	4770      	bx	lr
